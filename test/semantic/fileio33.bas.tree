(program ' \n 
  (statement 
    (open_statement open 
      (expr 
        (literal "test.dat")) for 
      (open_mode output) as # 
      (expr 
        (literal 1)))) \n 
  (statement 
    (close_statement close # 
      (expr 
        (literal 1)))) \n 
  (statement 
    (open_statement open 
      (expr 
        (literal "test.dat")) for 
      (open_mode random) as # 
      (expr 
        (literal 1)))) \n 
  (statement 
    (dim_statement dim 
      (dim_variable 
        (untyped_id s) as 
        (type_name 
          (fixed_string string * 5))))) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call s$) = 
      (expr 
        (literal "hello")))) \n 
  (statement 
    (put_io_statement put # 
      (expr 
        (literal 1)) , , 
      (variable_or_function_call s$))) \n 
  (statement 
    (put_io_statement put # 
      (expr 
        (literal 1)) , , 
      (variable_or_function_call s$))) \n 
  (statement 
    (seek_statement seek # 
      (expr 
        (literal 1)) , 
      (expr 
        (literal 1)))) \n 
  (statement 
    (dim_statement dim 
      (dim_variable 
        (untyped_id t) as 
        (type_name 
          (fixed_string string * 6))))) \n 
  (statement 
    (get_io_statement get # 
      (expr 
        (literal 1)) , , 
      (variable_or_function_call t$))) \n ' \n 
  (statement 
    (print_statement print 
      (print_argument 
        (expr 
          (variable_or_function_call eof 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )))))) \n 
  (statement 
    (get_io_statement get # 
      (expr 
        (literal 1)) , , 
      (variable_or_function_call t$))) \n ' \n 
  (statement 
    (print_statement print 
      (print_argument 
        (expr 
          (variable_or_function_call eof 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )))))) \n 
  (statement 
    (close_statement close # 
      (expr 
        (literal 1)))) \n <EOF>)
