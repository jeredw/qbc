(program ' \r\n ' \r\n ' \r\n ' \r\n 
  (statement 
    (deftype_statement DEFINT 
      (letter_range A - Z))) \r\n \r\n ' \r\n ' \r\n 
  (declare_statement DECLARE SUB 
    (untyped_id Comline) 
    ( 
      (declare_parameter_list 
        (declare_parameter N) , 
        (declare_parameter A$ 
          (array_declaration 
            ( ))) , 
        (declare_parameter Max)) )) \r\n \r\n 
  (statement 
    (dim_statement DIM 
      (dim_variable A$ 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 15))) ))))) \r\n ' \r\n 
  (statement 
    (call_statement CALL 
      (untyped_id Comline) 
      ( 
        (argument_list 
          (argument 
            (expr 
              (variable_or_function_call N))) , 
          (argument A$ 
            ( )) , 
          (argument 
            (expr 
              (literal 10)))) ))) \r\n ' \r\n 
  (statement 
    (print_statement PRINT 
      (print_argument 
        (expr 
          (literal "Number of arguments = ")) ;) 
      (print_argument 
        (expr 
          (variable_or_function_call N))))) \r\n 
  (statement 
    (print_statement PRINT 
      (print_argument 
        (expr 
          (literal "Arguments are: "))))) \r\n 
  (statement 
    (for_next_statement FOR I = 
      (expr 
        (literal 1)) TO 
      (expr 
        (variable_or_function_call N)) 
      (block : 
        (statement 
          (print_statement PRINT 
            (print_argument 
              (expr 
                (variable_or_function_call A$ 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call I)))) )))))) :) NEXT I)) \r\n \r\n ' \r\n ' \r\n ' \r\n ' \r\n ' \r\n \r\n 
  (sub_statement SUB 
    (untyped_id Comline) 
    ( 
      (parameter_list 
        (parameter NumArgs) , 
        (parameter Args$ 
          (array_declaration 
            ( 1 ))) , 
        (parameter MaxArgs)) ) STATIC 
    (block \r\n 
      (statement 
        (const_statement CONST 
          (const_assignment TRUE = 
            (const_expr 
              (expr - 
                (expr 
                  (literal 1))))) , 
          (const_assignment FALSE = 
            (const_expr 
              (expr 
                (literal 0)))))) \r\n \r\n 
      (statement 
        (assignment_statement 
          (variable_or_function_call NumArgs) = 
          (expr 
            (literal 0)))) : 
      (statement 
        (assignment_statement 
          (variable_or_function_call In) = 
          (expr 
            (variable_or_function_call FALSE)))) \r\n ' \r\n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Cl$) = 
          (expr 
            (variable_or_function_call COMMAND$)))) \r\n 
      (statement 
        (assignment_statement 
          (variable_or_function_call L) = 
          (expr 
            (builtin_function LEN 
              ( 
                (expr 
                  (variable_or_function_call Cl$)) ))))) \r\n ' \r\n 
      (statement 
        (for_next_statement FOR I = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call L)) 
          (block \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call C$) = 
                (expr 
                  (builtin_function 
                    (mid_function MID$ 
                      ( 
                        (expr 
                          (variable_or_function_call Cl$)) , 
                        (expr 
                          (variable_or_function_call I)) , 
                        (expr 
                          (literal 1)) )))))) \r\n ' \r\n 
            (if_block_statement IF 
              (expr 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call C$)) <> 
                      (expr 
                        (literal " "))) AND 
                    (expr 
                      (expr 
                        (variable_or_function_call C$)) <> 
                      (expr 
                        (variable_or_function_call CHR$ 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (literal 9)))) ))))) )) THEN \r\n 
              (then_block ' \r\n ' \r\n ' \r\n 
                (if_block_statement IF 
                  (expr NOT 
                    (expr 
                      (variable_or_function_call In))) THEN \r\n 
                  (then_block ' \r\n ' \r\n 
                    (statement 
                      (if_inline_statement IF 
                        (expr 
                          (expr 
                            (variable_or_function_call NumArgs)) = 
                          (expr 
                            (variable_or_function_call MaxArgs))) THEN 
                        (if_inline_action 
                          (statement 
                            (exit_statement EXIT FOR))))) \r\n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call NumArgs) = 
                        (expr 
                          (expr 
                            (variable_or_function_call NumArgs)) + 
                          (expr 
                            (literal 1))))) \r\n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call In) = 
                        (expr 
                          (variable_or_function_call TRUE)))) \r\n) 
                  (end_if_statement END IF)) \r\n ' \r\n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Args$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call NumArgs)))) )) = 
                    (expr 
                      (expr 
                        (variable_or_function_call Args$ 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call NumArgs)))) ))) + 
                      (expr 
                        (variable_or_function_call C$))))) \r\n) 
              (else_block_statement ELSE 
                (else_block \r\n ' \r\n ' \r\n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call In) = 
                      (expr 
                        (variable_or_function_call FALSE)))) \r\n)) 
              (end_if_statement END IF)) \r\n) NEXT I)) \r\n \r\n) 
    (end_sub_statement END SUB)) \r\n \n <EOF>)
