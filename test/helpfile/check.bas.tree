(program 
  (statement 
    (dim_statement DIM 
      (dim_variable Amount 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 100))) ))))) \r\n 
  (statement 
    (const_statement CONST 
      (const_assignment FALSE = 
        (const_expr 
          (expr 
            (literal 0)))) , 
      (const_assignment TRUE = 
        (const_expr 
          (expr NOT 
            (expr 
              (variable_or_function_call FALSE))))))) \r\n \r\n ' \r\n 
  (statement 
    (call_statement 
      (untyped_id CLS))) \r\n 
  (statement 
    (input_statement INPUT "Type starting balance, then press <ENTER>: " , 
      (variable_or_function_call Balance))) \r\n \r\n ' \r\n ' \r\n ' \r\n 
  (statement 
    (for_next_statement FOR TransacNum% = 
      (expr 
        (literal 1)) TO 
      (expr 
        (literal 100)) 
      (block \r\n 
        (statement 
          (print_statement PRINT 
            (print_argument 
              (expr 
                (variable_or_function_call TransacNum%)) ;))) \r\n 
        (statement 
          (print_statement PRINT 
            (print_argument 
              (expr 
                (literal ") Enter transaction amount 
                (0 to end): ")) ;))) \r\n 
      (statement 
        (input_statement INPUT "" , 
          (variable_or_function_call Amount 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (variable_or_function_call TransacNum%)))) )))) \r\n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Amount 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call TransacNum%)))) ))) = 
          (expr 
            (literal 0))) THEN \r\n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call TransacNum%) = 
              (expr 
                (expr 
                  (variable_or_function_call TransacNum%)) - 
                (expr 
                  (literal 1))))) \r\n 
          (statement 
            (exit_statement EXIT FOR)) \r\n) 
        (end_if_statement END IF)) \r\n) NEXT)) \r\n \r\n ' \r\n ' \r\n (statement 
  (assignment_statement 
    (variable_or_function_call Limit%) = 
    (expr 
      (variable_or_function_call TransacNum%)))) \r\n (statement 
  (do_loop_statement DO 
    (block \r\n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Swaps%) = 
          (expr 
            (variable_or_function_call FALSE)))) \r\n 
      (statement 
        (for_next_statement FOR I% = 
          (expr 
            (literal 1)) TO 
          (expr 
            ( 
              (expr 
                (expr 
                  (variable_or_function_call Limit%)) - 
                (expr 
                  (literal 1))) )) 
          (block \r\n \r\n ' \r\n ' \r\n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call Amount 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call I%)))) ))) < 
                (expr 
                  (variable_or_function_call Amount 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (expr 
                              (variable_or_function_call I%)) + 
                            (expr 
                              (literal 1))))) )))) THEN \r\n 
              (then_block 
                (statement 
                  (call_statement 
                    (untyped_id SWAP) 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Amount 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (variable_or_function_call I%)))) )))) , 
                      (argument 
                        (expr 
                          (variable_or_function_call Amount 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call I%)) + 
                                    (expr 
                                      (literal 1))))) ))))))) \r\n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Swaps%) = 
                    (expr 
                      (variable_or_function_call I%)))) \r\n) 
              (end_if_statement END IF)) \r\n) NEXT I%)) \r\n \r\n ' \r\n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (variable_or_function_call Swaps%)) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call Limit%) = 
                (expr 
                  (variable_or_function_call Swaps%))))))) \r\n \r\n ' \r\n) LOOP 
    (loop_condition WHILE 
      (expr 
        (variable_or_function_call Swaps%))))) \r\n \r\n ' \r\n ' \r\n ' \r\n (statement 
  (for_next_statement FOR I% = 
    (expr 
      (literal 1)) TO 
    (expr 
      (variable_or_function_call TransacNum%)) 
    (block \r\n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Amount 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call I%)))) ))) > 
          (expr 
            (literal 0))) THEN \r\n 
        (then_block 
          (statement 
            (print_using_statement PRINT USING 
              (expr 
                (literal "CREDIT: $$#####.##")) ; 
              (print_argument 
                (expr 
                  (variable_or_function_call Amount 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call I%)))) )))))) \r\n) 
        (elseif_block_statement ELSEIF 
          (expr 
            (expr 
              (variable_or_function_call Amount 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call I%)))) ))) < 
            (expr 
              (literal 0))) THEN 
          (else_block \r\n 
            (statement 
              (print_using_statement PRINT USING 
                (expr 
                  (literal "DEBIT:  $$#####.##")) ; 
                (print_argument 
                  (expr 
                    (variable_or_function_call Amount 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call I%)))) )))))) \r\n)) 
        (end_if_statement END IF)) \r\n \r\n ' \r\n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Balance) = 
          (expr 
            (expr 
              (variable_or_function_call Balance)) + 
            (expr 
              (variable_or_function_call Amount 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call I%)))) )))))) \r\n) NEXT I%)) \r\n \r\n ' \r\n (statement 
  (print_statement PRINT)) \r\n (statement 
  (print_statement PRINT 
    (print_argument 
      (expr 
        (literal "--------------------------"))))) \r\n (statement 
  (print_using_statement PRINT USING 
    (expr 
      (literal "Final Total: $$######.##")) ; 
    (print_argument 
      (expr 
        (variable_or_function_call Balance))))) \r\n (statement 
  (end_statement END)) \r\n <EOF>)
