(program ' \r\n ' \r\n ' \r\n ' \r\n ' \r\n ' \r\n 
  (statement 
    (deftype_statement DEFINT 
      (letter_range A - Z))) \r\n 
  (declare_statement DECLARE FUNCTION MHex$ 
    ( 
      (declare_parameter_list 
        (declare_parameter 
          (untyped_id X) AS 
          (type_name_for_declare_parameter INTEGER))) )) \r\n 
  (statement 
    (dim_statement DIM 
      (dim_variable Bytes 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 3))) ))))) \r\n \r\n 
  (statement 
    (call_statement 
      (untyped_id CLS))) \r\n 
  (statement 
    (print_statement PRINT 
      (print_argument 
        (expr 
          (literal "Internal format of IEEE number 
            (all values in hexadecimal)"))))) \r\n 
  (statement 
    (print_statement PRINT)) \r\n 
  (statement 
    (do_loop_statement DO 
      (block \r\n \r\n ' \r\n 
        (statement 
          (input_statement INPUT "Enter a real number 
            (or END to quit): " , 
            (variable_or_function_call A$))) \r\n 
        (statement 
          (if_inline_statement IF 
            (expr 
              (expr 
                (variable_or_function_call UCASE$ 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call A$)))) ))) = 
              (expr 
                (literal "END"))) THEN 
            (if_inline_action 
              (statement 
                (exit_statement EXIT DO))))) \r\n 
        (statement 
          (assignment_statement 
            (variable_or_function_call RealValue!) = 
            (expr 
              (variable_or_function_call VAL 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call A$)))) ))))) \r\n ' \r\n ' \r\n 
        (statement 
          (assignment_statement 
            (variable_or_function_call AsLong&) = 
            (expr 
              (variable_or_function_call CVL 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call MKS$ 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call RealValue!)))) ))))) ))))) \r\n ' \r\n 
        (statement 
          (assignment_statement 
            (variable_or_function_call Strout$) = 
            (expr 
              (variable_or_function_call HEX$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call AsLong&)))) ))))) \r\n 
        (statement 
          (assignment_statement 
            (variable_or_function_call Strout$) = 
            (expr 
              (expr 
                (variable_or_function_call STRING$ 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (expr 
                            (literal 8)) - 
                          (expr 
                            (builtin_function LEN 
                              ( 
                                (expr 
                                  (variable_or_function_call Strout$)) ))))) , 
                      (argument 
                        (expr 
                          (literal "0")))) ))) + 
              (expr 
                (variable_or_function_call Strout$))))) \r\n \r\n ' \r\n ' \r\n 
        (statement 
          (assignment_statement 
            (variable_or_function_call SignBit&) = 
            (expr 
              (expr 
                (variable_or_function_call AsLong&)) AND 
              (expr 
                (literal &H80000000))))) \r\n 
        (statement 
          (assignment_statement 
            (variable_or_function_call AsLong&) = 
            (expr 
              (expr 
                (variable_or_function_call AsLong&)) AND 
              (expr 
                (literal &H7FFFFFFF))))) \r\n ' \r\n ' \r\n ' \r\n 
        (statement 
          (for_next_statement FOR I = 
            (expr 
              (literal 0)) TO 
            (expr 
              (literal 3)) 
            (block \r\n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Bytes 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call I)))) )) = 
                  (expr 
                    (expr 
                      (variable_or_function_call AsLong&)) AND 
                    (expr 
                      (literal &HFF &))))) \r\n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call AsLong&) = 
                  (expr 
                    (expr 
                      (variable_or_function_call AsLong&)) \ 
                    (expr 
                      (literal 256 &))))) \r\n) NEXT I)) \r\n ' \r\n 
        (statement 
          (print_statement PRINT)) \r\n 
        (statement 
          (print_statement PRINT 
            (print_argument 
              (expr 
                (literal "Bytes in Memory"))))) \r\n 
        (statement 
          (print_statement PRINT 
            (print_argument 
              (expr 
                (literal " High    Low"))))) \r\n 
        (statement 
          (for_next_statement FOR I = 
            (expr 
              (literal 1)) TO 
            (expr 
              (literal 7)) STEP 
            (expr 
              (literal 2)) 
            (block \r\n 
              (statement 
                (print_statement PRINT 
                  (print_argument 
                    (expr 
                      (literal " ")) ;) 
                  (print_argument 
                    (expr 
                      (builtin_function 
                        (mid_function MID$ 
                          ( 
                            (expr 
                              (variable_or_function_call Strout$)) , 
                            (expr 
                              (variable_or_function_call I)) , 
                            (expr 
                              (literal 2)) )))) ;))) \r\n) NEXT I)) \r\n 
        (statement 
          (print_statement PRINT)) : 
        (statement 
          (print_statement PRINT)) \r\n \r\n ' \r\n 
        (statement 
          (assignment_statement 
            (variable_or_function_call Sign) = 
            (expr 
              (variable_or_function_call ABS 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (expr 
                          (variable_or_function_call SignBit&)) <> 
                        (expr 
                          (literal 0))))) ))))) \r\n \r\n ' \r\n ' \r\n ' \r\n 
        (statement 
          (assignment_statement 
            (variable_or_function_call Exponent) = 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call Bytes 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (literal 3)))) ))) * 
                (expr 
                  (literal 2))) + 
              (expr 
                (expr 
                  (variable_or_function_call Bytes 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (literal 2)))) ))) \ 
                (expr 
                  (literal 128)))))) \r\n \r\n ' \r\n ' \r\n ' \r\n 
        (statement 
          (assignment_statement 
            (variable_or_function_call Mant1) = 
            (expr 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call Bytes 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (literal 2)))) ))) OR 
                  (expr 
                    (literal &H80))) )))) \r\n 
        (statement 
          (print_statement PRINT 
            (print_argument 
              (expr 
                (literal " Bit 31    Bits 30-23  Implied Bit & Bits 22-0"))))) \r\n 
        (statement 
          (print_statement PRINT 
            (print_argument 
              (expr 
                (literal "Sign Bit  Exponent Bits     Mantissa Bits"))))) \r\n 
        (statement 
          (print_statement PRINT 
            (print_argument 
              (expr 
                (variable_or_function_call TAB 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (literal 4)))) ))) ;) 
            (print_argument 
              (expr 
                (variable_or_function_call Sign)) ;) 
            (print_argument 
              (expr 
                (variable_or_function_call TAB 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (literal 17)))) ))) ;) 
            (print_argument 
              (expr 
                (variable_or_function_call MHex$ 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Exponent)))) ))) ;))) \r\n 
        (statement 
          (print_statement PRINT 
            (print_argument 
              (expr 
                (variable_or_function_call TAB 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (literal 33)))) ))) ;) 
            (print_argument 
              (expr 
                (variable_or_function_call MHex$ 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Mant1)))) ))) ;) 
            (print_argument 
              (expr 
                (variable_or_function_call MHex$ 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Bytes 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 1)))) ))))) ))) ;) 
            (print_argument 
              (expr 
                (variable_or_function_call MHex$ 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Bytes 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 0)))) ))))) )))))) \r\n 
        (statement 
          (print_statement PRINT)) \r\n \r\n) LOOP)) \r\n \r\n ' \r\n 
  (function_statement FUNCTION MHex$ 
    ( 
      (parameter_list 
        (parameter 
          (untyped_id X) AS 
          (type_name_for_parameter INTEGER))) ) STATIC 
    (block \r\n 
      (statement 
        (assignment_statement 
          (variable_or_function_call D$) = 
          (expr 
            (variable_or_function_call HEX$ 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call X)))) ))))) \r\n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (builtin_function LEN 
                ( 
                  (expr 
                    (variable_or_function_call D$)) ))) < 
            (expr 
              (literal 2))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call D$) = 
                (expr 
                  (expr 
                    (literal "0")) + 
                  (expr 
                    (variable_or_function_call D$)))))))) \r\n 
      (statement 
        (assignment_statement 
          (variable_or_function_call MHex$) = 
          (expr 
            (variable_or_function_call D$)))) \r\n) 
    (end_function_statement END FUNCTION)) \r\n \r\n <EOF>)
