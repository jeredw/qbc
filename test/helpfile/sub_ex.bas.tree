(program ' \r\n ' \r\n ' \r\n 
  (statement 
    (input_statement INPUT "File to be searched" ; 
      (variable_or_function_call F$))) \r\n 
  (statement 
    (input_statement INPUT "Pattern to search for" ; 
      (variable_or_function_call P$))) \r\n 
  (statement 
    (open_statement OPEN 
      (expr 
        (variable_or_function_call F$)) FOR 
      (open_mode INPUT) AS # 
      (expr 
        (literal 1)))) \r\n 
  (statement 
    (do_loop_statement DO 
      (do_condition WHILE 
        (expr NOT 
          (expr 
            (variable_or_function_call EOF 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 1)))) ))))) 
      (block \r\n 
        (statement 
          (line_input_file_statement LINE INPUT 
            (file_number # 
              (expr 
                (literal 1))) , 
            (variable_or_function_call Test$))) \r\n 
        (statement 
          (call_statement CALL 
            (untyped_id Linesearch) 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (variable_or_function_call Test$))) , 
                (argument 
                  (expr 
                    (variable_or_function_call P$)))) ))) \r\n) LOOP)) \r\n \r\n 
  (sub_statement SUB 
    (untyped_id Linesearch) 
    ( 
      (parameter_list 
        (parameter Test$) , 
        (parameter P$)) ) STATIC 
    (block \r\n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Num) = 
          (expr 
            (expr 
              (variable_or_function_call Num)) + 
            (expr 
              (literal 1))))) \r\n 
      (statement 
        (assignment_statement 
          (variable_or_function_call X) = 
          (expr 
            (variable_or_function_call INSTR 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call Test$))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call P$)))) ))))) \r\n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call X)) > 
            (expr 
              (literal 0))) THEN 
          (if_inline_action 
            (statement 
              (print_statement PRINT 
                (print_argument 
                  (expr 
                    (literal "Line #")) ;) 
                (print_argument 
                  (expr 
                    (variable_or_function_call Num)) ;) 
                (print_argument 
                  (expr 
                    (literal ": ")) ;) 
                (print_argument 
                  (expr 
                    (variable_or_function_call Test$)))))))) \r\n) 
    (end_sub_statement END SUB)) \r\n \n <EOF>)
