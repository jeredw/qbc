(program 
  (statement 
    (deftype_statement DEFINT 
      (letter_range A - Z))) \r\n \r\n 
  (declare_statement DECLARE SUB 
    (untyped_id Filter) 
    ( 
      (declare_parameter_list 
        (declare_parameter InString$)) )) \r\n \r\n 
  (statement 
    (color_statement COLOR 
      (expr 
        (literal 7)) , 
      (expr 
        (literal 1)))) ' \r\n 
  (statement 
    (call_statement 
      (untyped_id CLS))) \r\n \r\n 
  (statement 
    (assignment_statement 
      (variable_or_function_call Quit$) = 
      (expr 
        (expr 
          (variable_or_function_call CHR$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 0)))) ))) + 
        (expr 
          (variable_or_function_call CHR$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 16)))) )))))) ' \r\n ' \r\n \r\n ' \r\n 
  (statement 
    (locate_statement LOCATE 
      (expr 
        (literal 24)) , 
      (expr 
        (literal 1)) , 
      (expr 
        (literal 1)))) \r\n 
  (statement 
    (print_statement PRINT 
      (expr 
        (variable_or_function_call STRING$ 
          ( 
            (argument_list 
              (argument 
                (expr 
                  (literal 80))) , 
              (argument 
                (expr 
                  (literal "_")))) ))) ;)) \r\n 
  (statement 
    (locate_statement LOCATE 
      (expr 
        (literal 25)) , 
      (expr 
        (literal 1)))) \r\n 
  (statement 
    (print_statement PRINT 
      (expr 
        (variable_or_function_call TAB 
          ( 
            (argument_list 
              (argument 
                (expr 
                  (literal 30)))) ))) ; 
      (expr 
        (literal "Press ALT+q to quit")) ;)) \r\n \r\n 
  (statement 
    (view_print_statement VIEW PRINT 
      (expr 
        (literal 1)) TO 
      (expr 
        (literal 23)))) ' \r\n \r\n ' \r\n ' \r\n 
  (statement 
    (open_statement OPEN 
      (expr 
        (literal "COM1:1200,N,8,1")) FOR 
      (open_mode RANDOM) AS # 
      (expr 
        (literal 1)) LEN = 
      (expr 
        (literal 256)))) \r\n \r\n 
  (statement 
    (do_loop_statement DO 
      (block ' \r\n \r\n 
        (statement 
          (assignment_statement 
            (variable_or_function_call KeyInput$) = 
            (expr 
              (variable_or_function_call INKEY$)))) ' \r\n \r\n 
        (if_block_statement IF 
          (expr 
            (expr 
              (variable_or_function_call KeyInput$)) = 
            (expr 
              (variable_or_function_call Quit$))) THEN ' 
          (then_block \r\n 
            (statement 
              (exit_statement EXIT DO)) ' \r\n \r\n) 
          (elseif_block_statement ELSEIF 
            (expr 
              (expr 
                (variable_or_function_call KeyInput$)) <> 
              (expr 
                (literal ""))) THEN 
            (else_block ' \r\n 
              (statement 
                (print_statement PRINT 
                  (file_number # 
                    (expr 
                      (literal 1))) , 
                  (expr 
                    (variable_or_function_call KeyInput$)) ;)) ' \r\n)) 
          (end_if_statement END IF)) ' \r\n \r\n ' \r\n ' \r\n 
        (if_block_statement IF 
          (expr NOT 
            (expr 
              (variable_or_function_call EOF 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (literal 1)))) )))) THEN \r\n 
          (then_block \r\n ' \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call ModemInput$) = 
                (expr 
                  (builtin_function INPUT$ 
                    ( 
                      (expr 
                        (variable_or_function_call LOC 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (literal 1)))) ))) , # 
                      (expr 
                        (literal 1)) ))))) \r\n \r\n 
            (statement 
              (call_statement 
                (untyped_id Filter) 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call ModemInput$)))))) ' \r\n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call ModemInput$)) ;)) ' \r\n) 
          (end_if_statement END IF)) \r\n) LOOP)) \r\n \r\n 
  (statement 
    (close_statement CLOSE)) ' \r\n 
  (statement 
    (call_statement 
      (untyped_id CLS))) \r\n 
  (statement 
    (end_statement END)) \r\n ' \r\n ' \r\n ' \r\n ' \r\n ' \r\n 
  (sub_statement SUB 
    (untyped_id Filter) 
    ( 
      (parameter_list 
        (parameter InString$)) ) STATIC 
    (block \r\n \r\n ' \r\n ' \r\n 
      (statement 
        (do_loop_statement DO 
          (block \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call BackSpace) = 
                (expr 
                  (variable_or_function_call INSTR 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call Instring$))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call CHR$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (literal 8)))) ))))) ))))) \r\n 
            (if_block_statement IF 
              (expr 
                (variable_or_function_call BackSpace)) THEN \r\n 
              (then_block 
                (statement 
                  (mid_statement MID$ 
                    ( 
                      (variable_or_function_call InString$) , 
                      (expr 
                        (variable_or_function_call BackSpace)) ) = 
                    (expr 
                      (variable_or_function_call CHR$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (literal 29)))) ))))) \r\n) 
              (end_if_statement END IF)) \r\n) LOOP 
          (loop_condition WHILE 
            (expr 
              (variable_or_function_call BackSpace))))) \r\n \r\n ' \r\n 
      (statement 
        (do_loop_statement DO 
          (block \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call LineFeed) = 
                (expr 
                  (variable_or_function_call INSTR 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call Instring$))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call CHR$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (literal 10)))) ))))) ))))) \r\n 
            (if_block_statement IF 
              (expr 
                (variable_or_function_call LineFeed)) THEN \r\n 
              (then_block 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call InString$) = 
                    (expr 
                      (expr 
                        (variable_or_function_call LEFT$ 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call InString$))) , 
                              (argument 
                                (expr 
                                  (expr 
                                    (variable_or_function_call LineFeed)) - 
                                  (expr 
                                    (literal 1))))) ))) + 
                      (expr 
                        (builtin_function 
                          (mid_function MID$ 
                            ( 
                              (expr 
                                (variable_or_function_call InString$)) , 
                              (expr 
                                (expr 
                                  (variable_or_function_call LineFeed)) + 
                                (expr 
                                  (literal 1))) ))))))) \r\n) 
              (end_if_statement END IF)) \r\n) LOOP 
          (loop_condition WHILE 
            (expr 
              (variable_or_function_call LineFeed))))) \r\n \r\n) 
    (end_sub_statement END SUB)) \r\n <EOF>)
