(program statement 
  (def_fn_statement def fnfoo = 
    (expr 
      (literal 1))) \n statement 
  (def_fn_statement def fn bar = 
    (expr 
      (literal 1))) \n statement 
  (def_fn_statement def fnbaz 
    (block \n 
      (statement 
        (assignment_statement fnbaz = 
          (expr 
            (literal 4)))) \n statement) end def) \n statement 
  (def_fn_statement def fna 
    (block : 
      (statement 
        (assignment_statement fna = 
          (expr 
            (literal 1)))) :) end def) : statement 
  (def_fn_statement def fnb = 
    (expr 
      (literal 2))) : statement 
  (def_fn_statement def fnc 
    (block : 
      (statement 
        (assignment_statement fnc = 
          (expr 
            (literal 5)))) :) end def) \n statement 
  (def_fn_statement def fnlet 
    (block \n 
      (statement 
        (assignment_statement let fnlet = 
          (expr 
            (literal 42)))) \n statement) end def) \n statement 
  (def_fn_statement def fnexit 
    (block \n 
      (statement 
        (exit_statement exit def)) \n statement) end def) \n statement 
  (def_fn_statement def fnq 
    ( 
      (def_fn_parameter_list 
        (def_fn_parameter 
          (typed_id a %)) , 
        (def_fn_parameter 
          (typed_id b %))) ) 
    (block \n statement) end def) \n statement 
  (def_fn_statement def fnq 
    ( 
      (def_fn_parameter_list 
        (def_fn_parameter 
          (typed_id a %)) , 
        (def_fn_parameter b as 
          (type_name_for_def_fn_parameter_list string)) , 
        (def_fn_parameter c as 
          (type_name_for_def_fn_parameter_list double))) ) 
    (block \n statement) end def) \n statement 
  (def_fn_statement def fnz 
    ( ) 
    (block :) end def) \n)
