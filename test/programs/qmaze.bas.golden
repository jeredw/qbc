(program statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (statement 
    (deftype_statement DEFINT 
      (letter_range A - Z))) \n statement \n statement \n 
  (statement 
    (const_statement CONST 
      (const_assignment BLOCKSIZE = 
        (const_expr 
          (expr 
            (literal 8)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment DEFAULTTIME = 
        (const_expr 
          (expr 
            (literal 60)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment DEFAULTMONSTERTIME = 
        (const_expr 
          (expr 
            (literal .5)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment SHOWDELAY = 
        (const_expr 
          (expr 
            (literal .2)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment DEFAULTPLAYERS = 
        (const_expr 
          (expr 
            (literal 1)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment DEFAULTLEVEL = 
        (const_expr 
          (expr 
            (literal 1)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment DEFAULTMONSTERS = 
        (const_expr 
          (expr 
            (literal 0)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment DEFAULTSHOWMAZE = 
        (const_expr 
          (expr - 
            (expr 
              (literal 1))))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment DEFAULTNUMMAZES = 
        (const_expr 
          (expr 
            (literal 1)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment MAZECOLOR7 = 
        (const_expr 
          (expr 
            (literal 7)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment PLAYER1COLOR7 = 
        (const_expr 
          (expr 
            (literal 10)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment PLAYER2COLOR7 = 
        (const_expr 
          (expr 
            (literal 13)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment MONSTERCOLOR7 = 
        (const_expr 
          (expr 
            (literal 12)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment MAZECOLOR1 = 
        (const_expr 
          (expr 
            (literal 3)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment PLAYER1COLOR1 = 
        (const_expr 
          (expr 
            (literal 1)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment PLAYER2COLOR1 = 
        (const_expr 
          (expr 
            (literal 2)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment MONSTERCOLOR1 = 
        (const_expr 
          (expr 
            (literal 3)))))) \n statement \n statement \n statement \n statement \n statement \n 
  (statement 
    (const_statement CONST 
      (const_assignment STARTOFGAMESOUND = 
        (const_expr 
          (expr 
            (literal "MBT145O1L8B-O2DL4E-L8O1A-O2CL4D-L8O2CEFE-DO1B-O2CO1B-")))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment ENDOFGAMESOUND = 
        (const_expr 
          (expr 
            (literal "MBT200O1L6EBAEL7A")))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment ENDOFMAZESOUND = 
        (const_expr 
          (expr 
            (literal "MBT190n70n60n50n40")))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment PLAYERDEATHSOUND = 
        (const_expr 
          (expr 
            (literal "MBT255o0l10n10l7n7l10n4")))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment PLAYEROUTSOUND = 
        (const_expr 
          (expr 
            (literal "MBT140L64n40n35n30")))))) \n statement \n statement \n 
  (statement 
    (const_statement CONST 
      (const_assignment FALSE = 
        (const_expr 
          (expr 
            (literal 0)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment TRUE = 
        (const_expr 
          (expr - 
            (expr 
              (literal 1))))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment UP2 = 
        (const_expr 
          (expr 
            (literal 18)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment DOWN2 = 
        (const_expr 
          (expr 
            (literal 32)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment LEFT2 = 
        (const_expr 
          (expr 
            (literal 31)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment RIGHT2 = 
        (const_expr 
          (expr 
            (literal 33)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment CTOP = 
        (const_expr 
          (expr 
            (literal 1)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment CBOTTOM = 
        (const_expr 
          (expr 
            (literal 2)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment CLEFT = 
        (const_expr 
          (expr 
            (literal 3)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment CRIGHT = 
        (const_expr 
          (expr 
            (literal 4)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment MAXMONSTERS = 
        (const_expr 
          (expr 
            (literal 10)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment MAXLEVEL = 
        (const_expr 
          (expr 
            (literal 5)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment MAXMAZES = 
        (const_expr 
          (expr 
            (literal 10)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment SCREENWIDTH = 
        (const_expr 
          (expr 
            (literal 80)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment GAMEBKGROUND7 = 
        (const_expr 
          (expr 
            (literal 1)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment GAMEBKGROUND1 = 
        (const_expr 
          (expr 
            (literal 0)))))) \n statement \n statement \n statement \n 
  (declare_statement DECLARE SUB 
    (untyped_id BustOut) 
    ( 
      (declare_parameter_list 
        (declare_parameter x%) , 
        (declare_parameter y%)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id CancelDirection) 
    ( 
      (declare_parameter_list 
        (declare_parameter 
          (untyped_id move) AS 
          (type_name_for_declare_parameter ANY)) , 
        (declare_parameter direction%)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id Center) 
    ( 
      (declare_parameter_list 
        (declare_parameter text$) , 
        (declare_parameter row%)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id ChangeWall) 
    ( 
      (declare_parameter_list 
        (declare_parameter x%) , 
        (declare_parameter y%) , 
        (declare_parameter direction%) , 
        (declare_parameter RepCh%)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id ClosePath) 
    ( 
      (declare_parameter_list 
        (declare_parameter 
          (untyped_id move) AS 
          (type_name_for_declare_parameter ANY))) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id CompleteMaze) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id ConvertDirToXY) 
    ( 
      (declare_parameter_list 
        (declare_parameter direction%) , 
        (declare_parameter xmove%) , 
        (declare_parameter ymove%)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DisplayChanges) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DisplayGameTitle) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DisplayIntro) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DisplayWinner) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DrawMonster) 
    ( 
      (declare_parameter_list 
        (declare_parameter x%) , 
        (declare_parameter y%) , 
        (declare_parameter WhatColor%)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DrawPlayer) 
    ( 
      (declare_parameter_list 
        (declare_parameter Player%) , 
        (declare_parameter WhatColor%)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id GenerateMaze) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id GenerateMove) 
    ( 
      (declare_parameter_list 
        (declare_parameter 
          (untyped_id move) AS 
          (type_name_for_declare_parameter ANY))) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id GetGameOptions) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id InitVariables) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id Keys) 
    ( 
      (declare_parameter_list 
        (declare_parameter onoff%)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id MonsterControl) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id PlayGame) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id PopMove) 
    ( 
      (declare_parameter_list 
        (declare_parameter 
          (untyped_id move) AS 
          (type_name_for_declare_parameter ANY))) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id PrintBlock) 
    ( 
      (declare_parameter_list 
        (declare_parameter 
          (untyped_id block) AS 
          (type_name_for_declare_parameter ANY)) , 
        (declare_parameter x%) , 
        (declare_parameter y%) , 
        (declare_parameter WhatColor%)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id PrintMaze) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id ProcessPlayerInput) 
    ( 
      (declare_parameter_list 
        (declare_parameter i%)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id UpdatePosition) 
    ( 
      (declare_parameter_list 
        (declare_parameter Dir%) , 
        (declare_parameter Plr%)) )) \n 
  (declare_statement DECLARE FUNCTION CheckForClosedArea% 
    ( 
      (declare_parameter_list 
        (declare_parameter 
          (untyped_id move) AS 
          (type_name_for_declare_parameter ANY))) )) \n 
  (declare_statement DECLARE FUNCTION CreatePath% 
    ( )) \n 
  (declare_statement DECLARE FUNCTION GetMonsterDirection% 
    ( 
      (declare_parameter_list 
        (declare_parameter x%) , 
        (declare_parameter y%) , 
        (declare_parameter direction%)) )) \n 
  (declare_statement DECLARE FUNCTION NumberOfWalls% 
    ( 
      (declare_parameter_list 
        (declare_parameter x%) , 
        (declare_parameter y%)) )) \n 
  (declare_statement DECLARE FUNCTION ValidBustDir% 
    ( 
      (declare_parameter_list 
        (declare_parameter x%) , 
        (declare_parameter y%)) )) \n statement \n statement \n 
  (type_statement TYPE 
    (untyped_id MazeType) \n 
    (type_element 
      (untyped_id top) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id Bottom) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id Left) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id Right) AS 
      (type_name_for_type_element INTEGER) \n) END TYPE) \n statement \n 
  (type_statement TYPE 
    (untyped_id MoveType) \n 
    (type_element 
      (untyped_id x) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id y) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id direction) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id Spaces) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id top) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id Bottom) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id Left) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id Right) AS 
      (type_name_for_type_element INTEGER) \n) END TYPE) \n statement \n 
  (type_statement TYPE 
    (untyped_id PlayerType) \n 
    (type_element 
      (untyped_id x) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id y) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id PColor) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id Dead) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id TimeLeft) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id Done) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id Score) AS 
      (type_name_for_type_element LONG) \n) END TYPE) \n statement \n 
  (type_statement TYPE 
    (untyped_id MonsterType) \n 
    (type_element 
      (untyped_id x) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id y) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id direction) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id Active) AS 
      (type_name_for_type_element INTEGER) \n) END TYPE) \n statement \n 
  (statement 
    (clear_statement CLEAR , , 
      (expr 
        (literal 5120)))) \n statement \n statement \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id MazeWidth) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id MazeHeight) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id PathLength) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id TurnRate) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id ShowMaze) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id Level) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id AvailMonsters) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id NumOfPlayers) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id NumOfMazes) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id MazeTime) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id StackPointer) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id MazeOver) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id GameOver) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id MazesFinished) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id NumMonsters) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id MazeColor) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id GameBkGround) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id MonsterColor) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id ScreenMode) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id EntryX) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id EntryY) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id ExitX) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id ExitY) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id StartX) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id StartY) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id CountDown) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id MazeError) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id MonsterUpdateTime) AS 
        (type_name SINGLE)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id ContinueDirection) AS 
        (type_name SINGLE)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id Player) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 2))) )) AS 
        (type_name 
          (untyped_id PlayerType))))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id PlayerMove) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 2))) )) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement REDIM SHARED 
      (dim_variable 
        (untyped_id stackVar) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 0))) )) AS 
        (type_name 
          (untyped_id MoveType))))) \n 
  (statement 
    (dim_statement REDIM SHARED 
      (dim_variable 
        (untyped_id MazeArray) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 0))) , 
            (dim_subscript 
              (expr 
                (literal 0))) )) AS 
        (type_name 
          (untyped_id MazeType))))) \n 
  (statement 
    (dim_statement REDIM SHARED 
      (dim_variable 
        (untyped_id Monsters) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 0))) )) AS 
        (type_name 
          (untyped_id MonsterType))))) \n 
  (statement 
    (dim_statement DIM 
      (dim_variable 
        (untyped_id KeyFlags) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM 
      (dim_variable 
        (untyped_id BadMode) AS 
        (type_name INTEGER)))) \n statement \n statement \n statement \n 
  (statement 
    (call_statement 
      (untyped_id RANDOMIZE) 
      (call_argument_list 
        (call_argument 
          (expr 
            (expr 
              (builtin_function TIMER)) MOD 
            (expr 
              (literal 32768))))))) \n statement \n statement \n 
  (statement 
    (on_error_statement ON ERROR GOTO 
      (target 
        (text_label 
          (untyped_id ScreenError))))) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call BadMode) = 
      (expr 
        (variable_or_function_call FALSE)))) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call ScreenMode) = 
      (expr 
        (literal 7)))) \n 
  (statement 
    (screen_statement SCREEN 
      (expr 
        (variable_or_function_call ScreenMode)))) \n 
  (if_block_statement IF 
    (expr 
      (expr 
        (variable_or_function_call BadMode)) = 
      (expr 
        (variable_or_function_call TRUE))) THEN \n 
    (then_block 
      (statement 
        (assignment_statement 
          (variable_or_function_call ScreenMode) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call BadMode) = 
          (expr 
            (variable_or_function_call FALSE)))) \n 
      (statement 
        (screen_statement SCREEN 
          (expr 
            (variable_or_function_call ScreenMode)))) \n) 
    (end_if_statement END IF)) \n 
  (statement 
    (on_error_statement ON ERROR GOTO 
      (target 
        (line_number 0)))) \n statement \n 
  (if_block_statement IF 
    (expr 
      (expr 
        (variable_or_function_call BadMode)) = 
      (expr 
        (variable_or_function_call TRUE))) THEN \n 
    (then_block 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 10)) , 
          (expr 
            (literal 13)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "CGA, EGA Color, or VGA graphics required to run QMAZE.BAS")))) \n) 
    (else_block_statement ELSE 
      (else_block statement \n 
        (statement 
          (def_seg_statement DEF SEG = 
            (expr 
              (literal 0)))) \n 
        (statement 
          (assignment_statement 
            (variable_or_function_call KeyFlags) = 
            (expr 
              (variable_or_function_call PEEK 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 1047)) )))))) \n 
        (statement 
          (call_statement 
            (untyped_id POKE) 
            (call_argument_list 
              (call_argument 
                (expr 
                  (literal 1047))) , 
              (call_argument 
                (expr 
                  (literal &H0)))))) \n 
        (statement 
          (def_seg_statement DEF SEG)) \n statement \n 
        (statement 
          (call_statement 
            (untyped_id DisplayIntro))) \n 
        (statement 
          (do_loop_statement DO 
            (block \n 
              (statement 
                (call_statement 
                  (untyped_id GetGameOptions))) \n 
              (statement 
                (call_statement 
                  (untyped_id InitVariables))) \n 
              (statement 
                (do_loop_statement DO 
                  (block \n 
                    (statement 
                      (screen_statement SCREEN 
                        (expr 
                          (variable_or_function_call ScreenMode)))) \n 
                    (statement 
                      (color_statement COLOR 
                        (expr 
                          (variable_or_function_call GameBkGround)) , 
                        (expr 
                          (literal 1)))) \n 
                    (statement 
                      (call_statement 
                        (untyped_id CLS))) \n 
                    (statement 
                      (call_statement 
                        (untyped_id GenerateMaze))) \n 
                    (statement 
                      (call_statement 
                        (untyped_id PlayGame))) \n 
                    (statement 
                      (call_statement 
                        (untyped_id DisplayWinner))) \n statement) LOOP 
                  (do_condition WHILE 
                    (expr NOT 
                      (expr 
                        (variable_or_function_call GameOver)))))) \n statement \n 
              (statement 
                (locate_statement LOCATE 
                  (expr 
                    (literal 22)) , 
                  (expr 
                    (literal 11)))) \n 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (literal "Play again? 
                      (Y/N)")))) \n 
              (statement 
                (do_loop_statement DO 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call k$) = 
                        (expr 
                          (variable_or_function_call UCASE$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call INKEY$)) )))))) \n statement) LOOP 
                  (do_condition WHILE 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (expr 
                              (variable_or_function_call k$)) <> 
                            (expr 
                              (literal "Y"))) AND 
                          (expr 
                            (expr 
                              (variable_or_function_call k$)) <> 
                            (expr 
                              (literal "N")))) ))))) \n 
              (statement 
                (if_inline_statement IF 
                  (expr 
                    (expr 
                      (variable_or_function_call k$)) = 
                    (expr 
                      (literal "Y"))) THEN 
                  (if_inline_action 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call GameOver) = 
                        (expr 
                          (variable_or_function_call FALSE))))))) \n statement) LOOP 
            (do_condition WHILE 
              (expr NOT 
                (expr 
                  (variable_or_function_call GameOver)))))) \n statement \n 
        (statement 
          (call_statement 
            (untyped_id DisplayChanges))) \n 
        (statement 
          (call_statement 
            (untyped_id CLS))) \n statement \n 
        (statement 
          (def_seg_statement DEF SEG = 
            (expr 
              (literal 0)))) \n 
        (statement 
          (call_statement 
            (untyped_id POKE) 
            (call_argument_list 
              (call_argument 
                (expr 
                  (literal 1047))) , 
              (call_argument KeyFlags)))) \n 
        (statement 
          (def_seg_statement DEF SEG)) \n statement \n)) 
    (end_if_statement END IF)) \n statement \n 
  (statement 
    (end_statement END)) \n statement \n statement \n statement \n 
  (label 
    (text_label 
      (untyped_id MovePlayer1Up)) :) statement \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call PlayerMove 
        (args_or_indices 
          ( 
            (expr 
              (literal 1)) ))) = 
      (expr 
        (variable_or_function_call CTOP)))) \n 
  (statement 
    (call_statement 
      (untyped_id ProcessPlayerInput) 
      (call_argument_list 
        (call_argument 
          (expr 
            (literal 1)))))) \n 
  (statement 
    (return_statement RETURN)) \n statement \n 
  (label 
    (text_label 
      (untyped_id MovePlayer1Down)) :) statement \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call PlayerMove 
        (args_or_indices 
          ( 
            (expr 
              (literal 1)) ))) = 
      (expr 
        (variable_or_function_call CBOTTOM)))) \n 
  (statement 
    (call_statement 
      (untyped_id ProcessPlayerInput) 
      (call_argument_list 
        (call_argument 
          (expr 
            (literal 1)))))) \n 
  (statement 
    (return_statement RETURN)) \n statement \n 
  (label 
    (text_label 
      (untyped_id MovePlayer1Left)) :) statement \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call PlayerMove 
        (args_or_indices 
          ( 
            (expr 
              (literal 1)) ))) = 
      (expr 
        (variable_or_function_call CLEFT)))) \n 
  (statement 
    (call_statement 
      (untyped_id ProcessPlayerInput) 
      (call_argument_list 
        (call_argument 
          (expr 
            (literal 1)))))) \n 
  (statement 
    (return_statement RETURN)) \n statement \n 
  (label 
    (text_label 
      (untyped_id MovePlayer1Right)) :) statement \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call PlayerMove 
        (args_or_indices 
          ( 
            (expr 
              (literal 1)) ))) = 
      (expr 
        (variable_or_function_call CRIGHT)))) \n 
  (statement 
    (call_statement 
      (untyped_id ProcessPlayerInput) 
      (call_argument_list 
        (call_argument 
          (expr 
            (literal 1)))))) \n 
  (statement 
    (return_statement RETURN)) \n statement \n 
  (label 
    (text_label 
      (untyped_id MovePlayer2Up)) :) statement \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call PlayerMove 
        (args_or_indices 
          ( 
            (expr 
              (literal 2)) ))) = 
      (expr 
        (variable_or_function_call CTOP)))) \n 
  (statement 
    (call_statement 
      (untyped_id ProcessPlayerInput) 
      (call_argument_list 
        (call_argument 
          (expr 
            (literal 2)))))) \n 
  (statement 
    (return_statement RETURN)) \n statement \n 
  (label 
    (text_label 
      (untyped_id MovePlayer2Down)) :) statement \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call PlayerMove 
        (args_or_indices 
          ( 
            (expr 
              (literal 2)) ))) = 
      (expr 
        (variable_or_function_call CBOTTOM)))) \n 
  (statement 
    (call_statement 
      (untyped_id ProcessPlayerInput) 
      (call_argument_list 
        (call_argument 
          (expr 
            (literal 2)))))) \n 
  (statement 
    (return_statement RETURN)) \n statement \n 
  (label 
    (text_label 
      (untyped_id MovePlayer2Left)) :) statement \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call PlayerMove 
        (args_or_indices 
          ( 
            (expr 
              (literal 2)) ))) = 
      (expr 
        (variable_or_function_call CLEFT)))) \n 
  (statement 
    (call_statement 
      (untyped_id ProcessPlayerInput) 
      (call_argument_list 
        (call_argument 
          (expr 
            (literal 2)))))) \n 
  (statement 
    (return_statement RETURN)) \n statement \n 
  (label 
    (text_label 
      (untyped_id MovePlayer2Right)) :) statement \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call PlayerMove 
        (args_or_indices 
          ( 
            (expr 
              (literal 2)) ))) = 
      (expr 
        (variable_or_function_call CRIGHT)))) \n 
  (statement 
    (call_statement 
      (untyped_id ProcessPlayerInput) 
      (call_argument_list 
        (call_argument 
          (expr 
            (literal 2)))))) \n 
  (statement 
    (return_statement RETURN)) \n statement \n 
  (label 
    (text_label 
      (untyped_id PauseGame)) :) statement \n 
  (statement 
    (call_statement 
      (untyped_id Keys) 
      (call_argument_list 
        (call_argument 
          (expr 
            ( 
              (expr 
                (literal 2)) )))))) \n 
  (statement 
    (event_control_statement TIMER OFF)) \n 
  (statement 
    (call_statement 
      (untyped_id SOUND) 
      (call_argument_list 
        (call_argument 
          (expr 
            (literal 1100))) , 
        (call_argument 
          (expr 
            (literal .75)))))) \n 
  (statement 
    (call_statement 
      (untyped_id Center) 
      (call_argument_list 
        (call_argument 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call SPACE$ 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 13)) )))) + 
              (expr 
                (literal "* PAUSED *"))) + 
            (expr 
              (variable_or_function_call SPACE$ 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 13)) )))))) , 
        (call_argument 
          (expr 
            (literal 1)))))) \n 
  (statement 
    (while_wend_statement WHILE 
      (expr 
        (expr 
          (variable_or_function_call INKEY$)) = 
        (expr 
          (literal ""))) 
      (block :) WEND)) \n 
  (statement 
    (call_statement 
      (untyped_id Center) 
      (call_argument_list 
        (call_argument SPACE$ 
          (args_or_indices 
            ( 
              (expr 
                (literal 36)) ))) , 
        (call_argument 
          (expr 
            (literal 1)))))) \n 
  (statement 
    (call_statement 
      (untyped_id Keys) 
      (call_argument_list 
        (call_argument 
          (expr 
            ( 
              (expr 
                (literal 1)) )))))) \n 
  (statement 
    (event_control_statement TIMER ON)) \n 
  (statement 
    (return_statement RETURN)) \n statement \n 
  (label 
    (text_label 
      (untyped_id QuitGame)) :) statement \n 
  (statement 
    (call_statement 
      (untyped_id Keys) 
      (call_argument_list 
        (call_argument 
          (expr 
            ( 
              (expr 
                (literal 2)) )))))) \n 
  (statement 
    (event_control_statement TIMER OFF)) \n 
  (statement 
    (call_statement 
      (untyped_id SOUND) 
      (call_argument_list 
        (call_argument 
          (expr 
            (literal 600))) , 
        (call_argument 
          (expr 
            (literal .5)))))) \n 
  (statement 
    (call_statement 
      (untyped_id SOUND) 
      (call_argument_list 
        (call_argument 
          (expr 
            (literal 800))) , 
        (call_argument 
          (expr 
            (literal .5)))))) \n 
  (statement 
    (call_statement 
      (untyped_id Center) 
      (call_argument_list 
        (call_argument 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call SPACE$ 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 10)) )))) + 
              (expr 
                (literal "Really quit? 
                  (Y/N)"))) + 
            (expr 
              (variable_or_function_call SPACE$ 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 10)) )))))) , 
        (call_argument 
          (expr 
            (literal 1)))))) \n 
  (statement 
    (do_loop_statement DO 
      (block \n 
        (statement 
          (assignment_statement 
            (variable_or_function_call k$) = 
            (expr 
              (variable_or_function_call UCASE$ 
                (args_or_indices 
                  ( 
                    (expr 
                      (variable_or_function_call INKEY$)) )))))) \n statement) LOOP 
      (do_condition WHILE 
        (expr 
          (expr 
            (variable_or_function_call k$)) = 
          (expr 
            (literal "")))))) \n 
  (statement 
    (call_statement 
      (untyped_id Center) 
      (call_argument_list 
        (call_argument SPACE$ 
          (args_or_indices 
            ( 
              (expr 
                (literal 39)) ))) , 
        (call_argument 
          (expr 
            (literal 1)))))) \n statement \n 
  (statement 
    (if_inline_statement IF 
      (expr 
        (expr 
          (variable_or_function_call k$)) = 
        (expr 
          (literal "Y"))) THEN 
      (if_inline_action 
        (statement 
          (assignment_statement 
            (variable_or_function_call GameOver) = 
            (expr 
              (variable_or_function_call TRUE))))))) \n 
  (statement 
    (call_statement 
      (untyped_id Keys) 
      (call_argument_list 
        (call_argument 
          (expr 
            ( 
              (expr 
                (literal 1)) )))))) \n 
  (statement 
    (event_control_statement TIMER ON)) \n 
  (statement 
    (return_statement RETURN)) \n statement \n 
  (label 
    (text_label 
      (untyped_id TimerUpdate)) :) statement \n 
  (statement 
    (call_statement 
      (untyped_id SOUND) 
      (call_argument_list 
        (call_argument 
          (expr 
            (literal 500))) , 
        (call_argument 
          (expr 
            (literal .1)))))) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call CountDown) = 
      (expr 
        (expr 
          (variable_or_function_call CountDown)) - 
        (expr 
          (literal 1))))) \n 
  (statement 
    (locate_statement LOCATE 
      (expr 
        (literal 1)) , 
      (expr 
        (literal 13)))) : 
  (statement 
    (print_statement PRINT 
      (expr 
        (variable_or_function_call CountDown)))) \n 
  (statement 
    (return_statement RETURN)) \n statement \n 
  (label 
    (text_label 
      (untyped_id ScreenError)) :) statement \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call BadMode) = 
      (expr 
        (variable_or_function_call TRUE)))) \n 
  (statement 
    (resume_statement RESUME NEXT)) \n statement \n 
  (label 
    (text_label 
      (untyped_id MazeErrorHandler)) :) statement \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call MazeError) = 
      (expr 
        (variable_or_function_call TRUE)))) \n 
  (statement 
    (resume_statement RESUME NEXT)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (statement 
    (data_statement DATA 
      (data_item 20) , 
      (data_item 20) , 
      (data_item 30) , 
      (data_item 3))) \n 
  (statement 
    (data_statement DATA 
      (data_item 25) , 
      (data_item 20) , 
      (data_item 40) , 
      (data_item 3))) \n 
  (statement 
    (data_statement DATA 
      (data_item 30) , 
      (data_item 20) , 
      (data_item 50) , 
      (data_item 5))) \n 
  (statement 
    (data_statement DATA 
      (data_item 35) , 
      (data_item 20) , 
      (data_item 60) , 
      (data_item 7))) \n 
  (statement 
    (data_statement DATA 
      (data_item 35) , 
      (data_item 20) , 
      (data_item 60) , 
      (data_item 5))) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id BustOut) 
    ( 
      (parameter_list 
        (parameter x) , 
        (parameter y)) ) 
    (block \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call BustedOut) = 
          (expr 
            (variable_or_function_call FALSE)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call currx) = 
          (expr 
            (variable_or_function_call x)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call curry) = 
          (expr 
            (variable_or_function_call y)))) \n 
      (statement 
        (do_loop_statement DO 
          (do_condition WHILE 
            (expr NOT 
              (expr 
                (variable_or_function_call BustedOut)))) 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call direction) = 
                (expr 
                  (variable_or_function_call ValidBustDir 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call currx)) , 
                        (expr 
                          (variable_or_function_call curry)) )))))) \n 
            (statement 
              (call_statement 
                (untyped_id ConvertDirToXY) 
                (call_argument_list 
                  (call_argument direction) , 
                  (call_argument xmove) , 
                  (call_argument ymove)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Spaces) = 
                (expr 
                  (expr 
                    (variable_or_function_call INT 
                      (args_or_indices 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call RND 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (literal 1)) )))) * 
                            (expr 
                              (variable_or_function_call TurnRate))) )))) + 
                  (expr 
                    (literal 1))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call ValidMove) = 
                (expr 
                  (variable_or_function_call TRUE)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call BlocksOpened) = 
                (expr 
                  (literal 1)))) \n 
            (statement 
              (do_loop_statement DO 
                (do_condition WHILE 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call BlocksOpened)) <= 
                      (expr 
                        (variable_or_function_call Spaces))) AND 
                    (expr 
                      (variable_or_function_call ValidMove)))) 
                (block \n 
                  (statement 
                    (call_statement 
                      (untyped_id ChangeWall) 
                      (call_argument_list 
                        (call_argument currx) , 
                        (call_argument curry) , 
                        (call_argument direction) , 
                        (call_argument 
                          (expr 
                            (literal 0)))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call currx) = 
                      (expr 
                        (expr 
                          (variable_or_function_call currx)) + 
                        (expr 
                          (variable_or_function_call xmove))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call curry) = 
                      (expr 
                        (expr 
                          (variable_or_function_call curry)) + 
                        (expr 
                          (variable_or_function_call ymove))))) \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (expr 
                          (expr 
                            (expr 
                              (expr 
                                (variable_or_function_call currx)) + 
                              (expr 
                                (variable_or_function_call xmove))) < 
                            (expr 
                              (literal 1))) OR 
                          (expr 
                            (expr 
                              (expr 
                                (variable_or_function_call currx)) + 
                              (expr 
                                (variable_or_function_call xmove))) > 
                            (expr 
                              (variable_or_function_call MazeWidth)))) OR 
                        (expr 
                          (expr 
                            (expr 
                              (variable_or_function_call curry)) + 
                            (expr 
                              (variable_or_function_call ymove))) < 
                          (expr 
                            (literal 1)))) OR 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call curry)) + 
                          (expr 
                            (variable_or_function_call ymove))) > 
                        (expr 
                          (variable_or_function_call MazeHeight)))) THEN \n 
                    (then_block 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call ValidMove) = 
                          (expr 
                            (variable_or_function_call FALSE)))) \n) 
                    (end_if_statement END IF)) \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (expr 
                          (expr 
                            (expr 
                              (variable_or_function_call MazeArray 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call currx)) , 
                                    (expr 
                                      (variable_or_function_call curry)) )) . top)) + 
                            (expr 
                              (variable_or_function_call MazeArray 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call currx)) , 
                                    (expr 
                                      (variable_or_function_call curry)) )) . Bottom))) + 
                          (expr 
                            (variable_or_function_call MazeArray 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call currx)) , 
                                  (expr 
                                    (variable_or_function_call curry)) )) . Left))) + 
                        (expr 
                          (variable_or_function_call MazeArray 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call currx)) , 
                                (expr 
                                  (variable_or_function_call curry)) )) . Right))) <> 
                      (expr 
                        (literal 3))) THEN \n 
                    (then_block 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call ValidMove) = 
                          (expr 
                            (variable_or_function_call FALSE)))) \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call BustedOut) = 
                          (expr 
                            (variable_or_function_call TRUE)))) \n) 
                    (end_if_statement END IF)) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call BlocksOpened) = 
                      (expr 
                        (expr 
                          (variable_or_function_call BlocksOpened)) + 
                        (expr 
                          (literal 1))))) \n statement) LOOP)) \n statement) LOOP)) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id CancelDirection) 
    ( 
      (parameter_list 
        (parameter 
          (untyped_id move) AS 
          (type_name_for_parameter 
            (untyped_id MoveType))) , 
        (parameter direction)) ) 
    (block \n statement \n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call direction)) 
          (before_first_case \n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call CTOP)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call move.top) = 
                  (expr 
                    (literal 1)))) \n statement)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call CBOTTOM)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call move.Bottom) = 
                  (expr 
                    (literal 1)))) \n statement)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call CLEFT)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call move.Left) = 
                  (expr 
                    (literal 1)))) \n statement)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call CRIGHT)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call move.Right) = 
                  (expr 
                    (literal 1)))) \n statement)) 
          (end_select_statement END SELECT))) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id Center) 
    ( 
      (parameter_list 
        (parameter text$) , 
        (parameter row)) ) 
    (block \n statement \n statement \n statement \n statement \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call row%)) , 
          (expr 
            (expr 
              (expr 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call SCREENWIDTH)) - 
                    (expr 
                      (builtin_function LEN 
                        ( 
                          (expr 
                            (variable_or_function_call text$)) )))) )) \ 
              (expr 
                (literal 2))) + 
            (expr 
              (literal 1))))) \n statement \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call text$)) ;)) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id ChangeWall) 
    ( 
      (parameter_list 
        (parameter x) , 
        (parameter y) , 
        (parameter direction) , 
        (parameter RepCh)) ) 
    (block \n statement \n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call direction)) 
          (before_first_case \n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call CTOP)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call MazeArray 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call x)) , 
                        (expr 
                          (variable_or_function_call y)) )) . top) = 
                  (expr 
                    (variable_or_function_call RepCh)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call MazeArray 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call x)) , 
                        (expr 
                          (expr 
                            (variable_or_function_call y)) - 
                          (expr 
                            (literal 1))) )) . Bottom) = 
                  (expr 
                    (variable_or_function_call RepCh)))) \n statement)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call CBOTTOM)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call MazeArray 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call x)) , 
                        (expr 
                          (variable_or_function_call y)) )) . Bottom) = 
                  (expr 
                    (variable_or_function_call RepCh)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call MazeArray 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call x)) , 
                        (expr 
                          (expr 
                            (variable_or_function_call y)) + 
                          (expr 
                            (literal 1))) )) . top) = 
                  (expr 
                    (variable_or_function_call RepCh)))) \n statement)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call CLEFT)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call MazeArray 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call x)) , 
                        (expr 
                          (variable_or_function_call y)) )) . Left) = 
                  (expr 
                    (variable_or_function_call RepCh)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call MazeArray 
                    (args_or_indices 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call x)) - 
                          (expr 
                            (literal 1))) , 
                        (expr 
                          (variable_or_function_call y)) )) . Right) = 
                  (expr 
                    (variable_or_function_call RepCh)))) \n statement)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call CRIGHT)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call MazeArray 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call x)) , 
                        (expr 
                          (variable_or_function_call y)) )) . Right) = 
                  (expr 
                    (variable_or_function_call RepCh)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call MazeArray 
                    (args_or_indices 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call x)) + 
                          (expr 
                            (literal 1))) , 
                        (expr 
                          (variable_or_function_call y)) )) . Left) = 
                  (expr 
                    (variable_or_function_call RepCh)))) \n statement)) 
          (end_select_statement END SELECT))) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (function_statement FUNCTION CheckForClosedArea 
    ( 
      (parameter_list 
        (parameter 
          (untyped_id move) AS 
          (type_name_for_parameter 
            (untyped_id MoveType)))) ) 
    (block \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CheckForClosedArea) = 
          (expr 
            (variable_or_function_call FALSE)))) \n statement \n 
      (statement 
        (call_statement 
          (untyped_id ConvertDirToXY) 
          (call_argument_list 
            (call_argument move.direction) , 
            (call_argument xmove) , 
            (call_argument ymove)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call currx) = 
          (expr 
            (expr 
              (variable_or_function_call move.x)) + 
            (expr 
              (expr 
                (variable_or_function_call xmove)) * 
              (expr 
                (variable_or_function_call move.Spaces)))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call curry) = 
          (expr 
            (expr 
              (variable_or_function_call move.y)) + 
            (expr 
              (expr 
                (variable_or_function_call ymove)) * 
              (expr 
                (variable_or_function_call move.Spaces)))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Touching) = 
          (expr 
            (variable_or_function_call FALSE)))) \n statement \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (expr 
              (variable_or_function_call move.direction)) = 
            (expr 
              (variable_or_function_call CTOP))) OR 
          (expr 
            (expr 
              (variable_or_function_call move.direction)) = 
            (expr 
              (variable_or_function_call CBOTTOM)))) THEN \n 
        (then_block statement \n 
          (if_block_statement IF 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call currx)) + 
                (expr 
                  (literal 1))) <= 
              (expr 
                (variable_or_function_call MazeWidth))) THEN \n 
            (then_block 
              (if_block_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call NumberOfWalls 
                      (args_or_indices 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call currx)) + 
                            (expr 
                              (literal 1))) , 
                          (expr 
                            (variable_or_function_call curry)) )))) <> 
                  (expr 
                    (literal 4))) THEN \n 
                (then_block 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call TouchedX) = 
                      (expr 
                        (expr 
                          (variable_or_function_call currx)) + 
                        (expr 
                          (literal 1))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call TouchedY) = 
                      (expr 
                        (variable_or_function_call curry)))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Touching) = 
                      (expr 
                        (variable_or_function_call TRUE)))) \n) 
                (end_if_statement END IF)) \n) 
            (end_if_statement END IF)) \n statement \n 
          (if_block_statement IF 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call currx)) - 
                (expr 
                  (literal 1))) >= 
              (expr 
                (literal 1))) THEN \n 
            (then_block 
              (if_block_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call NumberOfWalls 
                      (args_or_indices 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call currx)) - 
                            (expr 
                              (literal 1))) , 
                          (expr 
                            (variable_or_function_call curry)) )))) <> 
                  (expr 
                    (literal 4))) THEN \n 
                (then_block 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call TouchedX) = 
                      (expr 
                        (expr 
                          (variable_or_function_call currx)) - 
                        (expr 
                          (literal 1))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call TouchedY) = 
                      (expr 
                        (variable_or_function_call curry)))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Touching) = 
                      (expr 
                        (variable_or_function_call TRUE)))) \n) 
                (end_if_statement END IF)) \n) 
            (end_if_statement END IF)) \n statement \n 
          (statement 
            (for_next_statement FOR xcheck = 
              (expr - 
                (expr 
                  (literal 1))) TO 
              (expr 
                (literal 1)) 
              (block \n 
                (if_block_statement IF 
                  (expr 
                    (expr 
                      (expr 
                        (expr 
                          (expr 
                            (expr 
                              (variable_or_function_call curry)) + 
                            (expr 
                              (variable_or_function_call ymove))) >= 
                          (expr 
                            (literal 1))) AND 
                        (expr 
                          (expr 
                            (expr 
                              (variable_or_function_call curry)) + 
                            (expr 
                              (variable_or_function_call ymove))) <= 
                          (expr 
                            (variable_or_function_call MazeHeight)))) AND 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call currx)) + 
                          (expr 
                            (variable_or_function_call xcheck))) >= 
                        (expr 
                          (literal 1)))) AND 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call currx)) + 
                        (expr 
                          (variable_or_function_call xcheck))) <= 
                      (expr 
                        (variable_or_function_call MazeWidth)))) THEN \n 
                  (then_block 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call NumberOfWalls 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call currx)) + 
                                  (expr 
                                    (variable_or_function_call xcheck))) , 
                                (expr 
                                  (expr 
                                    (variable_or_function_call curry)) + 
                                  (expr 
                                    (variable_or_function_call ymove))) )))) <> 
                        (expr 
                          (literal 4))) THEN \n 
                      (then_block 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call TouchedX) = 
                            (expr 
                              (expr 
                                (variable_or_function_call currx)) + 
                              (expr 
                                (variable_or_function_call xcheck))))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call TouchedY) = 
                            (expr 
                              (expr 
                                (variable_or_function_call curry)) + 
                              (expr 
                                (variable_or_function_call ymove))))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Touching) = 
                            (expr 
                              (variable_or_function_call TRUE)))) \n) 
                      (end_if_statement END IF)) \n) 
                  (end_if_statement END IF)) \n statement) NEXT xcheck)) \n) 
        (end_if_statement END IF)) \n statement \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (expr 
              (variable_or_function_call move.direction)) = 
            (expr 
              (variable_or_function_call CLEFT))) OR 
          (expr 
            (expr 
              (variable_or_function_call move.direction)) = 
            (expr 
              (variable_or_function_call CRIGHT)))) THEN \n 
        (then_block statement \n 
          (if_block_statement IF 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call curry)) + 
                (expr 
                  (literal 1))) <= 
              (expr 
                (variable_or_function_call MazeHeight))) THEN \n 
            (then_block 
              (if_block_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call NumberOfWalls 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call currx)) , 
                          (expr 
                            (expr 
                              (variable_or_function_call curry)) + 
                            (expr 
                              (literal 1))) )))) <> 
                  (expr 
                    (literal 4))) THEN \n 
                (then_block 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call TouchedX) = 
                      (expr 
                        (variable_or_function_call currx)))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call TouchedY) = 
                      (expr 
                        (expr 
                          (variable_or_function_call curry)) + 
                        (expr 
                          (literal 1))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Touching) = 
                      (expr 
                        (variable_or_function_call TRUE)))) \n) 
                (end_if_statement END IF)) \n) 
            (end_if_statement END IF)) \n statement \n 
          (if_block_statement IF 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call curry)) - 
                (expr 
                  (literal 1))) >= 
              (expr 
                (literal 1))) THEN \n 
            (then_block 
              (if_block_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call NumberOfWalls 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call currx)) , 
                          (expr 
                            (expr 
                              (variable_or_function_call curry)) - 
                            (expr 
                              (literal 1))) )))) <> 
                  (expr 
                    (literal 4))) THEN \n 
                (then_block 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call TouchedX) = 
                      (expr 
                        (variable_or_function_call currx)))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call TouchedY) = 
                      (expr 
                        (expr 
                          (variable_or_function_call curry)) - 
                        (expr 
                          (literal 1))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Touching) = 
                      (expr 
                        (variable_or_function_call TRUE)))) \n) 
                (end_if_statement END IF)) \n) 
            (end_if_statement END IF)) \n statement \n statement \n 
          (statement 
            (for_next_statement FOR ycheck = 
              (expr - 
                (expr 
                  (literal 1))) TO 
              (expr 
                (literal 1)) 
              (block \n 
                (if_block_statement IF 
                  (expr 
                    (expr 
                      (expr 
                        (expr 
                          (expr 
                            (expr 
                              (variable_or_function_call currx)) + 
                            (expr 
                              (variable_or_function_call xmove))) >= 
                          (expr 
                            (literal 1))) AND 
                        (expr 
                          (expr 
                            (expr 
                              (variable_or_function_call currx)) + 
                            (expr 
                              (variable_or_function_call xmove))) <= 
                          (expr 
                            (variable_or_function_call MazeWidth)))) AND 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call curry)) + 
                          (expr 
                            (variable_or_function_call ycheck))) >= 
                        (expr 
                          (literal 1)))) AND 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call curry)) + 
                        (expr 
                          (variable_or_function_call ycheck))) <= 
                      (expr 
                        (variable_or_function_call MazeHeight)))) THEN \n 
                  (then_block 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call NumberOfWalls 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call currx)) + 
                                  (expr 
                                    (variable_or_function_call xmove))) , 
                                (expr 
                                  (expr 
                                    (variable_or_function_call curry)) + 
                                  (expr 
                                    (variable_or_function_call ycheck))) )))) <> 
                        (expr 
                          (literal 4))) THEN \n 
                      (then_block 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call TouchedX) = 
                            (expr 
                              (expr 
                                (variable_or_function_call currx)) + 
                              (expr 
                                (variable_or_function_call xmove))))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call TouchedY) = 
                            (expr 
                              (expr 
                                (variable_or_function_call curry)) + 
                              (expr 
                                (variable_or_function_call ycheck))))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Touching) = 
                            (expr 
                              (variable_or_function_call TRUE)))) \n) 
                      (end_if_statement END IF)) \n) 
                  (end_if_statement END IF)) \n statement) NEXT ycheck)) \n) 
        (end_if_statement END IF)) \n statement \n 
      (statement 
        (if_inline_statement IF 
          (expr NOT 
            (expr 
              (variable_or_function_call Touching))) THEN 
          (if_inline_action 
            (statement 
              (exit_statement EXIT FUNCTION))))) \n statement \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call SavePointer) = 
          (expr 
            (variable_or_function_call StackPointer)))) \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id CheckMove) AS 
            (type_name 
              (untyped_id MoveType))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CheckMove) = 
          (expr 
            (variable_or_function_call move)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call UntouchedBlocks) = 
          (expr 
            (variable_or_function_call FALSE)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call FoundTouch) = 
          (expr 
            (variable_or_function_call FALSE)))) \n statement \n statement \n 
      (statement 
        (while_wend_statement WHILE 
          (expr 
            (expr NOT 
              (expr 
                (variable_or_function_call UntouchedBlocks))) AND 
            (expr NOT 
              (expr 
                (variable_or_function_call FoundTouch)))) 
          (block \n 
            (statement 
              (call_statement 
                (untyped_id ConvertDirToXY) 
                (call_argument_list 
                  (call_argument CheckMove.direction) , 
                  (call_argument xmove) , 
                  (call_argument ymove)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call currx) = 
                (expr 
                  (variable_or_function_call CheckMove.x)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call curry) = 
                (expr 
                  (variable_or_function_call CheckMove.y)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call SpacesChecked) = 
                (expr 
                  (literal 1)))) \n statement \n statement \n 
            (statement 
              (do_loop_statement DO 
                (do_condition WHILE 
                  (expr 
                    (expr 
                      (expr NOT 
                        (expr 
                          (variable_or_function_call UntouchedBlocks))) AND 
                      (expr NOT 
                        (expr 
                          (variable_or_function_call FoundTouch)))) AND 
                    (expr 
                      (expr 
                        (variable_or_function_call SpacesChecked)) <= 
                      (expr 
                        (variable_or_function_call CheckMove.Spaces))))) 
                (block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call currx) = 
                      (expr 
                        (expr 
                          (variable_or_function_call currx)) + 
                        (expr 
                          (variable_or_function_call xmove))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call curry) = 
                      (expr 
                        (expr 
                          (variable_or_function_call curry)) + 
                        (expr 
                          (variable_or_function_call ymove))))) \n statement \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call currx)) = 
                        (expr 
                          (variable_or_function_call TouchedX))) AND 
                      (expr 
                        (expr 
                          (variable_or_function_call curry)) = 
                        (expr 
                          (variable_or_function_call TouchedY)))) THEN \n 
                    (then_block 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call FoundTouch) = 
                          (expr 
                            (variable_or_function_call TRUE)))) \n 
                      (statement 
                        (exit_statement EXIT DO)) \n) 
                    (end_if_statement END IF)) \n statement \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call currx)) + 
                        (expr 
                          (literal 1))) <= 
                      (expr 
                        (variable_or_function_call MazeWidth))) THEN \n 
                    (then_block 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call RightBox) = 
                          (expr 
                            (variable_or_function_call NumberOfWalls 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call currx)) + 
                                    (expr 
                                      (literal 1))) , 
                                  (expr 
                                    (variable_or_function_call curry)) )))))) \n) 
                    (else_block_statement ELSE 
                      (else_block statement \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call RightBox) = 
                            (expr 
                              (literal 4)))) \n)) 
                    (end_if_statement END IF)) \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call currx)) - 
                        (expr 
                          (literal 1))) >= 
                      (expr 
                        (literal 1))) THEN \n 
                    (then_block 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call LeftBox) = 
                          (expr 
                            (variable_or_function_call NumberOfWalls 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call currx)) - 
                                    (expr 
                                      (literal 1))) , 
                                  (expr 
                                    (variable_or_function_call curry)) )))))) \n) 
                    (else_block_statement ELSE 
                      (else_block statement \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call LeftBox) = 
                            (expr 
                              (literal 4)))) \n)) 
                    (end_if_statement END IF)) \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call curry)) + 
                        (expr 
                          (literal 1))) <= 
                      (expr 
                        (variable_or_function_call MazeHeight))) THEN \n 
                    (then_block 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call BottomBox) = 
                          (expr 
                            (variable_or_function_call NumberOfWalls 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call currx)) , 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call curry)) + 
                                    (expr 
                                      (literal 1))) )))))) \n) 
                    (else_block_statement ELSE 
                      (else_block statement \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call BottomBox) = 
                            (expr 
                              (literal 4)))) \n)) 
                    (end_if_statement END IF)) \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call curry)) - 
                        (expr 
                          (literal 1))) >= 
                      (expr 
                        (literal 1))) THEN \n 
                    (then_block 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call TopBox) = 
                          (expr 
                            (variable_or_function_call NumberOfWalls 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call currx)) , 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call curry)) - 
                                    (expr 
                                      (literal 1))) )))))) \n) 
                    (else_block_statement ELSE 
                      (else_block statement \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call TopBox) = 
                            (expr 
                              (literal 4)))) \n)) 
                    (end_if_statement END IF)) \n statement \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call RightBox)) = 
                        (expr 
                          (literal 4))) AND 
                      (expr 
                        (expr 
                          (variable_or_function_call LeftBox)) = 
                        (expr 
                          (literal 4)))) THEN \n 
                    (then_block 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call UntouchedBlocks) = 
                          (expr 
                            (variable_or_function_call TRUE)))) \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call CheckForClosedArea) = 
                          (expr 
                            (variable_or_function_call TRUE)))) \n) 
                    (end_if_statement END IF)) \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call TopBox)) = 
                        (expr 
                          (literal 4))) AND 
                      (expr 
                        (expr 
                          (variable_or_function_call BottomBox)) = 
                        (expr 
                          (literal 4)))) THEN \n 
                    (then_block 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call UntouchedBlocks) = 
                          (expr 
                            (variable_or_function_call TRUE)))) \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call CheckForClosedArea) = 
                          (expr 
                            (variable_or_function_call TRUE)))) \n) 
                    (end_if_statement END IF)) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call SpacesChecked) = 
                      (expr 
                        (expr 
                          (variable_or_function_call SpacesChecked)) + 
                        (expr 
                          (literal 1))))) \n statement) LOOP)) \n 
            (statement 
              (call_statement 
                (untyped_id PopMove) 
                (call_argument_list 
                  (call_argument CheckMove)))) \n statement) WEND)) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call StackPointer) = 
          (expr 
            (variable_or_function_call SavePointer)))) \n statement \n statement) 
    (end_function_statement END FUNCTION)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id ClosePath) 
    ( 
      (parameter_list 
        (parameter 
          (untyped_id move) AS 
          (type_name_for_parameter 
            (untyped_id MoveType)))) ) 
    (block \n statement \n 
      (statement 
        (call_statement 
          (untyped_id ConvertDirToXY) 
          (call_argument_list 
            (call_argument move.direction) , 
            (call_argument xmove) , 
            (call_argument ymove)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call x) = 
          (expr 
            (variable_or_function_call move.x)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call y) = 
          (expr 
            (variable_or_function_call move.y)))) \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call move.Spaces)) 
          (block \n 
            (statement 
              (call_statement 
                (untyped_id ChangeWall) 
                (call_argument_list 
                  (call_argument x) , 
                  (call_argument y) , 
                  (call_argument move.direction) , 
                  (call_argument 
                    (expr 
                      (literal 1)))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call x) = 
                (expr 
                  (expr 
                    (variable_or_function_call x)) + 
                  (expr 
                    (variable_or_function_call xmove))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call y) = 
                (expr 
                  (expr 
                    (variable_or_function_call y)) + 
                  (expr 
                    (variable_or_function_call ymove))))) \n 
            (statement 
              (call_statement 
                (untyped_id PrintBlock) 
                (call_argument_list 
                  (call_argument MazeArray 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call x)) , 
                        (expr 
                          (variable_or_function_call y)) ))) , 
                  (call_argument x) , 
                  (call_argument y) , 
                  (call_argument MazeColor)))) \n statement) NEXT i)) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id CompleteMaze) 
    (block \n statement \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id TempMove) AS 
            (type_name 
              (untyped_id MoveType))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call SavePointer) = 
          (expr 
            (variable_or_function_call StackPointer)))) \n statement \n 
      (statement 
        (do_loop_statement DO 
          (do_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call SavePointer)) > 
              (expr 
                (literal 1)))) 
          (block \n statement \n statement \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Interval) = 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call TurnRate)) + 
                    (expr 
                      (variable_or_function_call INT 
                        (args_or_indices 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call RND 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (literal 1)) )))) * 
                              (expr 
                                (variable_or_function_call TurnRate))) ))))) + 
                  (expr 
                    (literal 1))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call SpacesPassed) = 
                (expr 
                  (literal 0)))) \n 
            (statement 
              (while_wend_statement WHILE 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call SpacesPassed)) < 
                    (expr 
                      (variable_or_function_call Interval))) AND 
                  (expr 
                    (expr 
                      (variable_or_function_call StackPointer)) > 
                    (expr 
                      (literal 1)))) 
                (block \n 
                  (statement 
                    (call_statement 
                      (untyped_id PopMove) 
                      (call_argument_list 
                        (call_argument TempMove)))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call SpacesPassed) = 
                      (expr 
                        (expr 
                          (variable_or_function_call SpacesPassed)) + 
                        (expr 
                          (variable_or_function_call TempMove.Spaces))))) \n statement) WEND)) \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call StackPointer)) <= 
                  (expr 
                    (literal 1))) THEN 
                (if_inline_action 
                  (statement 
                    (exit_statement EXIT DO))))) \n 
            (statement 
              (call_statement 
                (untyped_id BustOut) 
                (call_argument_list 
                  (call_argument TempMove.x) , 
                  (call_argument TempMove.y)))) \n statement) LOOP)) \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call StackPointer) = 
          (expr 
            (variable_or_function_call SavePointer)))) \n 
      (statement 
        (for_next_statement FOR ycheck = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call MazeHeight)) 
          (block \n 
            (statement 
              (for_next_statement FOR xcheck = 
                (expr 
                  (literal 1)) TO 
                (expr 
                  (variable_or_function_call MazeWidth)) 
                (block \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (expr 
                          (expr 
                            (expr 
                              (variable_or_function_call MazeArray 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call xcheck)) , 
                                    (expr 
                                      (variable_or_function_call ycheck)) )) . top)) + 
                            (expr 
                              (variable_or_function_call MazeArray 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call xcheck)) , 
                                    (expr 
                                      (variable_or_function_call ycheck)) )) . Bottom))) + 
                          (expr 
                            (variable_or_function_call MazeArray 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call xcheck)) , 
                                  (expr 
                                    (variable_or_function_call ycheck)) )) . Left))) + 
                        (expr 
                          (variable_or_function_call MazeArray 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call xcheck)) , 
                                (expr 
                                  (variable_or_function_call ycheck)) )) . Right))) = 
                      (expr 
                        (literal 4))) THEN \n 
                    (then_block 
                      (statement 
                        (call_statement 
                          (untyped_id BustOut) 
                          (call_argument_list 
                            (call_argument xcheck) , 
                            (call_argument ycheck)))) \n) 
                    (end_if_statement END IF)) \n statement) NEXT xcheck)) \n statement) NEXT ycheck)) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id ConvertDirToXY) 
    ( 
      (parameter_list 
        (parameter direction) , 
        (parameter xmove) , 
        (parameter ymove)) ) 
    (block \n statement \n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call direction)) 
          (before_first_case \n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call CTOP)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call ymove) = 
                  (expr - 
                    (expr 
                      (literal 1))))) : 
              (statement 
                (assignment_statement 
                  (variable_or_function_call xmove) = 
                  (expr 
                    (literal 0)))) \n statement)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call CBOTTOM)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call ymove) = 
                  (expr 
                    (literal 1)))) : 
              (statement 
                (assignment_statement 
                  (variable_or_function_call xmove) = 
                  (expr 
                    (literal 0)))) \n statement)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call CLEFT)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call ymove) = 
                  (expr 
                    (literal 0)))) : 
              (statement 
                (assignment_statement 
                  (variable_or_function_call xmove) = 
                  (expr - 
                    (expr 
                      (literal 1))))) \n statement)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call CRIGHT)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call ymove) = 
                  (expr 
                    (literal 0)))) : 
              (statement 
                (assignment_statement 
                  (variable_or_function_call xmove) = 
                  (expr 
                    (literal 1)))) \n statement)) 
          (case_block 
            (case_statement CASE ELSE) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call ymove) = 
                  (expr 
                    (literal 0)))) : 
              (statement 
                (assignment_statement 
                  (variable_or_function_call xmove) = 
                  (expr 
                    (literal 0)))) \n statement)) 
          (end_select_statement END SELECT))) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (function_statement FUNCTION CreatePath 
    (block \n statement \n 
      (statement 
        (on_error_statement ON ERROR GOTO 
          (target 
            (text_label 
              (untyped_id MazeErrorHandler))))) \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call touched) = 
          (expr 
            (variable_or_function_call FALSE)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call currx) = 
          (expr 
            (variable_or_function_call EntryX)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call curry) = 
          (expr 
            (variable_or_function_call EntryY)))) \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id CurrMove) AS 
            (type_name 
              (untyped_id MoveType))))) \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id newmove) AS 
            (type_name 
              (untyped_id MoveType))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurrMove.x) = 
          (expr 
            (variable_or_function_call EntryX)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurrMove.y) = 
          (expr 
            (variable_or_function_call EntryY)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call finished) = 
          (expr 
            (variable_or_function_call FALSE)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call TimeOfMaze!) = 
          (expr 
            (builtin_function TIMER)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call MazeError) = 
          (expr 
            (variable_or_function_call FALSE)))) \n statement \n statement \n 
      (statement 
        (while_wend_statement WHILE 
          (expr NOT 
            (expr 
              (variable_or_function_call finished))) 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call ValidMove) = 
                (expr 
                  (variable_or_function_call FALSE)))) \n 
            (statement 
              (call_statement 
                (untyped_id GenerateMove) 
                (call_argument_list 
                  (call_argument CurrMove)))) \n statement \n 
            (statement 
              (while_wend_statement WHILE 
                (expr 
                  (expr 
                    (variable_or_function_call ValidMove)) = 
                  (expr 
                    (variable_or_function_call FALSE))) 
                (block \n statement \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        ( 
                          (expr 
                            (expr 
                              (expr 
                                (builtin_function TIMER)) - 
                              (expr 
                                (variable_or_function_call TimeOfMaze!))) > 
                            (expr 
                              (literal 8))) )) OR 
                      (expr 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call MazeError)) = 
                            (expr 
                              (variable_or_function_call TRUE))) ))) THEN \n 
                    (then_block 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call CreatePath) = 
                          (expr 
                            (variable_or_function_call FALSE)))) \n 
                      (statement 
                        (exit_statement EXIT FUNCTION)) \n) 
                    (end_if_statement END IF)) \n statement \n 
                  (statement 
                    (call_statement 
                      (untyped_id ConvertDirToXY) 
                      (call_argument_list 
                        (call_argument CurrMove.direction) , 
                        (call_argument xmove) , 
                        (call_argument ymove)))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call ValidMove) = 
                      (expr 
                        (variable_or_function_call TRUE)))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call SpacesChecked) = 
                      (expr 
                        (literal 1)))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call currx) = 
                      (expr 
                        (variable_or_function_call CurrMove.x)))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call curry) = 
                      (expr 
                        (variable_or_function_call CurrMove.y)))) \n statement \n statement \n 
                  (statement 
                    (do_loop_statement DO 
                      (do_condition WHILE 
                        (expr 
                          (expr 
                            (expr 
                              (variable_or_function_call SpacesChecked)) <= 
                            (expr 
                              (variable_or_function_call CurrMove.Spaces))) AND 
                          (expr 
                            (variable_or_function_call ValidMove)))) 
                      (block \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call currx) = 
                            (expr 
                              (expr 
                                (variable_or_function_call currx)) + 
                              (expr 
                                (variable_or_function_call xmove))))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call curry) = 
                            (expr 
                              (expr 
                                (variable_or_function_call curry)) + 
                              (expr 
                                (variable_or_function_call ymove))))) \n statement \n statement \n 
                        (if_block_statement IF 
                          (expr 
                            (expr 
                              (expr 
                                (expr 
                                  (expr 
                                    (variable_or_function_call currx)) < 
                                  (expr 
                                    (literal 1))) OR 
                                (expr 
                                  (expr 
                                    (variable_or_function_call currx)) > 
                                  (expr 
                                    (variable_or_function_call MazeWidth)))) OR 
                              (expr 
                                (expr 
                                  (variable_or_function_call curry)) < 
                                (expr 
                                  (literal 1)))) OR 
                            (expr 
                              (expr 
                                (variable_or_function_call curry)) > 
                              (expr 
                                (variable_or_function_call MazeHeight)))) THEN \n 
                          (then_block 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call CurrMove.Spaces) = 
                                (expr 
                                  (expr 
                                    (variable_or_function_call SpacesChecked)) - 
                                  (expr 
                                    (literal 1))))) \n 
                            (statement 
                              (exit_statement EXIT DO)) \n) 
                          (end_if_statement END IF)) \n statement \n statement \n 
                        (if_block_statement IF 
                          (expr 
                            (expr 
                              (variable_or_function_call NumberOfWalls 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call currx)) , 
                                    (expr 
                                      (variable_or_function_call curry)) )))) <> 
                            (expr 
                              (literal 4))) THEN \n 
                          (then_block statement \n statement \n 
                            (if_block_statement IF 
                              (expr 
                                (expr 
                                  (variable_or_function_call SpacesChecked)) = 
                                (expr 
                                  (literal 1))) THEN \n 
                              (then_block 
                                (statement 
                                  (assignment_statement 
                                    (variable_or_function_call ValidMove) = 
                                    (expr 
                                      (variable_or_function_call FALSE)))) \n 
                                (statement 
                                  (call_statement 
                                    (untyped_id CancelDirection) 
                                    (call_argument_list 
                                      (call_argument CurrMove) , 
                                      (call_argument CurrMove.direction)))) \n statement \n statement \n 
                                (if_block_statement IF 
                                  (expr 
                                    (expr 
                                      (expr 
                                        (expr 
                                          (expr 
                                            (variable_or_function_call CurrMove.top)) + 
                                          (expr 
                                            (variable_or_function_call CurrMove.Bottom))) + 
                                        (expr 
                                          (variable_or_function_call CurrMove.Left))) + 
                                      (expr 
                                        (variable_or_function_call CurrMove.Right))) = 
                                    (expr 
                                      (literal 4))) THEN \n 
                                  (then_block 
                                    (statement 
                                      (call_statement 
                                        (untyped_id PopMove) 
                                        (call_argument_list 
                                          (call_argument CurrMove)))) \n 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call totalpathlen) = 
                                        (expr 
                                          (expr 
                                            (variable_or_function_call totalpathlen)) - 
                                          (expr 
                                            (variable_or_function_call CurrMove.Spaces))))) \n 
                                    (statement 
                                      (call_statement 
                                        (untyped_id CancelDirection) 
                                        (call_argument_list 
                                          (call_argument CurrMove) , 
                                          (call_argument CurrMove.direction)))) \n 
                                    (statement 
                                      (call_statement 
                                        (untyped_id ClosePath) 
                                        (call_argument_list 
                                          (call_argument CurrMove)))) \n) 
                                  (end_if_statement END IF)) \n 
                                (statement 
                                  (call_statement 
                                    (untyped_id GenerateMove) 
                                    (call_argument_list 
                                      (call_argument CurrMove)))) \n) 
                              (else_block_statement ELSE 
                                (else_block statement \n statement \n 
                                  (statement 
                                    (assignment_statement 
                                      (variable_or_function_call CurrMove.Spaces) = 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call SpacesChecked)) - 
                                        (expr 
                                          (literal 1))))) \n 
                                  (statement 
                                    (exit_statement EXIT DO)) \n)) 
                              (end_if_statement END IF)) \n) 
                          (else_block_statement ELSE 
                            (else_block statement \n 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call SpacesChecked) = 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call SpacesChecked)) + 
                                    (expr 
                                      (literal 1))))) \n)) 
                          (end_if_statement END IF)) \n statement) LOOP)) \n statement \n statement \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (variable_or_function_call ValidMove)) AND 
                      (expr 
                        (variable_or_function_call CheckForClosedArea 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call CurrMove)) ))))) THEN \n 
                    (then_block 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call ValidMove) = 
                          (expr 
                            (variable_or_function_call FALSE)))) \n 
                      (statement 
                        (call_statement 
                          (untyped_id CancelDirection) 
                          (call_argument_list 
                            (call_argument CurrMove) , 
                            (call_argument CurrMove.direction)))) \n 
                      (statement 
                        (call_statement 
                          (untyped_id GenerateMove) 
                          (call_argument_list 
                            (call_argument CurrMove)))) \n) 
                    (end_if_statement END IF)) \n statement) WEND)) \n statement \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call StackPointer)) < 
                (expr 
                  (expr 
                    (variable_or_function_call PathLength)) * 
                  (expr 
                    (literal 10)))) THEN \n 
              (then_block 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call StackPointer) = 
                    (expr 
                      (expr 
                        (variable_or_function_call StackPointer)) + 
                      (expr 
                        (literal 1))))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call stackVar 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call StackPointer)) ))) = 
                    (expr 
                      (variable_or_function_call CurrMove)))) \n) 
              (else_block_statement ELSE 
                (else_block statement \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call MazeError) = 
                      (expr 
                        (variable_or_function_call TRUE)))) \n)) 
              (end_if_statement END IF)) \n statement \n statement \n 
            (statement 
              (call_statement 
                (untyped_id ConvertDirToXY) 
                (call_argument_list 
                  (call_argument CurrMove.direction) , 
                  (call_argument xmove) , 
                  (call_argument ymove)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call x) = 
                (expr 
                  (variable_or_function_call CurrMove.x)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call y) = 
                (expr 
                  (variable_or_function_call CurrMove.y)))) \n 
            (statement 
              (for_next_statement FOR i = 
                (expr 
                  (literal 1)) TO 
                (expr 
                  (variable_or_function_call CurrMove.Spaces)) 
                (block \n 
                  (statement 
                    (call_statement 
                      (untyped_id ChangeWall) 
                      (call_argument_list 
                        (call_argument x) , 
                        (call_argument y) , 
                        (call_argument CurrMove.direction) , 
                        (call_argument 
                          (expr 
                            (literal 0)))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call x) = 
                      (expr 
                        (expr 
                          (variable_or_function_call x)) + 
                        (expr 
                          (variable_or_function_call xmove))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call y) = 
                      (expr 
                        (expr 
                          (variable_or_function_call y)) + 
                        (expr 
                          (variable_or_function_call ymove))))) \n 
                  (statement 
                    (call_statement 
                      (untyped_id PrintBlock) 
                      (call_argument_list 
                        (call_argument MazeArray 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call x)) , 
                              (expr 
                                (variable_or_function_call y)) ))) , 
                        (call_argument x) , 
                        (call_argument y) , 
                        (call_argument MazeColor)))) \n statement) NEXT i)) \n statement \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call currx) = 
                (expr 
                  (expr 
                    (variable_or_function_call CurrMove.x)) + 
                  (expr 
                    (expr 
                      (variable_or_function_call CurrMove.Spaces)) * 
                    (expr 
                      (variable_or_function_call xmove)))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call curry) = 
                (expr 
                  (expr 
                    (variable_or_function_call CurrMove.y)) + 
                  (expr 
                    (expr 
                      (variable_or_function_call CurrMove.Spaces)) * 
                    (expr 
                      (variable_or_function_call ymove)))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call newmove.x) = 
                (expr 
                  (variable_or_function_call currx)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call newmove.y) = 
                (expr 
                  (variable_or_function_call curry)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call totalpathlen) = 
                (expr 
                  (expr 
                    (variable_or_function_call totalpathlen)) + 
                  (expr 
                    (variable_or_function_call CurrMove.Spaces))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call CurrMove) = 
                (expr 
                  (variable_or_function_call newmove)))) \n statement \n statement \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call currx)) = 
                      (expr 
                        (variable_or_function_call MazeWidth))) OR 
                    (expr 
                      (expr 
                        (variable_or_function_call curry)) = 
                      (expr 
                        (variable_or_function_call MazeHeight)))) OR 
                  (expr 
                    (expr 
                      (variable_or_function_call currx)) = 
                    (expr 
                      (literal 1)))) OR 
                (expr 
                  (expr 
                    (variable_or_function_call curry)) = 
                  (expr 
                    (literal 1)))) THEN \n 
              (then_block statement \n statement \n 
                (if_block_statement IF 
                  (expr 
                    (expr 
                      (variable_or_function_call totalpathlen)) >= 
                    (expr 
                      (variable_or_function_call PathLength))) THEN \n 
                  (then_block 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call ExitX) = 
                        (expr 
                          (variable_or_function_call currx)))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call ExitY) = 
                        (expr 
                          (variable_or_function_call curry)))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call finished) = 
                        (expr 
                          (variable_or_function_call TRUE)))) \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call ExitY)) = 
                        (expr 
                          (variable_or_function_call MazeHeight))) THEN \n 
                      (then_block 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call MazeArray 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call ExitX)) , 
                                  (expr 
                                    (variable_or_function_call ExitY)) )) . Bottom) = 
                            (expr 
                              (literal 0)))) \n) 
                      (elseif_block_statement ELSEIF 
                        (expr 
                          (expr 
                            (variable_or_function_call ExitY)) = 
                          (expr 
                            (literal 1))) THEN 
                        (else_block statement \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call MazeArray 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call ExitX)) , 
                                    (expr 
                                      (variable_or_function_call ExitY)) )) . top) = 
                              (expr 
                                (literal 0)))) \n)) 
                      (elseif_block_statement ELSEIF 
                        (expr 
                          (expr 
                            (variable_or_function_call ExitX)) = 
                          (expr 
                            (variable_or_function_call MazeWidth))) THEN 
                        (else_block statement \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call MazeArray 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call ExitX)) , 
                                    (expr 
                                      (variable_or_function_call ExitY)) )) . Right) = 
                              (expr 
                                (literal 0)))) \n)) 
                      (elseif_block_statement ELSEIF 
                        (expr 
                          (expr 
                            (variable_or_function_call ExitX)) = 
                          (expr 
                            (literal 1))) THEN 
                        (else_block statement \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call MazeArray 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call ExitX)) , 
                                    (expr 
                                      (variable_or_function_call ExitY)) )) . Left) = 
                              (expr 
                                (literal 0)))) \n)) 
                      (end_if_statement END IF)) \n) 
                  (else_block_statement ELSE 
                    (else_block statement \n statement \n statement \n statement \n 
                      (if_block_statement IF 
                        (expr 
                          (expr 
                            (expr 
                              (variable_or_function_call currx)) = 
                            (expr 
                              (literal 1))) OR 
                          (expr 
                            (expr 
                              (variable_or_function_call currx)) = 
                            (expr 
                              (variable_or_function_call MazeWidth)))) THEN \n 
                        (then_block 
                          (statement 
                            (if_inline_statement IF 
                              (expr 
                                (expr 
                                  (expr 
                                    (variable_or_function_call EntryY)) = 
                                  (expr 
                                    (literal 1))) AND 
                                (expr NOT 
                                  (expr 
                                    (variable_or_function_call touched)))) THEN 
                              (if_inline_action 
                                (statement 
                                  (call_statement 
                                    (untyped_id CancelDirection) 
                                    (call_argument_list 
                                      (call_argument CurrMove) , 
                                      (call_argument CTOP))))))) \n 
                          (statement 
                            (if_inline_statement IF 
                              (expr 
                                (expr 
                                  (expr 
                                    (variable_or_function_call EntryY)) = 
                                  (expr 
                                    (variable_or_function_call MazeHeight))) AND 
                                (expr NOT 
                                  (expr 
                                    (variable_or_function_call touched)))) THEN 
                              (if_inline_action 
                                (statement 
                                  (call_statement 
                                    (untyped_id CancelDirection) 
                                    (call_argument_list 
                                      (call_argument CurrMove) , 
                                      (call_argument CBOTTOM))))))) \n 
                          (if_block_statement IF 
                            (expr 
                              (expr 
                                (variable_or_function_call EntryX)) = 
                              (expr 
                                (variable_or_function_call currx))) THEN \n 
                            (then_block 
                              (if_block_statement IF 
                                (expr 
                                  (expr 
                                    (variable_or_function_call curry)) > 
                                  (expr 
                                    (variable_or_function_call EntryY))) THEN \n 
                                (then_block 
                                  (statement 
                                    (call_statement 
                                      (untyped_id CancelDirection) 
                                      (call_argument_list 
                                        (call_argument CurrMove) , 
                                        (call_argument CTOP)))) \n) 
                                (else_block_statement ELSE 
                                  (else_block statement \n 
                                    (statement 
                                      (call_statement 
                                        (untyped_id CancelDirection) 
                                        (call_argument_list 
                                          (call_argument CurrMove) , 
                                          (call_argument CBOTTOM)))) \n)) 
                                (end_if_statement END IF)) \n) 
                            (end_if_statement END IF)) \n 
                          (statement 
                            (if_inline_statement IF 
                              (expr 
                                (expr 
                                  (expr 
                                    (variable_or_function_call currx)) = 
                                  (expr 
                                    (literal 1))) AND 
                                (expr 
                                  (expr 
                                    (variable_or_function_call EntryX)) = 
                                  (expr 
                                    (variable_or_function_call MazeWidth)))) THEN 
                              (if_inline_action 
                                (statement 
                                  (assignment_statement 
                                    (variable_or_function_call touched) = 
                                    (expr 
                                      (literal 1))))))) \n 
                          (statement 
                            (if_inline_statement IF 
                              (expr 
                                (expr 
                                  (expr 
                                    (variable_or_function_call currx)) = 
                                  (expr 
                                    (variable_or_function_call MazeWidth))) AND 
                                (expr 
                                  (expr 
                                    (variable_or_function_call EntryX)) = 
                                  (expr 
                                    (literal 1)))) THEN 
                              (if_inline_action 
                                (statement 
                                  (assignment_statement 
                                    (variable_or_function_call touched) = 
                                    (expr 
                                      (literal 1))))))) \n) 
                        (end_if_statement END IF)) \n 
                      (if_block_statement IF 
                        (expr 
                          (expr 
                            (expr 
                              (variable_or_function_call curry)) = 
                            (expr 
                              (literal 1))) OR 
                          (expr 
                            (expr 
                              (variable_or_function_call curry)) = 
                            (expr 
                              (variable_or_function_call MazeHeight)))) THEN \n 
                        (then_block 
                          (statement 
                            (if_inline_statement IF 
                              (expr 
                                (expr 
                                  (expr 
                                    (variable_or_function_call EntryX)) = 
                                  (expr 
                                    (literal 1))) AND 
                                (expr NOT 
                                  (expr 
                                    (variable_or_function_call touched)))) THEN 
                              (if_inline_action 
                                (statement 
                                  (call_statement 
                                    (untyped_id CancelDirection) 
                                    (call_argument_list 
                                      (call_argument CurrMove) , 
                                      (call_argument CLEFT))))))) \n 
                          (statement 
                            (if_inline_statement IF 
                              (expr 
                                (expr 
                                  (expr 
                                    (variable_or_function_call EntryX)) = 
                                  (expr 
                                    (variable_or_function_call MazeWidth))) AND 
                                (expr NOT 
                                  (expr 
                                    (variable_or_function_call touched)))) THEN 
                              (if_inline_action 
                                (statement 
                                  (call_statement 
                                    (untyped_id CancelDirection) 
                                    (call_argument_list 
                                      (call_argument CurrMove) , 
                                      (call_argument CRIGHT))))))) \n 
                          (if_block_statement IF 
                            (expr 
                              (expr 
                                (variable_or_function_call EntryY)) = 
                              (expr 
                                (variable_or_function_call curry))) THEN \n 
                            (then_block 
                              (if_block_statement IF 
                                (expr 
                                  (expr 
                                    (variable_or_function_call currx)) > 
                                  (expr 
                                    (variable_or_function_call EntryX))) THEN \n 
                                (then_block 
                                  (statement 
                                    (call_statement 
                                      (untyped_id CancelDirection) 
                                      (call_argument_list 
                                        (call_argument CurrMove) , 
                                        (call_argument CLEFT)))) \n) 
                                (else_block_statement ELSE 
                                  (else_block statement \n 
                                    (statement 
                                      (call_statement 
                                        (untyped_id CancelDirection) 
                                        (call_argument_list 
                                          (call_argument CurrMove) , 
                                          (call_argument CRIGHT)))) \n)) 
                                (end_if_statement END IF)) \n) 
                            (end_if_statement END IF)) \n 
                          (statement 
                            (if_inline_statement IF 
                              (expr 
                                (expr 
                                  (expr 
                                    (variable_or_function_call curry)) = 
                                  (expr 
                                    (literal 1))) AND 
                                (expr 
                                  (expr 
                                    (variable_or_function_call EntryY)) = 
                                  (expr 
                                    (variable_or_function_call MazeHeight)))) THEN 
                              (if_inline_action 
                                (statement 
                                  (assignment_statement 
                                    (variable_or_function_call touched) = 
                                    (expr 
                                      (variable_or_function_call TRUE))))))) \n 
                          (statement 
                            (if_inline_statement IF 
                              (expr 
                                (expr 
                                  (expr 
                                    (variable_or_function_call curry)) = 
                                  (expr 
                                    (variable_or_function_call MazeHeight))) AND 
                                (expr 
                                  (expr 
                                    (variable_or_function_call EntryY)) = 
                                  (expr 
                                    (literal 1)))) THEN 
                              (if_inline_action 
                                (statement 
                                  (assignment_statement 
                                    (variable_or_function_call touched) = 
                                    (expr 
                                      (variable_or_function_call TRUE))))))) \n) 
                        (end_if_statement END IF)) \n)) 
                  (end_if_statement END IF)) \n) 
              (end_if_statement END IF)) \n statement) WEND)) \n statement \n 
      (statement 
        (if_inline_statement IF 
          (expr NOT 
            (expr 
              (variable_or_function_call MazeError))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call CreatePath) = 
                (expr 
                  (variable_or_function_call TRUE))))) ELSE 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call CreatePath) = 
                (expr 
                  (variable_or_function_call FALSE))))))) \n 
      (statement 
        (on_error_statement ON ERROR GOTO 
          (target 
            (line_number 0)))) \n statement \n statement) 
    (end_function_statement END FUNCTION)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id DisplayChanges) 
    (block \n statement \n 
      (statement 
        (call_statement 
          (untyped_id DisplayGameTitle))) \n statement \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "The following game characteristics can be easily changed from"))) , 
            (call_argument 
              (expr 
                (literal 5)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "within the QuickBASIC Interpreter.  To change the values of  "))) , 
            (call_argument 
              (expr 
                (literal 6)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "these characteristics, locate the corresponding CONST or DATA"))) , 
            (call_argument 
              (expr 
                (literal 7)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "statements in the source code and change their values, then  "))) , 
            (call_argument 
              (expr 
                (literal 8)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "restart the program 
                  (press Shift+F5).                        "))) , 
            (call_argument 
              (expr 
                (literal 9)))))) \n statement \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 15)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Songs played during this game           "))) , 
            (call_argument 
              (expr 
                (literal 11)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Size of the maze game grid              "))) , 
            (call_argument 
              (expr 
                (literal 12)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "How quickly the monsters move           "))) , 
            (call_argument 
              (expr 
                (literal 13)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Initial time allowed per maze           "))) , 
            (call_argument 
              (expr 
                (literal 14)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Color of Player 1                       "))) , 
            (call_argument 
              (expr 
                (literal 15)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Color of Player 2                       "))) , 
            (call_argument 
              (expr 
                (literal 16)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Color of the Monsters                   "))) , 
            (call_argument 
              (expr 
                (literal 17)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Maze dimensions at each difficulty level"))) , 
            (call_argument 
              (expr 
                (literal 18)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Amount of time path preview is shown    "))) , 
            (call_argument 
              (expr 
                (literal 19)))))) \n statement \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "The CONST statements and instructions on changing them are   "))) , 
            (call_argument 
              (expr 
                (literal 21)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "located at the beginning of the main program.                "))) , 
            (call_argument 
              (expr 
                (literal 22)))))) \n statement \n 
      (statement 
        (do_loop_statement DO 
          (do_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call INKEY$)) = 
              (expr 
                (literal "")))) 
          (block :) LOOP)) \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id DisplayGameTitle) 
    (block \n statement \n 
      (statement 
        (screen_statement SCREEN 
          (expr 
            (literal 0)))) \n 
      (statement 
        (width_statement WIDTH 
          (expr 
            (variable_or_function_call SCREENWIDTH)) , 
          (expr 
            (literal 25)))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 4)) , 
          (expr 
            (literal 0)))) \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 1)) , 
          (expr 
            (literal 2)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call CHR$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 201)) )))) ; 
          (expr 
            (variable_or_function_call STRING$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 76)) , 
                  (expr 
                    (literal 205)) )))) ; 
          (expr 
            (variable_or_function_call CHR$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 187)) )))) ;)) \n 
      (statement 
        (for_next_statement FOR i% = 
          (expr 
            (literal 2)) TO 
          (expr 
            (literal 24)) 
          (block \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call i%)) , 
                (expr 
                  (literal 2)))) \n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 186)) )))) ; 
                (expr 
                  (variable_or_function_call TAB 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 79)) )))) ; 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 186)) )))) ;)) \n statement) NEXT i%)) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 25)) , 
          (expr 
            (literal 2)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call CHR$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 200)) )))) ; 
          (expr 
            (variable_or_function_call STRING$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 76)) , 
                  (expr 
                    (literal 205)) )))) ; 
          (expr 
            (variable_or_function_call CHR$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 188)) )))) ;)) \n statement \n statement \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 0)) , 
          (expr 
            (literal 4)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "     Microsoft     "))) , 
            (call_argument 
              (expr 
                (literal 1)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "     Q M A Z E     "))) , 
            (call_argument 
              (expr 
                (literal 2)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "   Press any key to continue   "))) , 
            (call_argument 
              (expr 
                (literal 25)))))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)) , 
          (expr 
            (literal 0)))) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id DisplayIntro) 
    (block \n statement \n 
      (statement 
        (call_statement 
          (untyped_id DisplayGameTitle))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Copyright 
                  (C) 1990 Microsoft Corporation.  All Rights Reserved."))) , 
            (call_argument 
              (expr 
                (literal 4)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "You are moving through a maze at breakneck speed, racing the clock or "))) , 
            (call_argument 
              (expr 
                (literal 6)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "a friend.  The object is to finish the maze before time runs out      "))) , 
            (call_argument 
              (expr 
                (literal 7)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "or before your opponent finishes.  Monsters can be added to increase  "))) , 
            (call_argument 
              (expr 
                (literal 8)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "difficulty.  The amount of time allowed to complete the maze increases"))) , 
            (call_argument 
              (expr 
                (literal 9)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "for every monster in the maze.  The player who finishes first wins    "))) , 
            (call_argument 
              (expr 
                (literal 10)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "the points for the maze.                                              "))) , 
            (call_argument 
              (expr 
                (literal 11)))))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 4)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument STRING$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 74)) , 
                  (expr 
                    (literal 196)) ))) , 
            (call_argument 
              (expr 
                (literal 13)))))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal " Game Controls "))) , 
            (call_argument 
              (expr 
                (literal 13)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "  General           Player 1 Controls          Player 2 Controls  "))) , 
            (call_argument 
              (expr 
                (literal 15)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "                         
                  (Up)                       
                  (Up)          "))) , 
            (call_argument 
              (expr 
                (literal 17)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (expr 
                  (expr 
                    (literal "  P - Pause               ")) + 
                  (expr 
                    (variable_or_function_call CHR$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 24)) ))))) + 
                (expr 
                  (literal "                          E            ")))) , 
            (call_argument 
              (expr 
                (literal 18)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (expr 
                  (expr 
                    (expr 
                      (expr 
                        (literal "  Q - Quit       
                          (Left) ")) + 
                      (expr 
                        (variable_or_function_call CHR$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 27)) ))))) + 
                    (expr 
                      (literal "   "))) + 
                  (expr 
                    (variable_or_function_call CHR$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 26)) ))))) + 
                (expr 
                  (literal " 
                    (Right)       
                    (Left) S   F 
                    (Right)  ")))) , 
            (call_argument 
              (expr 
                (literal 19)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (expr 
                  (expr 
                    (literal "                        ")) + 
                  (expr 
                    (variable_or_function_call CHR$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 25)) ))))) + 
                (expr 
                  (literal "                          D          ")))) , 
            (call_argument 
              (expr 
                (literal 20)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "                        
                  (Down)                     
                  (Down)         "))) , 
            (call_argument 
              (expr 
                (literal 21)))))) \n statement \n 
      (statement 
        (play_statement PLAY 
          (expr 
            (variable_or_function_call STARTOFGAMESOUND)))) \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call kbd$) = 
                (expr 
                  (variable_or_function_call UCASE$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call INKEY$)) )))))) \n statement) LOOP 
          (do_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call kbd$)) = 
              (expr 
                (literal "")))))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call kbd$)) = 
          (expr 
            (literal "Q"))) THEN \n 
        (then_block 
          (statement 
            (call_statement 
              (untyped_id CLS))) \n 
          (statement 
            (locate_statement LOCATE 
              (expr 
                (literal 10)) , 
              (expr 
                (literal 30)))) : 
          (statement 
            (print_statement PRINT 
              (expr 
                (literal "Really quit? 
                  (Y/N)")) ;)) \n 
          (statement 
            (do_loop_statement DO 
              (block \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call kbd$) = 
                    (expr 
                      (variable_or_function_call UCASE$ 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call INKEY$)) )))))) \n statement) LOOP 
              (do_condition WHILE 
                (expr 
                  (expr 
                    (variable_or_function_call kbd$)) = 
                  (expr 
                    (literal "")))))) \n 
          (if_block_statement IF 
            (expr 
              (expr 
                (variable_or_function_call kbd$)) = 
              (expr 
                (literal "Y"))) THEN \n 
            (then_block 
              (statement 
                (call_statement 
                  (untyped_id CLS))) \n 
              (statement 
                (end_statement END)) \n) 
            (end_if_statement END IF)) \n) 
        (end_if_statement END IF)) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id DisplayWinner) 
    (block \n statement \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (literal 5)) , 
            (expr 
              (literal 5)) ) - 
          ( 
            (expr 
              (literal 315)) , 
            (expr 
              (literal 195)) ) , , 
          (box_style B))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Diff) = 
          (expr 
            (expr 
              (variable_or_function_call NumOfMazes)) - 
            (expr 
              (variable_or_function_call MazesFinished))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 3)) , 
          (expr 
            (literal 16)))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call Diff)) = 
            (expr 
              (literal 0))) THEN 
          (if_inline_action 
            (statement 
              (print_statement PRINT 
                (expr 
                  (literal "GAME OVER"))))) ELSE 
          (if_inline_action 
            (statement 
              (print_statement PRINT 
                (expr 
                  (literal "Maze #")) ; 
                (expr 
                  (variable_or_function_call MazesFinished))))))) \n statement \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 6)) , 
          (expr 
            (literal 5)))) \n 
      (if_block_statement IF 
        (expr 
          (variable_or_function_call Player 
            (args_or_indices 
              ( 
                (expr 
                  (literal 1)) )) . Done)) THEN \n 
        (then_block 
          (statement 
            (print_statement PRINT 
              (expr 
                (literal "Player 1 finished in")) ; 
              (expr 
                (expr 
                  (variable_or_function_call MazeTime)) - 
                (expr 
                  (variable_or_function_call Player 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 1)) )) . TimeLeft))) ; 
              (expr 
                (literal "seconds")))) \n) 
        (else_block_statement ELSE 
          (else_block statement \n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (literal "Player 1 did not finish!")))) \n)) 
        (end_if_statement END IF)) \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Temp) = 
          (expr 
            (expr 
              (variable_or_function_call Player 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 1)) )) . TimeLeft)) - 
            (expr 
              (variable_or_function_call Player 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 2)) )) . TimeLeft))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 10)) , 
          (expr 
            (literal 5)))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Temp)) = 
          (expr 
            (literal 0))) THEN \n 
        (then_block 
          (if_block_statement IF 
            (expr 
              (expr 
                (variable_or_function_call NumOfPlayers)) = 
              (expr 
                (literal 2))) THEN \n 
            (then_block 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (literal "Tie maze: nobody wins this round")))) \n) 
            (else_block_statement ELSE 
              (else_block statement \n 
                (statement 
                  (print_statement PRINT 
                    (expr 
                      (literal "Player 1 loses this round")))) \n)) 
            (end_if_statement END IF)) \n) 
        (else_block_statement ELSE 
          (else_block statement \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call SGN 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call Temp)) )))) = 
                  (expr 
                    (literal 1))) THEN 
                (if_inline_action 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Win) = 
                      (expr 
                        (literal 1))))) ELSE 
                (if_inline_action 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Win) = 
                      (expr 
                        (literal 2))))))) \n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (literal "Player")) ; 
                (expr 
                  (variable_or_function_call Win)) ; 
                (expr 
                  (literal "wins maze by")) ; 
                (expr 
                  (variable_or_function_call ABS 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call Temp)) )))) ; 
                (expr 
                  (literal "seconds!")))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Player 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Win)) )) . Score) = 
                (expr 
                  (expr 
                    (variable_or_function_call Player 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call Win)) )) . Score)) + 
                  (expr 
                    (expr 
                      (variable_or_function_call ABS 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call Temp)) )))) * 
                    (expr 
                      (literal 100)))))) \n)) 
        (end_if_statement END IF)) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 13)) , 
          (expr 
            (literal 9)))) : 
      (statement 
        (print_using_statement PRINT USING 
          (expr 
            (literal "Player 1 score: ###,###")) ; 
          (expr 
            (variable_or_function_call Player 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 1)) )) . Score)))) \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call NumOfPlayers)) = 
          (expr 
            (literal 2))) THEN \n 
        (then_block 
          (statement 
            (locate_statement LOCATE 
              (expr 
                (literal 8)) , 
              (expr 
                (literal 5)))) \n 
          (if_block_statement IF 
            (expr 
              (variable_or_function_call Player 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 2)) )) . Done)) THEN \n 
            (then_block 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (literal "Player 2 finished in")) ; 
                  (expr 
                    (expr 
                      (variable_or_function_call MazeTime)) - 
                    (expr 
                      (variable_or_function_call Player 
                        (args_or_indices 
                          ( 
                            (expr 
                              (literal 2)) )) . TimeLeft))) ; 
                  (expr 
                    (literal "seconds")))) \n) 
            (else_block_statement ELSE 
              (else_block statement \n 
                (statement 
                  (print_statement PRINT 
                    (expr 
                      (literal "Player 2 did not finish!")))) \n)) 
            (end_if_statement END IF)) \n 
          (statement 
            (locate_statement LOCATE 
              (expr 
                (literal 15)) , 
              (expr 
                (literal 9)))) : 
          (statement 
            (print_using_statement PRINT USING 
              (expr 
                (literal "Player 2 score: ###,###")) ; 
              (expr 
                (variable_or_function_call Player 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 2)) )) . Score)))) \n) 
        (end_if_statement END IF)) \n statement \n 
      (statement 
        (do_loop_statement DO 
          (block :) LOOP 
          (do_condition UNTIL 
            (expr 
              (expr 
                (variable_or_function_call INKEY$)) = 
              (expr 
                (literal "")))))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (expr 
              (variable_or_function_call Diff)) > 
            (expr 
              (literal 0))) AND 
          (expr NOT 
            (expr 
              (variable_or_function_call GameOver)))) THEN \n 
        (then_block 
          (statement 
            (locate_statement LOCATE 
              (expr 
                (literal 20)) , 
              (expr 
                (literal 8)))) : 
          (statement 
            (print_statement PRINT 
              (expr 
                (literal "Number of mazes left:")) ; 
              (expr 
                (variable_or_function_call Diff)))) \n 
          (statement 
            (play_statement PLAY 
              (expr 
                (variable_or_function_call ENDOFMAZESOUND)))) \n 
          (statement 
            (locate_statement LOCATE 
              (expr 
                (literal 23)) , 
              (expr 
                (literal 6)))) : 
          (statement 
            (print_statement PRINT 
              (expr 
                (literal "<Press Spacebar for next maze>")))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call MazesFinished) = 
              (expr 
                (expr 
                  (variable_or_function_call MazesFinished)) + 
                (expr 
                  (literal 1))))) \n 
          (statement 
            (while_wend_statement WHILE 
              (expr 
                (expr 
                  (variable_or_function_call INKEY$)) <> 
                (expr 
                  (literal " "))) 
              (block :) WEND)) \n) 
        (else_block_statement ELSE 
          (else_block statement \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call NumOfPlayers)) = 
                (expr 
                  (literal 2))) THEN \n 
              (then_block 
                (statement 
                  (locate_statement LOCATE 
                    (expr 
                      (literal 18)) , 
                    (expr 
                      (literal 5)))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Hold&) = 
                    (expr 
                      (expr 
                        (variable_or_function_call Player 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 1)) )) . Score)) - 
                      (expr 
                        (variable_or_function_call Player 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 2)) )) . Score))))) \n 
                (if_block_statement IF 
                  (expr 
                    (expr 
                      (variable_or_function_call Hold&)) = 
                    (expr 
                      (literal 0))) THEN \n 
                  (then_block 
                    (statement 
                      (print_statement PRINT 
                        (expr 
                          (literal "EQUAL POINTS - This is a tie game!")))) \n) 
                  (else_block_statement ELSE 
                    (else_block statement \n 
                      (statement 
                        (if_inline_statement IF 
                          (expr 
                            (expr 
                              (variable_or_function_call SGN 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call Hold&)) )))) = 
                            (expr 
                              (literal 1))) THEN 
                          (if_inline_action 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call Win) = 
                                (expr 
                                  (literal 1))))) ELSE 
                          (if_inline_action 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call Win) = 
                                (expr 
                                  (literal 2))))))) \n 
                      (statement 
                        (print_statement PRINT 
                          (expr 
                            (literal "PLAYER")) ; 
                          (expr 
                            (variable_or_function_call Win)) ; 
                          (expr 
                            (literal "WINS GAME BY")) ; 
                          (expr 
                            (variable_or_function_call ABS 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call Hold&)) )))) ; 
                          (expr 
                            (literal "POINTS!")))) \n)) 
                  (end_if_statement END IF)) \n) 
              (end_if_statement END IF)) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call GameOver) = 
                (expr 
                  (variable_or_function_call TRUE)))) \n 
            (statement 
              (play_statement PLAY 
                (expr 
                  (variable_or_function_call ENDOFGAMESOUND)))) \n)) 
        (end_if_statement END IF)) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id DrawMonster) 
    ( 
      (parameter_list 
        (parameter x) , 
        (parameter y) , 
        (parameter WhatColor)) ) 
    (block \n statement \n 
      (statement 
        (circle_statement CIRCLE 
          ( 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call StartX)) + 
                (expr 
                  (expr 
                    (variable_or_function_call x)) * 
                  (expr 
                    (variable_or_function_call BLOCKSIZE)))) + 
              (expr 
                (expr 
                  (variable_or_function_call BLOCKSIZE)) / 
                (expr 
                  (literal 2)))) , 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call StartY)) + 
                (expr 
                  (expr 
                    (variable_or_function_call y)) * 
                  (expr 
                    (variable_or_function_call BLOCKSIZE)))) + 
              (expr 
                (expr 
                  (variable_or_function_call BLOCKSIZE)) / 
                (expr 
                  (literal 2)))) ) , 
          (expr 
            ( 
              (expr 
                (expr 
                  (expr 
                    (variable_or_function_call BLOCKSIZE)) / 
                  (expr 
                    (literal 2))) - 
                (expr 
                  (literal 2))) )) , 
          (expr 
            (variable_or_function_call WhatColor)))) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id DrawPlayer) 
    ( 
      (parameter_list 
        (parameter Player) , 
        (parameter WhatColor)) ) 
    (block \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Player)) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (statement 
            (line_statement LINE 
              ( 
                (expr 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call StartX)) + 
                      (expr 
                        (expr 
                          (variable_or_function_call Player 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 1)) )) . x)) * 
                        (expr 
                          (variable_or_function_call BLOCKSIZE)))) + 
                    (expr 
                      (expr 
                        (variable_or_function_call BLOCKSIZE)) / 
                      (expr 
                        (literal 4)))) + 
                  (expr 
                    (literal 1))) , 
                (expr 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call StartY)) + 
                      (expr 
                        (expr 
                          (variable_or_function_call Player 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 1)) )) . y)) * 
                        (expr 
                          (variable_or_function_call BLOCKSIZE)))) + 
                    (expr 
                      (expr 
                        (variable_or_function_call BLOCKSIZE)) / 
                      (expr 
                        (literal 4)))) + 
                  (expr 
                    (literal 1))) ) - 
              ( 
                (expr 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call StartX)) + 
                      (expr 
                        (expr 
                          (variable_or_function_call Player 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 1)) )) . x)) * 
                        (expr 
                          (variable_or_function_call BLOCKSIZE)))) + 
                    (expr 
                      (expr 
                        (variable_or_function_call BLOCKSIZE)) * 
                      (expr 
                        (literal .75)))) - 
                  (expr 
                    (literal 1))) , 
                (expr 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call StartY)) + 
                      (expr 
                        (expr 
                          (variable_or_function_call Player 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 1)) )) . y)) * 
                        (expr 
                          (variable_or_function_call BLOCKSIZE)))) + 
                    (expr 
                      (expr 
                        (variable_or_function_call BLOCKSIZE)) * 
                      (expr 
                        (literal .75)))) - 
                  (expr 
                    (literal 1))) ) , 
              (expr 
                (variable_or_function_call WhatColor)) , 
              (box_style BF))) \n) 
        (else_block_statement ELSE 
          (else_block statement \n 
            (statement 
              (line_statement LINE 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call StartX)) + 
                      (expr 
                        (expr 
                          (variable_or_function_call Player 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 2)) )) . x)) * 
                        (expr 
                          (variable_or_function_call BLOCKSIZE)))) + 
                    (expr 
                      (expr 
                        (variable_or_function_call BLOCKSIZE)) / 
                      (expr 
                        (literal 4)))) , 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call StartY)) + 
                      (expr 
                        (expr 
                          (variable_or_function_call Player 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 2)) )) . y)) * 
                        (expr 
                          (variable_or_function_call BLOCKSIZE)))) + 
                    (expr 
                      (expr 
                        (variable_or_function_call BLOCKSIZE)) / 
                      (expr 
                        (literal 4)))) ) - 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call StartX)) + 
                      (expr 
                        (expr 
                          (variable_or_function_call Player 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 2)) )) . x)) * 
                        (expr 
                          (variable_or_function_call BLOCKSIZE)))) + 
                    (expr 
                      (expr 
                        (variable_or_function_call BLOCKSIZE)) * 
                      (expr 
                        (literal .75)))) , 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call StartY)) + 
                      (expr 
                        (expr 
                          (variable_or_function_call Player 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 2)) )) . y)) * 
                        (expr 
                          (variable_or_function_call BLOCKSIZE)))) + 
                    (expr 
                      (expr 
                        (variable_or_function_call BLOCKSIZE)) * 
                      (expr 
                        (literal .75)))) ) , 
                (expr 
                  (variable_or_function_call WhatColor)) , 
                (box_style B))) \n)) 
        (end_if_statement END IF)) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id GenerateMaze) 
    (block \n statement \n 
      (statement 
        (dim_statement REDIM 
          (dim_variable 
            (untyped_id MazeArray) 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (variable_or_function_call MazeWidth))) , 
                (dim_subscript 
                  (expr 
                    (variable_or_function_call MazeHeight))) )) AS 
            (type_name 
              (untyped_id MazeType))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call StackPointer) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call MazeWidth)) 
          (block \n 
            (statement 
              (for_next_statement FOR j = 
                (expr 
                  (literal 1)) TO 
                (expr 
                  (variable_or_function_call MazeHeight)) 
                (block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call MazeArray 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call i)) , 
                            (expr 
                              (variable_or_function_call j)) )) . Left) = 
                      (expr 
                        (literal 1)))) : 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call MazeArray 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call i)) , 
                            (expr 
                              (variable_or_function_call j)) )) . Right) = 
                      (expr 
                        (literal 1)))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call MazeArray 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call i)) , 
                            (expr 
                              (variable_or_function_call j)) )) . top) = 
                      (expr 
                        (literal 1)))) : 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call MazeArray 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call i)) , 
                            (expr 
                              (variable_or_function_call j)) )) . Bottom) = 
                      (expr 
                        (literal 1)))) \n statement) NEXT j)) \n statement) NEXT i)) \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n 
      (statement 
        (call_statement 
          (untyped_id PrintMaze))) \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Entrydir) = 
          (expr 
            (variable_or_function_call RND 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 1)) )))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Entryside) = 
          (expr 
            (variable_or_function_call RND 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 1)) )))))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Entrydir)) > 
          (expr 
            (literal .5))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call EntryX) = 
              (expr 
                (expr 
                  (variable_or_function_call INT 
                    (args_or_indices 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call RND 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (literal 1)) )))) * 
                          (expr 
                            (variable_or_function_call MazeWidth))) )))) + 
                (expr 
                  (literal 1))))) \n 
          (if_block_statement IF 
            (expr 
              (expr 
                (variable_or_function_call Entryside)) > 
              (expr 
                (literal .5))) THEN \n 
            (then_block 
              (statement 
                (assignment_statement 
                  (variable_or_function_call EntryY) = 
                  (expr 
                    (variable_or_function_call MazeHeight)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call MazeArray 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call EntryX)) , 
                        (expr 
                          (variable_or_function_call EntryY)) )) . Bottom) = 
                  (expr 
                    (literal 0)))) \n) 
            (else_block_statement ELSE 
              (else_block statement \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call EntryY) = 
                    (expr 
                      (literal 1)))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call MazeArray 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call EntryX)) , 
                          (expr 
                            (variable_or_function_call EntryY)) )) . top) = 
                    (expr 
                      (literal 0)))) \n)) 
            (end_if_statement END IF)) \n) 
        (else_block_statement ELSE 
          (else_block statement \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call EntryY) = 
                (expr 
                  (expr 
                    (variable_or_function_call INT 
                      (args_or_indices 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call RND 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (literal 1)) )))) * 
                            (expr 
                              (variable_or_function_call MazeHeight))) )))) + 
                  (expr 
                    (literal 1))))) \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call Entryside)) > 
                (expr 
                  (literal .5))) THEN \n 
              (then_block 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call EntryX) = 
                    (expr 
                      (variable_or_function_call MazeWidth)))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call MazeArray 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call EntryX)) , 
                          (expr 
                            (variable_or_function_call EntryY)) )) . Right) = 
                    (expr 
                      (literal 0)))) \n) 
              (else_block_statement ELSE 
                (else_block statement \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call EntryX) = 
                      (expr 
                        (literal 1)))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call MazeArray 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call EntryX)) , 
                            (expr 
                              (variable_or_function_call EntryY)) )) . Left) = 
                      (expr 
                        (literal 0)))) \n)) 
              (end_if_statement END IF)) \n)) 
        (end_if_statement END IF)) \n statement \n statement \n statement \n 
      (statement 
        (dim_statement REDIM 
          (dim_variable 
            (untyped_id stackVar) 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 1)) TO 
                  (expr 
                    (expr 
                      (variable_or_function_call PathLength)) * 
                    (expr 
                      (literal 10)))) )) AS 
            (type_name 
              (untyped_id MoveType))))) \n statement \n 
      (if_block_statement IF 
        (expr NOT 
          (expr 
            (variable_or_function_call CreatePath))) THEN \n 
        (then_block 
          (statement 
            (call_statement 
              (untyped_id GenerateMaze))) \n) 
        (else_block_statement ELSE 
          (else_block statement \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call first!) = 
                (expr 
                  (builtin_function TIMER)))) \n 
            (statement 
              (do_loop_statement DO 
                (block :) LOOP 
                (do_condition UNTIL 
                  (expr 
                    (expr 
                      (builtin_function TIMER)) > 
                    (expr 
                      (expr 
                        (variable_or_function_call first!)) + 
                      (expr 
                        (variable_or_function_call SHOWDELAY))))))) \n 
            (statement 
              (call_statement 
                (untyped_id CLS))) \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call ScreenMode)) = 
                  (expr 
                    (literal 7))) THEN 
                (if_inline_action 
                  (statement 
                    (color_statement COLOR 
                      (expr 
                        (literal 14))))))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 2)) , 
                (expr 
                  (literal 11)))) : 
            (statement 
              (print_statement PRINT 
                (expr 
                  (literal "Generating maze...")))) \n 
            (statement 
              (call_statement 
                (untyped_id CompleteMaze))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 2)) , 
                (expr 
                  (literal 11)))) : 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call SPACE$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 20)) )))))) \n)) 
        (end_if_statement END IF)) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id GenerateMove) 
    ( 
      (parameter_list 
        (parameter 
          (untyped_id move) AS 
          (type_name_for_parameter 
            (untyped_id MoveType)))) ) 
    (block \n statement \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call move.y)) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call move.top) = 
              (expr 
                (literal 1)))) \n) 
        (elseif_block_statement ELSEIF 
          (expr 
            (expr 
              (expr 
                (expr 
                  (expr 
                    (variable_or_function_call MazeArray 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call move.x)) , 
                          (expr 
                            (expr 
                              (variable_or_function_call move.y)) - 
                            (expr 
                              (literal 1))) )) . top)) + 
                  (expr 
                    (variable_or_function_call MazeArray 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call move.x)) , 
                          (expr 
                            (expr 
                              (variable_or_function_call move.y)) - 
                            (expr 
                              (literal 1))) )) . Bottom))) + 
                (expr 
                  (variable_or_function_call MazeArray 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call move.x)) , 
                        (expr 
                          (expr 
                            (variable_or_function_call move.y)) - 
                          (expr 
                            (literal 1))) )) . Left))) + 
              (expr 
                (variable_or_function_call MazeArray 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call move.x)) , 
                      (expr 
                        (expr 
                          (variable_or_function_call move.y)) - 
                        (expr 
                          (literal 1))) )) . Right))) <> 
            (expr 
              (literal 4))) THEN 
          (else_block statement \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call move.top) = 
                (expr 
                  (literal 1)))) \n)) 
        (end_if_statement END IF)) \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call move.y)) = 
          (expr 
            (variable_or_function_call MazeHeight))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call move.Bottom) = 
              (expr 
                (literal 1)))) \n) 
        (elseif_block_statement ELSEIF 
          (expr 
            (expr 
              (expr 
                (expr 
                  (expr 
                    (variable_or_function_call MazeArray 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call move.x)) , 
                          (expr 
                            (expr 
                              (variable_or_function_call move.y)) + 
                            (expr 
                              (literal 1))) )) . top)) + 
                  (expr 
                    (variable_or_function_call MazeArray 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call move.x)) , 
                          (expr 
                            (expr 
                              (variable_or_function_call move.y)) + 
                            (expr 
                              (literal 1))) )) . Bottom))) + 
                (expr 
                  (variable_or_function_call MazeArray 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call move.x)) , 
                        (expr 
                          (expr 
                            (variable_or_function_call move.y)) + 
                          (expr 
                            (literal 1))) )) . Left))) + 
              (expr 
                (variable_or_function_call MazeArray 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call move.x)) , 
                      (expr 
                        (expr 
                          (variable_or_function_call move.y)) + 
                        (expr 
                          (literal 1))) )) . Right))) <> 
            (expr 
              (literal 4))) THEN 
          (else_block statement \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call move.Bottom) = 
                (expr 
                  (literal 1)))) \n)) 
        (end_if_statement END IF)) \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call move.x)) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call move.Left) = 
              (expr 
                (literal 1)))) \n) 
        (elseif_block_statement ELSEIF 
          (expr 
            (expr 
              (expr 
                (expr 
                  (expr 
                    (variable_or_function_call MazeArray 
                      (args_or_indices 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call move.x)) - 
                            (expr 
                              (literal 1))) , 
                          (expr 
                            (variable_or_function_call move.y)) )) . top)) + 
                  (expr 
                    (variable_or_function_call MazeArray 
                      (args_or_indices 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call move.x)) - 
                            (expr 
                              (literal 1))) , 
                          (expr 
                            (variable_or_function_call move.y)) )) . Bottom))) + 
                (expr 
                  (variable_or_function_call MazeArray 
                    (args_or_indices 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call move.x)) - 
                          (expr 
                            (literal 1))) , 
                        (expr 
                          (variable_or_function_call move.y)) )) . Left))) + 
              (expr 
                (variable_or_function_call MazeArray 
                  (args_or_indices 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call move.x)) - 
                        (expr 
                          (literal 1))) , 
                      (expr 
                        (variable_or_function_call move.y)) )) . Right))) <> 
            (expr 
              (literal 4))) THEN 
          (else_block statement \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call move.Left) = 
                (expr 
                  (literal 1)))) \n)) 
        (end_if_statement END IF)) \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call move.x)) = 
          (expr 
            (variable_or_function_call MazeWidth))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call move.Right) = 
              (expr 
                (literal 1)))) \n) 
        (elseif_block_statement ELSEIF 
          (expr 
            (expr 
              (expr 
                (expr 
                  (expr 
                    (variable_or_function_call MazeArray 
                      (args_or_indices 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call move.x)) + 
                            (expr 
                              (literal 1))) , 
                          (expr 
                            (variable_or_function_call move.y)) )) . top)) + 
                  (expr 
                    (variable_or_function_call MazeArray 
                      (args_or_indices 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call move.x)) + 
                            (expr 
                              (literal 1))) , 
                          (expr 
                            (variable_or_function_call move.y)) )) . Bottom))) + 
                (expr 
                  (variable_or_function_call MazeArray 
                    (args_or_indices 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call move.x)) + 
                          (expr 
                            (literal 1))) , 
                        (expr 
                          (variable_or_function_call move.y)) )) . Left))) + 
              (expr 
                (variable_or_function_call MazeArray 
                  (args_or_indices 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call move.x)) + 
                        (expr 
                          (literal 1))) , 
                      (expr 
                        (variable_or_function_call move.y)) )) . Right))) <> 
            (expr 
              (literal 4))) THEN 
          (else_block statement \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call move.Right) = 
                (expr 
                  (literal 1)))) \n)) 
        (end_if_statement END IF)) \n statement \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call AvailableMoves) = 
          (expr 
            (expr 
              (literal 4)) - 
            (expr 
              ( 
                (expr 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call move.Left)) + 
                      (expr 
                        (variable_or_function_call move.Right))) + 
                    (expr 
                      (variable_or_function_call move.top))) + 
                  (expr 
                    (variable_or_function_call move.Bottom))) ))))) \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call AvailableMoves)) = 
          (expr 
            (literal 0))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call move.direction) = 
              (expr 
                (literal 0)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call move.Spaces) = 
              (expr 
                (literal 1)))) \n 
          (statement 
            (exit_statement EXIT SUB)) \n) 
        (end_if_statement END IF)) \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call NewDirection) = 
          (expr 
            (expr 
              (variable_or_function_call INT 
                (args_or_indices 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call RND 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 1)) )))) * 
                      (expr 
                        (variable_or_function_call AvailableMoves))) )))) + 
            (expr 
              (literal 1))))) \n statement \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Counter) = 
          (expr 
            (literal 1)))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call move.top)) = 
          (expr 
            (literal 0))) THEN \n 
        (then_block 
          (if_block_statement IF 
            (expr 
              (expr 
                (variable_or_function_call NewDirection)) = 
              (expr 
                (variable_or_function_call Counter))) THEN \n 
            (then_block 
              (statement 
                (assignment_statement 
                  (variable_or_function_call move.direction) = 
                  (expr 
                    (variable_or_function_call CTOP)))) \n) 
            (end_if_statement END IF)) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Counter) = 
              (expr 
                (expr 
                  (variable_or_function_call Counter)) + 
                (expr 
                  (literal 1))))) \n) 
        (end_if_statement END IF)) \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call move.Bottom)) = 
          (expr 
            (literal 0))) THEN \n 
        (then_block 
          (if_block_statement IF 
            (expr 
              (expr 
                (variable_or_function_call NewDirection)) = 
              (expr 
                (variable_or_function_call Counter))) THEN \n 
            (then_block 
              (statement 
                (assignment_statement 
                  (variable_or_function_call move.direction) = 
                  (expr 
                    (variable_or_function_call CBOTTOM)))) \n) 
            (end_if_statement END IF)) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Counter) = 
              (expr 
                (expr 
                  (variable_or_function_call Counter)) + 
                (expr 
                  (literal 1))))) \n) 
        (end_if_statement END IF)) \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call move.Left)) = 
          (expr 
            (literal 0))) THEN \n 
        (then_block 
          (if_block_statement IF 
            (expr 
              (expr 
                (variable_or_function_call NewDirection)) = 
              (expr 
                (variable_or_function_call Counter))) THEN \n 
            (then_block 
              (statement 
                (assignment_statement 
                  (variable_or_function_call move.direction) = 
                  (expr 
                    (variable_or_function_call CLEFT)))) \n) 
            (end_if_statement END IF)) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Counter) = 
              (expr 
                (expr 
                  (variable_or_function_call Counter)) + 
                (expr 
                  (literal 1))))) \n) 
        (end_if_statement END IF)) \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call move.Right)) = 
          (expr 
            (literal 0))) THEN \n 
        (then_block 
          (if_block_statement IF 
            (expr 
              (expr 
                (variable_or_function_call NewDirection)) = 
              (expr 
                (variable_or_function_call Counter))) THEN \n 
            (then_block 
              (statement 
                (assignment_statement 
                  (variable_or_function_call move.direction) = 
                  (expr 
                    (variable_or_function_call CRIGHT)))) \n) 
            (end_if_statement END IF)) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Counter) = 
              (expr 
                (expr 
                  (variable_or_function_call Counter)) + 
                (expr 
                  (literal 1))))) \n) 
        (end_if_statement END IF)) \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call move.Spaces) = 
          (expr 
            (expr 
              (variable_or_function_call INT 
                (args_or_indices 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call RND 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 1)) )))) * 
                      (expr 
                        (variable_or_function_call TurnRate))) )))) + 
            (expr 
              (literal 1))))) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id GetGameOptions) 
    (block \n statement \n 
      (statement 
        (screen_statement SCREEN 
          (expr 
            (literal 0)))) \n 
      (statement 
        (width_statement WIDTH 
          (expr 
            (variable_or_function_call SCREENWIDTH)) , 
          (expr 
            (literal 25)))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)) , 
          (expr 
            (literal 0)))) \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 7)) , 
          (expr 
            (literal 20)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Default is")) ; 
          (expr 
            (variable_or_function_call DEFAULTPLAYERS)))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 15)))) \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 6)) , 
                (expr 
                  (literal 23)))) : 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call SPACE$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 50)) )))))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 6)) , 
                (expr 
                  (literal 23)))) \n 
            (statement 
              (input_statement INPUT "How many players? 
                (1 or 2) " , 
                (variable_or_function_call InputHold$))) \n statement) LOOP 
          (do_condition UNTIL 
            (expr 
              (expr 
                (expr 
                  (expr 
                    (variable_or_function_call InputHold$)) = 
                  (expr 
                    (literal "1"))) OR 
                (expr 
                  (expr 
                    (variable_or_function_call InputHold$)) = 
                  (expr 
                    (literal "2")))) OR 
              (expr 
                (expr 
                  (builtin_function LEN 
                    ( 
                      (expr 
                        (variable_or_function_call InputHold$)) ))) = 
                (expr 
                  (literal 0))))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call NumOfPlayers) = 
          (expr 
            (variable_or_function_call VAL 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call InputHold$)) )))))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call NumOfPlayers)) = 
            (expr 
              (literal 0))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call NumOfPlayers) = 
                (expr 
                  (variable_or_function_call DEFAULTPLAYERS))))))) \n statement \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 10)) , 
          (expr 
            (literal 20)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Default is")) ; 
          (expr 
            (variable_or_function_call DEFAULTLEVEL)))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 15)))) \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 9)) , 
                (expr 
                  (literal 23)))) : 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call SPACE$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 50)) )))))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 9)) , 
                (expr 
                  (literal 23)))) \n 
            (statement 
              (input_statement INPUT "Difficulty level? 
                (1 to 5) " , 
                (variable_or_function_call InputHold$))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Level) = 
                (expr 
                  (variable_or_function_call VAL 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call LEFT$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call InputHold$)) , 
                                (expr 
                                  (literal 1)) )))) )))))) \n statement) LOOP 
          (do_condition UNTIL 
            (expr 
              (expr 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call Level)) > 
                        (expr 
                          (literal 0))) AND 
                      (expr 
                        (expr 
                          (variable_or_function_call Level)) <= 
                        (expr 
                          (variable_or_function_call MAXLEVEL)))) AND 
                    (expr 
                      (expr 
                        (builtin_function LEN 
                          ( 
                            (expr 
                              (variable_or_function_call InputHold$)) ))) < 
                      (expr 
                        (literal 2)))) )) OR 
              (expr 
                ( 
                  (expr 
                    (expr 
                      (builtin_function LEN 
                        ( 
                          (expr 
                            (variable_or_function_call InputHold$)) ))) = 
                    (expr 
                      (literal 0))) )))))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call Level)) = 
            (expr 
              (literal 0))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call Level) = 
                (expr 
                  (variable_or_function_call DEFAULTLEVEL))))))) \n statement \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 13)) , 
          (expr 
            (literal 20)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Default is")) ; 
          (expr 
            (variable_or_function_call DEFAULTNUMMAZES)))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 15)))) \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 12)) , 
                (expr 
                  (literal 23)))) : 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call SPACE$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 50)) )))))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 12)) , 
                (expr 
                  (literal 23)))) \n 
            (statement 
              (input_statement INPUT "Play how many mazes? 
                (1 to 10) " , 
                (variable_or_function_call InputHold$))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call NumOfMazes) = 
                (expr 
                  (variable_or_function_call VAL 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call LEFT$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call InputHold$)) , 
                                (expr 
                                  (literal 2)) )))) )))))) \n statement) LOOP 
          (do_condition UNTIL 
            (expr 
              (expr 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call NumOfMazes)) > 
                        (expr 
                          (literal 0))) AND 
                      (expr 
                        (expr 
                          (variable_or_function_call NumOfMazes)) <= 
                        (expr 
                          (variable_or_function_call MAXMAZES)))) AND 
                    (expr 
                      (expr 
                        (builtin_function LEN 
                          ( 
                            (expr 
                              (variable_or_function_call InputHold$)) ))) < 
                      (expr 
                        (literal 3)))) )) OR 
              (expr 
                ( 
                  (expr 
                    (expr 
                      (builtin_function LEN 
                        ( 
                          (expr 
                            (variable_or_function_call InputHold$)) ))) = 
                    (expr 
                      (literal 0))) )))))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call NumOfMazes)) = 
            (expr 
              (literal 0))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call NumOfMazes) = 
                (expr 
                  (variable_or_function_call DEFAULTNUMMAZES))))))) \n statement \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 16)) , 
          (expr 
            (literal 20)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Default is")) ; 
          (expr 
            (variable_or_function_call DEFAULTMONSTERS)))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 15)))) \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 15)) , 
                (expr 
                  (literal 23)))) : 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call SPACE$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 50)) )))))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 15)) , 
                (expr 
                  (literal 23)))) \n 
            (statement 
              (input_statement INPUT "How many monsters? 
                (0 to 10) " , 
                (variable_or_function_call InputHold$))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call AvailMonsters) = 
                (expr 
                  (variable_or_function_call VAL 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call LEFT$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call InputHold$)) , 
                                (expr 
                                  (literal 2)) )))) )))))) \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call AvailMonsters)) = 
                    (expr 
                      (literal 0))) AND 
                  (expr 
                    (expr 
                      (variable_or_function_call InputHold$)) <> 
                    (expr 
                      (literal "0")))) THEN 
                (if_inline_action 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call AvailMonsters) = 
                      (expr - 
                        (expr 
                          (literal 1)))))))) \n statement) LOOP 
          (do_condition UNTIL 
            (expr 
              (expr 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call AvailMonsters)) > 
                        (expr - 
                          (expr 
                            (literal 1)))) AND 
                      (expr 
                        (expr 
                          (variable_or_function_call AvailMonsters)) <= 
                        (expr 
                          (variable_or_function_call MAXMONSTERS)))) AND 
                    (expr 
                      (expr 
                        (builtin_function LEN 
                          ( 
                            (expr 
                              (variable_or_function_call InputHold$)) ))) < 
                      (expr 
                        (literal 3)))) )) OR 
              (expr 
                ( 
                  (expr 
                    (expr 
                      (builtin_function LEN 
                        ( 
                          (expr 
                            (variable_or_function_call InputHold$)) ))) = 
                    (expr 
                      (literal 0))) )))))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (builtin_function LEN 
                ( 
                  (expr 
                    (variable_or_function_call InputHold$)) ))) = 
            (expr 
              (literal 0))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call AvailMonsters) = 
                (expr 
                  (variable_or_function_call DEFAULTMONSTERS))))))) \n statement \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 19)) , 
          (expr 
            (literal 20)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Default is ")) ;)) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (variable_or_function_call DEFAULTSHOWMAZE)) THEN 
          (if_inline_action 
            (statement 
              (print_statement PRINT 
                (expr 
                  (literal "YES"))))) ELSE 
          (if_inline_action 
            (statement 
              (print_statement PRINT 
                (expr 
                  (literal "NO"))))))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 15)))) \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 18)) , 
                (expr 
                  (literal 23)))) : 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call SPACE$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 40)) )))))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 18)) , 
                (expr 
                  (literal 23)))) \n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (literal "Visible mazes? 
                    (Y or N) ")) ;)) \n 
            (statement 
              (input_statement INPUT "" , 
                (variable_or_function_call InputHold$))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call InputHold$) = 
                (expr 
                  (variable_or_function_call UCASE$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call InputHold$)) )))))) \n statement) LOOP 
          (do_condition UNTIL 
            (expr 
              (expr 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call InputHold$)) = 
                      (expr 
                        (literal "Y"))) )) OR 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call InputHold$)) = 
                      (expr 
                        (literal "N"))) ))) OR 
              (expr 
                ( 
                  (expr 
                    (expr 
                      (builtin_function LEN 
                        ( 
                          (expr 
                            (variable_or_function_call InputHold$)) ))) = 
                    (expr 
                      (literal 0))) )))))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call InputHold$)) = 
          (expr 
            (literal "N"))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call ShowMaze) = 
              (expr 
                (variable_or_function_call FALSE)))) \n) 
        (elseif_block_statement ELSEIF 
          (expr 
            (expr 
              (variable_or_function_call InputHold$)) = 
            (expr 
              (literal "Y"))) THEN 
          (else_block statement \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call ShowMaze) = 
                (expr 
                  (variable_or_function_call TRUE)))) \n)) 
        (else_block_statement ELSE 
          (else_block statement \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call ShowMaze) = 
                (expr 
                  (variable_or_function_call DEFAULTSHOWMAZE)))) \n)) 
        (end_if_statement END IF)) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (function_statement FUNCTION GetMonsterDirection 
    ( 
      (parameter_list 
        (parameter x) , 
        (parameter y) , 
        (parameter direction)) ) 
    (block \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call NewDirection) = 
          (expr 
            (variable_or_function_call FALSE)))) \n statement \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call AvailableDirections) = 
          (expr 
            (expr 
              (literal 4)) - 
            (expr 
              (variable_or_function_call NumberOfWalls 
                (args_or_indices 
                  ( 
                    (expr 
                      (variable_or_function_call x)) , 
                    (expr 
                      (variable_or_function_call y)) ))))))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            ( 
              (expr 
                (expr 
                  (expr 
                    (variable_or_function_call x)) = 
                  (expr 
                    (variable_or_function_call ExitX))) AND 
                (expr 
                  (expr 
                    (variable_or_function_call y)) = 
                  (expr 
                    (variable_or_function_call ExitY)))) )) OR 
          (expr 
            ( 
              (expr 
                (expr 
                  (expr 
                    (variable_or_function_call x)) = 
                  (expr 
                    (variable_or_function_call EntryX))) AND 
                (expr 
                  (expr 
                    (variable_or_function_call y)) = 
                  (expr 
                    (variable_or_function_call EntryY)))) ))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call AvailableDirections) = 
              (expr 
                (expr 
                  (variable_or_function_call AvailableDirections)) - 
                (expr 
                  (literal 1))))) \n) 
        (end_if_statement END IF)) \n statement \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call ContinueDirection) = 
          (expr 
            (expr 
              (literal 1)) - 
            (expr 
              (expr 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call AvailableDirections)) - 
                    (expr 
                      (literal 1))) )) * 
              (expr 
                (literal .25)))))) \n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call direction)) 
          (before_first_case \n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call CTOP)))) 
            (block \n 
              (statement 
                (if_inline_statement IF 
                  (expr 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call MazeArray 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call x)) , 
                                (expr 
                                  (variable_or_function_call y)) )) . top)) = 
                        (expr 
                          (literal 0))) AND 
                      (expr 
                        (expr 
                          (variable_or_function_call y)) > 
                        (expr 
                          (literal 1)))) AND 
                    (expr 
                      (expr 
                        (variable_or_function_call RND 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 1)) )))) < 
                      (expr 
                        (variable_or_function_call ContinueDirection)))) THEN 
                  (if_inline_action 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call GetMonsterDirection) = 
                        (expr 
                          (variable_or_function_call direction))))))) \n statement)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call CBOTTOM)))) 
            (block \n 
              (statement 
                (if_inline_statement IF 
                  (expr 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call MazeArray 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call x)) , 
                                (expr 
                                  (variable_or_function_call y)) )) . Bottom)) = 
                        (expr 
                          (literal 0))) AND 
                      (expr 
                        (expr 
                          (variable_or_function_call y)) < 
                        (expr 
                          (variable_or_function_call MazeHeight)))) AND 
                    (expr 
                      (expr 
                        (variable_or_function_call RND 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 1)) )))) < 
                      (expr 
                        (variable_or_function_call ContinueDirection)))) THEN 
                  (if_inline_action 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call GetMonsterDirection) = 
                        (expr 
                          (variable_or_function_call direction))))))) \n statement)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call CLEFT)))) 
            (block \n 
              (statement 
                (if_inline_statement IF 
                  (expr 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call MazeArray 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call x)) , 
                                (expr 
                                  (variable_or_function_call y)) )) . Left)) = 
                        (expr 
                          (literal 0))) AND 
                      (expr 
                        (expr 
                          (variable_or_function_call x)) > 
                        (expr 
                          (literal 1)))) AND 
                    (expr 
                      (expr 
                        (variable_or_function_call RND 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 1)) )))) < 
                      (expr 
                        (variable_or_function_call ContinueDirection)))) THEN 
                  (if_inline_action 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call GetMonsterDirection) = 
                        (expr 
                          (variable_or_function_call direction))))))) \n statement)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call CRIGHT)))) 
            (block \n 
              (statement 
                (if_inline_statement IF 
                  (expr 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call MazeArray 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call x)) , 
                                (expr 
                                  (variable_or_function_call y)) )) . Right)) = 
                        (expr 
                          (literal 0))) AND 
                      (expr 
                        (expr 
                          (variable_or_function_call x)) < 
                        (expr 
                          (variable_or_function_call MazeWidth)))) AND 
                    (expr 
                      (expr 
                        (variable_or_function_call RND 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 1)) )))) < 
                      (expr 
                        (variable_or_function_call ContinueDirection)))) THEN 
                  (if_inline_action 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call GetMonsterDirection) = 
                        (expr 
                          (variable_or_function_call direction))))))) \n statement)) 
          (case_block 
            (case_statement CASE ELSE) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call NewDirection) = 
                  (expr 
                    (variable_or_function_call TRUE)))) \n statement)) 
          (end_select_statement END SELECT))) \n statement \n 
      (statement 
        (if_inline_statement IF 
          (expr NOT 
            (expr 
              (variable_or_function_call NewDirection))) THEN 
          (if_inline_action 
            (statement 
              (exit_statement EXIT FUNCTION))))) \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call NewDirection) = 
          (expr 
            (expr 
              (variable_or_function_call INT 
                (args_or_indices 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call RND 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 1)) )))) * 
                      (expr 
                        (variable_or_function_call AvailableDirections))) )))) + 
            (expr 
              (literal 1))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Counter) = 
          (expr 
            (literal 1)))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (expr 
              (variable_or_function_call MazeArray 
                (args_or_indices 
                  ( 
                    (expr 
                      (variable_or_function_call x)) , 
                    (expr 
                      (variable_or_function_call y)) )) . top)) = 
            (expr 
              (literal 0))) AND 
          (expr 
            (expr 
              (variable_or_function_call y)) > 
            (expr 
              (literal 1)))) THEN \n 
        (then_block 
          (statement 
            (if_inline_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call NewDirection)) = 
                (expr 
                  (variable_or_function_call Counter))) THEN 
              (if_inline_action 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call GetMonsterDirection) = 
                    (expr 
                      (variable_or_function_call CTOP))))))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Counter) = 
              (expr 
                (expr 
                  (variable_or_function_call Counter)) + 
                (expr 
                  (literal 1))))) \n) 
        (end_if_statement END IF)) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (expr 
              (variable_or_function_call MazeArray 
                (args_or_indices 
                  ( 
                    (expr 
                      (variable_or_function_call x)) , 
                    (expr 
                      (variable_or_function_call y)) )) . Bottom)) = 
            (expr 
              (literal 0))) AND 
          (expr 
            (expr 
              (variable_or_function_call y)) < 
            (expr 
              (variable_or_function_call MazeHeight)))) THEN \n 
        (then_block 
          (statement 
            (if_inline_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call NewDirection)) = 
                (expr 
                  (variable_or_function_call Counter))) THEN 
              (if_inline_action 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call GetMonsterDirection) = 
                    (expr 
                      (variable_or_function_call CBOTTOM))))))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Counter) = 
              (expr 
                (expr 
                  (variable_or_function_call Counter)) + 
                (expr 
                  (literal 1))))) \n) 
        (end_if_statement END IF)) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (expr 
              (variable_or_function_call MazeArray 
                (args_or_indices 
                  ( 
                    (expr 
                      (variable_or_function_call x)) , 
                    (expr 
                      (variable_or_function_call y)) )) . Left)) = 
            (expr 
              (literal 0))) AND 
          (expr 
            (expr 
              (variable_or_function_call x)) > 
            (expr 
              (literal 1)))) THEN \n 
        (then_block 
          (statement 
            (if_inline_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call NewDirection)) = 
                (expr 
                  (variable_or_function_call Counter))) THEN 
              (if_inline_action 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call GetMonsterDirection) = 
                    (expr 
                      (variable_or_function_call CLEFT))))))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Counter) = 
              (expr 
                (expr 
                  (variable_or_function_call Counter)) + 
                (expr 
                  (literal 1))))) \n) 
        (end_if_statement END IF)) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (expr 
              (variable_or_function_call MazeArray 
                (args_or_indices 
                  ( 
                    (expr 
                      (variable_or_function_call x)) , 
                    (expr 
                      (variable_or_function_call y)) )) . Right)) = 
            (expr 
              (literal 0))) AND 
          (expr 
            (expr 
              (variable_or_function_call x)) < 
            (expr 
              (variable_or_function_call MazeWidth)))) THEN \n 
        (then_block 
          (statement 
            (if_inline_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call NewDirection)) = 
                (expr 
                  (variable_or_function_call Counter))) THEN 
              (if_inline_action 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call GetMonsterDirection) = 
                    (expr 
                      (variable_or_function_call CRIGHT))))))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Counter) = 
              (expr 
                (expr 
                  (variable_or_function_call Counter)) + 
                (expr 
                  (literal 1))))) \n) 
        (end_if_statement END IF)) \n statement \n statement) 
    (end_function_statement END FUNCTION)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id InitVariables) 
    (block \n statement \n 
      (statement 
        (key_statement KEY 
          (expr 
            (literal 15)) , 
          (expr 
            (expr 
              (variable_or_function_call CHR$ 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 0)) )))) + 
            (expr 
              (variable_or_function_call CHR$ 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 25)) ))))))) \n 
      (statement 
        (key_statement KEY 
          (expr 
            (literal 16)) , 
          (expr 
            (expr 
              (variable_or_function_call CHR$ 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 0)) )))) + 
            (expr 
              (variable_or_function_call CHR$ 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 16)) ))))))) \n 
      (statement 
        (key_statement KEY 
          (expr 
            (literal 21)) , 
          (expr 
            (expr 
              (variable_or_function_call CHR$ 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 128)) )))) + 
            (expr 
              (variable_or_function_call CHR$ 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 72)) ))))))) \n 
      (statement 
        (key_statement KEY 
          (expr 
            (literal 22)) , 
          (expr 
            (expr 
              (variable_or_function_call CHR$ 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 128)) )))) + 
            (expr 
              (variable_or_function_call CHR$ 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 75)) ))))))) \n 
      (statement 
        (key_statement KEY 
          (expr 
            (literal 23)) , 
          (expr 
            (expr 
              (variable_or_function_call CHR$ 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 128)) )))) + 
            (expr 
              (variable_or_function_call CHR$ 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 77)) ))))))) \n 
      (statement 
        (key_statement KEY 
          (expr 
            (literal 24)) , 
          (expr 
            (expr 
              (variable_or_function_call CHR$ 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 128)) )))) + 
            (expr 
              (variable_or_function_call CHR$ 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 80)) ))))))) \n statement \n statement \n 
      (statement 
        (on_event_gosub_statement ON KEY 
          ( 
            (expr 
              (literal 11)) ) GOSUB 
          (target 
            (text_label 
              (untyped_id MovePlayer1Up))))) \n 
      (statement 
        (on_event_gosub_statement ON KEY 
          ( 
            (expr 
              (literal 12)) ) GOSUB 
          (target 
            (text_label 
              (untyped_id MovePlayer1Left))))) \n 
      (statement 
        (on_event_gosub_statement ON KEY 
          ( 
            (expr 
              (literal 13)) ) GOSUB 
          (target 
            (text_label 
              (untyped_id MovePlayer1Right))))) \n 
      (statement 
        (on_event_gosub_statement ON KEY 
          ( 
            (expr 
              (literal 14)) ) GOSUB 
          (target 
            (text_label 
              (untyped_id MovePlayer1Down))))) \n 
      (statement 
        (on_event_gosub_statement ON KEY 
          ( 
            (expr 
              (literal 15)) ) GOSUB 
          (target 
            (text_label 
              (untyped_id PauseGame))))) \n 
      (statement 
        (on_event_gosub_statement ON KEY 
          ( 
            (expr 
              (literal 16)) ) GOSUB 
          (target 
            (text_label 
              (untyped_id QuitGame))))) \n 
      (statement 
        (on_event_gosub_statement ON KEY 
          ( 
            (expr 
              (literal 21)) ) GOSUB 
          (target 
            (text_label 
              (untyped_id MovePlayer1Up))))) \n 
      (statement 
        (on_event_gosub_statement ON KEY 
          ( 
            (expr 
              (literal 22)) ) GOSUB 
          (target 
            (text_label 
              (untyped_id MovePlayer1Left))))) \n 
      (statement 
        (on_event_gosub_statement ON KEY 
          ( 
            (expr 
              (literal 23)) ) GOSUB 
          (target 
            (text_label 
              (untyped_id MovePlayer1Right))))) \n 
      (statement 
        (on_event_gosub_statement ON KEY 
          ( 
            (expr 
              (literal 24)) ) GOSUB 
          (target 
            (text_label 
              (untyped_id MovePlayer1Down))))) \n 
      (statement 
        (on_event_gosub_statement ON TIMER 
          ( 
            (expr 
              (literal 1)) ) GOSUB 
          (target 
            (text_label 
              (untyped_id TimerUpdate))))) \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call NumOfPlayers)) = 
          (expr 
            (literal 2))) THEN \n 
        (then_block 
          (statement 
            (key_statement KEY 
              (expr 
                (literal 17)) , 
              (expr 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 0)) )))) + 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call UP2)) ))))))) \n 
          (statement 
            (key_statement KEY 
              (expr 
                (literal 18)) , 
              (expr 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 0)) )))) + 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call DOWN2)) ))))))) \n 
          (statement 
            (key_statement KEY 
              (expr 
                (literal 19)) , 
              (expr 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 0)) )))) + 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call LEFT2)) ))))))) \n 
          (statement 
            (key_statement KEY 
              (expr 
                (literal 20)) , 
              (expr 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 0)) )))) + 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call RIGHT2)) ))))))) \n 
          (statement 
            (on_event_gosub_statement ON KEY 
              ( 
                (expr 
                  (literal 17)) ) GOSUB 
              (target 
                (text_label 
                  (untyped_id MovePlayer2Up))))) \n 
          (statement 
            (on_event_gosub_statement ON KEY 
              ( 
                (expr 
                  (literal 18)) ) GOSUB 
              (target 
                (text_label 
                  (untyped_id MovePlayer2Down))))) \n 
          (statement 
            (on_event_gosub_statement ON KEY 
              ( 
                (expr 
                  (literal 19)) ) GOSUB 
              (target 
                (text_label 
                  (untyped_id MovePlayer2Left))))) \n 
          (statement 
            (on_event_gosub_statement ON KEY 
              ( 
                (expr 
                  (literal 20)) ) GOSUB 
              (target 
                (text_label 
                  (untyped_id MovePlayer2Right))))) \n) 
        (end_if_statement END IF)) \n statement \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 2)) 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Player 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call i)) )) . Score) = 
                (expr 
                  (literal 0)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Player 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call i)) )) . TimeLeft) = 
                (expr 
                  (literal 0)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Player 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call i)) )) . Done) = 
                (expr 
                  (variable_or_function_call FALSE)))) \n statement) NEXT i)) \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call ScreenMode)) = 
          (expr 
            (literal 7))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call MazeColor) = 
              (expr 
                (variable_or_function_call MAZECOLOR7)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Player 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 1)) )) . PColor) = 
              (expr 
                (variable_or_function_call PLAYER1COLOR7)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Player 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 2)) )) . PColor) = 
              (expr 
                (variable_or_function_call PLAYER2COLOR7)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call MonsterColor) = 
              (expr 
                (variable_or_function_call MONSTERCOLOR7)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call GameBkGround) = 
              (expr 
                (variable_or_function_call GAMEBKGROUND7)))) \n) 
        (else_block_statement ELSE 
          (else_block statement \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call MazeColor) = 
                (expr 
                  (variable_or_function_call MAZECOLOR1)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Player 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 1)) )) . PColor) = 
                (expr 
                  (variable_or_function_call PLAYER1COLOR1)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Player 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 2)) )) . PColor) = 
                (expr 
                  (variable_or_function_call PLAYER2COLOR1)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call MonsterColor) = 
                (expr 
                  (variable_or_function_call MONSTERCOLOR1)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call GameBkGround) = 
                (expr 
                  (variable_or_function_call GAMEBKGROUND1)))) \n)) 
        (end_if_statement END IF)) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call GameOver) = 
          (expr 
            (variable_or_function_call FALSE)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call MazesFinished) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call MazeTime) = 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call DEFAULTTIME)) + 
              (expr 
                (expr 
                  (variable_or_function_call AvailMonsters)) * 
                (expr 
                  (literal 5)))) - 
            (expr 
              (expr 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call Level)) - 
                    (expr 
                      (literal 1))) )) * 
              (expr 
                (literal 5)))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call MonsterUpdateTime) = 
          (expr 
            (variable_or_function_call DEFAULTMONSTERTIME)))) \n 
      (statement 
        (call_statement 
          (untyped_id RESTORE))) \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call Level)) 
          (block \n 
            (statement 
              (read_statement READ 
                (variable_or_function_call MazeWidth) , 
                (variable_or_function_call MazeHeight) , 
                (variable_or_function_call PathLength) , 
                (variable_or_function_call TurnRate))) \n statement) NEXT)) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call StartX) = 
          (expr 
            (expr 
              (expr 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (expr 
                          (literal 300)) / 
                        (expr 
                          (variable_or_function_call BLOCKSIZE))) - 
                      (expr 
                        (variable_or_function_call MazeWidth))) )) / 
                (expr 
                  (literal 2))) * 
              (expr 
                (variable_or_function_call BLOCKSIZE))) + 
            (expr 
              (literal 1))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call StartY) = 
          (expr 
            (expr 
              (expr 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (expr 
                          (literal 180)) / 
                        (expr 
                          (variable_or_function_call BLOCKSIZE))) - 
                      (expr 
                        (variable_or_function_call MazeHeight))) )) / 
                (expr 
                  (literal 2))) * 
              (expr 
                (variable_or_function_call BLOCKSIZE))) + 
            (expr 
              (literal 1))))) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id Keys) 
    ( 
      (parameter_list 
        (parameter onoff)) ) 
    (block \n statement \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 11)) TO 
          (expr 
            (literal 24)) 
          (block \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call onoff)) 
                (before_first_case \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal 1)))) 
                  (block \n 
                    (statement 
                      (event_control_statement KEY 
                        ( 
                          (expr 
                            (variable_or_function_call i)) ) ON)) \n statement)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal 2)))) 
                  (block \n 
                    (statement 
                      (event_control_statement KEY 
                        ( 
                          (expr 
                            (variable_or_function_call i)) ) OFF)) \n statement)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal 3)))) 
                  (block \n 
                    (statement 
                      (event_control_statement KEY 
                        ( 
                          (expr 
                            (variable_or_function_call i)) ) STOP)) \n statement)) 
                (end_select_statement END SELECT))) \n statement) NEXT i)) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id MonsterControl) STATIC 
    (block \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call UBOUND 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call Monsters)) )))) <> 
          (expr 
            (variable_or_function_call AvailMonsters))) THEN \n 
        (then_block 
          (statement 
            (dim_statement REDIM 
              (dim_variable 
                (untyped_id Monsters) 
                (dim_array_bounds 
                  ( 
                    (dim_subscript 
                      (expr 
                        (literal 1)) TO 
                      (expr 
                        (variable_or_function_call AvailMonsters))) )) AS 
                (type_name 
                  (untyped_id MonsterType))))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call NumMonsters) = 
              (expr 
                (literal 0)))) \n) 
        (end_if_statement END IF)) \n statement \n 
      (statement 
        (call_statement 
          (untyped_id Keys) 
          (call_argument_list 
            (call_argument 
              (expr 
                ( 
                  (expr 
                    (literal 3)) )))))) \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call NumMonsters)) 
          (block \n 
            (statement 
              (for_next_statement FOR j = 
                (expr 
                  (literal 1)) TO 
                (expr 
                  (variable_or_function_call NumOfPlayers)) 
                (block \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call Monsters 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call i)) )) . x)) = 
                          (expr 
                            (variable_or_function_call Player 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call j)) )) . x))) AND 
                        (expr 
                          (expr 
                            (variable_or_function_call Monsters 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call i)) )) . y)) = 
                          (expr 
                            (variable_or_function_call Player 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call j)) )) . y)))) AND 
                      (expr 
                        (variable_or_function_call Monsters 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call i)) )) . Active))) THEN \n 
                    (then_block 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Player 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call j)) )) . Dead) = 
                          (expr 
                            (variable_or_function_call TRUE)))) \n 
                      (statement 
                        (play_statement PLAY 
                          (expr 
                            (variable_or_function_call PLAYERDEATHSOUND)))) \n 
                      (statement 
                        (call_statement 
                          (untyped_id DrawPlayer) 
                          (call_argument_list 
                            (call_argument j) , 
                            (call_argument GameBkGround)))) \n) 
                    (end_if_statement END IF)) \n statement) NEXT j)) \n statement) NEXT i)) \n 
      (statement 
        (call_statement 
          (untyped_id Keys) 
          (call_argument_list 
            (call_argument 
              (expr 
                ( 
                  (expr 
                    (literal 1)) )))))) \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call NumMonsters)) < 
          (expr 
            (variable_or_function_call AvailMonsters))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call NumMonsters) = 
              (expr 
                (expr 
                  (variable_or_function_call NumMonsters)) + 
                (expr 
                  (literal 1))))) \n 
          (if_block_statement IF 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call NumMonsters)) MOD 
                (expr 
                  (literal 3))) = 
              (expr 
                (literal 1))) THEN \n 
            (then_block 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Monsters 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call NumMonsters)) )) . x) = 
                  (expr 
                    (variable_or_function_call ExitX)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Monsters 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call NumMonsters)) )) . y) = 
                  (expr 
                    (variable_or_function_call ExitY)))) \n) 
            (else_block_statement ELSE 
              (else_block statement \n statement \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call RandomPlace) = 
                    (expr 
                      (expr 
                        (variable_or_function_call INT 
                          (args_or_indices 
                            ( 
                              (expr 
                                (expr 
                                  (variable_or_function_call RND 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (literal 1)) )))) * 
                                (expr 
                                  ( 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call StackPointer)) - 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call StackPointer)) * 
                                        (expr 
                                          (literal .2)))) ))) )))) + 
                      (expr 
                        (expr 
                          (variable_or_function_call StackPointer)) * 
                        (expr 
                          (literal .2)))))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Monsters 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call NumMonsters)) )) . x) = 
                    (expr 
                      (variable_or_function_call stackVar 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call RandomPlace)) )) . x)))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Monsters 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call NumMonsters)) )) . y) = 
                    (expr 
                      (variable_or_function_call stackVar 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call RandomPlace)) )) . y)))) \n)) 
            (end_if_statement END IF)) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Monsters 
                (args_or_indices 
                  ( 
                    (expr 
                      (variable_or_function_call NumMonsters)) )) . Active) = 
              (expr 
                (variable_or_function_call TRUE)))) \n) 
        (end_if_statement END IF)) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (expr 
                (builtin_function TIMER)) - 
              (expr 
                (variable_or_function_call LastUpdate!))) < 
            (expr 
              (variable_or_function_call MonsterUpdateTime))) THEN 
          (if_inline_action 
            (statement 
              (exit_statement EXIT SUB))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call LastUpdate!) = 
          (expr 
            (builtin_function TIMER)))) \n statement \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call NumMonsters)) 
          (block \n 
            (if_block_statement IF 
              (expr 
                (variable_or_function_call Monsters 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call i)) )) . Active)) THEN \n 
              (then_block 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Dir) = 
                    (expr 
                      (variable_or_function_call GetMonsterDirection 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call Monsters 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call i)) )) . x)) , 
                            (expr 
                              (variable_or_function_call Monsters 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call i)) )) . y)) , 
                            (expr 
                              (variable_or_function_call Monsters 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call i)) )) . direction)) )))))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Monsters 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call i)) )) . direction) = 
                    (expr 
                      (variable_or_function_call Dir)))) \n 
                (statement 
                  (call_statement 
                    (untyped_id DrawMonster) 
                    (call_argument_list 
                      (call_argument 
                        (expr 
                          (variable_or_function_call Monsters 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call i)) )) . x))) , 
                      (call_argument 
                        (expr 
                          (variable_or_function_call Monsters 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call i)) )) . y))) , 
                      (call_argument GameBkGround)))) \n 
                (statement 
                  (call_statement 
                    (untyped_id ConvertDirToXY) 
                    (call_argument_list 
                      (call_argument Dir) , 
                      (call_argument xmove) , 
                      (call_argument ymove)))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Monsters 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call i)) )) . x) = 
                    (expr 
                      (expr 
                        (variable_or_function_call Monsters 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call i)) )) . x)) + 
                      (expr 
                        (variable_or_function_call xmove))))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Monsters 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call i)) )) . y) = 
                    (expr 
                      (expr 
                        (variable_or_function_call Monsters 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call i)) )) . y)) + 
                      (expr 
                        (variable_or_function_call ymove))))) \n 
                (statement 
                  (call_statement 
                    (untyped_id DrawMonster) 
                    (call_argument_list 
                      (call_argument 
                        (expr 
                          (variable_or_function_call Monsters 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call i)) )) . x))) , 
                      (call_argument 
                        (expr 
                          (variable_or_function_call Monsters 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call i)) )) . y))) , 
                      (call_argument MonsterColor)))) \n) 
              (end_if_statement END IF)) \n statement) NEXT i)) \n statement \n 
      (statement 
        (call_statement 
          (untyped_id Keys) 
          (call_argument_list 
            (call_argument 
              (expr 
                ( 
                  (expr 
                    (literal 3)) )))))) \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call NumMonsters)) 
          (block \n 
            (statement 
              (for_next_statement FOR j = 
                (expr 
                  (literal 1)) TO 
                (expr 
                  (variable_or_function_call NumOfPlayers)) 
                (block \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call Monsters 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call i)) )) . x)) = 
                          (expr 
                            (variable_or_function_call Player 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call j)) )) . x))) AND 
                        (expr 
                          (expr 
                            (variable_or_function_call Monsters 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call i)) )) . y)) = 
                          (expr 
                            (variable_or_function_call Player 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call j)) )) . y)))) AND 
                      (expr 
                        (variable_or_function_call Monsters 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call i)) )) . Active))) THEN \n 
                    (then_block 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Player 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call j)) )) . Dead) = 
                          (expr 
                            (variable_or_function_call TRUE)))) \n 
                      (statement 
                        (play_statement PLAY 
                          (expr 
                            (variable_or_function_call PLAYERDEATHSOUND)))) \n 
                      (statement 
                        (call_statement 
                          (untyped_id DrawPlayer) 
                          (call_argument_list 
                            (call_argument j) , 
                            (call_argument GameBkGround)))) \n) 
                    (end_if_statement END IF)) \n statement) NEXT j)) \n statement) NEXT i)) \n 
      (statement 
        (call_statement 
          (untyped_id Keys) 
          (call_argument_list 
            (call_argument 
              (expr 
                ( 
                  (expr 
                    (literal 1)) )))))) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (function_statement FUNCTION NumberOfWalls 
    ( 
      (parameter_list 
        (parameter x) , 
        (parameter y)) ) 
    (block \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call NumberOfWalls) = 
          (expr 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call MazeArray 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call x)) , 
                        (expr 
                          (variable_or_function_call y)) )) . top)) + 
                (expr 
                  (variable_or_function_call MazeArray 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call x)) , 
                        (expr 
                          (variable_or_function_call y)) )) . Bottom))) + 
              (expr 
                (variable_or_function_call MazeArray 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call x)) , 
                      (expr 
                        (variable_or_function_call y)) )) . Left))) + 
            (expr 
              (variable_or_function_call MazeArray 
                (args_or_indices 
                  ( 
                    (expr 
                      (variable_or_function_call x)) , 
                    (expr 
                      (variable_or_function_call y)) )) . Right))))) \n statement \n statement) 
    (end_function_statement END FUNCTION)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id PlayGame) 
    (block \n statement \n 
      (statement 
        (call_statement 
          (untyped_id PrintMaze))) \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call ExitY)) = 
          (expr 
            (variable_or_function_call MazeHeight))) THEN \n 
        (then_block 
          (statement 
            (line_statement LINE 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call StartX)) + 
                  (expr 
                    (expr 
                      (variable_or_function_call ExitX)) * 
                    (expr 
                      (variable_or_function_call BLOCKSIZE)))) , 
                (expr 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call StartY)) + 
                      (expr 
                        (expr 
                          (variable_or_function_call ExitY)) * 
                        (expr 
                          (variable_or_function_call BLOCKSIZE)))) + 
                    (expr 
                      (variable_or_function_call BLOCKSIZE))) - 
                  (expr 
                    (literal 1))) ) - 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call StartX)) + 
                  (expr 
                    (expr 
                      (variable_or_function_call ExitX)) * 
                    (expr 
                      (variable_or_function_call BLOCKSIZE)))) , 
                (expr 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call StartY)) + 
                      (expr 
                        (expr 
                          (variable_or_function_call ExitY)) * 
                        (expr 
                          (variable_or_function_call BLOCKSIZE)))) + 
                    (expr 
                      (variable_or_function_call BLOCKSIZE))) + 
                  (expr 
                    (literal 2))) ) , 
              (expr 
                (literal 12)) , 
              (box_style BF))) \n 
          (statement 
            (line_statement LINE 
              ( 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call StartX)) + 
                    (expr 
                      (expr 
                        (variable_or_function_call ExitX)) * 
                      (expr 
                        (variable_or_function_call BLOCKSIZE)))) + 
                  (expr 
                    (variable_or_function_call BLOCKSIZE))) , 
                (expr 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call StartY)) + 
                      (expr 
                        (expr 
                          (variable_or_function_call ExitY)) * 
                        (expr 
                          (variable_or_function_call BLOCKSIZE)))) + 
                    (expr 
                      (variable_or_function_call BLOCKSIZE))) - 
                  (expr 
                    (literal 1))) ) - 
              ( 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call StartX)) + 
                    (expr 
                      (expr 
                        (variable_or_function_call ExitX)) * 
                      (expr 
                        (variable_or_function_call BLOCKSIZE)))) + 
                  (expr 
                    (variable_or_function_call BLOCKSIZE))) , 
                (expr 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call StartY)) + 
                      (expr 
                        (expr 
                          (variable_or_function_call ExitY)) * 
                        (expr 
                          (variable_or_function_call BLOCKSIZE)))) + 
                    (expr 
                      (variable_or_function_call BLOCKSIZE))) + 
                  (expr 
                    (literal 2))) ) , 
              (expr 
                (literal 12)) , 
              (box_style BF))) \n) 
        (elseif_block_statement ELSEIF 
          (expr 
            (expr 
              (variable_or_function_call ExitY)) = 
            (expr 
              (literal 1))) THEN 
          (else_block statement \n 
            (statement 
              (line_statement LINE 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call StartX)) + 
                    (expr 
                      (expr 
                        (variable_or_function_call ExitX)) * 
                      (expr 
                        (variable_or_function_call BLOCKSIZE)))) , 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call StartY)) + 
                      (expr 
                        (expr 
                          (variable_or_function_call ExitY)) * 
                        (expr 
                          (variable_or_function_call BLOCKSIZE)))) - 
                    (expr 
                      (literal 2))) ) - 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call StartX)) + 
                    (expr 
                      (expr 
                        (variable_or_function_call ExitX)) * 
                      (expr 
                        (variable_or_function_call BLOCKSIZE)))) , 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call StartY)) + 
                      (expr 
                        (expr 
                          (variable_or_function_call ExitY)) * 
                        (expr 
                          (variable_or_function_call BLOCKSIZE)))) + 
                    (expr 
                      (literal 1))) ) , 
                (expr 
                  (literal 12)) , 
                (box_style BF))) \n 
            (statement 
              (line_statement LINE 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call StartX)) + 
                      (expr 
                        (expr 
                          (variable_or_function_call ExitX)) * 
                        (expr 
                          (variable_or_function_call BLOCKSIZE)))) + 
                    (expr 
                      (variable_or_function_call BLOCKSIZE))) , 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call StartY)) + 
                      (expr 
                        (expr 
                          (variable_or_function_call ExitY)) * 
                        (expr 
                          (variable_or_function_call BLOCKSIZE)))) - 
                    (expr 
                      (literal 2))) ) - 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call StartX)) + 
                      (expr 
                        (expr 
                          (variable_or_function_call ExitX)) * 
                        (expr 
                          (variable_or_function_call BLOCKSIZE)))) + 
                    (expr 
                      (variable_or_function_call BLOCKSIZE))) , 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call StartY)) + 
                      (expr 
                        (expr 
                          (variable_or_function_call ExitY)) * 
                        (expr 
                          (variable_or_function_call BLOCKSIZE)))) + 
                    (expr 
                      (literal 1))) ) , 
                (expr 
                  (literal 12)) , 
                (box_style BF))) \n)) 
        (elseif_block_statement ELSEIF 
          (expr 
            (expr 
              (variable_or_function_call ExitX)) = 
            (expr 
              (variable_or_function_call MazeWidth))) THEN 
          (else_block statement \n 
            (statement 
              (line_statement LINE 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call StartX)) + 
                        (expr 
                          (expr 
                            (variable_or_function_call ExitX)) * 
                          (expr 
                            (variable_or_function_call BLOCKSIZE)))) + 
                      (expr 
                        (variable_or_function_call BLOCKSIZE))) - 
                    (expr 
                      (literal 1))) , 
                  (expr 
                    (expr 
                      (variable_or_function_call StartY)) + 
                    (expr 
                      (expr 
                        (variable_or_function_call ExitY)) * 
                      (expr 
                        (variable_or_function_call BLOCKSIZE)))) ) - 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call StartX)) + 
                        (expr 
                          (expr 
                            (variable_or_function_call ExitX)) * 
                          (expr 
                            (variable_or_function_call BLOCKSIZE)))) + 
                      (expr 
                        (variable_or_function_call BLOCKSIZE))) + 
                    (expr 
                      (literal 2))) , 
                  (expr 
                    (expr 
                      (variable_or_function_call StartY)) + 
                    (expr 
                      (expr 
                        (variable_or_function_call ExitY)) * 
                      (expr 
                        (variable_or_function_call BLOCKSIZE)))) ) , 
                (expr 
                  (literal 12)) , 
                (box_style BF))) \n 
            (statement 
              (line_statement LINE 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call StartX)) + 
                        (expr 
                          (expr 
                            (variable_or_function_call ExitX)) * 
                          (expr 
                            (variable_or_function_call BLOCKSIZE)))) + 
                      (expr 
                        (variable_or_function_call BLOCKSIZE))) - 
                    (expr 
                      (literal 1))) , 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call StartY)) + 
                      (expr 
                        (expr 
                          (variable_or_function_call ExitY)) * 
                        (expr 
                          (variable_or_function_call BLOCKSIZE)))) + 
                    (expr 
                      (variable_or_function_call BLOCKSIZE))) ) - 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call StartX)) + 
                        (expr 
                          (expr 
                            (variable_or_function_call ExitX)) * 
                          (expr 
                            (variable_or_function_call BLOCKSIZE)))) + 
                      (expr 
                        (variable_or_function_call BLOCKSIZE))) + 
                    (expr 
                      (literal 2))) , 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call StartY)) + 
                      (expr 
                        (expr 
                          (variable_or_function_call ExitY)) * 
                        (expr 
                          (variable_or_function_call BLOCKSIZE)))) + 
                    (expr 
                      (variable_or_function_call BLOCKSIZE))) ) , 
                (expr 
                  (literal 12)) , 
                (box_style BF))) \n)) 
        (elseif_block_statement ELSEIF 
          (expr 
            (expr 
              (variable_or_function_call ExitX)) = 
            (expr 
              (literal 1))) THEN 
          (else_block statement \n 
            (statement 
              (line_statement LINE 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call StartX)) + 
                      (expr 
                        (expr 
                          (variable_or_function_call ExitX)) * 
                        (expr 
                          (variable_or_function_call BLOCKSIZE)))) - 
                    (expr 
                      (literal 2))) , 
                  (expr 
                    (expr 
                      (variable_or_function_call StartY)) + 
                    (expr 
                      (expr 
                        (variable_or_function_call ExitY)) * 
                      (expr 
                        (variable_or_function_call BLOCKSIZE)))) ) - 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call StartX)) + 
                      (expr 
                        (expr 
                          (variable_or_function_call ExitX)) * 
                        (expr 
                          (variable_or_function_call BLOCKSIZE)))) + 
                    (expr 
                      (literal 1))) , 
                  (expr 
                    (expr 
                      (variable_or_function_call StartY)) + 
                    (expr 
                      (expr 
                        (variable_or_function_call ExitY)) * 
                      (expr 
                        (variable_or_function_call BLOCKSIZE)))) ) , 
                (expr 
                  (literal 12)) , 
                (box_style BF))) \n 
            (statement 
              (line_statement LINE 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call StartX)) + 
                      (expr 
                        (expr 
                          (variable_or_function_call ExitX)) * 
                        (expr 
                          (variable_or_function_call BLOCKSIZE)))) - 
                    (expr 
                      (literal 2))) , 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call StartY)) + 
                      (expr 
                        (expr 
                          (variable_or_function_call ExitY)) * 
                        (expr 
                          (variable_or_function_call BLOCKSIZE)))) + 
                    (expr 
                      (variable_or_function_call BLOCKSIZE))) ) - 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call StartX)) + 
                      (expr 
                        (expr 
                          (variable_or_function_call ExitX)) * 
                        (expr 
                          (variable_or_function_call BLOCKSIZE)))) + 
                    (expr 
                      (literal 1))) , 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call StartY)) + 
                      (expr 
                        (expr 
                          (variable_or_function_call ExitY)) * 
                        (expr 
                          (variable_or_function_call BLOCKSIZE)))) + 
                    (expr 
                      (variable_or_function_call BLOCKSIZE))) ) , 
                (expr 
                  (literal 12)) , 
                (box_style BF))) \n)) 
        (end_if_statement END IF)) \n statement \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call NumOfPlayers)) 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Player 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call i)) )) . x) = 
                (expr 
                  (variable_or_function_call EntryX)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Player 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call i)) )) . y) = 
                (expr 
                  (variable_or_function_call EntryY)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Player 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call i)) )) . TimeLeft) = 
                (expr 
                  (literal 0)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Player 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call i)) )) . Done) = 
                (expr 
                  (variable_or_function_call FALSE)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Player 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call i)) )) . Dead) = 
                (expr 
                  (variable_or_function_call FALSE)))) \n 
            (statement 
              (call_statement 
                (untyped_id DrawPlayer) 
                (call_argument_list 
                  (call_argument i) , 
                  (call_argument 
                    (expr 
                      (variable_or_function_call Player 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call i)) )) . PColor)))))) \n statement) NEXT i)) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CountDown) = 
          (expr 
            (variable_or_function_call MazeTime)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call MazeOver) = 
          (expr 
            (variable_or_function_call FALSE)))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 1)) , 
          (expr 
            (literal 3)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Time left:")) ; 
          (expr 
            (variable_or_function_call CountDown)) ;)) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 1)) , 
          (expr 
            (literal 31)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Maze:")) ; 
          (expr 
            (variable_or_function_call MazesFinished)) ;)) \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call NumOfPlayers)) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (statement 
            (line_statement LINE 
              ( 
                (expr 
                  (literal 191)) , 
                (expr 
                  (literal 194)) ) - 
              ( 
                (expr 
                  (literal 194)) , 
                (expr 
                  (literal 197)) ) , 
              (expr 
                (variable_or_function_call Player 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 1)) )) . PColor)) , 
              (box_style BF))) \n 
          (statement 
            (locate_statement LOCATE 
              (expr 
                (literal 25)) , 
              (expr 
                (literal 15)))) \n) 
        (else_block_statement ELSE 
          (else_block statement \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 25)) , 
                (expr 
                  (literal 3)))) : 
            (statement 
              (print_statement PRINT 
                (expr 
                  (literal "Player 2:")) ;)) \n 
            (statement 
              (line_statement LINE 
                ( 
                  (expr 
                    (literal 93)) , 
                  (expr 
                    (literal 193)) ) - 
                ( 
                  (expr 
                    (literal 98)) , 
                  (expr 
                    (literal 198)) ) , 
                (expr 
                  (variable_or_function_call Player 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 2)) )) . PColor)) , 
                (box_style B))) \n 
            (statement 
              (line_statement LINE 
                ( 
                  (expr 
                    (literal 275)) , 
                  (expr 
                    (literal 193)) ) - 
                ( 
                  (expr 
                    (literal 278)) , 
                  (expr 
                    (literal 196)) ) , 
                (expr 
                  (variable_or_function_call Player 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 1)) )) . PColor)) , 
                (box_style BF))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 25)) , 
                (expr 
                  (literal 26)))) \n)) 
        (end_if_statement END IF)) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Player 1:")) ;)) \n 
      (statement 
        (call_statement 
          (untyped_id SOUND) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal 500))) , 
            (call_argument 
              (expr 
                (literal 3)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Keys) 
          (call_argument_list 
            (call_argument 
              (expr 
                ( 
                  (expr 
                    (literal 1)) )))))) \n 
      (statement 
        (event_control_statement TIMER ON)) \n statement \n statement \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (do_loop_statement DO 
                (block :) LOOP 
                (do_condition UNTIL 
                  (expr 
                    (expr 
                      (variable_or_function_call INKEY$)) = 
                    (expr 
                      (literal "")))))) \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call AvailMonsters)) > 
                  (expr 
                    (literal 0))) THEN 
                (if_inline_action 
                  (statement 
                    (call_statement 
                      (untyped_id MonsterControl)))))) \n statement \n 
            (statement 
              (for_next_statement FOR i = 
                (expr 
                  (literal 1)) TO 
                (expr 
                  (variable_or_function_call NumOfPlayers)) 
                (block \n 
                  (if_block_statement IF 
                    (expr 
                      (variable_or_function_call Player 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call i)) )) . Dead)) THEN \n 
                    (then_block 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Player 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call i)) )) . Dead) = 
                          (expr 
                            (variable_or_function_call FALSE)))) \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Player 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call i)) )) . x) = 
                          (expr 
                            (variable_or_function_call EntryX)))) \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Player 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call i)) )) . y) = 
                          (expr 
                            (variable_or_function_call EntryY)))) \n 
                      (statement 
                        (call_statement 
                          (untyped_id DrawPlayer) 
                          (call_argument_list 
                            (call_argument i) , 
                            (call_argument 
                              (expr 
                                (variable_or_function_call Player 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call i)) )) . PColor)))))) \n) 
                    (end_if_statement END IF)) \n statement) NEXT i)) \n statement \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call NumOfPlayers)) = 
                    (expr 
                      (literal 2))) AND 
                  (expr 
                    (variable_or_function_call Player 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 1)) )) . Done))) AND 
                (expr 
                  (variable_or_function_call Player 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 2)) )) . Done))) THEN \n 
              (then_block 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call MazeOver) = 
                    (expr 
                      (variable_or_function_call TRUE)))) \n) 
              (elseif_block_statement ELSEIF 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call NumOfPlayers)) = 
                    (expr 
                      (literal 1))) AND 
                  (expr 
                    (variable_or_function_call Player 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 1)) )) . Done))) THEN 
                (else_block statement \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call MazeOver) = 
                      (expr 
                        (variable_or_function_call TRUE)))) \n)) 
              (end_if_statement END IF)) \n statement) LOOP 
          (do_condition UNTIL 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call MazeOver)) OR 
                (expr 
                  (variable_or_function_call GameOver))) OR 
              (expr 
                (expr 
                  (variable_or_function_call CountDown)) = 
                (expr 
                  (literal 0))))))) \n 
      (statement 
        (event_control_statement TIMER OFF)) \n 
      (statement 
        (call_statement 
          (untyped_id Keys) 
          (call_argument_list 
            (call_argument 
              (expr 
                ( 
                  (expr 
                    (literal 2)) )))))) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id PopMove) 
    ( 
      (parameter_list 
        (parameter 
          (untyped_id move) AS 
          (type_name_for_parameter 
            (untyped_id MoveType)))) ) 
    (block \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call StackPointer)) <> 
          (expr 
            (literal 0))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call move) = 
              (expr 
                (variable_or_function_call stackVar 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call StackPointer)) )))))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call StackPointer) = 
              (expr 
                (expr 
                  (variable_or_function_call StackPointer)) - 
                (expr 
                  (literal 1))))) \n) 
        (else_block_statement ELSE 
          (else_block statement \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call MazeError) = 
                (expr 
                  (variable_or_function_call TRUE)))) \n)) 
        (end_if_statement END IF)) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id PrintBlock) 
    ( 
      (parameter_list 
        (parameter 
          (untyped_id block) AS 
          (type_name_for_parameter 
            (untyped_id MazeType))) , 
        (parameter x) , 
        (parameter y) , 
        (parameter WhatColor)) ) 
    (block \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call ActualX) = 
          (expr 
            (expr 
              (variable_or_function_call StartX)) + 
            (expr 
              (expr 
                (variable_or_function_call x)) * 
              (expr 
                (variable_or_function_call BLOCKSIZE)))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call ActualY) = 
          (expr 
            (expr 
              (variable_or_function_call StartY)) + 
            (expr 
              (expr 
                (variable_or_function_call y)) * 
              (expr 
                (variable_or_function_call BLOCKSIZE)))))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call block.top)) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (statement 
            (line_statement LINE 
              ( 
                (expr 
                  (variable_or_function_call ActualX)) , 
                (expr 
                  (variable_or_function_call ActualY)) ) - 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call ActualX)) + 
                  (expr 
                    (variable_or_function_call BLOCKSIZE))) , 
                (expr 
                  (variable_or_function_call ActualY)) ) , 
              (expr 
                (variable_or_function_call WhatColor)))) \n) 
        (else_block_statement ELSE 
          (else_block statement \n 
            (statement 
              (line_statement LINE 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call ActualX)) + 
                    (expr 
                      (literal 1))) , 
                  (expr 
                    (variable_or_function_call ActualY)) ) - 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call ActualX)) + 
                      (expr 
                        (variable_or_function_call BLOCKSIZE))) - 
                    (expr 
                      (literal 1))) , 
                  (expr 
                    (variable_or_function_call ActualY)) ) , 
                (expr 
                  (variable_or_function_call GameBkGround)))) \n)) 
        (end_if_statement END IF)) \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call block.Bottom)) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (statement 
            (line_statement LINE 
              ( 
                (expr 
                  (variable_or_function_call ActualX)) , 
                (expr 
                  (expr 
                    (variable_or_function_call ActualY)) + 
                  (expr 
                    (variable_or_function_call BLOCKSIZE))) ) - 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call ActualX)) + 
                  (expr 
                    (variable_or_function_call BLOCKSIZE))) , 
                (expr 
                  (expr 
                    (variable_or_function_call ActualY)) + 
                  (expr 
                    (variable_or_function_call BLOCKSIZE))) ) , 
              (expr 
                (variable_or_function_call WhatColor)))) \n) 
        (else_block_statement ELSE 
          (else_block statement \n 
            (statement 
              (line_statement LINE 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call ActualX)) + 
                    (expr 
                      (literal 1))) , 
                  (expr 
                    (expr 
                      (variable_or_function_call ActualY)) + 
                    (expr 
                      (variable_or_function_call BLOCKSIZE))) ) - 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call ActualX)) + 
                      (expr 
                        (variable_or_function_call BLOCKSIZE))) - 
                    (expr 
                      (literal 1))) , 
                  (expr 
                    (expr 
                      (variable_or_function_call ActualY)) + 
                    (expr 
                      (variable_or_function_call BLOCKSIZE))) ) , 
                (expr 
                  (variable_or_function_call GameBkGround)))) \n)) 
        (end_if_statement END IF)) \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call block.Left)) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (statement 
            (line_statement LINE 
              ( 
                (expr 
                  (variable_or_function_call ActualX)) , 
                (expr 
                  (variable_or_function_call ActualY)) ) - 
              ( 
                (expr 
                  (variable_or_function_call ActualX)) , 
                (expr 
                  (expr 
                    (variable_or_function_call ActualY)) + 
                  (expr 
                    (variable_or_function_call BLOCKSIZE))) ) , 
              (expr 
                (variable_or_function_call WhatColor)))) \n) 
        (else_block_statement ELSE 
          (else_block statement \n 
            (statement 
              (line_statement LINE 
                ( 
                  (expr 
                    (variable_or_function_call ActualX)) , 
                  (expr 
                    (expr 
                      (variable_or_function_call ActualY)) + 
                    (expr 
                      (literal 1))) ) - 
                ( 
                  (expr 
                    (variable_or_function_call ActualX)) , 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call ActualY)) + 
                      (expr 
                        (variable_or_function_call BLOCKSIZE))) - 
                    (expr 
                      (literal 1))) ) , 
                (expr 
                  (variable_or_function_call GameBkGround)))) \n)) 
        (end_if_statement END IF)) \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call block.Right)) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (statement 
            (line_statement LINE 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call ActualX)) + 
                  (expr 
                    (variable_or_function_call BLOCKSIZE))) , 
                (expr 
                  (variable_or_function_call ActualY)) ) - 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call ActualX)) + 
                  (expr 
                    (variable_or_function_call BLOCKSIZE))) , 
                (expr 
                  (expr 
                    (variable_or_function_call ActualY)) + 
                  (expr 
                    (variable_or_function_call BLOCKSIZE))) ) , 
              (expr 
                (variable_or_function_call WhatColor)))) \n) 
        (else_block_statement ELSE 
          (else_block statement \n 
            (statement 
              (line_statement LINE 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call ActualX)) + 
                    (expr 
                      (variable_or_function_call BLOCKSIZE))) , 
                  (expr 
                    (expr 
                      (variable_or_function_call ActualY)) + 
                    (expr 
                      (literal 1))) ) - 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call ActualX)) + 
                    (expr 
                      (variable_or_function_call BLOCKSIZE))) , 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call ActualY)) + 
                      (expr 
                        (variable_or_function_call BLOCKSIZE))) - 
                    (expr 
                      (literal 1))) ) , 
                (expr 
                  (variable_or_function_call GameBkGround)))) \n)) 
        (end_if_statement END IF)) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id PrintMaze) 
    (block \n statement \n 
      (if_block_statement IF 
        (expr 
          (variable_or_function_call ShowMaze)) THEN \n 
        (then_block 
          (statement 
            (for_next_statement FOR i = 
              (expr 
                (literal 1)) TO 
              (expr 
                (variable_or_function_call MazeHeight)) 
              (block \n 
                (statement 
                  (for_next_statement FOR j = 
                    (expr 
                      (literal 1)) TO 
                    (expr 
                      (variable_or_function_call MazeWidth)) 
                    (block \n 
                      (statement 
                        (call_statement 
                          (untyped_id PrintBlock) 
                          (call_argument_list 
                            (call_argument MazeArray 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call j)) , 
                                  (expr 
                                    (variable_or_function_call i)) ))) , 
                            (call_argument j) , 
                            (call_argument i) , 
                            (call_argument MazeColor)))) \n statement) NEXT j)) \n statement) NEXT i)) \n) 
        (else_block_statement ELSE 
          (else_block statement \n 
            (statement 
              (for_next_statement FOR i = 
                (expr 
                  (literal 1)) TO 
                (expr 
                  (variable_or_function_call MazeWidth)) 
                (block \n 
                  (statement 
                    (call_statement 
                      (untyped_id PrintBlock) 
                      (call_argument_list 
                        (call_argument MazeArray 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call i)) , 
                              (expr 
                                (literal 1)) ))) , 
                        (call_argument i) , 
                        (call_argument 
                          (expr 
                            (literal 1))) , 
                        (call_argument MazeColor)))) \n 
                  (statement 
                    (call_statement 
                      (untyped_id PrintBlock) 
                      (call_argument_list 
                        (call_argument MazeArray 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call i)) , 
                              (expr 
                                (variable_or_function_call MazeHeight)) ))) , 
                        (call_argument i) , 
                        (call_argument MazeHeight) , 
                        (call_argument MazeColor)))) \n statement) NEXT i)) \n 
            (statement 
              (for_next_statement FOR j = 
                (expr 
                  (literal 1)) TO 
                (expr 
                  (variable_or_function_call MazeHeight)) 
                (block \n 
                  (statement 
                    (call_statement 
                      (untyped_id PrintBlock) 
                      (call_argument_list 
                        (call_argument MazeArray 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 1)) , 
                              (expr 
                                (variable_or_function_call j)) ))) , 
                        (call_argument 
                          (expr 
                            (literal 1))) , 
                        (call_argument j) , 
                        (call_argument MazeColor)))) \n 
                  (statement 
                    (call_statement 
                      (untyped_id PrintBlock) 
                      (call_argument_list 
                        (call_argument MazeArray 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call MazeWidth)) , 
                              (expr 
                                (variable_or_function_call j)) ))) , 
                        (call_argument MazeWidth) , 
                        (call_argument j) , 
                        (call_argument MazeColor)))) \n statement) NEXT j)) \n)) 
        (end_if_statement END IF)) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id ProcessPlayerInput) 
    ( 
      (parameter_list 
        (parameter i)) ) 
    (block \n statement \n 
      (statement 
        (call_statement 
          (untyped_id Keys) 
          (call_argument_list 
            (call_argument 
              (expr 
                ( 
                  (expr 
                    (literal 3)) )))))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call PlayerMove 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call i)) )))) <> 
              (expr 
                (literal 0))) AND 
            (expr NOT 
              (expr 
                (variable_or_function_call Player 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call i)) )) . Done)))) AND 
          (expr NOT 
            (expr 
              (variable_or_function_call Player 
                (args_or_indices 
                  ( 
                    (expr 
                      (variable_or_function_call i)) )) . Dead)))) THEN \n 
        (then_block statement \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call ValMove) = 
              (expr 
                (variable_or_function_call FALSE)))) \n 
          (statement 
            (select_case_statement SELECT CASE 
              (expr 
                (variable_or_function_call PlayerMove 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call i)) )))) 
              (before_first_case \n) 
              (case_block 
                (case_statement CASE 
                  (case_expr 
                    (expr 
                      (variable_or_function_call CTOP)))) 
                (block \n 
                  (statement 
                    (if_inline_statement IF 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call MazeArray 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call Player 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call i)) )) . x)) , 
                                  (expr 
                                    (variable_or_function_call Player 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call i)) )) . y)) )) . top)) = 
                          (expr 
                            (literal 0))) AND 
                        (expr 
                          (expr 
                            (variable_or_function_call Player 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call i)) )) . y)) > 
                          (expr 
                            (literal 1)))) THEN 
                      (if_inline_action 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call ValMove) = 
                            (expr 
                              (variable_or_function_call TRUE))))))) \n statement)) 
              (case_block 
                (case_statement CASE 
                  (case_expr 
                    (expr 
                      (variable_or_function_call CBOTTOM)))) 
                (block \n 
                  (statement 
                    (if_inline_statement IF 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call MazeArray 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call Player 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call i)) )) . x)) , 
                                  (expr 
                                    (variable_or_function_call Player 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call i)) )) . y)) )) . Bottom)) = 
                          (expr 
                            (literal 0))) AND 
                        (expr 
                          (expr 
                            (variable_or_function_call Player 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call i)) )) . y)) < 
                          (expr 
                            (variable_or_function_call MazeHeight)))) THEN 
                      (if_inline_action 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call ValMove) = 
                            (expr 
                              (variable_or_function_call TRUE))))))) \n statement)) 
              (case_block 
                (case_statement CASE 
                  (case_expr 
                    (expr 
                      (variable_or_function_call CLEFT)))) 
                (block \n 
                  (statement 
                    (if_inline_statement IF 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call MazeArray 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call Player 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call i)) )) . x)) , 
                                  (expr 
                                    (variable_or_function_call Player 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call i)) )) . y)) )) . Left)) = 
                          (expr 
                            (literal 0))) AND 
                        (expr 
                          (expr 
                            (variable_or_function_call Player 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call i)) )) . x)) > 
                          (expr 
                            (literal 1)))) THEN 
                      (if_inline_action 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call ValMove) = 
                            (expr 
                              (variable_or_function_call TRUE))))))) \n statement)) 
              (case_block 
                (case_statement CASE 
                  (case_expr 
                    (expr 
                      (variable_or_function_call CRIGHT)))) 
                (block \n 
                  (statement 
                    (if_inline_statement IF 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call MazeArray 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call Player 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call i)) )) . x)) , 
                                  (expr 
                                    (variable_or_function_call Player 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call i)) )) . y)) )) . Right)) = 
                          (expr 
                            (literal 0))) AND 
                        (expr 
                          (expr 
                            (variable_or_function_call Player 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call i)) )) . x)) < 
                          (expr 
                            (variable_or_function_call MazeWidth)))) THEN 
                      (if_inline_action 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call ValMove) = 
                            (expr 
                              (variable_or_function_call TRUE))))))) \n statement)) 
              (end_select_statement END SELECT))) \n statement \n 
          (if_block_statement IF 
            (expr 
              (variable_or_function_call ValMove)) THEN \n 
            (then_block 
              (statement 
                (call_statement 
                  (untyped_id UpdatePosition) 
                  (call_argument_list 
                    (call_argument PlayerMove 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call i)) ))) , 
                    (call_argument i)))) \n) 
            (else_block_statement ELSE 
              (else_block statement \n 
                (statement 
                  (select_case_statement SELECT CASE 
                    (expr 
                      (variable_or_function_call PlayerMove 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call i)) )))) 
                    (before_first_case \n) 
                    (case_block 
                      (case_statement CASE 
                        (case_expr 
                          (expr 
                            (variable_or_function_call CTOP)))) 
                      (block \n 
                        (statement 
                          (if_inline_statement IF 
                            (expr 
                              (expr 
                                (expr 
                                  (variable_or_function_call MazeArray 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (variable_or_function_call Player 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (variable_or_function_call i)) )) . x)) , 
                                        (expr 
                                          (variable_or_function_call Player 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (variable_or_function_call i)) )) . y)) )) . top)) = 
                                (expr 
                                  (literal 0))) AND 
                              (expr 
                                (expr 
                                  (variable_or_function_call Player 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (variable_or_function_call i)) )) . y)) = 
                                (expr 
                                  (literal 1)))) THEN 
                            (if_inline_action 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call ValMove) = 
                                  (expr 
                                    (variable_or_function_call TRUE))))))) \n statement)) 
                    (case_block 
                      (case_statement CASE 
                        (case_expr 
                          (expr 
                            (variable_or_function_call CBOTTOM)))) 
                      (block \n 
                        (statement 
                          (if_inline_statement IF 
                            (expr 
                              (expr 
                                (expr 
                                  (variable_or_function_call MazeArray 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (variable_or_function_call Player 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (variable_or_function_call i)) )) . x)) , 
                                        (expr 
                                          (variable_or_function_call Player 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (variable_or_function_call i)) )) . y)) )) . Bottom)) = 
                                (expr 
                                  (literal 0))) AND 
                              (expr 
                                (expr 
                                  (variable_or_function_call Player 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (variable_or_function_call i)) )) . y)) = 
                                (expr 
                                  (variable_or_function_call MazeHeight)))) THEN 
                            (if_inline_action 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call ValMove) = 
                                  (expr 
                                    (variable_or_function_call TRUE))))))) \n statement)) 
                    (case_block 
                      (case_statement CASE 
                        (case_expr 
                          (expr 
                            (variable_or_function_call CLEFT)))) 
                      (block \n 
                        (statement 
                          (if_inline_statement IF 
                            (expr 
                              (expr 
                                (expr 
                                  (variable_or_function_call MazeArray 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (variable_or_function_call Player 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (variable_or_function_call i)) )) . x)) , 
                                        (expr 
                                          (variable_or_function_call Player 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (variable_or_function_call i)) )) . y)) )) . Left)) = 
                                (expr 
                                  (literal 0))) AND 
                              (expr 
                                (expr 
                                  (variable_or_function_call Player 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (variable_or_function_call i)) )) . x)) = 
                                (expr 
                                  (literal 1)))) THEN 
                            (if_inline_action 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call ValMove) = 
                                  (expr 
                                    (variable_or_function_call TRUE))))))) \n statement)) 
                    (case_block 
                      (case_statement CASE 
                        (case_expr 
                          (expr 
                            (variable_or_function_call CRIGHT)))) 
                      (block \n 
                        (statement 
                          (if_inline_statement IF 
                            (expr 
                              (expr 
                                (expr 
                                  (variable_or_function_call MazeArray 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (variable_or_function_call Player 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (variable_or_function_call i)) )) . x)) , 
                                        (expr 
                                          (variable_or_function_call Player 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (variable_or_function_call i)) )) . y)) )) . Right)) = 
                                (expr 
                                  (literal 0))) AND 
                              (expr 
                                (expr 
                                  (variable_or_function_call Player 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (variable_or_function_call i)) )) . x)) = 
                                (expr 
                                  (variable_or_function_call MazeWidth)))) THEN 
                            (if_inline_action 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call ValMove) = 
                                  (expr 
                                    (variable_or_function_call TRUE))))))) \n statement)) 
                    (end_select_statement END SELECT))) \n statement \n 
                (statement 
                  (if_inline_statement IF 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call Player 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call i)) )) . x)) <> 
                        (expr 
                          (variable_or_function_call ExitX))) OR 
                      (expr 
                        (expr 
                          (variable_or_function_call Player 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call i)) )) . y)) <> 
                        (expr 
                          (variable_or_function_call ExitY)))) THEN 
                    (if_inline_action 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call ValMove) = 
                          (expr 
                            (variable_or_function_call FALSE))))))) \n statement \n 
                (if_block_statement IF 
                  (expr 
                    (variable_or_function_call ValMove)) THEN \n 
                  (then_block 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Player 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call i)) )) . Done) = 
                        (expr 
                          (variable_or_function_call TRUE)))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Player 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call i)) )) . TimeLeft) = 
                        (expr 
                          (variable_or_function_call CountDown)))) \n 
                    (statement 
                      (call_statement 
                        (untyped_id UpdatePosition) 
                        (call_argument_list 
                          (call_argument PlayerMove 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call i)) ))) , 
                          (call_argument i)))) \n 
                    (statement 
                      (play_statement PLAY 
                        (expr 
                          (variable_or_function_call PLAYEROUTSOUND)))) \n statement \n) 
                  (end_if_statement END IF)) \n)) 
            (end_if_statement END IF)) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call PlayerMove 
                (args_or_indices 
                  ( 
                    (expr 
                      (variable_or_function_call i)) ))) = 
              (expr 
                (literal 0)))) \n) 
        (end_if_statement END IF)) \n 
      (statement 
        (call_statement 
          (untyped_id Keys) 
          (call_argument_list 
            (call_argument 
              (expr 
                ( 
                  (expr 
                    (literal 1)) )))))) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id UpdatePosition) 
    ( 
      (parameter_list 
        (parameter Dir) , 
        (parameter Plr)) ) 
    (block \n statement \n 
      (statement 
        (call_statement 
          (untyped_id DrawPlayer) 
          (call_argument_list 
            (call_argument Plr) , 
            (call_argument GameBkGround)))) \n 
      (statement 
        (call_statement 
          (untyped_id ConvertDirToXY) 
          (call_argument_list 
            (call_argument Dir) , 
            (call_argument xmove) , 
            (call_argument ymove)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Player 
            (args_or_indices 
              ( 
                (expr 
                  (variable_or_function_call Plr)) )) . x) = 
          (expr 
            (expr 
              (variable_or_function_call Player 
                (args_or_indices 
                  ( 
                    (expr 
                      (variable_or_function_call Plr)) )) . x)) + 
            (expr 
              (variable_or_function_call xmove))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Player 
            (args_or_indices 
              ( 
                (expr 
                  (variable_or_function_call Plr)) )) . y) = 
          (expr 
            (expr 
              (variable_or_function_call Player 
                (args_or_indices 
                  ( 
                    (expr 
                      (variable_or_function_call Plr)) )) . y)) + 
            (expr 
              (variable_or_function_call ymove))))) \n statement \n 
      (if_block_statement IF 
        (expr NOT 
          (expr 
            (variable_or_function_call ShowMaze))) THEN \n 
        (then_block 
          (if_block_statement IF 
            (expr 
              (expr 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call Player 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call Plr)) )) . x)) >= 
                    (expr 
                      (literal 1))) AND 
                  (expr 
                    (expr 
                      (variable_or_function_call Player 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call Plr)) )) . x)) <= 
                    (expr 
                      (variable_or_function_call MazeWidth)))) AND 
                (expr 
                  (expr 
                    (variable_or_function_call Player 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call Plr)) )) . y)) >= 
                  (expr 
                    (literal 1)))) AND 
              (expr 
                (expr 
                  (variable_or_function_call Player 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call Plr)) )) . y)) <= 
                (expr 
                  (variable_or_function_call MazeHeight)))) THEN \n 
            (then_block 
              (statement 
                (call_statement 
                  (untyped_id PrintBlock) 
                  (call_argument_list 
                    (call_argument MazeArray 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call Player 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call Plr)) )) . x)) , 
                          (expr 
                            (variable_or_function_call Player 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call Plr)) )) . y)) ))) , 
                    (call_argument 
                      (expr 
                        (variable_or_function_call Player 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call Plr)) )) . x))) , 
                    (call_argument 
                      (expr 
                        (variable_or_function_call Player 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call Plr)) )) . y))) , 
                    (call_argument MazeColor)))) \n 
              (statement 
                (if_inline_statement IF 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call Player 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call Plr)) )) . x)) - 
                      (expr 
                        (literal 1))) > 
                    (expr 
                      (literal 0))) THEN 
                  (if_inline_action 
                    (statement 
                      (call_statement 
                        (untyped_id PrintBlock) 
                        (call_argument_list 
                          (call_argument MazeArray 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call Player 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call Plr)) )) . x)) - 
                                  (expr 
                                    (literal 1))) , 
                                (expr 
                                  (variable_or_function_call Player 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (variable_or_function_call Plr)) )) . y)) ))) , 
                          (call_argument 
                            (expr 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call Player 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call Plr)) )) . x)) - 
                                  (expr 
                                    (literal 1))) ))) , 
                          (call_argument 
                            (expr 
                              (variable_or_function_call Player 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call Plr)) )) . y))) , 
                          (call_argument MazeColor))))))) \n 
              (statement 
                (if_inline_statement IF 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call Player 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call Plr)) )) . x)) + 
                      (expr 
                        (literal 1))) <= 
                    (expr 
                      (variable_or_function_call MazeWidth))) THEN 
                  (if_inline_action 
                    (statement 
                      (call_statement 
                        (untyped_id PrintBlock) 
                        (call_argument_list 
                          (call_argument MazeArray 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call Player 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call Plr)) )) . x)) + 
                                  (expr 
                                    (literal 1))) , 
                                (expr 
                                  (variable_or_function_call Player 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (variable_or_function_call Plr)) )) . y)) ))) , 
                          (call_argument 
                            (expr 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call Player 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call Plr)) )) . x)) + 
                                  (expr 
                                    (literal 1))) ))) , 
                          (call_argument 
                            (expr 
                              (variable_or_function_call Player 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call Plr)) )) . y))) , 
                          (call_argument MazeColor))))))) \n 
              (statement 
                (if_inline_statement IF 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call Player 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call Plr)) )) . y)) - 
                      (expr 
                        (literal 1))) > 
                    (expr 
                      (literal 0))) THEN 
                  (if_inline_action 
                    (statement 
                      (call_statement 
                        (untyped_id PrintBlock) 
                        (call_argument_list 
                          (call_argument MazeArray 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call Player 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (variable_or_function_call Plr)) )) . x)) , 
                                (expr 
                                  (expr 
                                    (variable_or_function_call Player 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call Plr)) )) . y)) - 
                                  (expr 
                                    (literal 1))) ))) , 
                          (call_argument 
                            (expr 
                              (variable_or_function_call Player 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call Plr)) )) . x))) , 
                          (call_argument 
                            (expr 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call Player 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call Plr)) )) . y)) - 
                                  (expr 
                                    (literal 1))) ))) , 
                          (call_argument MazeColor))))))) \n 
              (statement 
                (if_inline_statement IF 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call Player 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call Plr)) )) . y)) + 
                      (expr 
                        (literal 1))) <= 
                    (expr 
                      (variable_or_function_call MazeHeight))) THEN 
                  (if_inline_action 
                    (statement 
                      (call_statement 
                        (untyped_id PrintBlock) 
                        (call_argument_list 
                          (call_argument MazeArray 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call Player 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (variable_or_function_call Plr)) )) . x)) , 
                                (expr 
                                  (expr 
                                    (variable_or_function_call Player 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call Plr)) )) . y)) + 
                                  (expr 
                                    (literal 1))) ))) , 
                          (call_argument 
                            (expr 
                              (variable_or_function_call Player 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call Plr)) )) . x))) , 
                          (call_argument 
                            (expr 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call Player 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call Plr)) )) . y)) + 
                                  (expr 
                                    (literal 1))) ))) , 
                          (call_argument MazeColor))))))) \n) 
            (end_if_statement END IF)) \n) 
        (end_if_statement END IF)) \n 
      (statement 
        (call_statement 
          (untyped_id DrawPlayer) 
          (call_argument_list 
            (call_argument Plr) , 
            (call_argument 
              (expr 
                (variable_or_function_call Player 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Plr)) )) . PColor)))))) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (function_statement FUNCTION ValidBustDir 
    ( 
      (parameter_list 
        (parameter x) , 
        (parameter y)) ) 
    (block \n statement \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id BreakableWalls) AS 
            (type_name 
              (untyped_id MazeType))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call BreakableWalls) = 
          (expr 
            (variable_or_function_call MazeArray 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call x)) , 
                  (expr 
                    (variable_or_function_call y)) )))))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call x)) = 
            (expr 
              (literal 1))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call BreakableWalls.Left) = 
                (expr 
                  (literal 0))))))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call x)) = 
            (expr 
              (variable_or_function_call MazeWidth))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call BreakableWalls.Right) = 
                (expr 
                  (literal 0))))))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call y)) = 
            (expr 
              (literal 1))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call BreakableWalls.top) = 
                (expr 
                  (literal 0))))))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call y)) = 
            (expr 
              (variable_or_function_call MazeHeight))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call BreakableWalls.Bottom) = 
                (expr 
                  (literal 0))))))) \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call AvailableMoves) = 
          (expr 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call BreakableWalls.Left)) + 
                (expr 
                  (variable_or_function_call BreakableWalls.Right))) + 
              (expr 
                (variable_or_function_call BreakableWalls.top))) + 
            (expr 
              (variable_or_function_call BreakableWalls.Bottom))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call NewDirection) = 
          (expr 
            (expr 
              (variable_or_function_call INT 
                (args_or_indices 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call RND 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 1)) )))) * 
                      (expr 
                        (variable_or_function_call AvailableMoves))) )))) + 
            (expr 
              (literal 1))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Counter) = 
          (expr 
            (literal 1)))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call BreakableWalls.top)) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (statement 
            (if_inline_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call NewDirection)) = 
                (expr 
                  (variable_or_function_call Counter))) THEN 
              (if_inline_action 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call ValidBustDir) = 
                    (expr 
                      (variable_or_function_call CTOP))))))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Counter) = 
              (expr 
                (expr 
                  (variable_or_function_call Counter)) + 
                (expr 
                  (literal 1))))) \n) 
        (end_if_statement END IF)) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call BreakableWalls.Bottom)) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (statement 
            (if_inline_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call NewDirection)) = 
                (expr 
                  (variable_or_function_call Counter))) THEN 
              (if_inline_action 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call ValidBustDir) = 
                    (expr 
                      (variable_or_function_call CBOTTOM))))))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Counter) = 
              (expr 
                (expr 
                  (variable_or_function_call Counter)) + 
                (expr 
                  (literal 1))))) \n) 
        (end_if_statement END IF)) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call BreakableWalls.Left)) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (statement 
            (if_inline_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call NewDirection)) = 
                (expr 
                  (variable_or_function_call Counter))) THEN 
              (if_inline_action 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call ValidBustDir) = 
                    (expr 
                      (variable_or_function_call CLEFT))))))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Counter) = 
              (expr 
                (expr 
                  (variable_or_function_call Counter)) + 
                (expr 
                  (literal 1))))) \n) 
        (end_if_statement END IF)) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call BreakableWalls.Right)) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (statement 
            (if_inline_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call NewDirection)) = 
                (expr 
                  (variable_or_function_call Counter))) THEN 
              (if_inline_action 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call ValidBustDir) = 
                    (expr 
                      (variable_or_function_call CRIGHT))))))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Counter) = 
              (expr 
                (expr 
                  (variable_or_function_call Counter)) + 
                (expr 
                  (literal 1))))) \n) 
        (end_if_statement END IF)) \n statement \n statement) 
    (end_function_statement END FUNCTION)) \n <EOF>)
