(program \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n 
  (statement 
    (deftype_statement DEFINT 
      (letter_range A - Z))) \n \n \n 
  (declare_statement DECLARE SUB 
    (untyped_id DoSun) 
    ( 
      (declare_parameter_list 
        (declare_parameter Mouth)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id SetScreen) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id EndGame) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id Center) 
    ( 
      (declare_parameter_list 
        (declare_parameter Row) , 
        (declare_parameter Text$)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id Intro) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id SparklePause) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id GetInputs) 
    ( 
      (declare_parameter_list 
        (declare_parameter Player1$) , 
        (declare_parameter Player2$) , 
        (declare_parameter NumGames)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id PlayGame) 
    ( 
      (declare_parameter_list 
        (declare_parameter Player1$) , 
        (declare_parameter Player2$) , 
        (declare_parameter NumGames)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DoExplosion) 
    ( 
      (declare_parameter_list 
        (declare_parameter x#) , 
        (declare_parameter y#)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id MakeCityScape) 
    ( 
      (declare_parameter_list 
        (declare_parameter 
          (untyped_id BCoor) 
          (array_declaration 
            ( )) AS 
          (type_name_for_declare_parameter ANY))) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id PlaceGorillas) 
    ( 
      (declare_parameter_list 
        (declare_parameter 
          (untyped_id BCoor) 
          (array_declaration 
            ( )) AS 
          (type_name_for_declare_parameter ANY))) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id UpdateScores) 
    ( 
      (declare_parameter_list 
        (declare_parameter Record 
          (array_declaration 
            ( ))) , 
        (declare_parameter PlayerNum) , 
        (declare_parameter Results)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DrawGorilla) 
    ( 
      (declare_parameter_list 
        (declare_parameter x) , 
        (declare_parameter y) , 
        (declare_parameter arms)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id GorillaIntro) 
    ( 
      (declare_parameter_list 
        (declare_parameter Player1$) , 
        (declare_parameter Player2$)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id Rest) 
    ( 
      (declare_parameter_list 
        (declare_parameter t#)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id VictoryDance) 
    ( 
      (declare_parameter_list 
        (declare_parameter Player)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id ClearGorillas) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DrawBan) 
    ( 
      (declare_parameter_list 
        (declare_parameter xc#) , 
        (declare_parameter yc#) , 
        (declare_parameter r) , 
        (declare_parameter bc)) )) \n 
  (declare_statement DECLARE FUNCTION Scl 
    ( 
      (declare_parameter_list 
        (declare_parameter n!)) )) \n 
  (declare_statement DECLARE FUNCTION GetNum# 
    ( 
      (declare_parameter_list 
        (declare_parameter Row) , 
        (declare_parameter Col)) )) \n 
  (declare_statement DECLARE FUNCTION DoShot 
    ( 
      (declare_parameter_list 
        (declare_parameter PlayerNum) , 
        (declare_parameter x) , 
        (declare_parameter y)) )) \n 
  (declare_statement DECLARE FUNCTION ExplodeGorilla 
    ( 
      (declare_parameter_list 
        (declare_parameter x#) , 
        (declare_parameter y#)) )) \n 
  (declare_statement DECLARE FUNCTION Getn# 
    ( 
      (declare_parameter_list 
        (declare_parameter Row) , 
        (declare_parameter Col)) )) \n 
  (declare_statement DECLARE FUNCTION PlotShot 
    ( 
      (declare_parameter_list 
        (declare_parameter StartX) , 
        (declare_parameter StartY) , 
        (declare_parameter Angle#) , 
        (declare_parameter Velocity) , 
        (declare_parameter PlayerNum)) )) \n 
  (declare_statement DECLARE FUNCTION CalcDelay! 
    ( )) \n \n \n \n \n \n 
  (type_statement TYPE 
    (untyped_id XYPoint) \n 
    (type_element 
      (untyped_id XCoor) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id YCoor) AS 
      (type_name_for_type_element INTEGER) \n) END TYPE) \n \n \n 
  (statement 
    (const_statement CONST 
      (const_assignment SPEEDCONST = 
        (const_expr 
          (expr 
            (literal 500)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment TRUE = 
        (const_expr 
          (expr - 
            (expr 
              (literal 1))))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment FALSE = 
        (const_expr 
          (expr NOT 
            (expr 
              (variable_or_function_call TRUE))))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment HITSELF = 
        (const_expr 
          (expr 
            (literal 1)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment BACKATTR = 
        (const_expr 
          (expr 
            (literal 0)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment OBJECTCOLOR = 
        (const_expr 
          (expr 
            (literal 1)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment WINDOWCOLOR = 
        (const_expr 
          (expr 
            (literal 14)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment SUNATTR = 
        (const_expr 
          (expr 
            (literal 3)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment SUNHAPPY = 
        (const_expr 
          (expr 
            (variable_or_function_call FALSE)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment SUNSHOCK = 
        (const_expr 
          (expr 
            (variable_or_function_call TRUE)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment RIGHTUP = 
        (const_expr 
          (expr 
            (literal 1)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment LEFTUP = 
        (const_expr 
          (expr 
            (literal 2)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment ARMSDOWN = 
        (const_expr 
          (expr 
            (literal 3)))))) \n \n \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable GorillaX 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 2))) ))))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable GorillaY 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 2))) ))))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable LastBuilding))) \n \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable pi#))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable LBan& 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (variable_or_function_call x))) ))) , 
      (dim_variable RBan& 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (variable_or_function_call x))) ))) , 
      (dim_variable UBan& 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (variable_or_function_call x))) ))) , 
      (dim_variable DBan& 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (variable_or_function_call x))) ))))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable GorD& 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 120))) ))))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable GorL& 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 120))) ))))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable GorR& 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 120))) ))))) \n \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable gravity#))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable Wind))) \n \n \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable ScrHeight))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable ScrWidth))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable Mode))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable MaxCol))) \n \n \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable ExplosionColor))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable SunColor))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable BackColor))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable SunHit))) \n \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable SunHt))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable GHeight))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id MachSpeed) AS 
        (type_name SINGLE)))) \n \n 
  (def_fn_statement DEF FnRan 
    ( 
      (def_fn_parameter_list 
        (def_fn_parameter x)) ) = 
    (expr 
      (expr 
        (variable_or_function_call INT 
          (args_or_indices 
            ( 
              (expr 
                (expr 
                  (variable_or_function_call RND 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 1)) )))) * 
                (expr 
                  (variable_or_function_call x))) )))) + 
      (expr 
        (literal 1)))) \n 
  (statement 
    (def_seg_statement DEF SEG = 
      (expr 
        (literal 0)))) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call KeyFlags) = 
      (expr 
        (variable_or_function_call PEEK 
          (args_or_indices 
            ( 
              (expr 
                (literal 1047)) )))))) \n 
  (if_block_statement IF 
    (expr 
      (expr 
        ( 
          (expr 
            (expr 
              (variable_or_function_call KeyFlags)) AND 
            (expr 
              (literal 32))) )) = 
      (expr 
        (literal 0))) THEN \n 
    (then_block 
      (statement 
        (call_statement 
          (untyped_id POKE) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal 1047))) , 
            (call_argument 
              (expr 
                (expr 
                  (variable_or_function_call KeyFlags)) OR 
                (expr 
                  (literal 32))))))) \n) 
    (end_if_statement END IF)) \n 
  (statement 
    (def_seg_statement DEF SEG)) \n \n 
  (statement 
    (gosub_statement GOSUB 
      (target 
        (text_label 
          (untyped_id InitVars))))) \n 
  (statement 
    (call_statement 
      (untyped_id Intro))) \n 
  (statement 
    (call_statement 
      (untyped_id GetInputs) 
      (call_argument_list 
        (call_argument Name1$) , 
        (call_argument Name2$) , 
        (call_argument NumGames)))) \n 
  (statement 
    (call_statement 
      (untyped_id GorillaIntro) 
      (call_argument_list 
        (call_argument Name1$) , 
        (call_argument Name2$)))) \n 
  (statement 
    (call_statement 
      (untyped_id PlayGame) 
      (call_argument_list 
        (call_argument Name1$) , 
        (call_argument Name2$) , 
        (call_argument NumGames)))) \n \n 
  (statement 
    (def_seg_statement DEF SEG = 
      (expr 
        (literal 0)))) \n 
  (statement 
    (call_statement 
      (untyped_id POKE) 
      (call_argument_list 
        (call_argument 
          (expr 
            (literal 1047))) , 
        (call_argument KeyFlags)))) \n 
  (statement 
    (def_seg_statement DEF SEG)) \n 
  (statement 
    (end_statement END)) \n \n \n 
  (label 
    (text_label 
      (untyped_id CGABanana)) :) \n \n 
  (statement 
    (data_statement DATA 
      (data_item 327686) , 
      (data_item -252645316) , 
      (data_item 60))) \n \n 
  (statement 
    (data_statement DATA 
      (data_item 196618) , 
      (data_item -1057030081) , 
      (data_item 49344))) \n \n 
  (statement 
    (data_statement DATA 
      (data_item 196618) , 
      (data_item -1056980800) , 
      (data_item 63))) \n \n 
  (statement 
    (data_statement DATA 
      (data_item 327686) , 
      (data_item 1010580720) , 
      (data_item 240))) \n \n 
  (label 
    (text_label 
      (untyped_id EGABanana)) :) \n \n 
  (statement 
    (data_statement DATA 
      (data_item 458758) , 
      (data_item 202116096) , 
      (data_item 471604224) , 
      (data_item 943208448) , 
      (data_item 943208448) , 
      (data_item 943208448) , 
      (data_item 471604224) , 
      (data_item 202116096) , 
      (data_item 0))) \n \n 
  (statement 
    (data_statement DATA 
      (data_item 262153) , 
      (data_item -2134835200) , 
      (data_item -2134802239) , 
      (data_item -2130771968) , 
      (data_item -2130738945) , 
      (data_item 8323072) , 
      (data_item 8323199) , 
      (data_item 4063232) , 
      (data_item 4063294))) \n \n 
  (statement 
    (data_statement DATA 
      (data_item 262153) , 
      (data_item 4063232) , 
      (data_item 4063294) , 
      (data_item 8323072) , 
      (data_item 8323199) , 
      (data_item -2130771968) , 
      (data_item -2130738945) , 
      (data_item -2134835200) , 
      (data_item -2134802239))) \n \n 
  (statement 
    (data_statement DATA 
      (data_item 458758) , 
      (data_item -1061109760) , 
      (data_item -522133504) , 
      (data_item 1886416896) , 
      (data_item 1886416896) , 
      (data_item 1886416896) , 
      (data_item -522133504) , 
      (data_item -1061109760) , 
      (data_item 0))) \n \n 
  (label 
    (text_label 
      (untyped_id InitVars)) :) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call pi#) = 
      (expr 
        (expr 
          (literal 4)) * 
        (expr 
          (variable_or_function_call ATN 
            (args_or_indices 
              ( 
                (expr 
                  (literal 1#)) ))))))) \n \n \n 
  (statement 
    (on_error_statement ON ERROR GOTO 
      (target 
        (text_label 
          (untyped_id ScreenModeError))))) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call Mode) = 
      (expr 
        (literal 9)))) \n 
  (statement 
    (screen_statement SCREEN 
      (expr 
        (variable_or_function_call Mode)))) \n 
  (statement 
    (on_error_statement ON ERROR GOTO 
      (target 
        (text_label 
          (untyped_id PaletteError))))) \n 
  (statement 
    (if_inline_statement IF 
      (expr 
        (expr 
          (variable_or_function_call Mode)) = 
        (expr 
          (literal 9))) THEN 
      (if_inline_action 
        (statement 
          (palette_statement PALETTE 
            (expr 
              (literal 4)) , 
            (expr 
              (literal 0))))))) \n 
  (statement 
    (on_error_statement ON ERROR GOTO 
      (target 
        (line_number 0)))) \n \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call MachSpeed) = 
      (expr 
        (variable_or_function_call CalcDelay)))) \n \n 
  (if_block_statement IF 
    (expr 
      (expr 
        (variable_or_function_call Mode)) = 
      (expr 
        (literal 9))) THEN \n 
    (then_block 
      (statement 
        (assignment_statement 
          (variable_or_function_call ScrWidth) = 
          (expr 
            (literal 640)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call ScrHeight) = 
          (expr 
            (literal 350)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call GHeight) = 
          (expr 
            (literal 25)))) \n 
      (statement 
        (call_statement 
          (untyped_id RESTORE) 
          (call_argument_list 
            (call_argument EGABanana)))) \n 
      (statement 
        (dim_statement REDIM 
          (dim_variable LBan& 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 8))) ))) , 
          (dim_variable RBan& 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 8))) ))) , 
          (dim_variable UBan& 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 8))) ))) , 
          (dim_variable DBan& 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 8))) ))))) \n \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 0)) TO 
          (expr 
            (literal 8)) 
          (block \n 
            (statement 
              (read_statement READ 
                (variable_or_function_call LBan& 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call i)) ))))) \n) NEXT i)) \n \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 0)) TO 
          (expr 
            (literal 8)) 
          (block \n 
            (statement 
              (read_statement READ 
                (variable_or_function_call DBan& 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call i)) ))))) \n) NEXT i)) \n \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 0)) TO 
          (expr 
            (literal 8)) 
          (block \n 
            (statement 
              (read_statement READ 
                (variable_or_function_call UBan& 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call i)) ))))) \n) NEXT i)) \n \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 0)) TO 
          (expr 
            (literal 8)) 
          (block \n 
            (statement 
              (read_statement READ 
                (variable_or_function_call RBan& 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call i)) ))))) \n) NEXT i)) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call SunHt) = 
          (expr 
            (literal 39)))) \n \n) 
    (else_block_statement ELSE 
      (else_block \n \n 
        (statement 
          (assignment_statement 
            (variable_or_function_call ScrWidth) = 
            (expr 
              (literal 320)))) \n 
        (statement 
          (assignment_statement 
            (variable_or_function_call ScrHeight) = 
            (expr 
              (literal 200)))) \n 
        (statement 
          (assignment_statement 
            (variable_or_function_call GHeight) = 
            (expr 
              (literal 12)))) \n 
        (statement 
          (call_statement 
            (untyped_id RESTORE) 
            (call_argument_list 
              (call_argument CGABanana)))) \n 
        (statement 
          (dim_statement REDIM 
            (dim_variable LBan& 
              (dim_array_bounds 
                ( 
                  (dim_subscript 
                    (expr 
                      (literal 2))) ))) , 
            (dim_variable RBan& 
              (dim_array_bounds 
                ( 
                  (dim_subscript 
                    (expr 
                      (literal 2))) ))) , 
            (dim_variable UBan& 
              (dim_array_bounds 
                ( 
                  (dim_subscript 
                    (expr 
                      (literal 2))) ))) , 
            (dim_variable DBan& 
              (dim_array_bounds 
                ( 
                  (dim_subscript 
                    (expr 
                      (literal 2))) ))))) \n 
        (statement 
          (dim_statement REDIM 
            (dim_variable GorL& 
              (dim_array_bounds 
                ( 
                  (dim_subscript 
                    (expr 
                      (literal 20))) ))) , 
            (dim_variable GorD& 
              (dim_array_bounds 
                ( 
                  (dim_subscript 
                    (expr 
                      (literal 20))) ))) , 
            (dim_variable GorR& 
              (dim_array_bounds 
                ( 
                  (dim_subscript 
                    (expr 
                      (literal 20))) ))))) \n \n 
        (statement 
          (for_next_statement FOR i = 
            (expr 
              (literal 0)) TO 
            (expr 
              (literal 2)) 
            (block \n 
              (statement 
                (read_statement READ 
                  (variable_or_function_call LBan& 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call i)) ))))) \n) NEXT i)) \n 
        (statement 
          (for_next_statement FOR i = 
            (expr 
              (literal 0)) TO 
            (expr 
              (literal 2)) 
            (block \n 
              (statement 
                (read_statement READ 
                  (variable_or_function_call DBan& 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call i)) ))))) \n) NEXT i)) \n 
        (statement 
          (for_next_statement FOR i = 
            (expr 
              (literal 0)) TO 
            (expr 
              (literal 2)) 
            (block \n 
              (statement 
                (read_statement READ 
                  (variable_or_function_call UBan& 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call i)) ))))) \n) NEXT i)) \n 
        (statement 
          (for_next_statement FOR i = 
            (expr 
              (literal 0)) TO 
            (expr 
              (literal 2)) 
            (block \n 
              (statement 
                (read_statement READ 
                  (variable_or_function_call RBan& 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call i)) ))))) \n) NEXT i)) \n \n 
        (statement 
          (assignment_statement 
            (variable_or_function_call MachSpeed) = 
            (expr 
              (expr 
                (variable_or_function_call MachSpeed)) * 
              (expr 
                (literal 1.3))))) \n 
        (statement 
          (assignment_statement 
            (variable_or_function_call SunHt) = 
            (expr 
              (literal 20)))) \n)) 
    (end_if_statement END IF)) \n 
  (statement 
    (return_statement RETURN)) \n \n 
  (label 
    (text_label 
      (untyped_id ScreenModeError)) :) \n 
  (if_block_statement IF 
    (expr 
      (expr 
        (variable_or_function_call Mode)) = 
      (expr 
        (literal 1))) THEN \n 
    (then_block 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 10)) , 
          (expr 
            (literal 5)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Sorry, you must have CGA, EGA color, or VGA graphics to play GORILLA.BAS")))) \n 
      (statement 
        (end_statement END)) \n) 
    (else_block_statement ELSE 
      (else_block \n 
        (statement 
          (assignment_statement 
            (variable_or_function_call Mode) = 
            (expr 
              (literal 1)))) \n 
        (statement 
          (resume_statement RESUME)) \n)) 
    (end_if_statement END IF)) \n \n 
  (label 
    (text_label 
      (untyped_id PaletteError)) :) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call Mode) = 
      (expr 
        (literal 1)))) \n 
  (statement 
    (resume_statement RESUME NEXT)) \n \n 
  (statement 
    (rem_statement REM)) \n \n \n 
  (function_statement FUNCTION CalcDelay! 
    (block \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call s!) = 
          (expr 
            (builtin_function TIMER)))) \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call i!) = 
                (expr 
                  (expr 
                    (variable_or_function_call i!)) + 
                  (expr 
                    (literal 1))))) \n) LOOP 
          (do_condition UNTIL 
            (expr 
              (expr 
                (expr 
                  (builtin_function TIMER)) - 
                (expr 
                  (variable_or_function_call s!))) >= 
              (expr 
                (literal .5)))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CalcDelay!) = 
          (expr 
            (variable_or_function_call i!)))) \n \n) 
    (end_function_statement END FUNCTION)) \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id Center) 
    ( 
      (parameter_list 
        (parameter Row) , 
        (parameter Text$)) ) 
    (block \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Col) = 
          (expr 
            (expr 
              (variable_or_function_call MaxCol)) \ 
            (expr 
              (literal 2))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (expr 
              (variable_or_function_call Col)) - 
            (expr 
              ( 
                (expr 
                  (expr 
                    (expr 
                      (builtin_function LEN 
                        ( 
                          (expr 
                            (variable_or_function_call Text$)) ))) / 
                    (expr 
                      (literal 2))) + 
                  (expr 
                    (literal .5))) ))))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call Text$)) ;)) \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id DoExplosion) 
    ( 
      (parameter_list 
        (parameter x#) , 
        (parameter y#)) ) 
    (block \n \n 
      (statement 
        (play_statement PLAY 
          (expr 
            (literal "MBO0L32EFGEFDC")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Radius) = 
          (expr 
            (expr 
              (variable_or_function_call ScrHeight)) / 
            (expr 
              (literal 50))))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call Mode)) = 
            (expr 
              (literal 9))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call Inc#) = 
                (expr 
                  (literal .5))))) ELSE 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call Inc#) = 
                (expr 
                  (literal .41))))))) \n 
      (statement 
        (for_next_statement FOR c# = 
          (expr 
            (literal 0)) TO 
          (expr 
            (variable_or_function_call Radius)) STEP 
          (expr 
            (variable_or_function_call Inc#)) 
          (block \n 
            (statement 
              (circle_statement CIRCLE 
                ( 
                  (expr 
                    (variable_or_function_call x#)) , 
                  (expr 
                    (variable_or_function_call y#)) ) , 
                (expr 
                  (variable_or_function_call c#)) , 
                (expr 
                  (variable_or_function_call ExplosionColor)))) \n) NEXT c#)) \n 
      (statement 
        (for_next_statement FOR c# = 
          (expr 
            (variable_or_function_call Radius)) TO 
          (expr 
            (literal 0)) STEP 
          (expr 
            ( 
              (expr 
                (expr - 
                  (expr 
                    (literal 1))) * 
                (expr 
                  (variable_or_function_call Inc#))) )) 
          (block \n 
            (statement 
              (circle_statement CIRCLE 
                ( 
                  (expr 
                    (variable_or_function_call x#)) , 
                  (expr 
                    (variable_or_function_call y#)) ) , 
                (expr 
                  (variable_or_function_call c#)) , 
                (expr 
                  (variable_or_function_call BACKATTR)))) \n 
            (statement 
              (for_next_statement FOR i = 
                (expr 
                  (literal 1)) TO 
                (expr 
                  (literal 100)) 
                (block \n) NEXT i)) \n 
            (statement 
              (call_statement 
                (untyped_id Rest) 
                (call_argument_list 
                  (call_argument 
                    (expr 
                      (literal .005)))))) \n) NEXT c#)) \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n 
  (function_statement FUNCTION DoShot 
    ( 
      (parameter_list 
        (parameter PlayerNum) , 
        (parameter x) , 
        (parameter y)) ) 
    (block \n \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call PlayerNum)) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call LocateCol) = 
              (expr 
                (literal 1)))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call Mode)) = 
                (expr 
                  (literal 9))) THEN \n 
              (then_block 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call LocateCol) = 
                    (expr 
                      (literal 66)))) \n) 
              (else_block_statement ELSE 
                (else_block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call LocateCol) = 
                      (expr 
                        (literal 26)))) \n)) 
              (end_if_statement END IF)) \n)) 
        (end_if_statement END IF)) \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 2)) , 
          (expr 
            (variable_or_function_call LocateCol)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Angle:")) ;)) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Angle#) = 
          (expr 
            (variable_or_function_call GetNum# 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 2)) , 
                  (expr 
                    (expr 
                      (variable_or_function_call LocateCol)) + 
                    (expr 
                      (literal 7))) )))))) \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 3)) , 
          (expr 
            (variable_or_function_call LocateCol)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Velocity:")) ;)) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Velocity) = 
          (expr 
            (variable_or_function_call GetNum# 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 3)) , 
                  (expr 
                    (expr 
                      (variable_or_function_call LocateCol)) + 
                    (expr 
                      (literal 10))) )))))) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call PlayerNum)) = 
          (expr 
            (literal 2))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call Angle#) = 
              (expr 
                (expr 
                  (literal 180)) - 
                (expr 
                  (variable_or_function_call Angle#))))) \n) 
        (end_if_statement END IF)) \n \n \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 4)) 
          (block \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call i)) , 
                (expr 
                  (literal 1)))) \n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call SPACE$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (expr 
                            (literal 30)) \ 
                          (expr 
                            ( 
                              (expr 
                                (expr 
                                  (literal 80)) \ 
                                (expr 
                                  (variable_or_function_call MaxCol))) ))) )))) ;)) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call i)) , 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (literal 50)) \ 
                      (expr 
                        ( 
                          (expr 
                            (expr 
                              (literal 80)) \ 
                            (expr 
                              (variable_or_function_call MaxCol))) ))) )))) \n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call SPACE$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (expr 
                            (literal 30)) \ 
                          (expr 
                            ( 
                              (expr 
                                (expr 
                                  (literal 80)) \ 
                                (expr 
                                  (variable_or_function_call MaxCol))) ))) )))) ;)) \n) NEXT)) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call SunHit) = 
          (expr 
            (variable_or_function_call FALSE)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call PlayerHit) = 
          (expr 
            (variable_or_function_call PlotShot 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call x)) , 
                  (expr 
                    (variable_or_function_call y)) , 
                  (expr 
                    (variable_or_function_call Angle#)) , 
                  (expr 
                    (variable_or_function_call Velocity)) , 
                  (expr 
                    (variable_or_function_call PlayerNum)) )))))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call PlayerHit)) = 
          (expr 
            (literal 0))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call DoShot) = 
              (expr 
                (variable_or_function_call FALSE)))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call DoShot) = 
                (expr 
                  (variable_or_function_call TRUE)))) \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call PlayerHit)) = 
                  (expr 
                    (variable_or_function_call PlayerNum))) THEN 
                (if_inline_action 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call PlayerNum) = 
                      (expr 
                        (expr 
                          (literal 3)) - 
                        (expr 
                          (variable_or_function_call PlayerNum)))))))) \n 
            (statement 
              (call_statement 
                (untyped_id VictoryDance) 
                (call_argument_list 
                  (call_argument PlayerNum)))) \n)) 
        (end_if_statement END IF)) \n \n) 
    (end_function_statement END FUNCTION)) \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id DoSun) 
    ( 
      (parameter_list 
        (parameter Mouth)) ) 
    (block \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call x) = 
          (expr 
            (expr 
              (variable_or_function_call ScrWidth)) \ 
            (expr 
              (literal 2))))) : 
      (statement 
        (assignment_statement 
          (variable_or_function_call y) = 
          (expr 
            (variable_or_function_call Scl 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 25)) )))))) \n \n \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) - 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 22)) ))))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) - 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 18)) ))))) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 22)) ))))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 18)) ))))) ) , 
          (expr 
            (variable_or_function_call BACKATTR)) , 
          (box_style BF))) \n \n \n \n 
      (statement 
        (circle_statement CIRCLE 
          ( 
            (expr 
              (variable_or_function_call x)) , 
            (expr 
              (variable_or_function_call y)) ) , 
          (expr 
            (variable_or_function_call Scl 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 12)) )))) , 
          (expr 
            (variable_or_function_call SUNATTR)))) \n 
      (statement 
        (paint_statement PAINT 
          ( 
            (expr 
              (variable_or_function_call x)) , 
            (expr 
              (variable_or_function_call y)) ) , 
          (expr 
            (variable_or_function_call SUNATTR)))) \n \n \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) - 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 20)) ))))) , 
            (expr 
              (variable_or_function_call y)) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 20)) ))))) , 
            (expr 
              (variable_or_function_call y)) ) , 
          (expr 
            (variable_or_function_call SUNATTR)))) \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (variable_or_function_call x)) , 
            (expr 
              (expr 
                (variable_or_function_call y)) - 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 15)) ))))) ) - 
          ( 
            (expr 
              (variable_or_function_call x)) , 
            (expr 
              (expr 
                (variable_or_function_call y)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 15)) ))))) ) , 
          (expr 
            (variable_or_function_call SUNATTR)))) \n \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) - 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 15)) ))))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) - 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 10)) ))))) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 15)) ))))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 10)) ))))) ) , 
          (expr 
            (variable_or_function_call SUNATTR)))) \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) - 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 15)) ))))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 10)) ))))) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 15)) ))))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) - 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 10)) ))))) ) , 
          (expr 
            (variable_or_function_call SUNATTR)))) \n \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) - 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 8)) ))))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) - 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 13)) ))))) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 8)) ))))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 13)) ))))) ) , 
          (expr 
            (variable_or_function_call SUNATTR)))) \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) - 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 8)) ))))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 13)) ))))) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 8)) ))))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) - 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 13)) ))))) ) , 
          (expr 
            (variable_or_function_call SUNATTR)))) \n \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) - 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 18)) ))))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) - 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 5)) ))))) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 18)) ))))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 5)) ))))) ) , 
          (expr 
            (variable_or_function_call SUNATTR)))) \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) - 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 18)) ))))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 5)) ))))) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 18)) ))))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) - 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 5)) ))))) ) , 
          (expr 
            (variable_or_function_call SUNATTR)))) \n \n \n 
      (if_block_statement IF 
        (expr 
          (variable_or_function_call Mouth)) THEN \n 
        (then_block 
          (statement 
            (circle_statement CIRCLE 
              ( 
                (expr 
                  (variable_or_function_call x)) , 
                (expr 
                  (expr 
                    (variable_or_function_call y)) + 
                  (expr 
                    (variable_or_function_call Scl 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 5)) ))))) ) , 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 2.9)) )))) , 
              (expr 
                (literal 0)))) \n 
          (statement 
            (paint_statement PAINT 
              ( 
                (expr 
                  (variable_or_function_call x)) , 
                (expr 
                  (expr 
                    (variable_or_function_call y)) + 
                  (expr 
                    (variable_or_function_call Scl 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 5)) ))))) ) , 
              (expr 
                (literal 0)) , 
              (expr 
                (literal 0)))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (circle_statement CIRCLE 
                ( 
                  (expr 
                    (variable_or_function_call x)) , 
                  (expr 
                    (variable_or_function_call y)) ) , 
                (expr 
                  (variable_or_function_call Scl 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 8)) )))) , 
                (expr 
                  (literal 0)) , 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (expr 
                          (literal 210)) * 
                        (expr 
                          (variable_or_function_call pi#))) / 
                      (expr 
                        (literal 180))) )) , 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (expr 
                          (literal 330)) * 
                        (expr 
                          (variable_or_function_call pi#))) / 
                      (expr 
                        (literal 180))) )))) \n)) 
        (end_if_statement END IF)) \n \n \n 
      (statement 
        (circle_statement CIRCLE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) - 
              (expr 
                (literal 3))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) - 
              (expr 
                (literal 2))) ) , 
          (expr 
            (literal 1)) , 
          (expr 
            (literal 0)))) \n 
      (statement 
        (circle_statement CIRCLE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) + 
              (expr 
                (literal 3))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) - 
              (expr 
                (literal 2))) ) , 
          (expr 
            (literal 1)) , 
          (expr 
            (literal 0)))) \n 
      (statement 
        (pset_statement PSET 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) - 
              (expr 
                (literal 3))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) - 
              (expr 
                (literal 2))) ) , 
          (expr 
            (literal 0)))) \n 
      (statement 
        (pset_statement PSET 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) + 
              (expr 
                (literal 3))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) - 
              (expr 
                (literal 2))) ) , 
          (expr 
            (literal 0)))) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id DrawBan) 
    ( 
      (parameter_list 
        (parameter xc#) , 
        (parameter yc#) , 
        (parameter r) , 
        (parameter bc)) ) 
    (block \n \n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call r)) 
          (before_first_case \n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 0)))) 
            (block \n 
              (statement 
                (if_inline_statement IF 
                  (expr 
                    (variable_or_function_call bc)) THEN 
                  (if_inline_action 
                    (statement 
                      (put_graphics_statement PUT 
                        ( 
                          (expr 
                            (variable_or_function_call xc#)) , 
                          (expr 
                            (variable_or_function_call yc#)) ) , 
                        (variable_or_function_call LBan&) , PSET))) ELSE 
                  (if_inline_action 
                    (statement 
                      (put_graphics_statement PUT 
                        ( 
                          (expr 
                            (variable_or_function_call xc#)) , 
                          (expr 
                            (variable_or_function_call yc#)) ) , 
                        (variable_or_function_call LBan&) , XOR))))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 1)))) 
            (block \n 
              (statement 
                (if_inline_statement IF 
                  (expr 
                    (variable_or_function_call bc)) THEN 
                  (if_inline_action 
                    (statement 
                      (put_graphics_statement PUT 
                        ( 
                          (expr 
                            (variable_or_function_call xc#)) , 
                          (expr 
                            (variable_or_function_call yc#)) ) , 
                        (variable_or_function_call UBan&) , PSET))) ELSE 
                  (if_inline_action 
                    (statement 
                      (put_graphics_statement PUT 
                        ( 
                          (expr 
                            (variable_or_function_call xc#)) , 
                          (expr 
                            (variable_or_function_call yc#)) ) , 
                        (variable_or_function_call UBan&) , XOR))))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 2)))) 
            (block \n 
              (statement 
                (if_inline_statement IF 
                  (expr 
                    (variable_or_function_call bc)) THEN 
                  (if_inline_action 
                    (statement 
                      (put_graphics_statement PUT 
                        ( 
                          (expr 
                            (variable_or_function_call xc#)) , 
                          (expr 
                            (variable_or_function_call yc#)) ) , 
                        (variable_or_function_call DBan&) , PSET))) ELSE 
                  (if_inline_action 
                    (statement 
                      (put_graphics_statement PUT 
                        ( 
                          (expr 
                            (variable_or_function_call xc#)) , 
                          (expr 
                            (variable_or_function_call yc#)) ) , 
                        (variable_or_function_call DBan&) , XOR))))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 3)))) 
            (block \n 
              (statement 
                (if_inline_statement IF 
                  (expr 
                    (variable_or_function_call bc)) THEN 
                  (if_inline_action 
                    (statement 
                      (put_graphics_statement PUT 
                        ( 
                          (expr 
                            (variable_or_function_call xc#)) , 
                          (expr 
                            (variable_or_function_call yc#)) ) , 
                        (variable_or_function_call RBan&) , PSET))) ELSE 
                  (if_inline_action 
                    (statement 
                      (put_graphics_statement PUT 
                        ( 
                          (expr 
                            (variable_or_function_call xc#)) , 
                          (expr 
                            (variable_or_function_call yc#)) ) , 
                        (variable_or_function_call RBan&) , XOR))))) \n)) 
          (end_select_statement END SELECT))) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id DrawGorilla) 
    ( 
      (parameter_list 
        (parameter x) , 
        (parameter y) , 
        (parameter arms)) ) 
    (block \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id i) AS 
            (type_name SINGLE)))) \n \n \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) - 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 4)) ))))) , 
            (expr 
              (variable_or_function_call y)) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 2.9)) ))))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 6)) ))))) ) , 
          (expr 
            (variable_or_function_call OBJECTCOLOR)) , 
          (box_style BF))) \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) - 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 5)) ))))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 2)) ))))) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 4)) ))))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 4)) ))))) ) , 
          (expr 
            (variable_or_function_call OBJECTCOLOR)) , 
          (box_style BF))) \n \n \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) - 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 3)) ))))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 2)) ))))) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 2)) ))))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 2)) ))))) ) , 
          (expr 
            (literal 0)))) \n \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Mode)) = 
          (expr 
            (literal 9))) THEN \n 
        (then_block 
          (statement 
            (for_next_statement FOR i = 
              (expr - 
                (expr 
                  (literal 2))) TO 
              (expr - 
                (expr 
                  (literal 1))) 
              (block \n 
                (statement 
                  (pset_statement PSET 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call x)) + 
                        (expr 
                          (variable_or_function_call i))) , 
                      (expr 
                        (expr 
                          (variable_or_function_call y)) + 
                        (expr 
                          (literal 4))) ) , 
                    (expr 
                      (literal 0)))) \n 
                (statement 
                  (pset_statement PSET 
                    ( 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call x)) + 
                          (expr 
                            (variable_or_function_call i))) + 
                        (expr 
                          (literal 3))) , 
                      (expr 
                        (expr 
                          (variable_or_function_call y)) + 
                        (expr 
                          (literal 4))) ) , 
                    (expr 
                      (literal 0)))) \n) NEXT i)) \n) 
        (end_if_statement END IF)) \n \n \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) - 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 3)) ))))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 7)) ))))) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 2)) ))))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 7)) ))))) ) , 
          (expr 
            (variable_or_function_call OBJECTCOLOR)))) \n \n \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) - 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 8)) ))))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 8)) ))))) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 6.9)) ))))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 14)) ))))) ) , 
          (expr 
            (variable_or_function_call OBJECTCOLOR)) , 
          (box_style BF))) \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) - 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 6)) ))))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 15)) ))))) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 4.9)) ))))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 20)) ))))) ) , 
          (expr 
            (variable_or_function_call OBJECTCOLOR)) , 
          (box_style BF))) \n \n \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 0)) TO 
          (expr 
            (literal 4)) 
          (block \n 
            (statement 
              (circle_statement CIRCLE 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call x)) + 
                    (expr 
                      (variable_or_function_call Scl 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call i)) ))))) , 
                  (expr 
                    (expr 
                      (variable_or_function_call y)) + 
                    (expr 
                      (variable_or_function_call Scl 
                        (args_or_indices 
                          ( 
                            (expr 
                              (literal 25)) ))))) ) , 
                (expr 
                  (variable_or_function_call Scl 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 10)) )))) , 
                (expr 
                  (variable_or_function_call OBJECTCOLOR)) , 
                (expr 
                  (expr 
                    (expr 
                      (literal 3)) * 
                    (expr 
                      (variable_or_function_call pi#))) / 
                  (expr 
                    (literal 4))) , 
                (expr 
                  (expr 
                    (expr 
                      (literal 9)) * 
                    (expr 
                      (variable_or_function_call pi#))) / 
                  (expr 
                    (literal 8))))) \n 
            (statement 
              (circle_statement CIRCLE 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call x)) + 
                      (expr 
                        (variable_or_function_call Scl 
                          (args_or_indices 
                            ( 
                              (expr - 
                                (expr 
                                  (literal 6))) ))))) + 
                    (expr 
                      (variable_or_function_call Scl 
                        (args_or_indices 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call i)) - 
                              (expr 
                                (literal .1))) ))))) , 
                  (expr 
                    (expr 
                      (variable_or_function_call y)) + 
                    (expr 
                      (variable_or_function_call Scl 
                        (args_or_indices 
                          ( 
                            (expr 
                              (literal 25)) ))))) ) , 
                (expr 
                  (variable_or_function_call Scl 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 10)) )))) , 
                (expr 
                  (variable_or_function_call OBJECTCOLOR)) , 
                (expr 
                  (expr 
                    (expr 
                      (literal 15)) * 
                    (expr 
                      (variable_or_function_call pi#))) / 
                  (expr 
                    (literal 8))) , 
                (expr 
                  (expr 
                    (variable_or_function_call pi#)) / 
                  (expr 
                    (literal 4))))) \n) NEXT)) \n \n \n 
      (statement 
        (circle_statement CIRCLE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) - 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 4.9)) ))))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 10)) ))))) ) , 
          (expr 
            (variable_or_function_call Scl 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 4.9)) )))) , 
          (expr 
            (literal 0)) , 
          (expr 
            (expr 
              (expr 
                (literal 3)) * 
              (expr 
                (variable_or_function_call pi#))) / 
            (expr 
              (literal 2))) , 
          (expr 
            (literal 0)))) \n 
      (statement 
        (circle_statement CIRCLE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 4.9)) ))))) , 
            (expr 
              (expr 
                (variable_or_function_call y)) + 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 10)) ))))) ) , 
          (expr 
            (variable_or_function_call Scl 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 4.9)) )))) , 
          (expr 
            (literal 0)) , 
          (expr 
            (variable_or_function_call pi#)) , 
          (expr 
            (expr 
              (expr 
                (literal 3)) * 
              (expr 
                (variable_or_function_call pi#))) / 
            (expr 
              (literal 2))))) \n \n 
      (statement 
        (for_next_statement FOR i = 
          (expr - 
            (expr 
              (literal 5))) TO 
          (expr - 
            (expr 
              (literal 1))) 
          (block \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call arms)) 
                (before_first_case \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal 1)))) 
                  (block \n \n 
                    (statement 
                      (circle_statement CIRCLE 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call x)) + 
                            (expr 
                              (variable_or_function_call Scl 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call i)) - 
                                      (expr 
                                        (literal .1))) ))))) , 
                          (expr 
                            (expr 
                              (variable_or_function_call y)) + 
                            (expr 
                              (variable_or_function_call Scl 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (literal 14)) ))))) ) , 
                        (expr 
                          (variable_or_function_call Scl 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 9)) )))) , 
                        (expr 
                          (variable_or_function_call OBJECTCOLOR)) , 
                        (expr 
                          (expr 
                            (expr 
                              (literal 3)) * 
                            (expr 
                              (variable_or_function_call pi#))) / 
                          (expr 
                            (literal 4))) , 
                        (expr 
                          (expr 
                            (expr 
                              (literal 5)) * 
                            (expr 
                              (variable_or_function_call pi#))) / 
                          (expr 
                            (literal 4))))) \n 
                    (statement 
                      (circle_statement CIRCLE 
                        ( 
                          (expr 
                            (expr 
                              (expr 
                                (variable_or_function_call x)) + 
                              (expr 
                                (variable_or_function_call Scl 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (literal 4.9)) ))))) + 
                            (expr 
                              (variable_or_function_call Scl 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call i)) ))))) , 
                          (expr 
                            (expr 
                              (variable_or_function_call y)) + 
                            (expr 
                              (variable_or_function_call Scl 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (literal 4)) ))))) ) , 
                        (expr 
                          (variable_or_function_call Scl 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 9)) )))) , 
                        (expr 
                          (variable_or_function_call OBJECTCOLOR)) , 
                        (expr 
                          (expr 
                            (expr 
                              (literal 7)) * 
                            (expr 
                              (variable_or_function_call pi#))) / 
                          (expr 
                            (literal 4))) , 
                        (expr 
                          (expr 
                            (variable_or_function_call pi#)) / 
                          (expr 
                            (literal 4))))) \n 
                    (statement 
                      (get_graphics_statement GET 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call x)) - 
                            (expr 
                              (variable_or_function_call Scl 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (literal 15)) ))))) , 
                          (expr 
                            (expr 
                              (variable_or_function_call y)) - 
                            (expr 
                              (variable_or_function_call Scl 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (literal 1)) ))))) ) - 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call x)) + 
                            (expr 
                              (variable_or_function_call Scl 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (literal 14)) ))))) , 
                          (expr 
                            (expr 
                              (variable_or_function_call y)) + 
                            (expr 
                              (variable_or_function_call Scl 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (literal 28)) ))))) ) , 
                        (variable_or_function_call GorR&))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal 2)))) 
                  (block \n \n 
                    (statement 
                      (circle_statement CIRCLE 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call x)) + 
                            (expr 
                              (variable_or_function_call Scl 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call i)) - 
                                      (expr 
                                        (literal .1))) ))))) , 
                          (expr 
                            (expr 
                              (variable_or_function_call y)) + 
                            (expr 
                              (variable_or_function_call Scl 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (literal 4)) ))))) ) , 
                        (expr 
                          (variable_or_function_call Scl 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 9)) )))) , 
                        (expr 
                          (variable_or_function_call OBJECTCOLOR)) , 
                        (expr 
                          (expr 
                            (expr 
                              (literal 3)) * 
                            (expr 
                              (variable_or_function_call pi#))) / 
                          (expr 
                            (literal 4))) , 
                        (expr 
                          (expr 
                            (expr 
                              (literal 5)) * 
                            (expr 
                              (variable_or_function_call pi#))) / 
                          (expr 
                            (literal 4))))) \n 
                    (statement 
                      (circle_statement CIRCLE 
                        ( 
                          (expr 
                            (expr 
                              (expr 
                                (variable_or_function_call x)) + 
                              (expr 
                                (variable_or_function_call Scl 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (literal 4.9)) ))))) + 
                            (expr 
                              (variable_or_function_call Scl 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call i)) ))))) , 
                          (expr 
                            (expr 
                              (variable_or_function_call y)) + 
                            (expr 
                              (variable_or_function_call Scl 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (literal 14)) ))))) ) , 
                        (expr 
                          (variable_or_function_call Scl 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 9)) )))) , 
                        (expr 
                          (variable_or_function_call OBJECTCOLOR)) , 
                        (expr 
                          (expr 
                            (expr 
                              (literal 7)) * 
                            (expr 
                              (variable_or_function_call pi#))) / 
                          (expr 
                            (literal 4))) , 
                        (expr 
                          (expr 
                            (variable_or_function_call pi#)) / 
                          (expr 
                            (literal 4))))) \n 
                    (statement 
                      (get_graphics_statement GET 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call x)) - 
                            (expr 
                              (variable_or_function_call Scl 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (literal 15)) ))))) , 
                          (expr 
                            (expr 
                              (variable_or_function_call y)) - 
                            (expr 
                              (variable_or_function_call Scl 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (literal 1)) ))))) ) - 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call x)) + 
                            (expr 
                              (variable_or_function_call Scl 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (literal 14)) ))))) , 
                          (expr 
                            (expr 
                              (variable_or_function_call y)) + 
                            (expr 
                              (variable_or_function_call Scl 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (literal 28)) ))))) ) , 
                        (variable_or_function_call GorL&))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal 3)))) 
                  (block \n \n 
                    (statement 
                      (circle_statement CIRCLE 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call x)) + 
                            (expr 
                              (variable_or_function_call Scl 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call i)) - 
                                      (expr 
                                        (literal .1))) ))))) , 
                          (expr 
                            (expr 
                              (variable_or_function_call y)) + 
                            (expr 
                              (variable_or_function_call Scl 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (literal 14)) ))))) ) , 
                        (expr 
                          (variable_or_function_call Scl 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 9)) )))) , 
                        (expr 
                          (variable_or_function_call OBJECTCOLOR)) , 
                        (expr 
                          (expr 
                            (expr 
                              (literal 3)) * 
                            (expr 
                              (variable_or_function_call pi#))) / 
                          (expr 
                            (literal 4))) , 
                        (expr 
                          (expr 
                            (expr 
                              (literal 5)) * 
                            (expr 
                              (variable_or_function_call pi#))) / 
                          (expr 
                            (literal 4))))) \n 
                    (statement 
                      (circle_statement CIRCLE 
                        ( 
                          (expr 
                            (expr 
                              (expr 
                                (variable_or_function_call x)) + 
                              (expr 
                                (variable_or_function_call Scl 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (literal 4.9)) ))))) + 
                            (expr 
                              (variable_or_function_call Scl 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call i)) ))))) , 
                          (expr 
                            (expr 
                              (variable_or_function_call y)) + 
                            (expr 
                              (variable_or_function_call Scl 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (literal 14)) ))))) ) , 
                        (expr 
                          (variable_or_function_call Scl 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 9)) )))) , 
                        (expr 
                          (variable_or_function_call OBJECTCOLOR)) , 
                        (expr 
                          (expr 
                            (expr 
                              (literal 7)) * 
                            (expr 
                              (variable_or_function_call pi#))) / 
                          (expr 
                            (literal 4))) , 
                        (expr 
                          (expr 
                            (variable_or_function_call pi#)) / 
                          (expr 
                            (literal 4))))) \n 
                    (statement 
                      (get_graphics_statement GET 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call x)) - 
                            (expr 
                              (variable_or_function_call Scl 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (literal 15)) ))))) , 
                          (expr 
                            (expr 
                              (variable_or_function_call y)) - 
                            (expr 
                              (variable_or_function_call Scl 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (literal 1)) ))))) ) - 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call x)) + 
                            (expr 
                              (variable_or_function_call Scl 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (literal 14)) ))))) , 
                          (expr 
                            (expr 
                              (variable_or_function_call y)) + 
                            (expr 
                              (variable_or_function_call Scl 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (literal 28)) ))))) ) , 
                        (variable_or_function_call GorD&))) \n)) 
                (end_select_statement END SELECT))) \n) NEXT i)) \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n 
  (function_statement FUNCTION ExplodeGorilla 
    ( 
      (parameter_list 
        (parameter x#) , 
        (parameter y#)) ) 
    (block \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call YAdj) = 
          (expr 
            (variable_or_function_call Scl 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 12)) )))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call XAdj) = 
          (expr 
            (variable_or_function_call Scl 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 5)) )))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call SclX#) = 
          (expr 
            (expr 
              (variable_or_function_call ScrWidth)) / 
            (expr 
              (literal 320))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call SclY#) = 
          (expr 
            (expr 
              (variable_or_function_call ScrHeight)) / 
            (expr 
              (literal 200))))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call x#)) < 
            (expr 
              (expr 
                (variable_or_function_call ScrWidth)) / 
              (expr 
                (literal 2)))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call PlayerHit) = 
                (expr 
                  (literal 1))))) ELSE 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call PlayerHit) = 
                (expr 
                  (literal 2))))))) \n 
      (statement 
        (play_statement PLAY 
          (expr 
            (literal "MBO0L16EFGEFDC")))) \n \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (expr 
              (literal 8)) * 
            (expr 
              (variable_or_function_call SclX#))) 
          (block \n 
            (statement 
              (circle_statement CIRCLE 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call GorillaX 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call PlayerHit)) )))) + 
                      (expr 
                        (expr 
                          (literal 3.5)) * 
                        (expr 
                          (variable_or_function_call SclX#)))) + 
                    (expr 
                      (variable_or_function_call XAdj))) , 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call GorillaY 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call PlayerHit)) )))) + 
                      (expr 
                        (expr 
                          (literal 7)) * 
                        (expr 
                          (variable_or_function_call SclY#)))) + 
                    (expr 
                      (variable_or_function_call YAdj))) ) , 
                (expr 
                  (variable_or_function_call i)) , 
                (expr 
                  (variable_or_function_call ExplosionColor)) , , , 
                (expr - 
                  (expr 
                    (literal 1.57))))) \n 
            (statement 
              (line_statement LINE 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call GorillaX 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call PlayerHit)) )))) + 
                    (expr 
                      (expr 
                        (literal 7)) * 
                      (expr 
                        (variable_or_function_call SclX#)))) , 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call GorillaY 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call PlayerHit)) )))) + 
                      (expr 
                        (expr 
                          (literal 9)) * 
                        (expr 
                          (variable_or_function_call SclY#)))) - 
                    (expr 
                      (variable_or_function_call i))) ) - 
                ( 
                  (expr 
                    (variable_or_function_call GorillaX 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call PlayerHit)) )))) , 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call GorillaY 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call PlayerHit)) )))) + 
                      (expr 
                        (expr 
                          (literal 9)) * 
                        (expr 
                          (variable_or_function_call SclY#)))) - 
                    (expr 
                      (variable_or_function_call i))) ) , 
                (expr 
                  (variable_or_function_call ExplosionColor)))) \n) NEXT i)) \n \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (expr 
              (literal 16)) * 
            (expr 
              (variable_or_function_call SclX#))) 
          (block \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call i)) < 
                  (expr 
                    ( 
                      (expr 
                        (expr 
                          (literal 8)) * 
                        (expr 
                          (variable_or_function_call SclX#))) ))) THEN 
                (if_inline_action 
                  (statement 
                    (circle_statement CIRCLE 
                      ( 
                        (expr 
                          (expr 
                            (expr 
                              (variable_or_function_call GorillaX 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call PlayerHit)) )))) + 
                            (expr 
                              (expr 
                                (literal 3.5)) * 
                              (expr 
                                (variable_or_function_call SclX#)))) + 
                          (expr 
                            (variable_or_function_call XAdj))) , 
                        (expr 
                          (expr 
                            (expr 
                              (variable_or_function_call GorillaY 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call PlayerHit)) )))) + 
                            (expr 
                              (expr 
                                (literal 7)) * 
                              (expr 
                                (variable_or_function_call SclY#)))) + 
                          (expr 
                            (variable_or_function_call YAdj))) ) , 
                      (expr 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (expr 
                                  (literal 8)) * 
                                (expr 
                                  (variable_or_function_call SclX#))) + 
                              (expr 
                                (literal 1))) )) - 
                        (expr 
                          (variable_or_function_call i))) , 
                      (expr 
                        (variable_or_function_call BACKATTR)) , , , 
                      (expr - 
                        (expr 
                          (literal 1.57)))))))) \n 
            (statement 
              (circle_statement CIRCLE 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call GorillaX 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call PlayerHit)) )))) + 
                      (expr 
                        (expr 
                          (literal 3.5)) * 
                        (expr 
                          (variable_or_function_call SclX#)))) + 
                    (expr 
                      (variable_or_function_call XAdj))) , 
                  (expr 
                    (expr 
                      (variable_or_function_call GorillaY 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call PlayerHit)) )))) + 
                    (expr 
                      (variable_or_function_call YAdj))) ) , 
                (expr 
                  (variable_or_function_call i)) , 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call i)) MOD 
                    (expr 
                      (literal 2))) + 
                  (expr 
                    (literal 1))) , , , 
                (expr - 
                  (expr 
                    (literal 1.57))))) \n) NEXT i)) \n \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (expr 
              (literal 24)) * 
            (expr 
              (variable_or_function_call SclX#))) TO 
          (expr 
            (literal 1)) STEP 
          (expr - 
            (expr 
              (literal 1))) 
          (block \n 
            (statement 
              (circle_statement CIRCLE 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call GorillaX 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call PlayerHit)) )))) + 
                      (expr 
                        (expr 
                          (literal 3.5)) * 
                        (expr 
                          (variable_or_function_call SclX#)))) + 
                    (expr 
                      (variable_or_function_call XAdj))) , 
                  (expr 
                    (expr 
                      (variable_or_function_call GorillaY 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call PlayerHit)) )))) + 
                    (expr 
                      (variable_or_function_call YAdj))) ) , 
                (expr 
                  (variable_or_function_call i)) , 
                (expr 
                  (variable_or_function_call BACKATTR)) , , , 
                (expr - 
                  (expr 
                    (literal 1.57))))) \n 
            (statement 
              (for_next_statement FOR Count = 
                (expr 
                  (literal 1)) TO 
                (expr 
                  (literal 200)) 
                (block \n) NEXT)) \n) NEXT i)) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call ExplodeGorilla) = 
          (expr 
            (variable_or_function_call PlayerHit)))) \n) 
    (end_function_statement END FUNCTION)) \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id GetInputs) 
    ( 
      (parameter_list 
        (parameter Player1$) , 
        (parameter Player2$) , 
        (parameter NumGames)) ) 
    (block \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)) , 
          (expr 
            (literal 0)))) \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 8)) , 
          (expr 
            (literal 15)))) \n 
      (statement 
        (line_input_statement LINE INPUT "Name of Player 1 
          (Default = 'Player 1'): " ; 
          (variable_or_function_call Player1$))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Player1$)) = 
          (expr 
            (literal ""))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call Player1$) = 
              (expr 
                (literal "Player 1")))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Player1$) = 
                (expr 
                  (variable_or_function_call LEFT$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call Player1$)) , 
                        (expr 
                          (literal 10)) )))))) \n)) 
        (end_if_statement END IF)) \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 10)) , 
          (expr 
            (literal 15)))) \n 
      (statement 
        (line_input_statement LINE INPUT "Name of Player 2 
          (Default = 'Player 2'): " ; 
          (variable_or_function_call Player2$))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Player2$)) = 
          (expr 
            (literal ""))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call Player2$) = 
              (expr 
                (literal "Player 2")))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Player2$) = 
                (expr 
                  (variable_or_function_call LEFT$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call Player2$)) , 
                        (expr 
                          (literal 10)) )))))) \n)) 
        (end_if_statement END IF)) \n \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 12)) , 
                (expr 
                  (literal 56)))) : 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call SPACE$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 25)) )))) ;)) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 12)) , 
                (expr 
                  (literal 13)))) \n 
            (statement 
              (input_statement INPUT "Play to how many total points 
                (Default = 3)" ; 
                (variable_or_function_call game$))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call NumGames) = 
                (expr 
                  (variable_or_function_call VAL 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call LEFT$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call game$)) , 
                                (expr 
                                  (literal 2)) )))) )))))) \n) LOOP 
          (do_condition UNTIL 
            (expr 
              (expr 
                (expr 
                  (expr 
                    (variable_or_function_call NumGames)) > 
                  (expr 
                    (literal 0))) AND 
                (expr 
                  (expr 
                    (builtin_function LEN 
                      ( 
                        (expr 
                          (variable_or_function_call game$)) ))) < 
                  (expr 
                    (literal 3)))) OR 
              (expr 
                (expr 
                  (builtin_function LEN 
                    ( 
                      (expr 
                        (variable_or_function_call game$)) ))) = 
                (expr 
                  (literal 0))))))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call NumGames)) = 
            (expr 
              (literal 0))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call NumGames) = 
                (expr 
                  (literal 3))))))) \n \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 14)) , 
                (expr 
                  (literal 53)))) : 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call SPACE$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 28)) )))) ;)) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 14)) , 
                (expr 
                  (literal 17)))) \n 
            (statement 
              (input_statement INPUT "Gravity in Meters/Sec 
                (Earth = 9.8)" ; 
                (variable_or_function_call grav$))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call gravity#) = 
                (expr 
                  (variable_or_function_call VAL 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call grav$)) )))))) \n) LOOP 
          (do_condition UNTIL 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call gravity#)) > 
                (expr 
                  (literal 0))) OR 
              (expr 
                (expr 
                  (builtin_function LEN 
                    ( 
                      (expr 
                        (variable_or_function_call grav$)) ))) = 
                (expr 
                  (literal 0))))))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call gravity#)) = 
            (expr 
              (literal 0))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call gravity#) = 
                (expr 
                  (literal 9.8))))))) \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n 
  (function_statement FUNCTION GetNum# 
    ( 
      (parameter_list 
        (parameter Row) , 
        (parameter Col)) ) 
    (block \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Result$) = 
          (expr 
            (literal "")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Done) = 
          (expr 
            (variable_or_function_call FALSE)))) \n 
      (statement 
        (while_wend_statement WHILE 
          (expr 
            (expr 
              (variable_or_function_call INKEY$)) <> 
            (expr 
              (literal ""))) 
          (block :) WEND)) \n \n 
      (statement 
        (do_loop_statement DO 
          (do_condition WHILE 
            (expr NOT 
              (expr 
                (variable_or_function_call Done)))) 
          (block \n \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Col)))) \n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call Result$)) ; 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 95)) )))) ; 
                (expr 
                  (literal "    ")) ;)) \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Kbd$) = 
                (expr 
                  (variable_or_function_call INKEY$)))) \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call Kbd$)) 
                (before_first_case \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal "0")) TO 
                      (expr 
                        (literal "9")))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Result$) = 
                        (expr 
                          (expr 
                            (variable_or_function_call Result$)) + 
                          (expr 
                            (variable_or_function_call Kbd$))))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal ".")))) 
                  (block \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call INSTR 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call Result$)) , 
                                (expr 
                                  (literal ".")) )))) = 
                        (expr 
                          (literal 0))) THEN \n 
                      (then_block 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Result$) = 
                            (expr 
                              (expr 
                                (variable_or_function_call Result$)) + 
                              (expr 
                                (variable_or_function_call Kbd$))))) \n) 
                      (end_if_statement END IF)) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call CHR$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 13)) )))))) 
                  (block \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call VAL 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call Result$)) )))) > 
                        (expr 
                          (literal 360))) THEN \n 
                      (then_block 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Result$) = 
                            (expr 
                              (literal "")))) \n) 
                      (else_block_statement ELSE 
                        (else_block \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call Done) = 
                              (expr 
                                (variable_or_function_call TRUE)))) \n)) 
                      (end_if_statement END IF)) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call CHR$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 8)) )))))) 
                  (block \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (builtin_function LEN 
                            ( 
                              (expr 
                                (variable_or_function_call Result$)) ))) > 
                        (expr 
                          (literal 0))) THEN \n 
                      (then_block 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Result$) = 
                            (expr 
                              (variable_or_function_call LEFT$ 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call Result$)) , 
                                    (expr 
                                      (expr 
                                        (builtin_function LEN 
                                          ( 
                                            (expr 
                                              (variable_or_function_call Result$)) ))) - 
                                      (expr 
                                        (literal 1))) )))))) \n) 
                      (end_if_statement END IF)) \n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (builtin_function LEN 
                            ( 
                              (expr 
                                (variable_or_function_call Kbd$)) ))) > 
                        (expr 
                          (literal 0))) THEN \n 
                      (then_block 
                        (statement 
                          (call_statement 
                            (untyped_id BEEP))) \n) 
                      (end_if_statement END IF)) \n)) 
                (end_select_statement END SELECT))) \n) LOOP)) \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Col)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call Result$)) ; 
          (expr 
            (literal " ")) ;)) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call GetNum#) = 
          (expr 
            (variable_or_function_call VAL 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call Result$)) )))))) \n) 
    (end_function_statement END FUNCTION)) \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id GorillaIntro) 
    ( 
      (parameter_list 
        (parameter Player1$) , 
        (parameter Player2$)) ) 
    (block \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 16)) , 
          (expr 
            (literal 34)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "--------------")))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 18)) , 
          (expr 
            (literal 34)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "V = View Intro")))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 19)) , 
          (expr 
            (literal 34)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "P = Play Game")))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 21)) , 
          (expr 
            (literal 35)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Your Choice?")))) \n \n 
      (statement 
        (do_loop_statement DO 
          (do_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call Char$)) = 
              (expr 
                (literal "")))) 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Char$) = 
                (expr 
                  (variable_or_function_call INKEY$)))) \n) LOOP)) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Mode)) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call x) = 
              (expr 
                (literal 125)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call y) = 
              (expr 
                (literal 100)))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call x) = 
                (expr 
                  (literal 278)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call y) = 
                (expr 
                  (literal 175)))) \n)) 
        (end_if_statement END IF)) \n \n 
      (statement 
        (screen_statement SCREEN 
          (expr 
            (variable_or_function_call Mode)))) \n 
      (statement 
        (call_statement 
          (untyped_id SetScreen))) \n \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call Mode)) = 
            (expr 
              (literal 1))) THEN 
          (if_inline_action 
            (statement 
              (call_statement 
                (untyped_id Center) 
                (call_argument_list 
                  (call_argument 
                    (expr 
                      (literal 5))) , 
                  (call_argument 
                    (expr 
                      (literal "Please wait while gorillas are drawn."))))))))) \n \n 
      (statement 
        (view_print_statement VIEW PRINT 
          (expr 
            (literal 9)) TO 
          (expr 
            (literal 24)))) \n \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call Mode)) = 
            (expr 
              (literal 9))) THEN 
          (if_inline_action 
            (statement 
              (palette_statement PALETTE 
                (expr 
                  (variable_or_function_call OBJECTCOLOR)) , 
                (expr 
                  (variable_or_function_call BackColor))))))) \n \n 
      (statement 
        (call_statement 
          (untyped_id DrawGorilla) 
          (call_argument_list 
            (call_argument x) , 
            (call_argument y) , 
            (call_argument ARMSDOWN)))) \n 
      (statement 
        (call_statement 
          (untyped_id CLS) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal 2)))))) \n 
      (statement 
        (call_statement 
          (untyped_id DrawGorilla) 
          (call_argument_list 
            (call_argument x) , 
            (call_argument y) , 
            (call_argument LEFTUP)))) \n 
      (statement 
        (call_statement 
          (untyped_id CLS) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal 2)))))) \n 
      (statement 
        (call_statement 
          (untyped_id DrawGorilla) 
          (call_argument_list 
            (call_argument x) , 
            (call_argument y) , 
            (call_argument RIGHTUP)))) \n 
      (statement 
        (call_statement 
          (untyped_id CLS) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal 2)))))) \n \n 
      (statement 
        (view_print_statement VIEW PRINT 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 25)))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call Mode)) = 
            (expr 
              (literal 9))) THEN 
          (if_inline_action 
            (statement 
              (palette_statement PALETTE 
                (expr 
                  (variable_or_function_call OBJECTCOLOR)) , 
                (expr 
                  (literal 46))))))) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call UCASE$ 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call Char$)) )))) = 
          (expr 
            (literal "V"))) THEN \n 
        (then_block 
          (statement 
            (call_statement 
              (untyped_id Center) 
              (call_argument_list 
                (call_argument 
                  (expr 
                    (literal 2))) , 
                (call_argument 
                  (expr 
                    (literal "Q B A S I C   G O R I L L A S")))))) \n 
          (statement 
            (call_statement 
              (untyped_id Center) 
              (call_argument_list 
                (call_argument 
                  (expr 
                    (literal 5))) , 
                (call_argument 
                  (expr 
                    (literal "             STARRING:               ")))))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call P$) = 
              (expr 
                (expr 
                  (expr 
                    (variable_or_function_call Player1$)) + 
                  (expr 
                    (literal " AND "))) + 
                (expr 
                  (variable_or_function_call Player2$))))) \n 
          (statement 
            (call_statement 
              (untyped_id Center) 
              (call_argument_list 
                (call_argument 
                  (expr 
                    (literal 7))) , 
                (call_argument P$)))) \n \n 
          (statement 
            (put_graphics_statement PUT 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call x)) - 
                  (expr 
                    (literal 13))) , 
                (expr 
                  (variable_or_function_call y)) ) , 
              (variable_or_function_call GorD&) , PSET)) \n 
          (statement 
            (put_graphics_statement PUT 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call x)) + 
                  (expr 
                    (literal 47))) , 
                (expr 
                  (variable_or_function_call y)) ) , 
              (variable_or_function_call GorD&) , PSET)) \n 
          (statement 
            (call_statement 
              (untyped_id Rest) 
              (call_argument_list 
                (call_argument 
                  (expr 
                    (literal 1)))))) \n \n 
          (statement 
            (put_graphics_statement PUT 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call x)) - 
                  (expr 
                    (literal 13))) , 
                (expr 
                  (variable_or_function_call y)) ) , 
              (variable_or_function_call GorL&) , PSET)) \n 
          (statement 
            (put_graphics_statement PUT 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call x)) + 
                  (expr 
                    (literal 47))) , 
                (expr 
                  (variable_or_function_call y)) ) , 
              (variable_or_function_call GorR&) , PSET)) \n 
          (statement 
            (play_statement PLAY 
              (expr 
                (literal "t120o1l16b9n0baan0bn0bn0baaan0b9n0baan0b")))) \n 
          (statement 
            (call_statement 
              (untyped_id Rest) 
              (call_argument_list 
                (call_argument 
                  (expr 
                    (literal .3)))))) \n \n 
          (statement 
            (put_graphics_statement PUT 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call x)) - 
                  (expr 
                    (literal 13))) , 
                (expr 
                  (variable_or_function_call y)) ) , 
              (variable_or_function_call GorR&) , PSET)) \n 
          (statement 
            (put_graphics_statement PUT 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call x)) + 
                  (expr 
                    (literal 47))) , 
                (expr 
                  (variable_or_function_call y)) ) , 
              (variable_or_function_call GorL&) , PSET)) \n 
          (statement 
            (play_statement PLAY 
              (expr 
                (literal "o2l16e-9n0e-d-d-n0e-n0e-n0e-d-d-d-n0e-9n0e-d-d-n0e-")))) \n 
          (statement 
            (call_statement 
              (untyped_id Rest) 
              (call_argument_list 
                (call_argument 
                  (expr 
                    (literal .3)))))) \n \n 
          (statement 
            (put_graphics_statement PUT 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call x)) - 
                  (expr 
                    (literal 13))) , 
                (expr 
                  (variable_or_function_call y)) ) , 
              (variable_or_function_call GorL&) , PSET)) \n 
          (statement 
            (put_graphics_statement PUT 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call x)) + 
                  (expr 
                    (literal 47))) , 
                (expr 
                  (variable_or_function_call y)) ) , 
              (variable_or_function_call GorR&) , PSET)) \n 
          (statement 
            (play_statement PLAY 
              (expr 
                (literal "o2l16g-9n0g-een0g-n0g-n0g-eeen0g-9n0g-een0g-")))) \n 
          (statement 
            (call_statement 
              (untyped_id Rest) 
              (call_argument_list 
                (call_argument 
                  (expr 
                    (literal .3)))))) \n \n 
          (statement 
            (put_graphics_statement PUT 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call x)) - 
                  (expr 
                    (literal 13))) , 
                (expr 
                  (variable_or_function_call y)) ) , 
              (variable_or_function_call GorR&) , PSET)) \n 
          (statement 
            (put_graphics_statement PUT 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call x)) + 
                  (expr 
                    (literal 47))) , 
                (expr 
                  (variable_or_function_call y)) ) , 
              (variable_or_function_call GorL&) , PSET)) \n 
          (statement 
            (play_statement PLAY 
              (expr 
                (literal "o2l16b9n0baan0g-n0g-n0g-eeen0o1b9n0baan0b")))) \n 
          (statement 
            (call_statement 
              (untyped_id Rest) 
              (call_argument_list 
                (call_argument 
                  (expr 
                    (literal .3)))))) \n \n 
          (statement 
            (for_next_statement FOR i = 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 4)) 
              (block \n 
                (statement 
                  (put_graphics_statement PUT 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call x)) - 
                        (expr 
                          (literal 13))) , 
                      (expr 
                        (variable_or_function_call y)) ) , 
                    (variable_or_function_call GorL&) , PSET)) \n 
                (statement 
                  (put_graphics_statement PUT 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call x)) + 
                        (expr 
                          (literal 47))) , 
                      (expr 
                        (variable_or_function_call y)) ) , 
                    (variable_or_function_call GorR&) , PSET)) \n 
                (statement 
                  (play_statement PLAY 
                    (expr 
                      (literal "T160O0L32EFGEFDC")))) \n 
                (statement 
                  (call_statement 
                    (untyped_id Rest) 
                    (call_argument_list 
                      (call_argument 
                        (expr 
                          (literal .1)))))) \n 
                (statement 
                  (put_graphics_statement PUT 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call x)) - 
                        (expr 
                          (literal 13))) , 
                      (expr 
                        (variable_or_function_call y)) ) , 
                    (variable_or_function_call GorR&) , PSET)) \n 
                (statement 
                  (put_graphics_statement PUT 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call x)) + 
                        (expr 
                          (literal 47))) , 
                      (expr 
                        (variable_or_function_call y)) ) , 
                    (variable_or_function_call GorL&) , PSET)) \n 
                (statement 
                  (play_statement PLAY 
                    (expr 
                      (literal "T160O0L32EFGEFDC")))) \n 
                (statement 
                  (call_statement 
                    (untyped_id Rest) 
                    (call_argument_list 
                      (call_argument 
                        (expr 
                          (literal .1)))))) \n) NEXT)) \n) 
        (end_if_statement END IF)) \n) 
    (end_sub_statement END SUB)) \n \n \n \n 
  (sub_statement SUB 
    (untyped_id Intro) 
    (block \n \n 
      (statement 
        (screen_statement SCREEN 
          (expr 
            (literal 0)))) \n 
      (statement 
        (width_statement WIDTH 
          (expr 
            (literal 80)) , 
          (expr 
            (literal 25)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call MaxCol) = 
          (expr 
            (literal 80)))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 15)) , 
          (expr 
            (literal 0)))) \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal 4))) , 
            (call_argument 
              (expr 
                (literal "Q B a s i c    G O R I L L A S")))))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal 6))) , 
            (call_argument 
              (expr 
                (literal "Copyright 
                  (C) Microsoft Corporation 1990")))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal 8))) , 
            (call_argument 
              (expr 
                (literal "Your mission is to hit your opponent with the exploding")))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal 9))) , 
            (call_argument 
              (expr 
                (literal "banana by varying the angle and power of your throw, taking")))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal 10))) , 
            (call_argument 
              (expr 
                (literal "into account wind speed, gravity, and the city skyline.")))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal 11))) , 
            (call_argument 
              (expr 
                (literal "The wind speed is shown by a directional arrow at the bottom")))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal 12))) , 
            (call_argument 
              (expr 
                (literal "of the playing field, its length relative to its strength.")))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal 24))) , 
            (call_argument 
              (expr 
                (literal "Press any key to continue")))))) \n \n 
      (statement 
        (play_statement PLAY 
          (expr 
            (literal "MBT160O1L8CDEDCDL4ECC")))) \n 
      (statement 
        (call_statement 
          (untyped_id SparklePause))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call Mode)) = 
            (expr 
              (literal 1))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call MaxCol) = 
                (expr 
                  (literal 40))))))) \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id MakeCityScape) 
    ( 
      (parameter_list 
        (parameter 
          (untyped_id BCoor) 
          (array_declaration 
            ( )) AS 
          (type_name_for_parameter 
            (untyped_id XYPoint)))) ) 
    (block \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call x) = 
          (expr 
            (literal 2)))) \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Slope) = 
          (expr 
            (variable_or_function_call FnRan 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 6)) )))))) \n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call Slope)) 
          (before_first_case \n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 1)))) 
            (block : 
              (statement 
                (assignment_statement 
                  (variable_or_function_call NewHt) = 
                  (expr 
                    (literal 15)))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 2)))) 
            (block : 
              (statement 
                (assignment_statement 
                  (variable_or_function_call NewHt) = 
                  (expr 
                    (literal 130)))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 3)) TO 
                (expr 
                  (literal 5)))) 
            (block : 
              (statement 
                (assignment_statement 
                  (variable_or_function_call NewHt) = 
                  (expr 
                    (literal 15)))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 6)))) 
            (block : 
              (statement 
                (assignment_statement 
                  (variable_or_function_call NewHt) = 
                  (expr 
                    (literal 130)))) \n)) 
          (end_select_statement END SELECT))) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Mode)) = 
          (expr 
            (literal 9))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call BottomLine) = 
              (expr 
                (literal 335)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call HtInc) = 
              (expr 
                (literal 10)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call DefBWidth) = 
              (expr 
                (literal 37)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call RandomHeight) = 
              (expr 
                (literal 120)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call WWidth) = 
              (expr 
                (literal 3)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call WHeight) = 
              (expr 
                (literal 6)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call WDifV) = 
              (expr 
                (literal 15)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call WDifh) = 
              (expr 
                (literal 10)))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call BottomLine) = 
                (expr 
                  (literal 190)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call HtInc) = 
                (expr 
                  (literal 6)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call NewHt) = 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call NewHt)) * 
                    (expr 
                      (literal 20))) \ 
                  (expr 
                    (literal 35))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call DefBWidth) = 
                (expr 
                  (literal 18)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call RandomHeight) = 
                (expr 
                  (literal 54)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call WWidth) = 
                (expr 
                  (literal 1)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call WHeight) = 
                (expr 
                  (literal 2)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call WDifV) = 
                (expr 
                  (literal 5)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call WDifh) = 
                (expr 
                  (literal 4)))) \n)) 
        (end_if_statement END IF)) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurBuilding) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (do_loop_statement DO 
          (block \n \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call Slope)) 
                (before_first_case \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal 1)))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call NewHt) = 
                        (expr 
                          (expr 
                            (variable_or_function_call NewHt)) + 
                          (expr 
                            (variable_or_function_call HtInc))))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal 2)))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call NewHt) = 
                        (expr 
                          (expr 
                            (variable_or_function_call NewHt)) - 
                          (expr 
                            (variable_or_function_call HtInc))))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal 3)) TO 
                      (expr 
                        (literal 5)))) 
                  (block \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call x)) > 
                        (expr 
                          (expr 
                            (variable_or_function_call ScrWidth)) \ 
                          (expr 
                            (literal 2)))) THEN \n 
                      (then_block 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call NewHt) = 
                            (expr 
                              (expr 
                                (variable_or_function_call NewHt)) - 
                              (expr 
                                (expr 
                                  (literal 2)) * 
                                (expr 
                                  (variable_or_function_call HtInc)))))) \n) 
                      (else_block_statement ELSE 
                        (else_block \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call NewHt) = 
                              (expr 
                                (expr 
                                  (variable_or_function_call NewHt)) + 
                                (expr 
                                  (expr 
                                    (literal 2)) * 
                                  (expr 
                                    (variable_or_function_call HtInc)))))) \n)) 
                      (end_if_statement END IF)) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal 4)))) 
                  (block \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call x)) > 
                        (expr 
                          (expr 
                            (variable_or_function_call ScrWidth)) \ 
                          (expr 
                            (literal 2)))) THEN \n 
                      (then_block 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call NewHt) = 
                            (expr 
                              (expr 
                                (variable_or_function_call NewHt)) + 
                              (expr 
                                (expr 
                                  (literal 2)) * 
                                (expr 
                                  (variable_or_function_call HtInc)))))) \n) 
                      (else_block_statement ELSE 
                        (else_block \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call NewHt) = 
                              (expr 
                                (expr 
                                  (variable_or_function_call NewHt)) - 
                                (expr 
                                  (expr 
                                    (literal 2)) * 
                                  (expr 
                                    (variable_or_function_call HtInc)))))) \n)) 
                      (end_if_statement END IF)) \n)) 
                (end_select_statement END SELECT))) \n \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call BWidth) = 
                (expr 
                  (expr 
                    (variable_or_function_call FnRan 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call DefBWidth)) )))) + 
                  (expr 
                    (variable_or_function_call DefBWidth))))) \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call x)) + 
                    (expr 
                      (variable_or_function_call BWidth))) > 
                  (expr 
                    (variable_or_function_call ScrWidth))) THEN 
                (if_inline_action 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call BWidth) = 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call ScrWidth)) - 
                          (expr 
                            (variable_or_function_call x))) - 
                        (expr 
                          (literal 2)))))))) \n \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call BHeight) = 
                (expr 
                  (expr 
                    (variable_or_function_call FnRan 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call RandomHeight)) )))) + 
                  (expr 
                    (variable_or_function_call NewHt))))) \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call BHeight)) < 
                  (expr 
                    (variable_or_function_call HtInc))) THEN 
                (if_inline_action 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call BHeight) = 
                      (expr 
                        (variable_or_function_call HtInc))))))) \n \n \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call BottomLine)) - 
                    (expr 
                      (variable_or_function_call BHeight))) <= 
                  (expr 
                    (expr 
                      (variable_or_function_call MaxHeight)) + 
                    (expr 
                      (variable_or_function_call GHeight)))) THEN 
                (if_inline_action 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call BHeight) = 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call MaxHeight)) + 
                          (expr 
                            (variable_or_function_call GHeight))) - 
                        (expr 
                          (literal 5)))))))) \n \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call BCoor 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call CurBuilding)) )) . XCoor) = 
                (expr 
                  (variable_or_function_call x)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call BCoor 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call CurBuilding)) )) . YCoor) = 
                (expr 
                  (expr 
                    (variable_or_function_call BottomLine)) - 
                  (expr 
                    (variable_or_function_call BHeight))))) \n \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call Mode)) = 
                  (expr 
                    (literal 9))) THEN 
                (if_inline_action 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call BuildingColor) = 
                      (expr 
                        (expr 
                          (variable_or_function_call FnRan 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 3)) )))) + 
                        (expr 
                          (literal 4)))))) ELSE 
                (if_inline_action 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call BuildingColor) = 
                      (expr 
                        (literal 2))))))) \n \n \n 
            (statement 
              (line_statement LINE 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call x)) - 
                    (expr 
                      (literal 1))) , 
                  (expr 
                    (expr 
                      (variable_or_function_call BottomLine)) + 
                    (expr 
                      (literal 1))) ) - 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call x)) + 
                      (expr 
                        (variable_or_function_call BWidth))) + 
                    (expr 
                      (literal 1))) , 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call BottomLine)) - 
                      (expr 
                        (variable_or_function_call BHeight))) - 
                    (expr 
                      (literal 1))) ) , 
                (expr 
                  (variable_or_function_call BACKGROUND)) , 
                (box_style B))) \n 
            (statement 
              (line_statement LINE 
                ( 
                  (expr 
                    (variable_or_function_call x)) , 
                  (expr 
                    (variable_or_function_call BottomLine)) ) - 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call x)) + 
                    (expr 
                      (variable_or_function_call BWidth))) , 
                  (expr 
                    (expr 
                      (variable_or_function_call BottomLine)) - 
                    (expr 
                      (variable_or_function_call BHeight))) ) , 
                (expr 
                  (variable_or_function_call BuildingColor)) , 
                (box_style BF))) \n \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call c) = 
                (expr 
                  (expr 
                    (variable_or_function_call x)) + 
                  (expr 
                    (literal 3))))) \n 
            (statement 
              (do_loop_statement DO 
                (block \n 
                  (statement 
                    (for_next_statement FOR i = 
                      (expr 
                        (expr 
                          (variable_or_function_call BHeight)) - 
                        (expr 
                          (literal 3))) TO 
                      (expr 
                        (literal 7)) STEP 
                      (expr - 
                        (expr 
                          (variable_or_function_call WDifV))) 
                      (block \n 
                        (if_block_statement IF 
                          (expr 
                            (expr 
                              (variable_or_function_call Mode)) <> 
                            (expr 
                              (literal 9))) THEN \n 
                          (then_block 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call WinColr) = 
                                (expr 
                                  (expr 
                                    ( 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call FnRan 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (literal 2)) )))) - 
                                        (expr 
                                          (literal 2))) )) * 
                                  (expr - 
                                    (expr 
                                      (literal 3)))))) \n) 
                          (elseif_block_statement ELSEIF 
                            (expr 
                              (expr 
                                (variable_or_function_call FnRan 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (literal 4)) )))) = 
                              (expr 
                                (literal 1))) THEN 
                            (else_block \n 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call WinColr) = 
                                  (expr 
                                    (literal 8)))) \n)) 
                          (else_block_statement ELSE 
                            (else_block \n 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call WinColr) = 
                                  (expr 
                                    (variable_or_function_call WINDOWCOLOR)))) \n)) 
                          (end_if_statement END IF)) \n 
                        (statement 
                          (line_statement LINE 
                            ( 
                              (expr 
                                (variable_or_function_call c)) , 
                              (expr 
                                (expr 
                                  (variable_or_function_call BottomLine)) - 
                                (expr 
                                  (variable_or_function_call i))) ) - 
                            ( 
                              (expr 
                                (expr 
                                  (variable_or_function_call c)) + 
                                (expr 
                                  (variable_or_function_call WWidth))) , 
                              (expr 
                                (expr 
                                  (expr 
                                    (variable_or_function_call BottomLine)) - 
                                  (expr 
                                    (variable_or_function_call i))) + 
                                (expr 
                                  (variable_or_function_call WHeight))) ) , 
                            (expr 
                              (variable_or_function_call WinColr)) , 
                            (box_style BF))) \n) NEXT)) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call c) = 
                      (expr 
                        (expr 
                          (variable_or_function_call c)) + 
                        (expr 
                          (variable_or_function_call WDifh))))) \n) LOOP 
                (do_condition UNTIL 
                  (expr 
                    (expr 
                      (variable_or_function_call c)) >= 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call x)) + 
                        (expr 
                          (variable_or_function_call BWidth))) - 
                      (expr 
                        (literal 3))))))) \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call x) = 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call x)) + 
                    (expr 
                      (variable_or_function_call BWidth))) + 
                  (expr 
                    (literal 2))))) \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call CurBuilding) = 
                (expr 
                  (expr 
                    (variable_or_function_call CurBuilding)) + 
                  (expr 
                    (literal 1))))) \n \n) LOOP 
          (do_condition UNTIL 
            (expr 
              (expr 
                (variable_or_function_call x)) > 
              (expr 
                (expr 
                  (variable_or_function_call ScrWidth)) - 
                (expr 
                  (variable_or_function_call HtInc))))))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call LastBuilding) = 
          (expr 
            (expr 
              (variable_or_function_call CurBuilding)) - 
            (expr 
              (literal 1))))) \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Wind) = 
          (expr 
            (expr 
              (variable_or_function_call FnRan 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 10)) )))) - 
            (expr 
              (literal 5))))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call FnRan 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 3)) )))) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (if_block_statement IF 
            (expr 
              (expr 
                (variable_or_function_call Wind)) > 
              (expr 
                (literal 0))) THEN \n 
            (then_block 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Wind) = 
                  (expr 
                    (expr 
                      (variable_or_function_call Wind)) + 
                    (expr 
                      (variable_or_function_call FnRan 
                        (args_or_indices 
                          ( 
                            (expr 
                              (literal 10)) ))))))) \n) 
            (else_block_statement ELSE 
              (else_block \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Wind) = 
                    (expr 
                      (expr 
                        (variable_or_function_call Wind)) - 
                      (expr 
                        (variable_or_function_call FnRan 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 10)) ))))))) \n)) 
            (end_if_statement END IF)) \n) 
        (end_if_statement END IF)) \n \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Wind)) <> 
          (expr 
            (literal 0))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call WindLine) = 
              (expr 
                (expr 
                  (expr 
                    (variable_or_function_call Wind)) * 
                  (expr 
                    (literal 3))) * 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call ScrWidth)) \ 
                      (expr 
                        (literal 320))) ))))) \n 
          (statement 
            (line_statement LINE 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call ScrWidth)) \ 
                  (expr 
                    (literal 2))) , 
                (expr 
                  (expr 
                    (variable_or_function_call ScrHeight)) - 
                  (expr 
                    (literal 5))) ) - 
              ( 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call ScrWidth)) \ 
                    (expr 
                      (literal 2))) + 
                  (expr 
                    (variable_or_function_call WindLine))) , 
                (expr 
                  (expr 
                    (variable_or_function_call ScrHeight)) - 
                  (expr 
                    (literal 5))) ) , 
              (expr 
                (variable_or_function_call ExplosionColor)))) \n 
          (statement 
            (if_inline_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call Wind)) > 
                (expr 
                  (literal 0))) THEN 
              (if_inline_action 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call ArrowDir) = 
                    (expr - 
                      (expr 
                        (literal 2)))))) ELSE 
              (if_inline_action 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call ArrowDir) = 
                    (expr 
                      (literal 2))))))) \n 
          (statement 
            (line_statement LINE 
              ( 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call ScrWidth)) / 
                    (expr 
                      (literal 2))) + 
                  (expr 
                    (variable_or_function_call WindLine))) , 
                (expr 
                  (expr 
                    (variable_or_function_call ScrHeight)) - 
                  (expr 
                    (literal 5))) ) - 
              ( 
                (expr 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call ScrWidth)) / 
                      (expr 
                        (literal 2))) + 
                    (expr 
                      (variable_or_function_call WindLine))) + 
                  (expr 
                    (variable_or_function_call ArrowDir))) , 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call ScrHeight)) - 
                    (expr 
                      (literal 5))) - 
                  (expr 
                    (literal 2))) ) , 
              (expr 
                (variable_or_function_call ExplosionColor)))) \n 
          (statement 
            (line_statement LINE 
              ( 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call ScrWidth)) / 
                    (expr 
                      (literal 2))) + 
                  (expr 
                    (variable_or_function_call WindLine))) , 
                (expr 
                  (expr 
                    (variable_or_function_call ScrHeight)) - 
                  (expr 
                    (literal 5))) ) - 
              ( 
                (expr 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call ScrWidth)) / 
                      (expr 
                        (literal 2))) + 
                    (expr 
                      (variable_or_function_call WindLine))) + 
                  (expr 
                    (variable_or_function_call ArrowDir))) , 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call ScrHeight)) - 
                    (expr 
                      (literal 5))) + 
                  (expr 
                    (literal 2))) ) , 
              (expr 
                (variable_or_function_call ExplosionColor)))) \n) 
        (end_if_statement END IF)) \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id PlaceGorillas) 
    ( 
      (parameter_list 
        (parameter 
          (untyped_id BCoor) 
          (array_declaration 
            ( )) AS 
          (type_name_for_parameter 
            (untyped_id XYPoint)))) ) 
    (block \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Mode)) = 
          (expr 
            (literal 9))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call XAdj) = 
              (expr 
                (literal 14)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call YAdj) = 
              (expr 
                (literal 30)))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call XAdj) = 
                (expr 
                  (literal 7)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call YAdj) = 
                (expr 
                  (literal 16)))) \n)) 
        (end_if_statement END IF)) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call SclX#) = 
          (expr 
            (expr 
              (variable_or_function_call ScrWidth)) / 
            (expr 
              (literal 320))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call SclY#) = 
          (expr 
            (expr 
              (variable_or_function_call ScrHeight)) / 
            (expr 
              (literal 200))))) \n \n \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 2)) 
          (block \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call i)) = 
                  (expr 
                    (literal 1))) THEN 
                (if_inline_action 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call BNum) = 
                      (expr 
                        (expr 
                          (variable_or_function_call FnRan 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 2)) )))) + 
                        (expr 
                          (literal 1)))))) ELSE 
                (if_inline_action 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call BNum) = 
                      (expr 
                        (expr 
                          (variable_or_function_call LastBuilding)) - 
                        (expr 
                          (variable_or_function_call FnRan 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 2)) )))))))))) \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call BWidth) = 
                (expr 
                  (expr 
                    (variable_or_function_call BCoor 
                      (args_or_indices 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call BNum)) + 
                            (expr 
                              (literal 1))) )) . XCoor)) - 
                  (expr 
                    (variable_or_function_call BCoor 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call BNum)) )) . XCoor))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call GorillaX 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call i)) ))) = 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call BCoor 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call BNum)) )) . XCoor)) + 
                    (expr 
                      (expr 
                        (variable_or_function_call BWidth)) / 
                      (expr 
                        (literal 2)))) - 
                  (expr 
                    (variable_or_function_call XAdj))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call GorillaY 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call i)) ))) = 
                (expr 
                  (expr 
                    (variable_or_function_call BCoor 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call BNum)) )) . YCoor)) - 
                  (expr 
                    (variable_or_function_call YAdj))))) \n 
            (statement 
              (put_graphics_statement PUT 
                ( 
                  (expr 
                    (variable_or_function_call GorillaX 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call i)) )))) , 
                  (expr 
                    (variable_or_function_call GorillaY 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call i)) )))) ) , 
                (variable_or_function_call GorD&) , PSET)) \n) NEXT i)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id PlayGame) 
    ( 
      (parameter_list 
        (parameter Player1$) , 
        (parameter Player2$) , 
        (parameter NumGames)) ) 
    (block \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id BCoor) 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 0)) TO 
                  (expr 
                    (literal 30))) )) AS 
            (type_name 
              (untyped_id XYPoint))))) \n 
      (statement 
        (dim_statement DIM 
          (dim_variable TotalWins 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 1)) TO 
                  (expr 
                    (literal 2))) ))))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call J) = 
          (expr 
            (literal 1)))) \n \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call NumGames)) 
          (block \n \n 
            (statement 
              (call_statement 
                (untyped_id CLS))) \n 
            (statement 
              (call_statement 
                (untyped_id RANDOMIZE) 
                (call_argument_list 
                  (call_argument 
                    (expr 
                      ( 
                        (expr 
                          (builtin_function TIMER)) )))))) \n 
            (statement 
              (call_statement CALL 
                (untyped_id MakeCityScape) 
                ( 
                  (call_argument_list 
                    (call_argument BCoor 
                      ( ))) ))) \n 
            (statement 
              (call_statement CALL 
                (untyped_id PlaceGorillas) 
                ( 
                  (call_argument_list 
                    (call_argument BCoor 
                      ( ))) ))) \n 
            (statement 
              (call_statement 
                (untyped_id DoSun) 
                (call_argument_list 
                  (call_argument SUNHAPPY)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Hit) = 
                (expr 
                  (variable_or_function_call FALSE)))) \n 
            (statement 
              (do_loop_statement DO 
                (do_condition WHILE 
                  (expr 
                    (expr 
                      (variable_or_function_call Hit)) = 
                    (expr 
                      (variable_or_function_call FALSE)))) 
                (block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call J) = 
                      (expr 
                        (expr 
                          (literal 1)) - 
                        (expr 
                          (variable_or_function_call J))))) \n 
                  (statement 
                    (locate_statement LOCATE 
                      (expr 
                        (literal 1)) , 
                      (expr 
                        (literal 1)))) \n 
                  (statement 
                    (print_statement PRINT 
                      (expr 
                        (variable_or_function_call Player1$)))) \n 
                  (statement 
                    (locate_statement LOCATE 
                      (expr 
                        (literal 1)) , 
                      (expr 
                        ( 
                          (expr 
                            (expr 
                              (expr 
                                (variable_or_function_call MaxCol)) - 
                              (expr 
                                (literal 1))) - 
                            (expr 
                              (builtin_function LEN 
                                ( 
                                  (expr 
                                    (variable_or_function_call Player2$)) )))) )))) \n 
                  (statement 
                    (print_statement PRINT 
                      (expr 
                        (variable_or_function_call Player2$)))) \n 
                  (statement 
                    (call_statement 
                      (untyped_id Center) 
                      (call_argument_list 
                        (call_argument 
                          (expr 
                            (literal 23))) , 
                        (call_argument 
                          (expr 
                            (expr 
                              (expr 
                                (variable_or_function_call LTRIM$ 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call STR$ 
                                          (args_or_indices 
                                            ( 
                                              (expr 
                                                (variable_or_function_call TotalWins 
                                                  (args_or_indices 
                                                    ( 
                                                      (expr 
                                                        (literal 1)) )))) )))) )))) + 
                              (expr 
                                (literal ">Score<"))) + 
                            (expr 
                              (variable_or_function_call LTRIM$ 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call STR$ 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call TotalWins 
                                                (args_or_indices 
                                                  ( 
                                                    (expr 
                                                      (literal 2)) )))) )))) ))))))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Tosser) = 
                      (expr 
                        (expr 
                          (variable_or_function_call J)) + 
                        (expr 
                          (literal 1))))) : 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Tossee) = 
                      (expr 
                        (expr 
                          (literal 3)) - 
                        (expr 
                          (variable_or_function_call J))))) \n \n \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Hit) = 
                      (expr 
                        (variable_or_function_call DoShot 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call Tosser)) , 
                              (expr 
                                (variable_or_function_call GorillaX 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call Tosser)) )))) , 
                              (expr 
                                (variable_or_function_call GorillaY 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call Tosser)) )))) )))))) \n \n \n 
                  (statement 
                    (if_inline_statement IF 
                      (expr 
                        (variable_or_function_call SunHit)) THEN 
                      (if_inline_action 
                        (statement 
                          (call_statement 
                            (untyped_id DoSun) 
                            (call_argument_list 
                              (call_argument SUNHAPPY))))))) \n \n 
                  (statement 
                    (if_inline_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call Hit)) = 
                        (expr 
                          (variable_or_function_call TRUE))) THEN 
                      (if_inline_action 
                        (statement 
                          (call_statement CALL 
                            (untyped_id UpdateScores) 
                            ( 
                              (call_argument_list 
                                (call_argument TotalWins 
                                  ( )) , 
                                (call_argument Tosser) , 
                                (call_argument Hit)) )))))) \n) LOOP)) \n 
            (statement 
              (call_statement 
                (untyped_id SLEEP) 
                (call_argument_list 
                  (call_argument 
                    (expr 
                      (literal 1)))))) \n) NEXT i)) \n \n 
      (statement 
        (screen_statement SCREEN 
          (expr 
            (literal 0)))) \n 
      (statement 
        (width_statement WIDTH 
          (expr 
            (literal 80)) , 
          (expr 
            (literal 25)))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)) , 
          (expr 
            (literal 0)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call MaxCol) = 
          (expr 
            (literal 80)))) \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal 8))) , 
            (call_argument 
              (expr 
                (literal "GAME OVER!")))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal 10))) , 
            (call_argument 
              (expr 
                (literal "Score:")))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 11)) , 
          (expr 
            (literal 30)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call Player1$)) ; 
          (expr 
            (variable_or_function_call TAB 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 50)) )))) ; 
          (expr 
            (variable_or_function_call TotalWins 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 1)) )))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 12)) , 
          (expr 
            (literal 30)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call Player2$)) ; 
          (expr 
            (variable_or_function_call TAB 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 50)) )))) ; 
          (expr 
            (variable_or_function_call TotalWins 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 2)) )))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal 24))) , 
            (call_argument 
              (expr 
                (literal "Press any key to continue")))))) \n 
      (statement 
        (call_statement 
          (untyped_id SparklePause))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)) , 
          (expr 
            (literal 0)))) \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n 
  (function_statement FUNCTION PlotShot 
    ( 
      (parameter_list 
        (parameter StartX) , 
        (parameter StartY) , 
        (parameter Angle#) , 
        (parameter Velocity) , 
        (parameter PlayerNum)) ) 
    (block \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Angle#) = 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call Angle#)) / 
              (expr 
                (literal 180))) * 
            (expr 
              (variable_or_function_call pi#))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Radius) = 
          (expr 
            (expr 
              (variable_or_function_call Mode)) MOD 
            (expr 
              (literal 7))))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call InitXVel#) = 
          (expr 
            (expr 
              (variable_or_function_call COS 
                (args_or_indices 
                  ( 
                    (expr 
                      (variable_or_function_call Angle#)) )))) * 
            (expr 
              (variable_or_function_call Velocity))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call InitYVel#) = 
          (expr 
            (expr 
              (variable_or_function_call SIN 
                (args_or_indices 
                  ( 
                    (expr 
                      (variable_or_function_call Angle#)) )))) * 
            (expr 
              (variable_or_function_call Velocity))))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call oldx#) = 
          (expr 
            (variable_or_function_call StartX)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call oldy#) = 
          (expr 
            (variable_or_function_call StartY)))) \n \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call PlayerNum)) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (statement 
            (put_graphics_statement PUT 
              ( 
                (expr 
                  (variable_or_function_call StartX)) , 
                (expr 
                  (variable_or_function_call StartY)) ) , 
              (variable_or_function_call GorL&) , PSET)) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (put_graphics_statement PUT 
                ( 
                  (expr 
                    (variable_or_function_call StartX)) , 
                  (expr 
                    (variable_or_function_call StartY)) ) , 
                (variable_or_function_call GorR&) , PSET)) \n)) 
        (end_if_statement END IF)) \n \n \n 
      (statement 
        (play_statement PLAY 
          (expr 
            (literal "MBo0L32A-L64CL16BL64A+")))) \n 
      (statement 
        (call_statement 
          (untyped_id Rest) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal .1)))))) \n \n \n 
      (statement 
        (put_graphics_statement PUT 
          ( 
            (expr 
              (variable_or_function_call StartX)) , 
            (expr 
              (variable_or_function_call StartY)) ) , 
          (variable_or_function_call GorD&) , PSET)) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call adjust) = 
          (expr 
            (variable_or_function_call Scl 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 4)) )))))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call xedge) = 
          (expr 
            (expr 
              (variable_or_function_call Scl 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 9)) )))) * 
            (expr 
              ( 
                (expr 
                  (expr 
                    (literal 2)) - 
                  (expr 
                    (variable_or_function_call PlayerNum))) ))))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Impact) = 
          (expr 
            (variable_or_function_call FALSE)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call ShotInSun) = 
          (expr 
            (variable_or_function_call FALSE)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call OnScreen) = 
          (expr 
            (variable_or_function_call TRUE)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call PlayerHit) = 
          (expr 
            (literal 0)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call NeedErase) = 
          (expr 
            (variable_or_function_call FALSE)))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call StartXPos) = 
          (expr 
            (variable_or_function_call StartX)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call StartYPos) = 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call StartY)) - 
              (expr 
                (variable_or_function_call adjust))) - 
            (expr 
              (literal 3))))) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call PlayerNum)) = 
          (expr 
            (literal 2))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call StartXPos) = 
              (expr 
                (expr 
                  (variable_or_function_call StartXPos)) + 
                (expr 
                  (variable_or_function_call Scl 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 25)) ))))))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call direction) = 
              (expr 
                (variable_or_function_call Scl 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 4)) )))))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call direction) = 
                (expr 
                  (variable_or_function_call Scl 
                    (args_or_indices 
                      ( 
                        (expr - 
                          (expr 
                            (literal 4))) )))))) \n)) 
        (end_if_statement END IF)) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Velocity)) < 
          (expr 
            (literal 2))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call x#) = 
              (expr 
                (variable_or_function_call StartX)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call y#) = 
              (expr 
                (variable_or_function_call StartY)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call pointval) = 
              (expr 
                (variable_or_function_call OBJECTCOLOR)))) \n) 
        (end_if_statement END IF)) \n \n 
      (statement 
        (do_loop_statement DO 
          (do_condition WHILE 
            (expr 
              (expr 
                ( 
                  (expr NOT 
                    (expr 
                      (variable_or_function_call Impact))) )) AND 
              (expr 
                (variable_or_function_call OnScreen)))) 
          (block \n \n 
            (statement 
              (call_statement 
                (untyped_id Rest) 
                (call_argument_list 
                  (call_argument 
                    (expr 
                      (literal .02)))))) \n \n \n 
            (if_block_statement IF 
              (expr 
                (variable_or_function_call NeedErase)) THEN \n 
              (then_block 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call NeedErase) = 
                    (expr 
                      (variable_or_function_call FALSE)))) \n 
                (statement 
                  (call_statement CALL 
                    (untyped_id DrawBan) 
                    ( 
                      (call_argument_list 
                        (call_argument oldx#) , 
                        (call_argument oldy#) , 
                        (call_argument oldrot) , 
                        (call_argument FALSE)) ))) \n) 
              (end_if_statement END IF)) \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call x#) = 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call StartXPos)) + 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call InitXVel#)) * 
                          (expr 
                            (variable_or_function_call t#))) ))) + 
                  (expr 
                    ( 
                      (expr 
                        (expr 
                          (expr 
                            (literal .5)) * 
                          (expr 
                            ( 
                              (expr 
                                (expr 
                                  (variable_or_function_call Wind)) / 
                                (expr 
                                  (literal 5))) ))) * 
                        (expr 
                          (expr 
                            (variable_or_function_call t#)) ^ 
                          (expr 
                            (literal 2)))) ))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call y#) = 
                (expr 
                  (expr 
                    (variable_or_function_call StartYPos)) + 
                  (expr 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            ( 
                              (expr 
                                (expr - 
                                  (expr 
                                    (literal 1))) * 
                                (expr 
                                  ( 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call InitYVel#)) * 
                                      (expr 
                                        (variable_or_function_call t#))) ))) )) + 
                          (expr 
                            ( 
                              (expr 
                                (expr 
                                  (expr 
                                    (literal .5)) * 
                                  (expr 
                                    (variable_or_function_call gravity#))) * 
                                (expr 
                                  (expr 
                                    (variable_or_function_call t#)) ^ 
                                  (expr 
                                    (literal 2)))) ))) )) * 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call ScrHeight)) / 
                          (expr 
                            (literal 350))) )))))) \n \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (expr 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call x#)) >= 
                        (expr 
                          (expr 
                            (variable_or_function_call ScrWidth)) - 
                          (expr 
                            (variable_or_function_call Scl 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (literal 10)) )))))) )) OR 
                  (expr 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call x#)) <= 
                        (expr 
                          (literal 3))) ))) OR 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call y#)) >= 
                      (expr 
                        (expr 
                          (variable_or_function_call ScrHeight)) - 
                        (expr 
                          (literal 3)))) ))) THEN \n 
              (then_block 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call OnScreen) = 
                    (expr 
                      (variable_or_function_call FALSE)))) \n) 
              (end_if_statement END IF)) \n \n \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call OnScreen)) AND 
                (expr 
                  (expr 
                    (variable_or_function_call y#)) > 
                  (expr 
                    (literal 0)))) THEN \n 
              (then_block \n \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call LookY) = 
                    (expr 
                      (literal 0)))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call LookX) = 
                    (expr 
                      (variable_or_function_call Scl 
                        (args_or_indices 
                          ( 
                            (expr 
                              (expr 
                                (literal 8)) * 
                              (expr 
                                ( 
                                  (expr 
                                    (expr 
                                      (literal 2)) - 
                                    (expr 
                                      (variable_or_function_call PlayerNum))) ))) )))))) \n 
                (statement 
                  (do_loop_statement DO 
                    (block \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call pointval) = 
                          (expr 
                            (variable_or_function_call POINT 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call x#)) + 
                                    (expr 
                                      (variable_or_function_call LookX))) , 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call y#)) + 
                                    (expr 
                                      (variable_or_function_call LookY))) )))))) \n 
                      (if_block_statement IF 
                        (expr 
                          (expr 
                            (variable_or_function_call pointval)) = 
                          (expr 
                            (literal 0))) THEN \n 
                        (then_block 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call Impact) = 
                              (expr 
                                (variable_or_function_call FALSE)))) \n 
                          (if_block_statement IF 
                            (expr 
                              (expr 
                                (variable_or_function_call ShotInSun)) = 
                              (expr 
                                (variable_or_function_call TRUE))) THEN \n 
                            (then_block 
                              (statement 
                                (if_inline_statement IF 
                                  (expr 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call ABS 
                                          (args_or_indices 
                                            ( 
                                              (expr 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call ScrWidth)) \ 
                                                  (expr 
                                                    (literal 2))) - 
                                                (expr 
                                                  (variable_or_function_call x#))) )))) > 
                                      (expr 
                                        (variable_or_function_call Scl 
                                          (args_or_indices 
                                            ( 
                                              (expr 
                                                (literal 20)) ))))) OR 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call y#)) > 
                                      (expr 
                                        (variable_or_function_call SunHt)))) THEN 
                                  (if_inline_action 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call ShotInSun) = 
                                        (expr 
                                          (variable_or_function_call FALSE))))))) \n) 
                            (end_if_statement END IF)) \n) 
                        (elseif_block_statement ELSEIF 
                          (expr 
                            (expr 
                              (expr 
                                (variable_or_function_call pointval)) = 
                              (expr 
                                (variable_or_function_call SUNATTR))) AND 
                            (expr 
                              (expr 
                                (variable_or_function_call y#)) < 
                              (expr 
                                (variable_or_function_call SunHt)))) THEN 
                          (else_block \n 
                            (statement 
                              (if_inline_statement IF 
                                (expr NOT 
                                  (expr 
                                    (variable_or_function_call SunHit))) THEN 
                                (if_inline_action 
                                  (statement 
                                    (call_statement 
                                      (untyped_id DoSun) 
                                      (call_argument_list 
                                        (call_argument SUNSHOCK))))))) \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call SunHit) = 
                                (expr 
                                  (variable_or_function_call TRUE)))) \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call ShotInSun) = 
                                (expr 
                                  (variable_or_function_call TRUE)))) \n)) 
                        (else_block_statement ELSE 
                          (else_block \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call Impact) = 
                                (expr 
                                  (variable_or_function_call TRUE)))) \n)) 
                        (end_if_statement END IF)) \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call LookX) = 
                          (expr 
                            (expr 
                              (variable_or_function_call LookX)) + 
                            (expr 
                              (variable_or_function_call direction))))) \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call LookY) = 
                          (expr 
                            (expr 
                              (variable_or_function_call LookY)) + 
                            (expr 
                              (variable_or_function_call Scl 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (literal 6)) ))))))) \n) LOOP 
                    (do_condition UNTIL 
                      (expr 
                        (expr 
                          (variable_or_function_call Impact)) OR 
                        (expr 
                          (expr 
                            (variable_or_function_call LookX)) <> 
                          (expr 
                            (variable_or_function_call Scl 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (literal 4)) ))))))))) \n \n 
                (if_block_statement IF 
                  (expr 
                    (expr NOT 
                      (expr 
                        (variable_or_function_call ShotInSun))) AND 
                    (expr NOT 
                      (expr 
                        (variable_or_function_call Impact)))) THEN \n 
                  (then_block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call rot) = 
                        (expr 
                          (expr 
                            ( 
                              (expr 
                                (expr 
                                  (variable_or_function_call t#)) * 
                                (expr 
                                  (literal 10))) )) MOD 
                          (expr 
                            (literal 4))))) \n 
                    (statement 
                      (call_statement CALL 
                        (untyped_id DrawBan) 
                        ( 
                          (call_argument_list 
                            (call_argument x#) , 
                            (call_argument y#) , 
                            (call_argument rot) , 
                            (call_argument TRUE)) ))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call NeedErase) = 
                        (expr 
                          (variable_or_function_call TRUE)))) \n) 
                  (end_if_statement END IF)) \n \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call oldx#) = 
                    (expr 
                      (variable_or_function_call x#)))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call oldy#) = 
                    (expr 
                      (variable_or_function_call y#)))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call oldrot) = 
                    (expr 
                      (variable_or_function_call rot)))) \n \n) 
              (end_if_statement END IF)) \n \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call t#) = 
                (expr 
                  (expr 
                    (variable_or_function_call t#)) + 
                  (expr 
                    (literal .1))))) \n \n) LOOP)) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (expr 
              (variable_or_function_call pointval)) <> 
            (expr 
              (variable_or_function_call OBJECTCOLOR))) AND 
          (expr 
            (variable_or_function_call Impact))) THEN \n 
        (then_block 
          (statement 
            (call_statement CALL 
              (untyped_id DoExplosion) 
              ( 
                (call_argument_list 
                  (call_argument 
                    (expr 
                      (expr 
                        (variable_or_function_call x#)) + 
                      (expr 
                        (variable_or_function_call adjust)))) , 
                  (call_argument 
                    (expr 
                      (expr 
                        (variable_or_function_call y#)) + 
                      (expr 
                        (variable_or_function_call adjust))))) ))) \n) 
        (elseif_block_statement ELSEIF 
          (expr 
            (expr 
              (variable_or_function_call pointval)) = 
            (expr 
              (variable_or_function_call OBJECTCOLOR))) THEN 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call PlayerHit) = 
                (expr 
                  (variable_or_function_call ExplodeGorilla 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call x#)) , 
                        (expr 
                          (variable_or_function_call y#)) )))))) \n)) 
        (end_if_statement END IF)) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call PlotShot) = 
          (expr 
            (variable_or_function_call PlayerHit)))) \n \n) 
    (end_function_statement END FUNCTION)) \n \n \n \n 
  (sub_statement SUB 
    (untyped_id Rest) 
    ( 
      (parameter_list 
        (parameter t#)) ) 
    (block \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call s#) = 
          (expr 
            (builtin_function TIMER)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call t2#) = 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call MachSpeed)) * 
              (expr 
                (variable_or_function_call t#))) / 
            (expr 
              (variable_or_function_call SPEEDCONST))))) \n 
      (statement 
        (do_loop_statement DO 
          (block \n) LOOP 
          (do_condition UNTIL 
            (expr 
              (expr 
                (expr 
                  (builtin_function TIMER)) - 
                (expr 
                  (variable_or_function_call s#))) > 
              (expr 
                (variable_or_function_call t2#)))))) \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n 
  (function_statement FUNCTION Scl 
    ( 
      (parameter_list 
        (parameter n!)) ) 
    (block \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call n!)) <> 
          (expr 
            (variable_or_function_call INT 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call n!)) ))))) THEN \n 
        (then_block 
          (statement 
            (if_inline_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call Mode)) = 
                (expr 
                  (literal 1))) THEN 
              (if_inline_action 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call n!) = 
                    (expr 
                      (expr 
                        (variable_or_function_call n!)) - 
                      (expr 
                        (literal 1)))))))) \n) 
        (end_if_statement END IF)) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Mode)) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call Scl) = 
              (expr 
                (variable_or_function_call CINT 
                  (args_or_indices 
                    ( 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call n!)) / 
                          (expr 
                            (literal 2))) + 
                        (expr 
                          (literal .1))) )))))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Scl) = 
                (expr 
                  (variable_or_function_call CINT 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call n!)) )))))) \n)) 
        (end_if_statement END IF)) \n \n) 
    (end_function_statement END FUNCTION)) \n \n \n \n 
  (sub_statement SUB 
    (untyped_id SetScreen) 
    (block \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Mode)) = 
          (expr 
            (literal 9))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call ExplosionColor) = 
              (expr 
                (literal 2)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call BackColor) = 
              (expr 
                (literal 1)))) \n 
          (statement 
            (palette_statement PALETTE 
              (expr 
                (literal 0)) , 
              (expr 
                (literal 1)))) \n 
          (statement 
            (palette_statement PALETTE 
              (expr 
                (literal 1)) , 
              (expr 
                (literal 46)))) \n 
          (statement 
            (palette_statement PALETTE 
              (expr 
                (literal 2)) , 
              (expr 
                (literal 44)))) \n 
          (statement 
            (palette_statement PALETTE 
              (expr 
                (literal 3)) , 
              (expr 
                (literal 54)))) \n 
          (statement 
            (palette_statement PALETTE 
              (expr 
                (literal 5)) , 
              (expr 
                (literal 7)))) \n 
          (statement 
            (palette_statement PALETTE 
              (expr 
                (literal 6)) , 
              (expr 
                (literal 4)))) \n 
          (statement 
            (palette_statement PALETTE 
              (expr 
                (literal 7)) , 
              (expr 
                (literal 3)))) \n 
          (statement 
            (palette_statement PALETTE 
              (expr 
                (literal 9)) , 
              (expr 
                (literal 63)))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call ExplosionColor) = 
                (expr 
                  (literal 2)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call BackColor) = 
                (expr 
                  (literal 0)))) \n 
            (statement 
              (color_statement COLOR 
                (expr 
                  (variable_or_function_call BackColor)) , 
                (expr 
                  (literal 2)))) \n \n)) 
        (end_if_statement END IF)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n 
  (sub_statement SUB 
    (untyped_id SparklePause) 
    (block \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 4)) , 
          (expr 
            (literal 0)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call A$) = 
          (expr 
            (literal "*    *    *    *    *    *    *    *    *    *    *    *    *    *    *    *    *    ")))) \n 
      (statement 
        (while_wend_statement WHILE 
          (expr 
            (expr 
              (variable_or_function_call INKEY$)) <> 
            (expr 
              (literal ""))) 
          (block :) WEND)) \n \n 
      (statement 
        (while_wend_statement WHILE 
          (expr 
            (expr 
              (variable_or_function_call INKEY$)) = 
            (expr 
              (literal ""))) 
          (block \n 
            (statement 
              (for_next_statement FOR A = 
                (expr 
                  (literal 1)) TO 
                (expr 
                  (literal 5)) 
                (block \n 
                  (statement 
                    (locate_statement LOCATE 
                      (expr 
                        (literal 1)) , 
                      (expr 
                        (literal 1)))) \n 
                  (statement 
                    (print_statement PRINT 
                      (expr 
                        (builtin_function MID$ 
                          ( 
                            (expr 
                              (variable_or_function_call A$)) , 
                            (expr 
                              (variable_or_function_call A)) , 
                            (expr 
                              (literal 80)) ))) ;)) \n 
                  (statement 
                    (locate_statement LOCATE 
                      (expr 
                        (literal 22)) , 
                      (expr 
                        (literal 1)))) \n 
                  (statement 
                    (print_statement PRINT 
                      (expr 
                        (builtin_function MID$ 
                          ( 
                            (expr 
                              (variable_or_function_call A$)) , 
                            (expr 
                              (expr 
                                (literal 6)) - 
                              (expr 
                                (variable_or_function_call A))) , 
                            (expr 
                              (literal 80)) ))) ;)) \n \n 
                  (statement 
                    (for_next_statement FOR b = 
                      (expr 
                        (literal 2)) TO 
                      (expr 
                        (literal 21)) 
                      (block \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call c) = 
                            (expr 
                              (expr 
                                ( 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call A)) + 
                                    (expr 
                                      (variable_or_function_call b))) )) MOD 
                              (expr 
                                (literal 5))))) \n 
                        (if_block_statement IF 
                          (expr 
                            (expr 
                              (variable_or_function_call c)) = 
                            (expr 
                              (literal 1))) THEN \n 
                          (then_block 
                            (statement 
                              (locate_statement LOCATE 
                                (expr 
                                  (variable_or_function_call b)) , 
                                (expr 
                                  (literal 80)))) \n 
                            (statement 
                              (print_statement PRINT 
                                (expr 
                                  (literal "*")) ;)) \n 
                            (statement 
                              (locate_statement LOCATE 
                                (expr 
                                  (expr 
                                    (literal 23)) - 
                                  (expr 
                                    (variable_or_function_call b))) , 
                                (expr 
                                  (literal 1)))) \n 
                            (statement 
                              (print_statement PRINT 
                                (expr 
                                  (literal "*")) ;)) \n) 
                          (else_block_statement ELSE 
                            (else_block \n 
                              (statement 
                                (locate_statement LOCATE 
                                  (expr 
                                    (variable_or_function_call b)) , 
                                  (expr 
                                    (literal 80)))) \n 
                              (statement 
                                (print_statement PRINT 
                                  (expr 
                                    (literal " ")) ;)) \n 
                              (statement 
                                (locate_statement LOCATE 
                                  (expr 
                                    (expr 
                                      (literal 23)) - 
                                    (expr 
                                      (variable_or_function_call b))) , 
                                  (expr 
                                    (literal 1)))) \n 
                              (statement 
                                (print_statement PRINT 
                                  (expr 
                                    (literal " ")) ;)) \n)) 
                          (end_if_statement END IF)) \n) NEXT b)) \n) NEXT A)) \n) WEND)) \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id UpdateScores) 
    ( 
      (parameter_list 
        (parameter Record 
          (array_declaration 
            ( ))) , 
        (parameter PlayerNum) , 
        (parameter Results)) ) 
    (block \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Results)) = 
          (expr 
            (variable_or_function_call HITSELF))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call Record 
                (args_or_indices 
                  ( 
                    (expr 
                      (variable_or_function_call ABS 
                        (args_or_indices 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call PlayerNum)) - 
                              (expr 
                                (literal 3))) )))) ))) = 
              (expr 
                (expr 
                  (variable_or_function_call Record 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call ABS 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call PlayerNum)) - 
                                  (expr 
                                    (literal 3))) )))) )))) + 
                (expr 
                  (literal 1))))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Record 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call PlayerNum)) ))) = 
                (expr 
                  (expr 
                    (variable_or_function_call Record 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call PlayerNum)) )))) + 
                  (expr 
                    (literal 1))))) \n)) 
        (end_if_statement END IF)) \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id VictoryDance) 
    ( 
      (parameter_list 
        (parameter Player)) ) 
    (block \n \n 
      (statement 
        (for_next_statement FOR i# = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 4)) 
          (block \n 
            (statement 
              (put_graphics_statement PUT 
                ( 
                  (expr 
                    (variable_or_function_call GorillaX 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call Player)) )))) , 
                  (expr 
                    (variable_or_function_call GorillaY 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call Player)) )))) ) , 
                (variable_or_function_call GorL&) , PSET)) \n 
            (statement 
              (play_statement PLAY 
                (expr 
                  (literal "MFO0L32EFGEFDC")))) \n 
            (statement 
              (call_statement 
                (untyped_id Rest) 
                (call_argument_list 
                  (call_argument 
                    (expr 
                      (literal .2)))))) \n 
            (statement 
              (put_graphics_statement PUT 
                ( 
                  (expr 
                    (variable_or_function_call GorillaX 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call Player)) )))) , 
                  (expr 
                    (variable_or_function_call GorillaY 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call Player)) )))) ) , 
                (variable_or_function_call GorR&) , PSET)) \n 
            (statement 
              (play_statement PLAY 
                (expr 
                  (literal "MFO0L32EFGEFDC")))) \n 
            (statement 
              (call_statement 
                (untyped_id Rest) 
                (call_argument_list 
                  (call_argument 
                    (expr 
                      (literal .2)))))) \n) NEXT)) \n) 
    (end_sub_statement END SUB)) \n <EOF>)
