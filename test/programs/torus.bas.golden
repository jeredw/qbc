(program \n \n \n \n \n \n \n \n 
  (statement 
    (deftype_statement DEFINT 
      (letter_range A - Z))) \n 
  (declare_statement DECLARE SUB 
    (untyped_id GetConfig) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id SetPalette) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id TorusDefine) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id TorusCalc) 
    ( 
      (declare_parameter_list 
        (declare_parameter 
          (untyped_id T) 
          (array_declaration 
            ( )) AS 
          (type_name_for_declare_parameter ANY))) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id TorusColor) 
    ( 
      (declare_parameter_list 
        (declare_parameter 
          (untyped_id T) 
          (array_declaration 
            ( )) AS 
          (type_name_for_declare_parameter ANY))) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id TorusSort) 
    ( 
      (declare_parameter_list 
        (declare_parameter Low) , 
        (declare_parameter High)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id TorusDraw) 
    ( 
      (declare_parameter_list 
        (declare_parameter 
          (untyped_id T) 
          (array_declaration 
            ( )) AS 
          (type_name_for_declare_parameter ANY)) , 
        (declare_parameter Index 
          (array_declaration 
            ( )))) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id TileDraw) 
    ( 
      (declare_parameter_list 
        (declare_parameter 
          (untyped_id T) AS 
          (type_name_for_declare_parameter ANY))) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id TorusRotate) 
    ( 
      (declare_parameter_list 
        (declare_parameter First)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id Delay) 
    ( 
      (declare_parameter_list 
        (declare_parameter Seconds!)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id CountTiles) 
    ( 
      (declare_parameter_list 
        (declare_parameter T1) , 
        (declare_parameter T2)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id Message) 
    ( 
      (declare_parameter_list 
        (declare_parameter Text$)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id SetConfig) 
    ( 
      (declare_parameter_list 
        (declare_parameter mode)) )) \n 
  (declare_statement DECLARE FUNCTION Inside 
    ( 
      (declare_parameter_list 
        (declare_parameter 
          (untyped_id T) AS 
          (type_name_for_declare_parameter ANY))) )) \n 
  (declare_statement DECLARE FUNCTION DegToRad! 
    ( 
      (declare_parameter_list 
        (declare_parameter Degrees)) )) \n 
  (declare_statement DECLARE FUNCTION Rotated 
    ( 
      (declare_parameter_list 
        (declare_parameter Lower) , 
        (declare_parameter Upper) , 
        (declare_parameter Current) , 
        (declare_parameter Inc)) )) \n \n \n 
  (statement 
    (const_statement CONST 
      (const_assignment PI = 
        (const_expr 
          (expr 
            (literal 3.14159)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment TRUE = 
        (const_expr 
          (expr - 
            (expr 
              (literal 1))))) , 
      (const_assignment FALSE = 
        (const_expr 
          (expr 
            (literal 0)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment BACK = 
        (const_expr 
          (expr 
            (literal 0)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment TROW = 
        (const_expr 
          (expr 
            (literal 24)))) , 
      (const_assignment TCOL = 
        (const_expr 
          (expr 
            (literal 60)))))) \n \n \n 
  (statement 
    (const_statement CONST 
      (const_assignment RNDM = 
        (const_expr 
          (expr - 
            (expr 
              (literal 1))))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment START = 
        (const_expr 
          (expr 
            (literal 0)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment CONTINUE = 
        (const_expr 
          (expr 
            (literal 1)))))) \n \n \n 
  (statement 
    (const_statement CONST 
      (const_assignment VGA = 
        (const_expr 
          (expr 
            (literal 12)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment MCGA = 
        (const_expr 
          (expr 
            (literal 13)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment EGA256 = 
        (const_expr 
          (expr 
            (literal 9)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment EGA64 = 
        (const_expr 
          (expr 
            (literal 8)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment MONO = 
        (const_expr 
          (expr 
            (literal 10)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment HERC = 
        (const_expr 
          (expr 
            (literal 3)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment CGA = 
        (const_expr 
          (expr 
            (literal 1)))))) \n \n \n 
  (type_statement TYPE 
    (untyped_id Tile) \n 
    (type_element 
      (untyped_id x1) AS 
      (type_name_for_type_element SINGLE) \n) 
    (type_element 
      (untyped_id x2) AS 
      (type_name_for_type_element SINGLE) \n) 
    (type_element 
      (untyped_id x3) AS 
      (type_name_for_type_element SINGLE) \n) 
    (type_element 
      (untyped_id x4) AS 
      (type_name_for_type_element SINGLE) \n) 
    (type_element 
      (untyped_id y1) AS 
      (type_name_for_type_element SINGLE) \n) 
    (type_element 
      (untyped_id y2) AS 
      (type_name_for_type_element SINGLE) \n) 
    (type_element 
      (untyped_id y3) AS 
      (type_name_for_type_element SINGLE) \n) 
    (type_element 
      (untyped_id y4) AS 
      (type_name_for_type_element SINGLE) \n) 
    (type_element 
      (untyped_id z1) AS 
      (type_name_for_type_element SINGLE) \n) 
    (type_element 
      (untyped_id xc) AS 
      (type_name_for_type_element SINGLE) \n) 
    (type_element 
      (untyped_id yc) AS 
      (type_name_for_type_element SINGLE) \n) 
    (type_element 
      (untyped_id TColor) AS 
      (type_name_for_type_element INTEGER) \n) END TYPE) \n \n \n 
  (type_statement TYPE 
    (untyped_id Config) \n 
    (type_element 
      (untyped_id Scrn) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id Colors) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id Atribs) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id XPix) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id YPix) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id TCOL) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id TROW) AS 
      (type_name_for_type_element INTEGER) \n) END TYPE) \n \n 
  (statement 
    (dim_statement DIM 
      (dim_variable 
        (untyped_id VC) AS 
        (type_name 
          (untyped_id Config))))) \n \n \n 
  (type_statement TYPE 
    (untyped_id TORUS) \n 
    (type_element 
      (untyped_id Panel) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id Sect) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id Thick) AS 
      (type_name_for_type_element SINGLE) \n) 
    (type_element 
      (untyped_id XDegree) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id YDegree) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id Bord) AS 
      (type_name_for_type_element 
        (fixed_string STRING * 3)) \n) 
    (type_element 
      (untyped_id Delay) AS 
      (type_name_for_type_element SINGLE) \n) END TYPE) \n \n 
  (statement 
    (dim_statement DIM 
      (dim_variable 
        (untyped_id TOR) AS 
        (type_name 
          (untyped_id TORUS))) , 
      (dim_variable 
        (untyped_id Max) AS 
        (type_name INTEGER)))) \n \n \n 
  (statement 
    (dim_statement DIM 
      (dim_variable 
        (untyped_id Pal) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 0)) TO 
              (expr 
                (literal 300))) )) AS 
        (type_name LONG)))) \n \n \n 
  (statement 
    (dim_statement DIM 
      (dim_variable 
        (untyped_id InitRows) AS 
        (type_name INTEGER)) , 
      (dim_variable 
        (untyped_id BestMode) AS 
        (type_name INTEGER)) , 
      (dim_variable 
        (untyped_id Available) AS 
        (type_name STRING)))) \n \n \n \n \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call TOR.Thick) = 
      (expr 
        (literal 3)))) : 
  (statement 
    (assignment_statement 
      (variable_or_function_call TOR.Bord) = 
      (expr 
        (literal "YES")))) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call TOR.Panel) = 
      (expr 
        (literal 8)))) : 
  (statement 
    (assignment_statement 
      (variable_or_function_call TOR.Sect) = 
      (expr 
        (literal 14)))) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call TOR.XDegree) = 
      (expr 
        (literal 60)))) : 
  (statement 
    (assignment_statement 
      (variable_or_function_call TOR.YDegree) = 
      (expr 
        (literal 165)))) \n \n \n 
  (statement 
    (call_statement 
      (untyped_id GetConfig))) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call VC.Scrn) = 
      (expr 
        (variable_or_function_call BestMode)))) \n \n 
  (statement 
    (do_loop_statement DO 
      (do_condition WHILE 
        (expr 
          (variable_or_function_call TRUE))) 
      (block \n \n \n 
        (statement 
          (call_statement 
            (untyped_id TorusDefine))) \n \n \n 
        (statement 
          (do_loop_statement DO 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Tmp) = 
                  (expr 
                    (variable_or_function_call TOR.Panel)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Max) = 
                  (expr 
                    (expr 
                      (variable_or_function_call TOR.Panel)) * 
                    (expr 
                      (variable_or_function_call TOR.Sect))))) \n \n \n 
              (statement 
                (dim_statement REDIM 
                  (dim_variable 
                    (untyped_id Index) 
                    (dim_array_bounds 
                      ( 
                        (dim_subscript 
                          (expr 
                            (literal 0)) TO 
                          (expr 
                            (expr 
                              (variable_or_function_call Max)) - 
                            (expr 
                              (literal 1)))) )) AS 
                    (type_name INTEGER)))) \n \n 
              (statement 
                (on_error_statement ON ERROR GOTO 
                  (target 
                    (text_label 
                      (untyped_id MemErr))))) \n \n 
              (statement 
                (dim_statement REDIM 
                  (dim_variable 
                    (untyped_id T) 
                    (dim_array_bounds 
                      ( 
                        (dim_subscript 
                          (expr 
                            (literal 0)) TO 
                          (expr 
                            (expr 
                              (variable_or_function_call Max)) - 
                            (expr 
                              (literal 1)))) )) AS 
                    (type_name 
                      (untyped_id Tile))))) \n 
              (statement 
                (on_error_statement ON ERROR GOTO 
                  (target 
                    (line_number 0)))) \n) LOOP 
            (do_condition UNTIL 
              (expr 
                (expr 
                  (variable_or_function_call Tmp)) = 
                (expr 
                  (variable_or_function_call TOR.Panel)))))) \n \n \n 
        (statement 
          (for_next_statement FOR Til = 
            (expr 
              (literal 0)) TO 
            (expr 
              (expr 
                (variable_or_function_call Max)) - 
              (expr 
                (literal 1))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Index 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call Til)) ))) = 
                  (expr 
                    (variable_or_function_call Til)))) \n) NEXT)) \n \n \n 
        (statement 
          (call_statement 
            (untyped_id Message) 
            (call_argument_list 
              (call_argument 
                (expr 
                  (literal "Calculating")))))) \n 
        (statement 
          (call_statement 
            (untyped_id TorusCalc) 
            (call_argument_list 
              (call_argument T 
                ( ))))) \n \n \n 
        (statement 
          (call_statement 
            (untyped_id TorusColor) 
            (call_argument_list 
              (call_argument T 
                ( ))))) \n \n \n 
        (statement 
          (call_statement 
            (untyped_id Message) 
            (call_argument_list 
              (call_argument 
                (expr 
                  (literal "Sorting")))))) \n 
        (statement 
          (call_statement 
            (untyped_id TorusSort) 
            (call_argument_list 
              (call_argument 
                (expr 
                  (literal 0))) , 
              (call_argument 
                (expr 
                  (expr 
                    (variable_or_function_call Max)) - 
                  (expr 
                    (literal 1))))))) \n \n \n 
        (statement 
          (screen_statement SCREEN 
            (expr 
              (variable_or_function_call VC.Scrn)))) \n \n \n 
        (statement 
          (call_statement 
            (untyped_id SetPalette))) \n \n \n \n 
        (statement 
          (window_statement WINDOW 
            ( 
              (expr - 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call TOR.Thick)) + 
                      (expr 
                        (literal 1))) ))) , 
              (expr - 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call TOR.Thick)) + 
                      (expr 
                        (literal 1))) ))) ) - 
            ( 
              (expr 
                (expr 
                  (variable_or_function_call TOR.Thick)) + 
                (expr 
                  (literal 1))) , 
              (expr 
                (expr 
                  (variable_or_function_call TOR.Thick)) + 
                (expr 
                  (literal 1))) ))) \n \n \n 
        (statement 
          (call_statement 
            (untyped_id TorusDraw) 
            (call_argument_list 
              (call_argument T 
                ( )) , 
              (call_argument Index 
                ( ))))) \n \n \n 
        (statement 
          (do_loop_statement DO 
            (do_condition WHILE 
              (expr 
                (expr 
                  (variable_or_function_call INKEY$)) = 
                (expr 
                  (literal "")))) 
            (block \n 
              (statement 
                (call_statement 
                  (untyped_id Delay) 
                  (call_argument_list 
                    (call_argument 
                      (expr 
                        ( 
                          (expr 
                            (variable_or_function_call TOR.Delay)) )))))) \n 
              (statement 
                (call_statement 
                  (untyped_id TorusRotate) 
                  (call_argument_list 
                    (call_argument CONTINUE)))) \n) LOOP)) \n 
        (statement 
          (screen_statement SCREEN 
            (expr 
              (literal 0)))) \n 
        (statement 
          (width_statement WIDTH 
            (expr 
              (literal 80)))) \n) LOOP)) \n \n \n 
  (statement 
    (width_statement WIDTH 
      (expr 
        (literal 80)) , 
      (expr 
        (variable_or_function_call InitRows)))) \n \n 
  (statement 
    (end_statement END)) \n \n \n 
  (label 
    (text_label 
      (untyped_id VideoErr)) :) \n 
  (statement 
    (select_case_statement SELECT CASE 
      (expr 
        (variable_or_function_call BestMode)) 
      (before_first_case \n) 
      (case_block 
        (case_statement CASE 
          (case_expr 
            (expr 
              (variable_or_function_call VGA)))) 
        (block \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call BestMode) = 
              (expr 
                (variable_or_function_call MCGA)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Available) = 
              (expr 
                (literal "12BD")))) \n)) 
      (case_block 
        (case_statement CASE 
          (case_expr 
            (expr 
              (variable_or_function_call MCGA)))) 
        (block \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call BestMode) = 
              (expr 
                (variable_or_function_call EGA256)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Available) = 
              (expr 
                (literal "12789")))) \n)) 
      (case_block 
        (case_statement CASE 
          (case_expr 
            (expr 
              (variable_or_function_call EGA256)))) 
        (block \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call BestMode) = 
              (expr 
                (variable_or_function_call CGA)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Available) = 
              (expr 
                (literal "12")))) \n)) 
      (case_block 
        (case_statement CASE 
          (case_expr 
            (expr 
              (variable_or_function_call CGA)))) 
        (block \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call BestMode) = 
              (expr 
                (variable_or_function_call MONO)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Available) = 
              (expr 
                (literal "A")))) \n)) 
      (case_block 
        (case_statement CASE 
          (case_expr 
            (expr 
              (variable_or_function_call MONO)))) 
        (block \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call BestMode) = 
              (expr 
                (variable_or_function_call HERC)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Available) = 
              (expr 
                (literal "3")))) \n)) 
      (case_block 
        (case_statement CASE ELSE) 
        (block \n 
          (statement 
            (print_statement PRINT 
              (expr 
                (literal "Sorry. Graphics not available. Can't run Torus.")))) \n 
          (statement 
            (end_statement END)) \n)) 
      (end_select_statement END SELECT))) \n 
  (statement 
    (resume_statement RESUME)) \n \n \n 
  (label 
    (text_label 
      (untyped_id EGAErr)) :) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call BestMode) = 
      (expr 
        (variable_or_function_call EGA64)))) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call Available) = 
      (expr 
        (literal "12789")))) \n 
  (statement 
    (resume_statement RESUME NEXT)) \n \n \n 
  (label 
    (text_label 
      (untyped_id MemErr)) :) \n 
  (statement 
    (locate_statement LOCATE 
      (expr 
        (literal 22)) , 
      (expr 
        (literal 1)))) \n 
  (statement 
    (print_statement PRINT 
      (expr 
        (literal "Out of memory")))) \n 
  (statement 
    (print_statement PRINT 
      (expr 
        (literal "Reducing panels from")) ; 
      (expr 
        (variable_or_function_call TOR.Panel)) ; 
      (expr 
        (literal "to")) ; 
      (expr 
        (expr 
          (variable_or_function_call TOR.Panel)) - 
        (expr 
          (literal 1))))) \n 
  (statement 
    (print_statement PRINT 
      (expr 
        (literal "Reducing sections from")) ; 
      (expr 
        (variable_or_function_call TOR.Sect)) ; 
      (expr 
        (literal "to")) ; 
      (expr 
        (expr 
          (variable_or_function_call TOR.Sect)) - 
        (expr 
          (literal 1))) ;)) \n 
  (statement 
    (do_loop_statement DO 
      (do_condition WHILE 
        (expr 
          (expr 
            (variable_or_function_call INKEY$)) = 
          (expr 
            (literal "")))) 
      (block :) LOOP)) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call TOR.Panel) = 
      (expr 
        (expr 
          (variable_or_function_call TOR.Panel)) - 
        (expr 
          (literal 1))))) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call TOR.Sect) = 
      (expr 
        (expr 
          (variable_or_function_call TOR.Sect)) - 
        (expr 
          (literal 1))))) \n 
  (statement 
    (resume_statement RESUME NEXT)) \n \n \n 
  (label 
    (text_label 
      (untyped_id RowErr)) :) \n 
  (if_block_statement IF 
    (expr 
      (expr 
        (variable_or_function_call InitRows)) = 
      (expr 
        (literal 50))) THEN \n 
    (then_block 
      (statement 
        (assignment_statement 
          (variable_or_function_call InitRows) = 
          (expr 
            (literal 43)))) \n 
      (statement 
        (resume_statement RESUME)) \n) 
    (else_block_statement ELSE 
      (else_block \n 
        (statement 
          (assignment_statement 
            (variable_or_function_call InitRows) = 
            (expr 
              (literal 25)))) \n 
        (statement 
          (resume_statement RESUME NEXT)) \n)) 
    (end_if_statement END IF)) \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id CountTiles) 
    ( 
      (parameter_list 
        (parameter T1) , 
        (parameter T2)) ) STATIC 
    (block \n \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (expr 
              (variable_or_function_call TROW)) - 
            (expr 
              (literal 1))) , 
          (expr 
            (variable_or_function_call TCOL)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call SPACE$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 19)) )))) ;)) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (expr 
              (variable_or_function_call T1)) > 
            (expr 
              (literal 0))) AND 
          (expr 
            (expr 
              (variable_or_function_call T2)) > 
            (expr 
              (literal 0)))) THEN \n 
        (then_block 
          (statement 
            (locate_statement LOCATE 
              (expr 
                (expr 
                  (variable_or_function_call TROW)) - 
                (expr 
                  (literal 1))) , 
              (expr 
                (variable_or_function_call TCOL)))) \n 
          (statement 
            (print_statement PRINT 
              (expr 
                (literal "Tile ")) ;)) \n 
          (statement 
            (print_using_statement PRINT USING 
              (expr 
                (literal " ###")) ; 
              (expr 
                (variable_or_function_call T1)) ;)) \n 
          (statement 
            (print_using_statement PRINT USING 
              (expr 
                (literal " ###")) ; 
              (expr 
                (variable_or_function_call T2)) ;)) \n) 
        (end_if_statement END IF)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n 
  (function_statement FUNCTION DegToRad! 
    ( 
      (parameter_list 
        (parameter Degrees)) ) STATIC 
    (block \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call DegToRad!) = 
          (expr 
            (expr 
              ( 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call Degrees)) * 
                    (expr 
                      (literal 2))) * 
                  (expr 
                    (variable_or_function_call PI))) )) / 
            (expr 
              (literal 360))))) \n \n) 
    (end_function_statement END FUNCTION)) \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id Delay) 
    ( 
      (parameter_list 
        (parameter Seconds!)) ) STATIC 
    (block \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Begin!) = 
          (expr 
            (builtin_function TIMER)))) \n 
      (statement 
        (do_loop_statement DO 
          (do_condition UNTIL 
            (expr 
              (expr 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (builtin_function TIMER)) - 
                      (expr 
                        (variable_or_function_call Begin!))) > 
                    (expr 
                      (variable_or_function_call Seconds!))) )) OR 
              (expr 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (builtin_function TIMER)) - 
                      (expr 
                        (variable_or_function_call Begin!))) < 
                    (expr 
                      (literal 0))) )))) 
          (block \n) LOOP)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id GetConfig) STATIC 
    (block \n 
      (statement 
        (shared_statement SHARED 
          (scope_variable 
            (untyped_id InitRows) AS 
            (type_name INTEGER)) , 
          (scope_variable 
            (untyped_id BestMode) AS 
            (type_name INTEGER)) , 
          (scope_variable 
            (untyped_id Available) AS 
            (type_name STRING)))) \n \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call InitRows) = 
          (expr 
            (literal 50)))) \n 
      (statement 
        (on_error_statement ON ERROR GOTO 
          (target 
            (text_label 
              (untyped_id RowErr))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call InitRows)) , 
          (expr 
            (literal 1)))) \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call BestMode) = 
          (expr 
            (variable_or_function_call VGA)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Available) = 
          (expr 
            (literal "12789BCD")))) \n \n 
      (statement 
        (on_error_statement ON ERROR GOTO 
          (target 
            (text_label 
              (untyped_id VideoErr))))) \n \n 
      (statement 
        (screen_statement SCREEN 
          (expr 
            (variable_or_function_call BestMode)))) \n \n 
      (statement 
        (on_error_statement ON ERROR GOTO 
          (target 
            (text_label 
              (untyped_id EGAErr))))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call BestMode)) = 
            (expr 
              (variable_or_function_call EGA256))) THEN 
          (if_inline_action 
            (statement 
              (screen_statement SCREEN 
                (expr 
                  (literal 8)) , , 
                (expr 
                  (literal 1))))))) \n \n 
      (statement 
        (on_error_statement ON ERROR GOTO 
          (target 
            (line_number 0)))) \n \n \n 
      (statement 
        (screen_statement SCREEN 
          (expr 
            (literal 0)) , , 
          (expr 
            (literal 0)))) \n 
      (statement 
        (width_statement WIDTH 
          (expr 
            (literal 80)) , 
          (expr 
            (literal 25)))) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n \n \n 
  (function_statement FUNCTION Inside 
    ( 
      (parameter_list 
        (parameter 
          (untyped_id T) AS 
          (type_name_for_parameter 
            (untyped_id Tile)))) ) STATIC 
    (block \n 
      (statement 
        (shared_statement SHARED 
          (scope_variable 
            (untyped_id VC) AS 
            (type_name 
              (untyped_id Config))))) \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id Highest) AS 
            (type_name SINGLE)) , 
          (dim_variable 
            (untyped_id Lowest) AS 
            (type_name SINGLE)))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Border) = 
          (expr 
            (expr 
              (variable_or_function_call VC.Atribs)) - 
            (expr 
              (literal 1))))) \n \n \n \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call T.xc) = 
          (expr 
            (expr 
              (variable_or_function_call T.x2)) + 
            (expr 
              ( 
                (expr 
                  (expr 
                    ( 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call T.x3)) + 
                          (expr 
                            (expr 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call T.x4)) - 
                                  (expr 
                                    (variable_or_function_call T.x3))) )) / 
                            (expr 
                              (literal 2)))) - 
                        (expr 
                          (variable_or_function_call T.x2))) )) / 
                  (expr 
                    (literal 2))) ))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call T.yc) = 
          (expr 
            (expr 
              (variable_or_function_call T.y2)) + 
            (expr 
              ( 
                (expr 
                  (expr 
                    ( 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call T.y3)) + 
                          (expr 
                            (expr 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call T.y4)) - 
                                  (expr 
                                    (variable_or_function_call T.y3))) )) / 
                            (expr 
                              (literal 2)))) - 
                        (expr 
                          (variable_or_function_call T.y2))) )) / 
                  (expr 
                    (literal 2))) ))))) \n \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call POINT 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call T.xc)) , 
                  (expr 
                    (variable_or_function_call T.yc)) )))) = 
          (expr 
            (variable_or_function_call Border))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call Inside) = 
              (expr 
                (variable_or_function_call FALSE)))) \n 
          (statement 
            (exit_statement EXIT FUNCTION)) \n) 
        (end_if_statement END IF)) \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Highest) = 
          (expr 
            (variable_or_function_call T.y1)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Lowest) = 
          (expr 
            (variable_or_function_call T.y1)))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call T.y2)) > 
            (expr 
              (variable_or_function_call Highest))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call Highest) = 
                (expr 
                  (variable_or_function_call T.y2))))))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call T.y2)) < 
            (expr 
              (variable_or_function_call Lowest))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call Lowest) = 
                (expr 
                  (variable_or_function_call T.y2))))))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call T.y3)) > 
            (expr 
              (variable_or_function_call Highest))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call Highest) = 
                (expr 
                  (variable_or_function_call T.y3))))))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call T.y3)) < 
            (expr 
              (variable_or_function_call Lowest))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call Lowest) = 
                (expr 
                  (variable_or_function_call T.y3))))))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call T.y4)) > 
            (expr 
              (variable_or_function_call Highest))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call Highest) = 
                (expr 
                  (variable_or_function_call T.y4))))))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call T.y4)) < 
            (expr 
              (variable_or_function_call Lowest))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call Lowest) = 
                (expr 
                  (variable_or_function_call T.y4))))))) \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call X) = 
          (expr 
            (variable_or_function_call PMAP 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call T.xc)) , 
                  (expr 
                    (literal 0)) )))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call YU) = 
          (expr 
            (variable_or_function_call PMAP 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call T.yc)) , 
                  (expr 
                    (literal 1)) )))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call YD) = 
          (expr 
            (variable_or_function_call YU)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call H) = 
          (expr 
            (variable_or_function_call PMAP 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call Highest)) , 
                  (expr 
                    (literal 1)) )))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call L) = 
          (expr 
            (variable_or_function_call PMAP 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call Lowest)) , 
                  (expr 
                    (literal 1)) )))))) \n \n \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call IsUp) = 
          (expr 
            (variable_or_function_call FALSE)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call IsDown) = 
          (expr 
            (variable_or_function_call FALSE)))) \n \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call YU) = 
                (expr 
                  (expr 
                    (variable_or_function_call YU)) - 
                  (expr 
                    (literal 1))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call YD) = 
                (expr 
                  (expr 
                    (variable_or_function_call YD)) + 
                  (expr 
                    (literal 1))))) \n \n \n 
            (if_block_statement IF 
              (expr NOT 
                (expr 
                  (variable_or_function_call IsUp))) THEN \n 
              (then_block 
                (statement 
                  (if_inline_statement IF 
                    (expr 
                      (expr 
                        (variable_or_function_call POINT 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call T.xc)) , 
                              (expr 
                                (variable_or_function_call PMAP 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call YU)) , 
                                      (expr 
                                        (literal 3)) )))) )))) = 
                      (expr 
                        (variable_or_function_call Border))) THEN 
                    (if_inline_action 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call IsUp) = 
                          (expr 
                            (variable_or_function_call TRUE))))))) \n) 
              (end_if_statement END IF)) \n \n \n 
            (if_block_statement IF 
              (expr NOT 
                (expr 
                  (variable_or_function_call IsDown))) THEN \n 
              (then_block 
                (statement 
                  (if_inline_statement IF 
                    (expr 
                      (expr 
                        (variable_or_function_call POINT 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call T.xc)) , 
                              (expr 
                                (variable_or_function_call PMAP 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call YD)) , 
                                      (expr 
                                        (literal 3)) )))) )))) = 
                      (expr 
                        (variable_or_function_call Border))) THEN 
                    (if_inline_action 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call IsDown) = 
                          (expr 
                            (variable_or_function_call TRUE))))))) \n) 
              (end_if_statement END IF)) \n \n \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call IsUp)) AND 
                (expr 
                  (variable_or_function_call IsDown))) THEN \n 
              (then_block 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Inside) = 
                    (expr 
                      (variable_or_function_call TRUE)))) \n 
                (statement 
                  (exit_statement EXIT FUNCTION)) \n) 
              (end_if_statement END IF)) \n \n) LOOP 
          (do_condition UNTIL 
            (expr 
              (expr 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call YD)) > 
                    (expr 
                      (variable_or_function_call L))) )) AND 
              (expr 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call YU)) < 
                    (expr 
                      (variable_or_function_call H))) )))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Inside) = 
          (expr 
            (variable_or_function_call FALSE)))) \n \n) 
    (end_function_statement END FUNCTION)) \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id Message) 
    ( 
      (parameter_list 
        (parameter Text$)) ) STATIC 
    (block \n 
      (statement 
        (shared_statement SHARED 
          (scope_variable 
            (untyped_id VC) AS 
            (type_name 
              (untyped_id Config))))) \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call TROW)) , 
          (expr 
            (variable_or_function_call TCOL)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call SPACE$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 19)) )))) ;)) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call TROW)) , 
          (expr 
            (variable_or_function_call TCOL)))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call Text$)) ;)) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 23)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal " . . .")) ;)) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n 
  (function_statement FUNCTION Rotated 
    ( 
      (parameter_list 
        (parameter Lower) , 
        (parameter Upper) , 
        (parameter Current) , 
        (parameter Inc)) ) 
    (block \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Current) = 
          (expr 
            (expr 
              (variable_or_function_call Current)) + 
            (expr 
              (variable_or_function_call Inc))))) \n \n \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call Current)) > 
            (expr 
              (variable_or_function_call Upper))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call Current) = 
                (expr 
                  (variable_or_function_call Lower))))))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call Current)) < 
            (expr 
              (variable_or_function_call Lower))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call Current) = 
                (expr 
                  (variable_or_function_call Upper))))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Rotated) = 
          (expr 
            (variable_or_function_call Current)))) \n \n) 
    (end_function_statement END FUNCTION)) \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id SetConfig) 
    ( 
      (parameter_list 
        (parameter 
          (untyped_id mode) AS 
          (type_name_for_parameter INTEGER))) ) STATIC 
    (block \n 
      (statement 
        (shared_statement SHARED 
          (scope_variable 
            (untyped_id VC) AS 
            (type_name 
              (untyped_id Config))) , 
          (scope_variable 
            (untyped_id BestMode) AS 
            (type_name INTEGER)))) \n \n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call mode)) 
          (before_first_case \n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 1)))) 
            (block \n 
              (if_block_statement IF 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call BestMode)) = 
                    (expr 
                      (variable_or_function_call CGA))) OR 
                  (expr 
                    (expr 
                      (variable_or_function_call BestMode)) = 
                    (expr 
                      (variable_or_function_call MCGA)))) THEN \n 
                (then_block 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call VC.Colors) = 
                      (expr 
                        (literal 0)))) \n) 
                (else_block_statement ELSE 
                  (else_block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call VC.Colors) = 
                        (expr 
                          (literal 16)))) \n)) 
                (end_if_statement END IF)) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.Atribs) = 
                  (expr 
                    (literal 4)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.XPix) = 
                  (expr 
                    (literal 319)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.YPix) = 
                  (expr 
                    (literal 199)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.TCOL) = 
                  (expr 
                    (literal 40)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.TROW) = 
                  (expr 
                    (literal 25)))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 2)))) 
            (block \n 
              (if_block_statement IF 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call BestMode)) = 
                    (expr 
                      (variable_or_function_call CGA))) OR 
                  (expr 
                    (expr 
                      (variable_or_function_call BestMode)) = 
                    (expr 
                      (variable_or_function_call MCGA)))) THEN \n 
                (then_block 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call VC.Colors) = 
                      (expr 
                        (literal 0)))) \n) 
                (else_block_statement ELSE 
                  (else_block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call VC.Colors) = 
                        (expr 
                          (literal 16)))) \n)) 
                (end_if_statement END IF)) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.Atribs) = 
                  (expr 
                    (literal 2)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.XPix) = 
                  (expr 
                    (literal 639)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.YPix) = 
                  (expr 
                    (literal 199)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.TCOL) = 
                  (expr 
                    (literal 80)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.TROW) = 
                  (expr 
                    (literal 25)))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 3)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.Colors) = 
                  (expr 
                    (literal 0)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.Atribs) = 
                  (expr 
                    (literal 2)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.XPix) = 
                  (expr 
                    (literal 720)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.YPix) = 
                  (expr 
                    (literal 348)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.TCOL) = 
                  (expr 
                    (literal 80)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.TROW) = 
                  (expr 
                    (literal 25)))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 7)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.Colors) = 
                  (expr 
                    (literal 16)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.Atribs) = 
                  (expr 
                    (literal 16)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.XPix) = 
                  (expr 
                    (literal 319)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.YPix) = 
                  (expr 
                    (literal 199)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.TCOL) = 
                  (expr 
                    (literal 40)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.TROW) = 
                  (expr 
                    (literal 25)))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 8)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.Colors) = 
                  (expr 
                    (literal 16)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.Atribs) = 
                  (expr 
                    (literal 16)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.XPix) = 
                  (expr 
                    (literal 639)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.YPix) = 
                  (expr 
                    (literal 199)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.TCOL) = 
                  (expr 
                    (literal 80)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.TROW) = 
                  (expr 
                    (literal 25)))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 9)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.Colors) = 
                  (expr 
                    (literal 64)))) \n 
              (statement 
                (if_inline_statement IF 
                  (expr 
                    (expr 
                      (variable_or_function_call BestMode)) = 
                    (expr 
                      (variable_or_function_call EGA64))) THEN 
                  (if_inline_action 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call VC.Atribs) = 
                        (expr 
                          (literal 4))))) ELSE 
                  (if_inline_action 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call VC.Atribs) = 
                        (expr 
                          (literal 16))))))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.XPix) = 
                  (expr 
                    (literal 639)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.YPix) = 
                  (expr 
                    (literal 349)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.TCOL) = 
                  (expr 
                    (literal 80)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.TROW) = 
                  (expr 
                    (literal 25)))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 10)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.Colors) = 
                  (expr 
                    (literal 0)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.Atribs) = 
                  (expr 
                    (literal 2)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.XPix) = 
                  (expr 
                    (literal 319)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.YPix) = 
                  (expr 
                    (literal 199)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.TCOL) = 
                  (expr 
                    (literal 80)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.TROW) = 
                  (expr 
                    (literal 25)))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 11)))) 
            (block \n \n \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.Colors) = 
                  (expr 
                    (literal 216)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.Atribs) = 
                  (expr 
                    (literal 2)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.XPix) = 
                  (expr 
                    (literal 639)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.YPix) = 
                  (expr 
                    (literal 479)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.TCOL) = 
                  (expr 
                    (literal 80)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.TROW) = 
                  (expr 
                    (literal 30)))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 12)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.Colors) = 
                  (expr 
                    (literal 216)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.Atribs) = 
                  (expr 
                    (literal 16)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.XPix) = 
                  (expr 
                    (literal 639)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.YPix) = 
                  (expr 
                    (literal 479)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.TCOL) = 
                  (expr 
                    (literal 80)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.TROW) = 
                  (expr 
                    (literal 30)))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 13)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.Colors) = 
                  (expr 
                    (literal 216)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.Atribs) = 
                  (expr 
                    (literal 256)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.XPix) = 
                  (expr 
                    (literal 639)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.YPix) = 
                  (expr 
                    (literal 479)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.TCOL) = 
                  (expr 
                    (literal 40)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.TROW) = 
                  (expr 
                    (literal 25)))) \n)) 
          (case_block 
            (case_statement CASE ELSE) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.Colors) = 
                  (expr 
                    (literal 16)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.Atribs) = 
                  (expr 
                    (literal 16)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.XPix) = 
                  (expr 
                    (literal 0)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.YPix) = 
                  (expr 
                    (literal 0)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.TCOL) = 
                  (expr 
                    (literal 80)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.TROW) = 
                  (expr 
                    (literal 25)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call VC.Scrn) = 
                  (expr 
                    (literal 0)))) \n 
              (statement 
                (exit_statement EXIT SUB)) \n)) 
          (end_select_statement END SELECT))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call VC.Scrn) = 
          (expr 
            (variable_or_function_call mode)))) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id SetPalette) STATIC 
    (block \n 
      (statement 
        (shared_statement SHARED 
          (scope_variable 
            (untyped_id VC) AS 
            (type_name 
              (untyped_id Config))) , 
          (scope_variable 
            (untyped_id Pal) 
            (array_declaration 
              ( )) AS 
            (type_name LONG)))) \n \n \n 
      (if_block_statement IF 
        (expr 
          (variable_or_function_call VC.Colors)) THEN \n 
        (then_block 
          (statement 
            (select_case_statement SELECT CASE 
              (expr 
                (variable_or_function_call VC.Scrn)) 
              (before_first_case \n) 
              (case_block 
                (case_statement CASE 
                  (case_expr 
                    (expr 
                      (literal 1))) , 
                  (case_expr 
                    (expr 
                      (literal 2))) , 
                  (case_expr 
                    (expr 
                      (literal 7))) , 
                  (case_expr 
                    (expr 
                      (literal 8)))) 
                (block \n \n \n \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Index) = 
                      (expr 
                        (literal 0)))) \n 
                  (statement 
                    (for_next_statement FOR Bs = 
                      (expr 
                        (literal 0)) TO 
                      (expr 
                        (literal 1)) 
                      (block \n 
                        (statement 
                          (for_next_statement FOR Gs = 
                            (expr 
                              (literal 0)) TO 
                            (expr 
                              (literal 1)) 
                            (block \n 
                              (statement 
                                (for_next_statement FOR Rs = 
                                  (expr 
                                    (literal 0)) TO 
                                  (expr 
                                    (literal 1)) 
                                  (block \n 
                                    (statement 
                                      (for_next_statement FOR Hs = 
                                        (expr 
                                          (literal 0)) TO 
                                        (expr 
                                          (literal 1)) 
                                        (block \n 
                                          (statement 
                                            (assignment_statement 
                                              (variable_or_function_call Pal 
                                                (args_or_indices 
                                                  ( 
                                                    (expr 
                                                      (variable_or_function_call Index)) ))) = 
                                              (expr 
                                                (expr 
                                                  (expr 
                                                    (expr 
                                                      (expr 
                                                        (variable_or_function_call Hs)) * 
                                                      (expr 
                                                        (literal 8))) + 
                                                    (expr 
                                                      (expr 
                                                        (variable_or_function_call Rs)) * 
                                                      (expr 
                                                        (literal 4)))) + 
                                                  (expr 
                                                    (expr 
                                                      (variable_or_function_call Gs)) * 
                                                    (expr 
                                                      (literal 2)))) + 
                                                (expr 
                                                  (variable_or_function_call Bs))))) \n 
                                          (statement 
                                            (assignment_statement 
                                              (variable_or_function_call Index) = 
                                              (expr 
                                                (expr 
                                                  (variable_or_function_call Index)) + 
                                                (expr 
                                                  (literal 1))))) \n) NEXT)) \n) NEXT)) \n) NEXT)) \n) NEXT)) \n)) 
              (case_block 
                (case_statement CASE 
                  (case_expr 
                    (expr 
                      (literal 9)))) 
                (block \n \n \n \n \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Index) = 
                      (expr 
                        (literal 0)))) \n 
                  (statement 
                    (for_next_statement FOR Bs = 
                      (expr 
                        (literal 0)) TO 
                      (expr 
                        (literal 1)) 
                      (block \n 
                        (statement 
                          (for_next_statement FOR Gs = 
                            (expr 
                              (literal 0)) TO 
                            (expr 
                              (literal 1)) 
                            (block \n 
                              (statement 
                                (for_next_statement FOR Rs = 
                                  (expr 
                                    (literal 0)) TO 
                                  (expr 
                                    (literal 1)) 
                                  (block \n 
                                    (statement 
                                      (for_next_statement FOR HRs = 
                                        (expr 
                                          (literal 0)) TO 
                                        (expr 
                                          (literal 1)) 
                                        (block \n 
                                          (statement 
                                            (for_next_statement FOR HGs = 
                                              (expr 
                                                (literal 0)) TO 
                                              (expr 
                                                (literal 1)) 
                                              (block \n 
                                                (statement 
                                                  (for_next_statement FOR HBs = 
                                                    (expr 
                                                      (literal 0)) TO 
                                                    (expr 
                                                      (literal 1)) 
                                                    (block \n 
                                                      (statement 
                                                        (assignment_statement 
                                                          (variable_or_function_call Pal 
                                                            (args_or_indices 
                                                              ( 
                                                                (expr 
                                                                  (variable_or_function_call Index)) ))) = 
                                                          (expr 
                                                            (expr 
                                                              (expr 
                                                                (expr 
                                                                  (expr 
                                                                    (expr 
                                                                      (expr 
                                                                        (variable_or_function_call Rs)) * 
                                                                      (expr 
                                                                        (literal 32))) + 
                                                                    (expr 
                                                                      (expr 
                                                                        (variable_or_function_call Gs)) * 
                                                                      (expr 
                                                                        (literal 16)))) + 
                                                                  (expr 
                                                                    (expr 
                                                                      (variable_or_function_call Bs)) * 
                                                                    (expr 
                                                                      (literal 8)))) + 
                                                                (expr 
                                                                  (expr 
                                                                    (variable_or_function_call HRs)) * 
                                                                  (expr 
                                                                    (literal 4)))) + 
                                                              (expr 
                                                                (expr 
                                                                  (variable_or_function_call HGs)) * 
                                                                (expr 
                                                                  (literal 2)))) + 
                                                            (expr 
                                                              (variable_or_function_call HBs))))) \n 
                                                      (statement 
                                                        (assignment_statement 
                                                          (variable_or_function_call Index) = 
                                                          (expr 
                                                            (expr 
                                                              (variable_or_function_call Index)) + 
                                                            (expr 
                                                              (literal 1))))) \n) NEXT)) \n) NEXT)) \n) NEXT)) \n) NEXT)) \n) NEXT)) \n) NEXT)) \n)) 
              (case_block 
                (case_statement CASE 
                  (case_expr 
                    (expr 
                      (literal 11))) , 
                  (case_expr 
                    (expr 
                      (literal 12))) , 
                  (case_expr 
                    (expr 
                      (literal 13)))) 
                (block \n \n \n \n \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Index) = 
                      (expr 
                        (literal 0)))) \n 
                  (statement 
                    (for_next_statement FOR Rs = 
                      (expr 
                        (literal 0)) TO 
                      (expr 
                        (literal 63)) STEP 
                      (expr 
                        (literal 11)) 
                      (block \n 
                        (statement 
                          (for_next_statement FOR Bs = 
                            (expr 
                              (literal 0)) TO 
                            (expr 
                              (literal 63)) STEP 
                            (expr 
                              (literal 11)) 
                            (block \n 
                              (statement 
                                (for_next_statement FOR Gs = 
                                  (expr 
                                    (literal 0)) TO 
                                  (expr 
                                    (literal 63)) STEP 
                                  (expr 
                                    (literal 11)) 
                                  (block \n 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call Pal 
                                          (args_or_indices 
                                            ( 
                                              (expr 
                                                (variable_or_function_call Index)) ))) = 
                                        (expr 
                                          (expr 
                                            (expr 
                                              ( 
                                                (expr 
                                                  (expr 
                                                    (literal 65536)) * 
                                                  (expr 
                                                    (variable_or_function_call Bs))) )) + 
                                            (expr 
                                              ( 
                                                (expr 
                                                  (expr 
                                                    (literal 256)) * 
                                                  (expr 
                                                    (variable_or_function_call Gs))) ))) + 
                                          (expr 
                                            (variable_or_function_call Rs))))) \n 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call Index) = 
                                        (expr 
                                          (expr 
                                            (variable_or_function_call Index)) + 
                                          (expr 
                                            (literal 1))))) \n) NEXT)) \n) NEXT)) \n) NEXT)) \n)) 
              (case_block 
                (case_statement CASE ELSE) 
                (block \n)) 
              (end_select_statement END SELECT))) \n \n 
          (statement 
            (if_inline_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call VC.Atribs)) > 
                (expr 
                  (literal 2))) THEN 
              (if_inline_action 
                (statement 
                  (call_statement 
                    (untyped_id TorusRotate) 
                    (call_argument_list 
                      (call_argument RNDM))))))) \n) 
        (end_if_statement END IF)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id TileDraw) 
    ( 
      (parameter_list 
        (parameter 
          (untyped_id T) AS 
          (type_name_for_parameter 
            (untyped_id Tile)))) ) STATIC 
    (block \n 
      (statement 
        (shared_statement SHARED 
          (scope_variable 
            (untyped_id VC) AS 
            (type_name 
              (untyped_id Config))) , 
          (scope_variable 
            (untyped_id TOR) AS 
            (type_name 
              (untyped_id TORUS))))) \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Border) = 
          (expr 
            (expr 
              (variable_or_function_call VC.Atribs)) - 
            (expr 
              (literal 1))))) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call VC.Atribs)) = 
          (expr 
            (literal 2))) THEN \n 
        (then_block \n 
          (statement 
            (line_statement LINE 
              ( 
                (expr 
                  (variable_or_function_call T.x1)) , 
                (expr 
                  (variable_or_function_call T.y1)) ) - 
              ( 
                (expr 
                  (variable_or_function_call T.x2)) , 
                (expr 
                  (variable_or_function_call T.y2)) ) , 
              (expr 
                (variable_or_function_call T.TColor)))) \n 
          (statement 
            (line_statement LINE - 
              ( 
                (expr 
                  (variable_or_function_call T.x3)) , 
                (expr 
                  (variable_or_function_call T.y3)) ) , 
              (expr 
                (variable_or_function_call T.TColor)))) \n 
          (statement 
            (line_statement LINE - 
              ( 
                (expr 
                  (variable_or_function_call T.x4)) , 
                (expr 
                  (variable_or_function_call T.y4)) ) , 
              (expr 
                (variable_or_function_call T.TColor)))) \n 
          (statement 
            (line_statement LINE - 
              ( 
                (expr 
                  (variable_or_function_call T.x1)) , 
                (expr 
                  (variable_or_function_call T.y1)) ) , 
              (expr 
                (variable_or_function_call T.TColor)))) \n 
          (statement 
            (exit_statement EXIT SUB)) \n) 
        (else_block_statement ELSE 
          (else_block \n \n \n 
            (statement 
              (line_statement LINE 
                ( 
                  (expr 
                    (variable_or_function_call T.x1)) , 
                  (expr 
                    (variable_or_function_call T.y1)) ) - 
                ( 
                  (expr 
                    (variable_or_function_call T.x2)) , 
                  (expr 
                    (variable_or_function_call T.y2)) ) , 
                (expr 
                  (variable_or_function_call Border)))) \n 
            (statement 
              (line_statement LINE - 
                ( 
                  (expr 
                    (variable_or_function_call T.x3)) , 
                  (expr 
                    (variable_or_function_call T.y3)) ) , 
                (expr 
                  (variable_or_function_call Border)))) \n 
            (statement 
              (line_statement LINE - 
                ( 
                  (expr 
                    (variable_or_function_call T.x4)) , 
                  (expr 
                    (variable_or_function_call T.y4)) ) , 
                (expr 
                  (variable_or_function_call Border)))) \n 
            (statement 
              (line_statement LINE - 
                ( 
                  (expr 
                    (variable_or_function_call T.x1)) , 
                  (expr 
                    (variable_or_function_call T.y1)) ) , 
                (expr 
                  (variable_or_function_call Border)))) \n)) 
        (end_if_statement END IF)) \n \n \n 
      (if_block_statement IF 
        (expr 
          (variable_or_function_call Inside 
            (args_or_indices 
              ( 
                (expr 
                  (variable_or_function_call T)) )))) THEN \n 
        (then_block \n 
          (statement 
            (preset_statement PRESET 
              ( 
                (expr 
                  (variable_or_function_call T.xc)) , 
                (expr 
                  (variable_or_function_call T.yc)) ))) \n \n 
          (statement 
            (paint_statement PAINT STEP 
              ( 
                (expr 
                  (literal 0)) , 
                (expr 
                  (literal 0)) ) , 
              (expr 
                (variable_or_function_call BACK)) , 
              (expr 
                (variable_or_function_call Border)))) \n \n 
          (statement 
            (paint_statement PAINT STEP 
              ( 
                (expr 
                  (literal 0)) , 
                (expr 
                  (literal 0)) ) , 
              (expr 
                (variable_or_function_call T.TColor)) , 
              (expr 
                (variable_or_function_call Border)))) \n) 
        (end_if_statement END IF)) \n \n \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call TOR.Bord)) = 
          (expr 
            (literal "YES"))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call Border) = 
              (expr 
                (variable_or_function_call BACK)))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Border) = 
                (expr 
                  (variable_or_function_call T.TColor)))) \n)) 
        (end_if_statement END IF)) \n \n \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (variable_or_function_call T.x1)) , 
            (expr 
              (variable_or_function_call T.y1)) ) - 
          ( 
            (expr 
              (variable_or_function_call T.x2)) , 
            (expr 
              (variable_or_function_call T.y2)) ) , 
          (expr 
            (variable_or_function_call Border)))) \n 
      (statement 
        (line_statement LINE - 
          ( 
            (expr 
              (variable_or_function_call T.x3)) , 
            (expr 
              (variable_or_function_call T.y3)) ) , 
          (expr 
            (variable_or_function_call Border)))) \n 
      (statement 
        (line_statement LINE - 
          ( 
            (expr 
              (variable_or_function_call T.x4)) , 
            (expr 
              (variable_or_function_call T.y4)) ) , 
          (expr 
            (variable_or_function_call Border)))) \n 
      (statement 
        (line_statement LINE - 
          ( 
            (expr 
              (variable_or_function_call T.x1)) , 
            (expr 
              (variable_or_function_call T.y1)) ) , 
          (expr 
            (variable_or_function_call Border)))) \n \n) 
    (end_sub_statement END SUB)) \n \n 
  (statement 
    (deftype_statement DEFSNG 
      (letter_range A - Z))) \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id TorusCalc) 
    ( 
      (parameter_list 
        (parameter 
          (untyped_id T) 
          (array_declaration 
            ( )) AS 
          (type_name_for_parameter 
            (untyped_id Tile)))) ) STATIC 
    (block \n 
      (statement 
        (shared_statement SHARED 
          (scope_variable 
            (untyped_id TOR) AS 
            (type_name 
              (untyped_id TORUS))) , 
          (scope_variable 
            (untyped_id Max) AS 
            (type_name INTEGER)))) \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id XSect) AS 
            (type_name INTEGER)) , 
          (dim_variable 
            (untyped_id YPanel) AS 
            (type_name INTEGER)))) \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call XRot) = 
          (expr 
            (variable_or_function_call DegToRad 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call TOR.XDegree)) )))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call YRot) = 
          (expr 
            (variable_or_function_call DegToRad 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call TOR.YDegree)) )))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CXRot) = 
          (expr 
            (variable_or_function_call COS 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call XRot)) )))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call SXRot) = 
          (expr 
            (variable_or_function_call SIN 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call XRot)) )))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CYRot) = 
          (expr 
            (variable_or_function_call COS 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call YRot)) )))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call SYRot) = 
          (expr 
            (variable_or_function_call SIN 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call YRot)) )))))) \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call XInc) = 
          (expr 
            (expr 
              (expr 
                (literal 2)) * 
              (expr 
                (variable_or_function_call PI))) / 
            (expr 
              (variable_or_function_call TOR.Sect))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call YInc) = 
          (expr 
            (expr 
              (expr 
                (literal 2)) * 
              (expr 
                (variable_or_function_call PI))) / 
            (expr 
              (variable_or_function_call TOR.Panel))))) \n \n \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call FirstY) = 
          (expr 
            (expr 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call TOR.Thick)) + 
                  (expr 
                    (literal 1))) )) * 
            (expr 
              (variable_or_function_call CYRot))))) \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call T 
            (args_or_indices 
              ( 
                (expr 
                  (literal 0)) )) . x1) = 
          (expr 
            (variable_or_function_call FirstY)))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call T 
            (args_or_indices 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call TOR.Sect)) - 
                  (expr 
                    (literal 1))) )) . x2) = 
          (expr 
            (variable_or_function_call FirstY)))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call T 
            (args_or_indices 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call Max)) - 
                  (expr 
                    (literal 1))) )) . x3) = 
          (expr 
            (variable_or_function_call FirstY)))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call T 
            (args_or_indices 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call Max)) - 
                  (expr 
                    (variable_or_function_call TOR.Sect))) )) . x4) = 
          (expr 
            (variable_or_function_call FirstY)))) \n \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call T 
            (args_or_indices 
              ( 
                (expr 
                  (literal 0)) )) . y1) = 
          (expr 
            (literal 0)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call T 
            (args_or_indices 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call TOR.Sect)) - 
                  (expr 
                    (literal 1))) )) . y2) = 
          (expr 
            (literal 0)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call T 
            (args_or_indices 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call Max)) - 
                  (expr 
                    (literal 1))) )) . y3) = 
          (expr 
            (literal 0)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call T 
            (args_or_indices 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call Max)) - 
                  (expr 
                    (variable_or_function_call TOR.Sect))) )) . y4) = 
          (expr 
            (literal 0)))) \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call T 
            (args_or_indices 
              ( 
                (expr 
                  (literal 0)) )) . z1) = 
          (expr 
            (expr - 
              (expr 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call TOR.Thick)) + 
                    (expr 
                      (literal 1))) ))) * 
            (expr 
              (variable_or_function_call SYRot))))) \n \n \n \n \n 
      (statement 
        (for_next_statement FOR XSect = 
          (expr 
            (literal 1)) TO 
          (expr 
            (expr 
              (variable_or_function_call TOR.Sect)) - 
            (expr 
              (literal 1))) 
          (block \n \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call sx) = 
                (expr 
                  (expr 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call TOR.Thick)) + 
                        (expr 
                          (literal 1))) )) * 
                  (expr 
                    (variable_or_function_call COS 
                      (args_or_indices 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call XSect)) * 
                            (expr 
                              (variable_or_function_call XInc))) ))))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call sy) = 
                (expr 
                  (expr 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call TOR.Thick)) + 
                          (expr 
                            (literal 1))) )) * 
                    (expr 
                      (variable_or_function_call SIN 
                        (args_or_indices 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call XSect)) * 
                              (expr 
                                (variable_or_function_call XInc))) ))))) * 
                  (expr 
                    (variable_or_function_call CXRot))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call sz) = 
                (expr 
                  (expr 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call TOR.Thick)) + 
                          (expr 
                            (literal 1))) )) * 
                    (expr 
                      (variable_or_function_call SIN 
                        (args_or_indices 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call XSect)) * 
                              (expr 
                                (variable_or_function_call XInc))) ))))) * 
                  (expr 
                    (variable_or_function_call SXRot))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call ssx) = 
                (expr 
                  (expr 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call sz)) * 
                        (expr 
                          (variable_or_function_call SYRot))) )) + 
                  (expr 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call sx)) * 
                        (expr 
                          (variable_or_function_call CYRot))) ))))) \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call T 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call XSect)) )) . x1) = 
                (expr 
                  (variable_or_function_call ssx)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call T 
                  (args_or_indices 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call XSect)) - 
                        (expr 
                          (literal 1))) )) . x2) = 
                (expr 
                  (variable_or_function_call ssx)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call T 
                  (args_or_indices 
                    ( 
                      (expr 
                        (expr 
                          (expr 
                            (expr 
                              (variable_or_function_call Max)) - 
                            (expr 
                              (variable_or_function_call TOR.Sect))) + 
                          (expr 
                            (variable_or_function_call XSect))) - 
                        (expr 
                          (literal 1))) )) . x3) = 
                (expr 
                  (variable_or_function_call ssx)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call T 
                  (args_or_indices 
                    ( 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call Max)) - 
                          (expr 
                            (variable_or_function_call TOR.Sect))) + 
                        (expr 
                          (variable_or_function_call XSect))) )) . x4) = 
                (expr 
                  (variable_or_function_call ssx)))) \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call T 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call XSect)) )) . y1) = 
                (expr 
                  (variable_or_function_call sy)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call T 
                  (args_or_indices 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call XSect)) - 
                        (expr 
                          (literal 1))) )) . y2) = 
                (expr 
                  (variable_or_function_call sy)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call T 
                  (args_or_indices 
                    ( 
                      (expr 
                        (expr 
                          (expr 
                            (expr 
                              (variable_or_function_call Max)) - 
                            (expr 
                              (variable_or_function_call TOR.Sect))) + 
                          (expr 
                            (variable_or_function_call XSect))) - 
                        (expr 
                          (literal 1))) )) . y3) = 
                (expr 
                  (variable_or_function_call sy)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call T 
                  (args_or_indices 
                    ( 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call Max)) - 
                          (expr 
                            (variable_or_function_call TOR.Sect))) + 
                        (expr 
                          (variable_or_function_call XSect))) )) . y4) = 
                (expr 
                  (variable_or_function_call sy)))) \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call T 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call XSect)) )) . z1) = 
                (expr 
                  (expr 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call sz)) * 
                        (expr 
                          (variable_or_function_call CYRot))) )) - 
                  (expr 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call sx)) * 
                        (expr 
                          (variable_or_function_call SYRot))) ))))) \n) NEXT)) \n \n \n \n \n \n 
      (statement 
        (for_next_statement FOR YPanel = 
          (expr 
            (literal 1)) TO 
          (expr 
            (expr 
              (variable_or_function_call TOR.Panel)) - 
            (expr 
              (literal 1))) 
          (block \n \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call sx) = 
                (expr 
                  (expr 
                    (variable_or_function_call TOR.Thick)) + 
                  (expr 
                    (variable_or_function_call COS 
                      (args_or_indices 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call YPanel)) * 
                            (expr 
                              (variable_or_function_call YInc))) ))))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call sy) = 
                (expr 
                  (expr - 
                    (expr 
                      (variable_or_function_call SIN 
                        (args_or_indices 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call YPanel)) * 
                              (expr 
                                (variable_or_function_call YInc))) ))))) * 
                  (expr 
                    (variable_or_function_call SXRot))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call sz) = 
                (expr 
                  (expr 
                    (variable_or_function_call SIN 
                      (args_or_indices 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call YPanel)) * 
                            (expr 
                              (variable_or_function_call YInc))) )))) * 
                  (expr 
                    (variable_or_function_call CXRot))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call ssx) = 
                (expr 
                  (expr 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call sz)) * 
                        (expr 
                          (variable_or_function_call SYRot))) )) + 
                  (expr 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call sx)) * 
                        (expr 
                          (variable_or_function_call CYRot))) ))))) \n \n \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call T 
                  (args_or_indices 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call TOR.Sect)) * 
                        (expr 
                          (variable_or_function_call YPanel))) )) . x1) = 
                (expr 
                  (variable_or_function_call ssx)))) \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call T 
                  (args_or_indices 
                    ( 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call TOR.Sect)) * 
                          (expr 
                            ( 
                              (expr 
                                (expr 
                                  (variable_or_function_call YPanel)) + 
                                (expr 
                                  (literal 1))) ))) - 
                        (expr 
                          (literal 1))) )) . x2) = 
                (expr 
                  (variable_or_function_call ssx)))) \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call T 
                  (args_or_indices 
                    ( 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call TOR.Sect)) * 
                          (expr 
                            (variable_or_function_call YPanel))) - 
                        (expr 
                          (literal 1))) )) . x3) = 
                (expr 
                  (variable_or_function_call ssx)))) \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call T 
                  (args_or_indices 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call TOR.Sect)) * 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call YPanel)) - 
                              (expr 
                                (literal 1))) ))) )) . x4) = 
                (expr 
                  (variable_or_function_call ssx)))) \n \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call T 
                  (args_or_indices 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call TOR.Sect)) * 
                        (expr 
                          (variable_or_function_call YPanel))) )) . y1) = 
                (expr 
                  (variable_or_function_call sy)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call T 
                  (args_or_indices 
                    ( 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call TOR.Sect)) * 
                          (expr 
                            ( 
                              (expr 
                                (expr 
                                  (variable_or_function_call YPanel)) + 
                                (expr 
                                  (literal 1))) ))) - 
                        (expr 
                          (literal 1))) )) . y2) = 
                (expr 
                  (variable_or_function_call sy)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call T 
                  (args_or_indices 
                    ( 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call TOR.Sect)) * 
                          (expr 
                            (variable_or_function_call YPanel))) - 
                        (expr 
                          (literal 1))) )) . y3) = 
                (expr 
                  (variable_or_function_call sy)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call T 
                  (args_or_indices 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call TOR.Sect)) * 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call YPanel)) - 
                              (expr 
                                (literal 1))) ))) )) . y4) = 
                (expr 
                  (variable_or_function_call sy)))) \n \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call T 
                  (args_or_indices 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call TOR.Sect)) * 
                        (expr 
                          (variable_or_function_call YPanel))) )) . z1) = 
                (expr 
                  (expr 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call sz)) * 
                        (expr 
                          (variable_or_function_call CYRot))) )) - 
                  (expr 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call sx)) * 
                        (expr 
                          (variable_or_function_call SYRot))) ))))) \n \n \n \n 
            (statement 
              (for_next_statement FOR XSect = 
                (expr 
                  (literal 1)) TO 
                (expr 
                  (expr 
                    (variable_or_function_call TOR.Sect)) - 
                  (expr 
                    (literal 1))) 
                (block \n \n \n 
                  (statement 
                    (call_statement 
                      (untyped_id CountTiles) 
                      (call_argument_list 
                        (call_argument XSect) , 
                        (call_argument YPanel)))) \n \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call ty) = 
                      (expr 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call TOR.Thick)) + 
                              (expr 
                                (variable_or_function_call COS 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call YPanel)) * 
                                        (expr 
                                          (variable_or_function_call YInc))) ))))) )) * 
                        (expr 
                          (variable_or_function_call SIN 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call XSect)) * 
                                  (expr 
                                    (variable_or_function_call XInc))) ))))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call tz) = 
                      (expr 
                        (variable_or_function_call SIN 
                          (args_or_indices 
                            ( 
                              (expr 
                                (expr 
                                  (variable_or_function_call YPanel)) * 
                                (expr 
                                  (variable_or_function_call YInc))) )))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call sx) = 
                      (expr 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call TOR.Thick)) + 
                              (expr 
                                (variable_or_function_call COS 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call YPanel)) * 
                                        (expr 
                                          (variable_or_function_call YInc))) ))))) )) * 
                        (expr 
                          (variable_or_function_call COS 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call XSect)) * 
                                  (expr 
                                    (variable_or_function_call XInc))) ))))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call sy) = 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call ty)) * 
                          (expr 
                            (variable_or_function_call CXRot))) - 
                        (expr 
                          (expr 
                            (variable_or_function_call tz)) * 
                          (expr 
                            (variable_or_function_call SXRot)))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call sz) = 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call ty)) * 
                          (expr 
                            (variable_or_function_call SXRot))) + 
                        (expr 
                          (expr 
                            (variable_or_function_call tz)) * 
                          (expr 
                            (variable_or_function_call CXRot)))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call ssx) = 
                      (expr 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call sz)) * 
                              (expr 
                                (variable_or_function_call SYRot))) )) + 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call sx)) * 
                              (expr 
                                (variable_or_function_call CYRot))) ))))) \n \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call T 
                        (args_or_indices 
                          ( 
                            (expr 
                              (expr 
                                (expr 
                                  (variable_or_function_call TOR.Sect)) * 
                                (expr 
                                  (variable_or_function_call YPanel))) + 
                              (expr 
                                (variable_or_function_call XSect))) )) . x1) = 
                      (expr 
                        (variable_or_function_call ssx)))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call T 
                        (args_or_indices 
                          ( 
                            (expr 
                              (expr 
                                (expr 
                                  (expr 
                                    (variable_or_function_call TOR.Sect)) * 
                                  (expr 
                                    (variable_or_function_call YPanel))) + 
                                (expr 
                                  (variable_or_function_call XSect))) - 
                              (expr 
                                (literal 1))) )) . x2) = 
                      (expr 
                        (variable_or_function_call ssx)))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call T 
                        (args_or_indices 
                          ( 
                            (expr 
                              (expr 
                                (expr 
                                  (expr 
                                    (variable_or_function_call TOR.Sect)) * 
                                  (expr 
                                    ( 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call YPanel)) - 
                                        (expr 
                                          (literal 1))) ))) + 
                                (expr 
                                  (variable_or_function_call XSect))) - 
                              (expr 
                                (literal 1))) )) . x3) = 
                      (expr 
                        (variable_or_function_call ssx)))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call T 
                        (args_or_indices 
                          ( 
                            (expr 
                              (expr 
                                (expr 
                                  (variable_or_function_call TOR.Sect)) * 
                                (expr 
                                  ( 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call YPanel)) - 
                                      (expr 
                                        (literal 1))) ))) + 
                              (expr 
                                (variable_or_function_call XSect))) )) . x4) = 
                      (expr 
                        (variable_or_function_call ssx)))) \n \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call T 
                        (args_or_indices 
                          ( 
                            (expr 
                              (expr 
                                (expr 
                                  (variable_or_function_call TOR.Sect)) * 
                                (expr 
                                  (variable_or_function_call YPanel))) + 
                              (expr 
                                (variable_or_function_call XSect))) )) . y1) = 
                      (expr 
                        (variable_or_function_call sy)))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call T 
                        (args_or_indices 
                          ( 
                            (expr 
                              (expr 
                                (expr 
                                  (expr 
                                    (variable_or_function_call TOR.Sect)) * 
                                  (expr 
                                    (variable_or_function_call YPanel))) + 
                                (expr 
                                  (variable_or_function_call XSect))) - 
                              (expr 
                                (literal 1))) )) . y2) = 
                      (expr 
                        (variable_or_function_call sy)))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call T 
                        (args_or_indices 
                          ( 
                            (expr 
                              (expr 
                                (expr 
                                  (expr 
                                    (variable_or_function_call TOR.Sect)) * 
                                  (expr 
                                    ( 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call YPanel)) - 
                                        (expr 
                                          (literal 1))) ))) + 
                                (expr 
                                  (variable_or_function_call XSect))) - 
                              (expr 
                                (literal 1))) )) . y3) = 
                      (expr 
                        (variable_or_function_call sy)))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call T 
                        (args_or_indices 
                          ( 
                            (expr 
                              (expr 
                                (expr 
                                  (variable_or_function_call TOR.Sect)) * 
                                (expr 
                                  ( 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call YPanel)) - 
                                      (expr 
                                        (literal 1))) ))) + 
                              (expr 
                                (variable_or_function_call XSect))) )) . y4) = 
                      (expr 
                        (variable_or_function_call sy)))) \n \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call T 
                        (args_or_indices 
                          ( 
                            (expr 
                              (expr 
                                (expr 
                                  (variable_or_function_call TOR.Sect)) * 
                                (expr 
                                  (variable_or_function_call YPanel))) + 
                              (expr 
                                (variable_or_function_call XSect))) )) . z1) = 
                      (expr 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call sz)) * 
                              (expr 
                                (variable_or_function_call CYRot))) )) - 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call sx)) * 
                              (expr 
                                (variable_or_function_call SYRot))) ))))) \n) NEXT)) \n) NEXT)) \n \n 
      (statement 
        (call_statement 
          (untyped_id CountTiles) 
          (call_argument_list 
            (call_argument 
              (expr - 
                (expr 
                  (literal 1)))) , 
            (call_argument 
              (expr - 
                (expr 
                  (literal 1))))))) \n \n) 
    (end_sub_statement END SUB)) \n \n 
  (statement 
    (deftype_statement DEFINT 
      (letter_range A - Z))) \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id TorusColor) 
    ( 
      (parameter_list 
        (parameter 
          (untyped_id T) 
          (array_declaration 
            ( )) AS 
          (type_name_for_parameter 
            (untyped_id Tile)))) ) STATIC 
    (block \n 
      (statement 
        (shared_statement SHARED 
          (scope_variable 
            (untyped_id VC) AS 
            (type_name 
              (untyped_id Config))) , 
          (scope_variable 
            (untyped_id Max) AS 
            (type_name INTEGER)))) \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call LastAtr) = 
          (expr 
            (expr 
              (variable_or_function_call VC.Atribs)) - 
            (expr 
              (literal 2))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Atr) = 
          (expr 
            (literal 1)))) \n \n \n 
      (statement 
        (for_next_statement FOR Til = 
          (expr 
            (literal 0)) TO 
          (expr 
            (expr 
              (variable_or_function_call Max)) - 
            (expr 
              (literal 1))) 
          (block \n 
            (if_block_statement IF 
              (expr 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call Atr)) >= 
                    (expr 
                      (variable_or_function_call LastAtr))) )) THEN \n 
              (then_block 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Atr) = 
                    (expr 
                      (literal 1)))) \n) 
              (else_block_statement ELSE 
                (else_block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Atr) = 
                      (expr 
                        (expr 
                          (variable_or_function_call Atr)) + 
                        (expr 
                          (literal 1))))) \n)) 
              (end_if_statement END IF)) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call T 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Til)) )) . TColor) = 
                (expr 
                  (variable_or_function_call Atr)))) \n) NEXT)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id TorusDefine) STATIC 
    (block \n 
      (statement 
        (shared_statement SHARED 
          (scope_variable 
            (untyped_id VC) AS 
            (type_name 
              (untyped_id Config))) , 
          (scope_variable 
            (untyped_id TOR) AS 
            (type_name 
              (untyped_id TORUS))) , 
          (scope_variable 
            (untyped_id Available) AS 
            (type_name STRING)))) \n \n \n 
      (statement 
        (const_statement CONST 
          (const_assignment ENTER = 
            (const_expr 
              (expr 
                (literal 13)))) , 
          (const_assignment ESCAPE = 
            (const_expr 
              (expr 
                (literal 27)))))) \n 
      (statement 
        (const_statement CONST 
          (const_assignment DOWNARROW = 
            (const_expr 
              (expr 
                (literal 80)))) , 
          (const_assignment UPARROW = 
            (const_expr 
              (expr 
                (literal 72)))) , 
          (const_assignment LEFTARROW = 
            (const_expr 
              (expr 
                (literal 75)))) , 
          (const_assignment RIGHTARROW = 
            (const_expr 
              (expr 
                (literal 77)))))) \n 
      (statement 
        (const_statement CONST 
          (const_assignment COL1 = 
            (const_expr 
              (expr 
                (literal 20)))) , 
          (const_assignment COL2 = 
            (const_expr 
              (expr 
                (literal 50)))) , 
          (const_assignment ROW = 
            (const_expr 
              (expr 
                (literal 9)))))) \n \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 1)) , 
          (expr 
            (variable_or_function_call COL1)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "UP .............. Move to next field")))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 2)) , 
          (expr 
            (variable_or_function_call COL1)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "DOWN ........ Move to previous field")))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 3)) , 
          (expr 
            (variable_or_function_call COL1)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "LEFT ......... Rotate field value up")))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 4)) , 
          (expr 
            (variable_or_function_call COL1)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "RIGHT ...... Rotate field value down")))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 5)) , 
          (expr 
            (variable_or_function_call COL1)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "ENTER .... Start with current values")))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 6)) , 
          (expr 
            (variable_or_function_call COL1)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "ESCAPE .................. Quit Torus")))) \n \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call ROW)) , 
          (expr 
            (variable_or_function_call COL1)) , 
          (expr 
            (literal 1)) , 
          (expr 
            (literal 1)) , 
          (expr 
            (literal 12)))) \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call ROW)) , 
          (expr 
            (variable_or_function_call COL1)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Thickness")) ;)) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call ROW)) , 
          (expr 
            (variable_or_function_call COL2)))) : 
      (statement 
        (print_using_statement PRINT USING 
          (expr 
            (literal "[ # ]")) ; 
          (expr 
            (variable_or_function_call TOR.Thick)) ;)) \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (expr 
              (variable_or_function_call ROW)) + 
            (expr 
              (literal 2))) , 
          (expr 
            (variable_or_function_call COL1)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Panels per Section")) ;)) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (expr 
              (variable_or_function_call ROW)) + 
            (expr 
              (literal 2))) , 
          (expr 
            (variable_or_function_call COL2)))) : 
      (statement 
        (print_using_statement PRINT USING 
          (expr 
            (literal "[ ## ]")) ; 
          (expr 
            (variable_or_function_call TOR.Panel)) ;)) \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (expr 
              (variable_or_function_call ROW)) + 
            (expr 
              (literal 4))) , 
          (expr 
            (variable_or_function_call COL1)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Sections per Torus")) ;)) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (expr 
              (variable_or_function_call ROW)) + 
            (expr 
              (literal 4))) , 
          (expr 
            (variable_or_function_call COL2)))) : 
      (statement 
        (print_using_statement PRINT USING 
          (expr 
            (literal "[ ## ]")) ; 
          (expr 
            (variable_or_function_call TOR.Sect)) ;)) \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (expr 
              (variable_or_function_call ROW)) + 
            (expr 
              (literal 6))) , 
          (expr 
            (variable_or_function_call COL1)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Tilt around Horizontal Axis")) ;)) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (expr 
              (variable_or_function_call ROW)) + 
            (expr 
              (literal 6))) , 
          (expr 
            (variable_or_function_call COL2)))) : 
      (statement 
        (print_using_statement PRINT USING 
          (expr 
            (literal "[ ### ]")) ; 
          (expr 
            (variable_or_function_call TOR.XDegree)) ;)) \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (expr 
              (variable_or_function_call ROW)) + 
            (expr 
              (literal 8))) , 
          (expr 
            (variable_or_function_call COL1)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Tilt around Vertical Axis")) ;)) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (expr 
              (variable_or_function_call ROW)) + 
            (expr 
              (literal 8))) , 
          (expr 
            (variable_or_function_call COL2)))) : 
      (statement 
        (print_using_statement PRINT USING 
          (expr 
            (literal "[ ### ]")) ; 
          (expr 
            (variable_or_function_call TOR.YDegree)) ;)) \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (expr 
              (variable_or_function_call ROW)) + 
            (expr 
              (literal 10))) , 
          (expr 
            (variable_or_function_call COL1)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Tile Border")) ;)) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (expr 
              (variable_or_function_call ROW)) + 
            (expr 
              (literal 10))) , 
          (expr 
            (variable_or_function_call COL2)))) : 
      (statement 
        (print_using_statement PRINT USING 
          (expr 
            (literal "[ & ] ")) ; 
          (expr 
            (variable_or_function_call TOR.Bord)) ;)) \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (expr 
              (variable_or_function_call ROW)) + 
            (expr 
              (literal 12))) , 
          (expr 
            (variable_or_function_call COL1)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Screen Mode")) ;)) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (expr 
              (variable_or_function_call ROW)) + 
            (expr 
              (literal 12))) , 
          (expr 
            (variable_or_function_call COL2)))) : 
      (statement 
        (print_using_statement PRINT USING 
          (expr 
            (literal "[ ## ]")) ; 
          (expr 
            (variable_or_function_call VC.Scrn)))) \n \n \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (builtin_function LEN 
                ( 
                  (expr 
                    (variable_or_function_call Available$)) ))) = 
            (expr 
              (literal 1))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call Fields) = 
                (expr 
                  (literal 10))))) ELSE 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call Fields) = 
                (expr 
                  (literal 12))))))) \n \n \n 
      (statement 
        (do_loop_statement DO 
          (block \n \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (expr 
                    (variable_or_function_call ROW)) + 
                  (expr 
                    (variable_or_function_call Fld))) , 
                (expr 
                  (expr 
                    (variable_or_function_call COL2)) + 
                  (expr 
                    (literal 2))))) \n \n 
            (statement 
              (do_loop_statement DO 
                (block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call K$) = 
                      (expr 
                        (variable_or_function_call INKEY$)))) \n) LOOP 
                (do_condition WHILE 
                  (expr 
                    (expr 
                      (variable_or_function_call K$)) = 
                    (expr 
                      (literal "")))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Ky) = 
                (expr 
                  (variable_or_function_call ASC 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call RIGHT$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call K$)) , 
                                (expr 
                                  (literal 1)) )))) )))))) \n \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call Ky)) 
                (before_first_case \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call ESCAPE)))) 
                  (block \n \n 
                    (label 
                      (text_label 
                        (untyped_id CLS)) :) 
                    (statement 
                      (end_statement END)) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call UPARROW))) , 
                    (case_expr 
                      (expr 
                        (variable_or_function_call DOWNARROW)))) 
                  (block \n \n 
                    (statement 
                      (if_inline_statement IF 
                        (expr 
                          (expr 
                            (variable_or_function_call Ky)) = 
                          (expr 
                            (variable_or_function_call DOWNARROW))) THEN 
                        (if_inline_action 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call Inc) = 
                              (expr 
                                (literal 2))))) ELSE 
                        (if_inline_action 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call Inc) = 
                              (expr - 
                                (expr 
                                  (literal 2)))))))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Fld) = 
                        (expr 
                          (variable_or_function_call Rotated 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 0)) , 
                                (expr 
                                  (variable_or_function_call Fields)) , 
                                (expr 
                                  (variable_or_function_call Fld)) , 
                                (expr 
                                  (variable_or_function_call Inc)) )))))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call RIGHTARROW))) , 
                    (case_expr 
                      (expr 
                        (variable_or_function_call LEFTARROW)))) 
                  (block \n \n 
                    (statement 
                      (if_inline_statement IF 
                        (expr 
                          (expr 
                            (variable_or_function_call Ky)) = 
                          (expr 
                            (variable_or_function_call RIGHTARROW))) THEN 
                        (if_inline_action 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call Inc) = 
                              (expr 
                                (literal 1))))) ELSE 
                        (if_inline_action 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call Inc) = 
                              (expr - 
                                (expr 
                                  (literal 1)))))))) \n 
                    (statement 
                      (select_case_statement SELECT CASE 
                        (expr 
                          (variable_or_function_call Fld)) 
                        (before_first_case \n) 
                        (case_block 
                          (case_statement CASE 
                            (case_expr 
                              (expr 
                                (literal 0)))) 
                          (block \n \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call TOR.Thick) = 
                                (expr 
                                  (variable_or_function_call Rotated 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (literal 1)) , 
                                        (expr 
                                          (literal 9)) , 
                                        (expr 
                                          (variable_or_function_call INT 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (variable_or_function_call TOR.Thick)) )))) , 
                                        (expr 
                                          (variable_or_function_call Inc)) )))))) \n 
                            (statement 
                              (print_using_statement PRINT USING 
                                (expr 
                                  (literal "#")) ; 
                                (expr 
                                  (variable_or_function_call TOR.Thick)))) \n)) 
                        (case_block 
                          (case_statement CASE 
                            (case_expr 
                              (expr 
                                (literal 2)))) 
                          (block \n \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call TOR.Panel) = 
                                (expr 
                                  (variable_or_function_call Rotated 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (literal 6)) , 
                                        (expr 
                                          (literal 20)) , 
                                        (expr 
                                          (variable_or_function_call TOR.Panel)) , 
                                        (expr 
                                          (variable_or_function_call Inc)) )))))) \n 
                            (statement 
                              (print_using_statement PRINT USING 
                                (expr 
                                  (literal "##")) ; 
                                (expr 
                                  (variable_or_function_call TOR.Panel)))) \n)) 
                        (case_block 
                          (case_statement CASE 
                            (case_expr 
                              (expr 
                                (literal 4)))) 
                          (block \n \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call TOR.Sect) = 
                                (expr 
                                  (variable_or_function_call Rotated 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (literal 6)) , 
                                        (expr 
                                          (literal 20)) , 
                                        (expr 
                                          (variable_or_function_call TOR.Sect)) , 
                                        (expr 
                                          (variable_or_function_call Inc)) )))))) \n 
                            (statement 
                              (print_using_statement PRINT USING 
                                (expr 
                                  (literal "##")) ; 
                                (expr 
                                  (variable_or_function_call TOR.Sect)))) \n)) 
                        (case_block 
                          (case_statement CASE 
                            (case_expr 
                              (expr 
                                (literal 6)))) 
                          (block \n \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call TOR.XDegree) = 
                                (expr 
                                  (variable_or_function_call Rotated 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (literal 0)) , 
                                        (expr 
                                          (literal 345)) , 
                                        (expr 
                                          (variable_or_function_call TOR.XDegree)) , 
                                        (expr 
                                          ( 
                                            (expr 
                                              (expr 
                                                (literal 15)) * 
                                              (expr 
                                                (variable_or_function_call Inc))) )) )))))) \n 
                            (statement 
                              (print_using_statement PRINT USING 
                                (expr 
                                  (literal "###")) ; 
                                (expr 
                                  (variable_or_function_call TOR.XDegree)))) \n)) 
                        (case_block 
                          (case_statement CASE 
                            (case_expr 
                              (expr 
                                (literal 8)))) 
                          (block \n \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call TOR.YDegree) = 
                                (expr 
                                  (variable_or_function_call Rotated 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (literal 0)) , 
                                        (expr 
                                          (literal 345)) , 
                                        (expr 
                                          (variable_or_function_call TOR.YDegree)) , 
                                        (expr 
                                          ( 
                                            (expr 
                                              (expr 
                                                (literal 15)) * 
                                              (expr 
                                                (variable_or_function_call Inc))) )) )))))) \n 
                            (statement 
                              (print_using_statement PRINT USING 
                                (expr 
                                  (literal "###")) ; 
                                (expr 
                                  (variable_or_function_call TOR.YDegree)))) \n)) 
                        (case_block 
                          (case_statement CASE 
                            (case_expr 
                              (expr 
                                (literal 10)))) 
                          (block \n \n 
                            (if_block_statement IF 
                              (expr 
                                (expr 
                                  (variable_or_function_call VC.Atribs)) > 
                                (expr 
                                  (literal 2))) THEN \n 
                              (then_block 
                                (if_block_statement IF 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call TOR.Bord)) = 
                                    (expr 
                                      (literal "YES"))) THEN \n 
                                  (then_block 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call TOR.Bord) = 
                                        (expr 
                                          (literal "NO")))) \n) 
                                  (else_block_statement ELSE 
                                    (else_block \n 
                                      (statement 
                                        (assignment_statement 
                                          (variable_or_function_call TOR.Bord) = 
                                          (expr 
                                            (literal "YES")))) \n)) 
                                  (end_if_statement END IF)) \n) 
                              (end_if_statement END IF)) \n 
                            (statement 
                              (print_statement PRINT 
                                (expr 
                                  (variable_or_function_call TOR.Bord)))) \n)) 
                        (case_block 
                          (case_statement CASE 
                            (case_expr 
                              (expr 
                                (literal 12)))) 
                          (block \n \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call I) = 
                                (expr 
                                  (variable_or_function_call INSTR 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (variable_or_function_call Available$)) , 
                                        (expr 
                                          (variable_or_function_call HEX$ 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (variable_or_function_call VC.Scrn)) )))) )))))) \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call I) = 
                                (expr 
                                  (variable_or_function_call Rotated 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (literal 1)) , 
                                        (expr 
                                          (builtin_function LEN 
                                            ( 
                                              (expr 
                                                (variable_or_function_call Available$)) ))) , 
                                        (expr 
                                          (variable_or_function_call I)) , 
                                        (expr 
                                          (variable_or_function_call Inc)) )))))) \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call VC.Scrn) = 
                                (expr 
                                  (variable_or_function_call VAL 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (expr 
                                            (literal "&h")) + 
                                          (expr 
                                            (builtin_function MID$ 
                                              ( 
                                                (expr 
                                                  (variable_or_function_call Available$)) , 
                                                (expr 
                                                  (variable_or_function_call I)) , 
                                                (expr 
                                                  (literal 1)) )))) )))))) \n 
                            (statement 
                              (print_using_statement PRINT USING 
                                (expr 
                                  (literal "##")) ; 
                                (expr 
                                  (variable_or_function_call VC.Scrn)))) \n)) 
                        (case_block 
                          (case_statement CASE ELSE) 
                          (block \n)) 
                        (end_select_statement END SELECT))) \n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \n)) 
                (end_select_statement END SELECT))) \n \n 
            (statement 
              (call_statement 
                (untyped_id SetConfig) 
                (call_argument_list 
                  (call_argument VC.Scrn)))) \n \n) LOOP 
          (do_condition UNTIL 
            (expr 
              (expr 
                (variable_or_function_call Ky)) = 
              (expr 
                (variable_or_function_call ENTER)))))) \n \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 1)) , 
          (expr 
            (literal 1)) , 
          (expr 
            (literal 0)))) \n \n \n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call VC.Scrn)) 
          (before_first_case \n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 1)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TOR.Delay) = 
                  (expr 
                    (literal .3)))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 2))) , 
              (case_expr 
                (expr 
                  (literal 3))) , 
              (case_expr 
                (expr 
                  (literal 10))) , 
              (case_expr 
                (expr 
                  (literal 11))) , 
              (case_expr 
                (expr 
                  (literal 13)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TOR.Delay) = 
                  (expr 
                    (literal 0)))) \n)) 
          (case_block 
            (case_statement CASE ELSE) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TOR.Delay) = 
                  (expr 
                    (literal .05)))) \n)) 
          (end_select_statement END SELECT))) \n \n \n 
      (statement 
        (call_statement 
          (untyped_id RANDOMIZE) 
          (call_argument_list 
            (call_argument 
              (expr 
                (builtin_function TIMER)))))) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id TorusDraw) 
    ( 
      (parameter_list 
        (parameter 
          (untyped_id T) 
          (array_declaration 
            ( )) AS 
          (type_name_for_parameter 
            (untyped_id Tile))) , 
        (parameter 
          (untyped_id Index) 
          (array_declaration 
            ( )) AS 
          (type_name_for_parameter INTEGER))) ) 
    (block \n 
      (statement 
        (shared_statement SHARED 
          (scope_variable 
            (untyped_id Max) AS 
            (type_name INTEGER)))) \n \n 
      (statement 
        (for_next_statement FOR Til = 
          (expr 
            (literal 0)) TO 
          (expr 
            (expr 
              (variable_or_function_call Max)) - 
            (expr 
              (literal 1))) 
          (block \n 
            (statement 
              (call_statement 
                (untyped_id TileDraw) 
                (call_argument_list 
                  (call_argument T 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call Index 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call Til)) )))) )))))) \n) NEXT)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id TorusRotate) 
    ( 
      (parameter_list 
        (parameter First)) ) STATIC 
    (block \n 
      (statement 
        (shared_statement SHARED 
          (scope_variable 
            (untyped_id VC) AS 
            (type_name 
              (untyped_id Config))) , 
          (scope_variable 
            (untyped_id TOR) AS 
            (type_name 
              (untyped_id TORUS))) , 
          (scope_variable 
            (untyped_id Pal) 
            (array_declaration 
              ( )) AS 
            (type_name LONG)) , 
          (scope_variable 
            (untyped_id Max) AS 
            (type_name INTEGER)))) \n 
      (statement 
        (shared_statement SHARED 
          (scope_variable 
            (untyped_id T) 
            (array_declaration 
              ( )) AS 
            (type_name 
              (untyped_id Tile))) , 
          (scope_variable 
            (untyped_id Index) 
            (array_declaration 
              ( )) AS 
            (type_name INTEGER)) , 
          (scope_variable 
            (untyped_id BestMode) AS 
            (type_name INTEGER)))) \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id Temp) AS 
            (type_name LONG)))) \n \n \n 
      (if_block_statement IF 
        (expr 
          (variable_or_function_call VC.Colors)) THEN \n 
        (then_block \n \n \n 
          (statement 
            (select_case_statement SELECT CASE 
              (expr 
                (variable_or_function_call First)) 
              (before_first_case \n) 
              (case_block 
                (case_statement CASE 
                  (case_expr 
                    (expr 
                      (variable_or_function_call RNDM)))) 
                (block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call FirstClr) = 
                      (expr 
                        (variable_or_function_call INT 
                          (args_or_indices 
                            ( 
                              (expr 
                                (expr 
                                  (variable_or_function_call RND)) * 
                                (expr 
                                  (variable_or_function_call VC.Colors))) )))))) \n)) 
              (case_block 
                (case_statement CASE 
                  (case_expr 
                    (expr 
                      (variable_or_function_call START)))) 
                (block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call FirstClr) = 
                      (expr 
                        (literal 0)))) \n)) 
              (case_block 
                (case_statement CASE ELSE) 
                (block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call FirstClr) = 
                      (expr 
                        (expr 
                          (variable_or_function_call FirstClr)) - 
                        (expr 
                          (literal 1))))) \n)) 
              (end_select_statement END SELECT))) \n \n \n 
          (if_block_statement IF 
            (expr 
              (expr 
                (variable_or_function_call VC.Colors)) > 
              (expr 
                (expr 
                  (variable_or_function_call Max)) - 
                (expr 
                  (literal 1)))) THEN \n 
            (then_block 
              (statement 
                (assignment_statement 
                  (variable_or_function_call LastClr) = 
                  (expr 
                    (expr 
                      (variable_or_function_call Max)) - 
                    (expr 
                      (literal 1))))) \n) 
            (else_block_statement ELSE 
              (else_block \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call LastClr) = 
                    (expr 
                      (expr 
                        (variable_or_function_call VC.Colors)) - 
                      (expr 
                        (literal 1))))) \n)) 
            (end_if_statement END IF)) \n \n \n 
          (statement 
            (if_inline_statement IF 
              (expr 
                (expr 
                  (expr 
                    (variable_or_function_call FirstClr)) < 
                  (expr 
                    (literal 0))) OR 
                (expr 
                  (expr 
                    (variable_or_function_call FirstClr)) >= 
                  (expr 
                    (variable_or_function_call LastClr)))) THEN 
              (if_inline_action 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call FirstClr) = 
                    (expr 
                      (variable_or_function_call LastClr))))))) \n \n \n 
          (if_block_statement IF 
            (expr 
              (expr 
                (variable_or_function_call VC.Atribs)) = 
              (expr 
                (literal 2))) THEN \n 
            (then_block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call LastAtr) = 
                  (expr 
                    (expr 
                      (variable_or_function_call VC.Atribs)) - 
                    (expr 
                      (literal 1))))) \n) 
            (else_block_statement ELSE 
              (else_block \n \n 
                (if_block_statement IF 
                  (expr 
                    (expr 
                      (variable_or_function_call LastClr)) < 
                    (expr 
                      (expr 
                        (variable_or_function_call VC.Atribs)) - 
                      (expr 
                        (literal 2)))) THEN \n 
                  (then_block 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call LastAtr) = 
                        (expr 
                          (variable_or_function_call LastClr)))) \n) 
                  (else_block_statement ELSE 
                    (else_block \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call LastAtr) = 
                          (expr 
                            (expr 
                              (variable_or_function_call VC.Atribs)) - 
                            (expr 
                              (literal 2))))) \n)) 
                  (end_if_statement END IF)) \n)) 
            (end_if_statement END IF)) \n \n \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Work) = 
              (expr 
                (variable_or_function_call FirstClr)))) \n 
          (statement 
            (for_next_statement FOR Atr = 
              (expr 
                (variable_or_function_call LastAtr)) TO 
              (expr 
                (literal 1)) STEP 
              (expr - 
                (expr 
                  (literal 1))) 
              (block \n 
                (statement 
                  (palette_statement PALETTE 
                    (expr 
                      (variable_or_function_call Atr)) , 
                    (expr 
                      (variable_or_function_call Pal 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call Work)) )))))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Work) = 
                    (expr 
                      (expr 
                        (variable_or_function_call Work)) - 
                      (expr 
                        (literal 1))))) \n 
                (statement 
                  (if_inline_statement IF 
                    (expr 
                      (expr 
                        (variable_or_function_call Work)) < 
                      (expr 
                        (literal 0))) THEN 
                    (if_inline_action 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Work) = 
                          (expr 
                            (variable_or_function_call LastClr))))))) \n) NEXT)) \n \n) 
        (end_if_statement END IF)) \n \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call VC.Atribs)) = 
          (expr 
            (literal 2))) THEN \n 
        (then_block \n \n 
          (statement 
            (for_next_statement FOR I = 
              (expr 
                (literal 0)) TO 
              (expr 
                (expr 
                  (variable_or_function_call Max)) - 
                (expr 
                  (literal 1))) 
              (block \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call T 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call I)) )) . TColor) = 
                    (expr 
                      (variable_or_function_call Toggle)))) \n) NEXT)) \n \n 
          (statement 
            (call_statement 
              (untyped_id TorusDraw) 
              (call_argument_list 
                (call_argument T 
                  ( )) , 
                (call_argument Index 
                  ( ))))) \n \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Toggle) = 
              (expr 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call Toggle)) + 
                      (expr 
                        (literal 1))) )) MOD 
                (expr 
                  (literal 2))))) \n \n) 
        (end_if_statement END IF)) \n \n \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (expr 
              (variable_or_function_call VC.Scrn)) = 
            (expr 
              (literal 1))) AND 
          (expr 
            ( 
              (expr 
                (expr 
                  (expr 
                    (variable_or_function_call BestMode)) = 
                  (expr 
                    (variable_or_function_call CGA))) OR 
                (expr 
                  (expr 
                    (variable_or_function_call BestMode)) = 
                  (expr 
                    (variable_or_function_call MCGA)))) ))) THEN \n 
        (then_block 
          (statement 
            (color_statement COLOR , 
              (expr 
                (variable_or_function_call Toggle)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Toggle) = 
              (expr 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call Toggle)) + 
                      (expr 
                        (literal 1))) )) MOD 
                (expr 
                  (literal 2))))) \n 
          (statement 
            (exit_statement EXIT SUB)) \n) 
        (end_if_statement END IF)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id TorusSort) 
    ( 
      (parameter_list 
        (parameter Low) , 
        (parameter High)) ) 
    (block \n 
      (statement 
        (shared_statement SHARED 
          (scope_variable 
            (untyped_id T) 
            (array_declaration 
              ( )) AS 
            (type_name 
              (untyped_id Tile))) , 
          (scope_variable 
            (untyped_id Index) 
            (array_declaration 
              ( )) AS 
            (type_name INTEGER)))) \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id Partition) AS 
            (type_name SINGLE)))) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Low)) < 
          (expr 
            (variable_or_function_call High))) THEN \n 
        (then_block \n \n 
          (if_block_statement IF 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call High)) - 
                (expr 
                  (variable_or_function_call Low))) = 
              (expr 
                (literal 1))) THEN \n 
            (then_block 
              (if_block_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call T 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call Index 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call Low)) )))) )) . z1)) > 
                  (expr 
                    (variable_or_function_call T 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call Index 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call High)) )))) )) . z1))) THEN \n 
                (then_block 
                  (statement 
                    (call_statement 
                      (untyped_id CountTiles) 
                      (call_argument_list 
                        (call_argument High) , 
                        (call_argument Low)))) \n 
                  (statement 
                    (call_statement 
                      (untyped_id SWAP) 
                      (call_argument_list 
                        (call_argument Index 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call Low)) ))) , 
                        (call_argument Index 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call High)) )))))) \n) 
                (end_if_statement END IF)) \n) 
            (else_block_statement ELSE 
              (else_block \n \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call RandIndex) = 
                    (expr 
                      (expr 
                        (variable_or_function_call INT 
                          (args_or_indices 
                            ( 
                              (expr 
                                (expr 
                                  (variable_or_function_call RND)) * 
                                (expr 
                                  ( 
                                    (expr 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call High)) - 
                                        (expr 
                                          (variable_or_function_call Low))) + 
                                      (expr 
                                        (literal 1))) ))) )))) + 
                      (expr 
                        (variable_or_function_call Low))))) \n 
                (statement 
                  (call_statement 
                    (untyped_id CountTiles) 
                    (call_argument_list 
                      (call_argument High) , 
                      (call_argument Low)))) \n 
                (statement 
                  (call_statement 
                    (untyped_id SWAP) 
                    (call_argument_list 
                      (call_argument Index 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call High)) ))) , 
                      (call_argument Index 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call RandIndex%)) )))))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Partition) = 
                    (expr 
                      (variable_or_function_call T 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call Index 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call High)) )))) )) . z1)))) \n \n 
                (statement 
                  (do_loop_statement DO 
                    (block \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call I) = 
                          (expr 
                            (variable_or_function_call Low)))) : 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call J) = 
                          (expr 
                            (variable_or_function_call High)))) \n \n 
                      (statement 
                        (do_loop_statement DO 
                          (do_condition WHILE 
                            (expr 
                              (expr 
                                ( 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call I)) < 
                                    (expr 
                                      (variable_or_function_call J))) )) AND 
                              (expr 
                                ( 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call T 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call Index 
                                                (args_or_indices 
                                                  ( 
                                                    (expr 
                                                      (variable_or_function_call I)) )))) )) . z1)) <= 
                                    (expr 
                                      (variable_or_function_call Partition))) )))) 
                          (block \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call I) = 
                                (expr 
                                  (expr 
                                    (variable_or_function_call I)) + 
                                  (expr 
                                    (literal 1))))) \n) LOOP)) \n \n 
                      (statement 
                        (do_loop_statement DO 
                          (do_condition WHILE 
                            (expr 
                              (expr 
                                ( 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call J)) > 
                                    (expr 
                                      (variable_or_function_call I))) )) AND 
                              (expr 
                                ( 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call T 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call Index 
                                                (args_or_indices 
                                                  ( 
                                                    (expr 
                                                      (variable_or_function_call J)) )))) )) . z1)) >= 
                                    (expr 
                                      (variable_or_function_call Partition))) )))) 
                          (block \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call J) = 
                                (expr 
                                  (expr 
                                    (variable_or_function_call J)) - 
                                  (expr 
                                    (literal 1))))) \n) LOOP)) \n \n 
                      (if_block_statement IF 
                        (expr 
                          (expr 
                            (variable_or_function_call I)) < 
                          (expr 
                            (variable_or_function_call J))) THEN \n 
                        (then_block 
                          (statement 
                            (call_statement 
                              (untyped_id CountTiles) 
                              (call_argument_list 
                                (call_argument High) , 
                                (call_argument Low)))) \n 
                          (statement 
                            (call_statement 
                              (untyped_id SWAP) 
                              (call_argument_list 
                                (call_argument Index 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call I)) ))) , 
                                (call_argument Index 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call J)) )))))) \n) 
                        (end_if_statement END IF)) \n) LOOP 
                    (do_condition WHILE 
                      (expr 
                        (expr 
                          (variable_or_function_call I)) < 
                        (expr 
                          (variable_or_function_call J)))))) \n \n \n 
                (statement 
                  (call_statement 
                    (untyped_id CountTiles) 
                    (call_argument_list 
                      (call_argument High) , 
                      (call_argument Low)))) \n 
                (statement 
                  (call_statement 
                    (untyped_id SWAP) 
                    (call_argument_list 
                      (call_argument Index 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call I)) ))) , 
                      (call_argument Index 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call High)) )))))) \n 
                (if_block_statement IF 
                  (expr 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call I)) - 
                          (expr 
                            (variable_or_function_call Low))) )) < 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call High)) - 
                          (expr 
                            (variable_or_function_call I))) ))) THEN \n 
                  (then_block 
                    (statement 
                      (call_statement 
                        (untyped_id TorusSort) 
                        (call_argument_list 
                          (call_argument Low) , 
                          (call_argument 
                            (expr 
                              (expr 
                                (variable_or_function_call I)) - 
                              (expr 
                                (literal 1))))))) \n 
                    (statement 
                      (call_statement 
                        (untyped_id TorusSort) 
                        (call_argument_list 
                          (call_argument 
                            (expr 
                              (expr 
                                (variable_or_function_call I)) + 
                              (expr 
                                (literal 1)))) , 
                          (call_argument High)))) \n) 
                  (else_block_statement ELSE 
                    (else_block \n 
                      (statement 
                        (call_statement 
                          (untyped_id TorusSort) 
                          (call_argument_list 
                            (call_argument 
                              (expr 
                                (expr 
                                  (variable_or_function_call I)) + 
                                (expr 
                                  (literal 1)))) , 
                            (call_argument High)))) \n 
                      (statement 
                        (call_statement 
                          (untyped_id TorusSort) 
                          (call_argument_list 
                            (call_argument Low) , 
                            (call_argument 
                              (expr 
                                (expr 
                                  (variable_or_function_call I)) - 
                                (expr 
                                  (literal 1))))))) \n)) 
                  (end_if_statement END IF)) \n)) 
            (end_if_statement END IF)) \n) 
        (end_if_statement END IF)) \n \n) 
    (end_sub_statement END SUB)) \n <EOF>)
