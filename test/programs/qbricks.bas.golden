(program statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (statement 
    (deftype_statement DEFINT 
      (letter_range A - Z))) \n statement \n 
  (statement 
    (const_statement CONST 
      (const_assignment INITIALBALLSPEED = 
        (const_expr 
          (expr 
            (literal .07)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment BALLCOLOR = 
        (const_expr 
          (expr 
            (literal 12)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment BGCOLOR = 
        (const_expr 
          (expr 
            (literal 0)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment PLAYERCOLOR1 = 
        (const_expr 
          (expr 
            (literal 2)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment PLAYERCOLOR2 = 
        (const_expr 
          (expr 
            (literal 3)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment PADDLELENGTH1 = 
        (const_expr 
          (expr 
            (literal 50)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment PADDLELENGTH2 = 
        (const_expr 
          (expr 
            (literal 50)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment NUMSPECIALBRICKS = 
        (const_expr 
          (expr 
            (literal 1)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment SPECIALCHAR = 
        (const_expr 
          (expr 
            (literal 14)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment BONUSMULTIPLIER = 
        (const_expr 
          (expr 
            (literal 500)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment PADDLEHORIZONTALMOVE = 
        (const_expr 
          (expr 
            (literal 24)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment INITNUMBALLS = 
        (const_expr 
          (expr 
            (literal 3)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment LEVELNEWBALL = 
        (const_expr 
          (expr 
            (literal 3)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment CUTLEVEL = 
        (const_expr 
          (expr 
            (literal 6)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment PADDLECUT = 
        (const_expr 
          (expr 
            (literal 33)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment DEFAULTPLAYERS = 
        (const_expr 
          (expr 
            (literal 1)))))) \n statement \n statement \n statement \n statement \n statement \n 
  (statement 
    (const_statement CONST 
      (const_assignment STARTSOUND = 
        (const_expr 
          (expr 
            (literal "MBT180O2L8CDEDCDFECDCL4EL8C")))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment PADDLEHITSOUND = 
        (const_expr 
          (expr 
            (literal "MBT120 L64 o3 g")))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment BLOCKHITSOUND = 
        (const_expr 
          (expr 
            (literal "MB T255 L8 o")))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment NEXTLEVELSOUND = 
        (const_expr 
          (expr 
            (literal "MB T240 L2 N30 N34 N38 N45")))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment GAMEOVERSOUND = 
        (const_expr 
          (expr 
            (literal "T255 L16 O3 C O2 GEDC")))))) \n statement \n statement \n 
  (statement 
    (const_statement CONST 
      (const_assignment TRUE = 
        (const_expr 
          (expr - 
            (expr 
              (literal 1))))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment FALSE = 
        (const_expr 
          (expr 
            (literal 0)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment PADDLEVERTICALMOVE = 
        (const_expr 
          (expr 
            (literal 4)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment MAXLEVEL = 
        (const_expr 
          (expr 
            (literal 5)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment SCREENWIDTH = 
        (const_expr 
          (expr 
            (literal 40)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment SCORECOLOR = 
        (const_expr 
          (expr 
            (literal 15)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment MAXBLOCKROW = 
        (const_expr 
          (expr 
            (literal 9)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment STARTBRICKROW = 
        (const_expr 
          (expr 
            (literal 2)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment BRICKSIZE = 
        (const_expr 
          (expr 
            (literal 2)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment PIXELSIZE = 
        (const_expr 
          (expr 
            (literal 8)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment MAXROW = 
        (const_expr 
          (expr 
            (literal 184)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment MINROW = 
        (const_expr 
          (expr 
            (expr 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call MAXBLOCKROW)) + 
                  (expr 
                    (literal 2))) )) * 
            (expr 
              (literal 8))))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment UP1 = 
        (const_expr 
          (expr 
            (literal 104)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment DOWN1 = 
        (const_expr 
          (expr 
            (literal 112)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment LEFT1 = 
        (const_expr 
          (expr 
            (literal 107)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment RIGHT1 = 
        (const_expr 
          (expr 
            (literal 109)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment UP2 = 
        (const_expr 
          (expr 
            (literal 101)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment LEFT2 = 
        (const_expr 
          (expr 
            (literal 115)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment RIGHT2 = 
        (const_expr 
          (expr 
            (literal 102)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment DOWN2 = 
        (const_expr 
          (expr 
            (literal 100)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment PAUSE = 
        (const_expr 
          (expr 
            (literal 112)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment QUIT = 
        (const_expr 
          (expr 
            (literal 113)))))) \n statement \n statement \n statement \n statement 
  (declare_statement DECLARE SUB 
    (untyped_id BallHitPaddle) 
    ( 
      (declare_parameter_list 
        (declare_parameter Player)) )) \n statement 
  (declare_statement DECLARE SUB 
    (untyped_id Center) 
    ( 
      (declare_parameter_list 
        (declare_parameter text$) , 
        (declare_parameter Row)) )) \n statement 
  (declare_statement DECLARE SUB 
    (untyped_id DisplayChanges) 
    ( )) \n statement 
  (declare_statement DECLARE SUB 
    (untyped_id DisplayGameTitle) 
    ( )) \n statement 
  (declare_statement DECLARE SUB 
    (untyped_id DisplayIntro) 
    ( )) \n statement 
  (declare_statement DECLARE SUB 
    (untyped_id DrawBall) 
    ( 
      (declare_parameter_list 
        (declare_parameter BallX) , 
        (declare_parameter BallY)) )) \n statement 
  (declare_statement DECLARE SUB 
    (untyped_id DrawBrick) 
    ( 
      (declare_parameter_list 
        (declare_parameter BrickX) , 
        (declare_parameter BrickY) , 
        (declare_parameter BrickColor)) )) \n statement 
  (declare_statement DECLARE SUB 
    (untyped_id DrawPaddle) 
    ( 
      (declare_parameter_list 
        (declare_parameter PColor) , 
        (declare_parameter PlayerNum)) )) \n statement 
  (declare_statement DECLARE SUB 
    (untyped_id EraseBall) 
    ( 
      (declare_parameter_list 
        (declare_parameter X) , 
        (declare_parameter Y)) )) \n statement 
  (declare_statement DECLARE SUB 
    (untyped_id EraseBrick) 
    ( 
      (declare_parameter_list 
        (declare_parameter X) , 
        (declare_parameter Y)) )) \n statement 
  (declare_statement DECLARE SUB 
    (untyped_id GameOver) 
    ( )) \n statement 
  (declare_statement DECLARE SUB 
    (untyped_id GameParamSetup) 
    ( )) \n statement 
  (declare_statement DECLARE SUB 
    (untyped_id GetGameOptions) 
    ( )) \n statement 
  (declare_statement DECLARE SUB 
    (untyped_id HorizontalScroll) 
    ( 
      (declare_parameter_list 
        (declare_parameter display$) , 
        (declare_parameter Row)) )) \n statement 
  (declare_statement DECLARE SUB 
    (untyped_id MovePaddle) 
    ( 
      (declare_parameter_list 
        (declare_parameter NewX) , 
        (declare_parameter NewY) , 
        (declare_parameter PlayerNum)) )) \n statement 
  (declare_statement DECLARE SUB 
    (untyped_id NewBall) 
    ( )) \n statement 
  (declare_statement DECLARE SUB 
    (untyped_id NextLevel) 
    ( )) \n statement 
  (declare_statement DECLARE SUB 
    (untyped_id RedrawPaddles) 
    ( )) \n statement 
  (declare_statement DECLARE SUB 
    (untyped_id SetDefaultPaddle) 
    ( )) \n statement 
  (declare_statement DECLARE SUB 
    (untyped_id UpdateScreen) 
    ( )) \n statement \n statement \n statement 
  (type_statement TYPE 
    (untyped_id PositionType) \n 
    (type_element 
      (untyped_id X) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id Y) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id OldX) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id OldY) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id Size) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id PColor) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id XOffset) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id YOffset) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id speed) AS 
      (type_name_for_type_element SINGLE) \n) 
    (type_element 
      (untyped_id Score) AS 
      (type_name_for_type_element LONG) \n) 
    (type_element 
      (untyped_id NumBricksHit) AS 
      (type_name_for_type_element INTEGER) \n) END TYPE) \n statement \n statement \n statement \n statement \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id TempPADDLELENGTH) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id ScreenMode) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id ScreenWide) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id GraphicsWidth) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id UsableWidth) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id Ball) AS 
        (type_name 
          (untyped_id PositionType))))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id Bricks) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 25))) , 
            (dim_subscript 
              (expr 
                (literal 20))) )) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id NumBalls) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id Again) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id NeedBall) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id Level) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id LevelCount) AS 
        (type_name LONG)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id MAXLEVELCount) AS 
        (type_name LONG)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id TimeToMoveBall) AS 
        (type_name SINGLE)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id special) AS 
        (type_name STRING)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id JustHit) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id NumberOfPlayers) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id LastHitBy) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id LevelOver) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id ActualBallSpeed) AS 
        (type_name SINGLE)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id Ballshape) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 20))) )) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id EraseBallOK) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id LastX) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id LastY) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM 
      (dim_variable 
        (untyped_id BadMode) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM 
      (dim_variable 
        (untyped_id KeyFlags) AS 
        (type_name INTEGER)))) \n statement \n 
  (statement 
    (call_statement 
      (untyped_id RANDOMIZE) 
      (call_argument_list 
        (call_argument 
          (expr 
            (builtin_function TIMER)))))) \n statement \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call special) = 
      (expr 
        (literal "")))) \n 
  (statement 
    (for_next_statement FOR X = 
      (expr 
        (literal 1)) TO 
      (expr 
        (variable_or_function_call BRICKSIZE)) 
      (block \n 
        (statement 
          (assignment_statement 
            (variable_or_function_call special) = 
            (expr 
              (expr 
                (variable_or_function_call special)) + 
              (expr 
                (variable_or_function_call CHR$ 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call SPECIALCHAR)) ))))))) \n statement) NEXT X)) \n statement \n statement \n 
  (statement 
    (on_error_statement ON ERROR GOTO 
      (target 
        (text_label 
          (untyped_id ScreenError))))) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call BadMode) = 
      (expr 
        (variable_or_function_call FALSE)))) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call ScreenMode) = 
      (expr 
        (literal 7)))) \n 
  (statement 
    (screen_statement SCREEN 
      (expr 
        (variable_or_function_call ScreenMode)))) \n 
  (if_block_statement IF 
    (expr 
      (expr 
        (variable_or_function_call BadMode)) = 
      (expr 
        (variable_or_function_call TRUE))) THEN \n 
    (then_block 
      (statement 
        (assignment_statement 
          (variable_or_function_call ScreenMode) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call BadMode) = 
          (expr 
            (variable_or_function_call FALSE)))) \n 
      (statement 
        (screen_statement SCREEN 
          (expr 
            (variable_or_function_call ScreenMode)))) \n) 
    (end_if_statement END IF)) \n 
  (statement 
    (on_error_statement ON ERROR GOTO 
      (target 
        (line_number 0)))) \n statement \n 
  (if_block_statement IF 
    (expr 
      (expr 
        (variable_or_function_call BadMode)) = 
      (expr 
        (variable_or_function_call TRUE))) THEN \n 
    (then_block 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 11)) , 
          (expr 
            (literal 13)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "CGA, EGA Color, or VGA graphics required to run QBRICKS.BAS")))) \n) 
    (else_block_statement ELSE 
      (else_block statement \n 
        (statement 
          (def_seg_statement DEF SEG = 
            (expr 
              (literal 0)))) \n 
        (statement 
          (assignment_statement 
            (variable_or_function_call KeyFlags) = 
            (expr 
              (variable_or_function_call PEEK 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 1047)) )))))) \n 
        (statement 
          (call_statement 
            (untyped_id POKE) 
            (call_argument_list 
              (call_argument 
                (expr 
                  (literal 1047))) , 
              (call_argument 
                (expr 
                  (literal &H0)))))) \n 
        (statement 
          (def_seg_statement DEF SEG)) \n statement \n 
        (statement 
          (call_statement 
            (untyped_id DisplayIntro))) \n 
        (statement 
          (call_statement 
            (untyped_id GetGameOptions))) \n statement \n 
        (statement 
          (dim_statement DIM SHARED 
            (dim_variable 
              (untyped_id Paddle) 
              (dim_array_bounds 
                ( 
                  (dim_subscript 
                    (expr 
                      (variable_or_function_call NumberOfPlayers))) )) AS 
              (type_name 
                (untyped_id PositionType))))) \n 
        (statement 
          (assignment_statement 
            (variable_or_function_call Level) = 
            (expr 
              (literal 0)))) \n 
        (statement 
          (assignment_statement 
            (variable_or_function_call Again) = 
            (expr 
              (variable_or_function_call TRUE)))) \n 
        (statement 
          (call_statement 
            (untyped_id NextLevel))) \n statement \n 
        (statement 
          (do_loop_statement DO 
            (block \n statement \n 
              (if_block_statement IF 
                (expr 
                  (expr 
                    (builtin_function TIMER)) >= 
                  (expr 
                    (variable_or_function_call TimeToMoveBall))) THEN \n 
                (then_block 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call TimeToMoveBall) = 
                      (expr 
                        (expr 
                          (builtin_function TIMER)) + 
                        (expr 
                          (variable_or_function_call Ball.speed))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call LevelOver) = 
                      (expr 
                        (variable_or_function_call FALSE)))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call DeflectY) = 
                      (expr 
                        (variable_or_function_call FALSE)))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call DeflectX) = 
                      (expr 
                        (variable_or_function_call FALSE)))) \n statement \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Ball.X) = 
                      (expr 
                        (expr 
                          (variable_or_function_call Ball.X)) + 
                        (expr 
                          (variable_or_function_call Ball.XOffset))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Ball.Y) = 
                      (expr 
                        (expr 
                          (variable_or_function_call Ball.Y)) + 
                        (expr 
                          (variable_or_function_call Ball.YOffset))))) \n statement \n statement \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call Ball.X)) < 
                        (expr 
                          (literal 4))) OR 
                      (expr 
                        (expr 
                          (variable_or_function_call Ball.X)) > 
                        (expr 
                          (variable_or_function_call UsableWidth)))) THEN \n 
                    (then_block 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call DeflectX) = 
                          (expr 
                            (variable_or_function_call TRUE)))) \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call LastX) = 
                          (expr 
                            (variable_or_function_call FALSE)))) \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call LastY) = 
                          (expr 
                            (variable_or_function_call FALSE)))) \n) 
                    (end_if_statement END IF)) \n statement \n statement \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (variable_or_function_call Ball.Y)) < 
                      (expr 
                        (literal 4))) THEN \n 
                    (then_block 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call DeflectY) = 
                          (expr 
                            (variable_or_function_call TRUE)))) \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call JustHit) = 
                          (expr 
                            (variable_or_function_call FALSE)))) \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call LastX) = 
                          (expr 
                            (variable_or_function_call FALSE)))) \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call LastY) = 
                          (expr 
                            (variable_or_function_call FALSE)))) \n) 
                    (elseif_block_statement ELSEIF 
                      (expr 
                        (expr 
                          (variable_or_function_call Ball.Y)) > 
                        (expr 
                          (variable_or_function_call MAXROW))) THEN 
                      (else_block 
                        (statement 
                          (call_statement 
                            (untyped_id GameOver))) \n)) 
                    (end_if_statement END IF)) \n statement \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call BallX) = 
                      (expr 
                        (expr 
                          (variable_or_function_call Ball.X)) \ 
                        (expr 
                          (literal 16))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call BallY) = 
                      (expr 
                        (expr 
                          (variable_or_function_call Ball.Y)) \ 
                        (expr 
                          (literal 8))))) \n statement \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call LevelOver) = 
                      (expr 
                        (variable_or_function_call FALSE)))) \n statement \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (variable_or_function_call Bricks 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call BallY)) , 
                              (expr 
                                (variable_or_function_call BallX)) )))) <> 
                      (expr 
                        (variable_or_function_call BGCOLOR))) THEN \n 
                    (then_block statement \n 
                      (statement 
                        (if_inline_statement IF 
                          (expr 
                            (variable_or_function_call EraseBallOK)) THEN 
                          (if_inline_action 
                            (statement 
                              (call_statement 
                                (untyped_id DrawBall) 
                                (call_argument_list 
                                  (call_argument Ball.OldX) , 
                                  (call_argument Ball.OldY))))))) \n 
                      (statement 
                        (call_statement 
                          (untyped_id EraseBrick) 
                          (call_argument_list 
                            (call_argument BallX) , 
                            (call_argument BallY)))) \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call EraseBallOK) = 
                          (expr 
                            (variable_or_function_call FALSE)))) \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call WhereX) = 
                          (expr 
                            (expr 
                              (variable_or_function_call Ball.X)) MOD 
                            (expr 
                              (literal 16))))) \n statement \n statement \n statement \n statement \n 
                      (if_block_statement IF 
                        (expr 
                          (expr 
                            ( 
                              (expr 
                                (expr NOT 
                                  (expr 
                                    (variable_or_function_call LastX))) AND 
                                (expr 
                                  ( 
                                    (expr 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call WhereX)) = 
                                        (expr 
                                          (literal 0))) OR 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call WhereX)) = 
                                        (expr 
                                          (literal 12)))) ))) )) OR 
                          (expr 
                            (variable_or_function_call LastY))) THEN \n 
                        (then_block 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call DeflectX) = 
                              (expr 
                                (variable_or_function_call TRUE)))) \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call LastX) = 
                              (expr 
                                (variable_or_function_call TRUE)))) \n) 
                        (else_block_statement ELSE 
                          (else_block statement \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call DeflectY) = 
                                (expr 
                                  (variable_or_function_call TRUE)))) \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call LastY) = 
                                (expr 
                                  (variable_or_function_call TRUE)))) \n)) 
                        (end_if_statement END IF)) \n) 
                    (else_block_statement ELSE 
                      (else_block statement \n 
                        (statement 
                          (if_inline_statement IF 
                            (expr 
                              (variable_or_function_call EraseBallOK)) THEN 
                            (if_inline_action 
                              (statement 
                                (call_statement 
                                  (untyped_id DrawBall) 
                                  (call_argument_list 
                                    (call_argument Ball.OldX) , 
                                    (call_argument Ball.OldY))))))) \n 
                        (statement 
                          (call_statement 
                            (untyped_id DrawBall) 
                            (call_argument_list 
                              (call_argument Ball.X) , 
                              (call_argument Ball.Y)))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Ball.OldX) = 
                            (expr 
                              (variable_or_function_call Ball.X)))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Ball.OldY) = 
                            (expr 
                              (variable_or_function_call Ball.Y)))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call EraseBallOK) = 
                            (expr 
                              (variable_or_function_call TRUE)))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call LastX) = 
                            (expr 
                              (variable_or_function_call FALSE)))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call LastY) = 
                            (expr 
                              (variable_or_function_call FALSE)))) \n)) 
                    (end_if_statement END IF)) \n statement \n statement \n statement \n 
                  (statement 
                    (for_next_statement FOR Player = 
                      (expr 
                        (literal 1)) TO 
                      (expr 
                        (variable_or_function_call NumberOfPlayers)) 
                      (block \n 
                        (statement 
                          (call_statement 
                            (untyped_id BallHitPaddle) 
                            (call_argument_list 
                              (call_argument Player)))) \n statement) NEXT Player)) \n statement \n statement \n 
                  (statement 
                    (if_inline_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call DeflectY)) AND 
                        (expr NOT 
                          (expr 
                            (variable_or_function_call LevelOver)))) THEN 
                      (if_inline_action 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Ball.YOffset) = 
                            (expr - 
                              (expr 
                                (variable_or_function_call Ball.YOffset)))))))) \n 
                  (statement 
                    (if_inline_statement IF 
                      (expr 
                        (variable_or_function_call DeflectX)) THEN 
                      (if_inline_action 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Ball.XOffset) = 
                            (expr - 
                              (expr 
                                (variable_or_function_call Ball.XOffset)))))))) \n) 
                (end_if_statement END IF)) \n statement \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call k$) = 
                  (expr 
                    (variable_or_function_call INKEY$)))) \n statement \n 
              (if_block_statement IF 
                (expr 
                  (expr 
                    (builtin_function LEN 
                      ( 
                        (expr 
                          (variable_or_function_call k$)) ))) > 
                  (expr 
                    (literal 0))) THEN \n 
                (then_block 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (variable_or_function_call ASC 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call k$)) )))) = 
                      (expr 
                        (literal 0))) THEN \n 
                    (then_block 
                      (statement 
                        (select_case_statement SELECT CASE 
                          (expr 
                            (variable_or_function_call ASC 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call LCASE$ 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call RIGHT$ 
                                              (args_or_indices 
                                                ( 
                                                  (expr 
                                                    (variable_or_function_call k$)) , 
                                                  (expr 
                                                    (literal 1)) )))) )))) )))) 
                          (before_first_case \n) 
                          (case_block 
                            (case_statement CASE 
                              (case_expr 
                                (expr 
                                  (variable_or_function_call LEFT1)))) 
                            (block \n 
                              (statement 
                                (call_statement 
                                  (untyped_id MovePaddle) 
                                  (call_argument_list 
                                    (call_argument 
                                      (expr - 
                                        (expr 
                                          (variable_or_function_call PADDLEHORIZONTALMOVE)))) , 
                                    (call_argument 
                                      (expr 
                                        (literal 0))) , 
                                    (call_argument 
                                      (expr 
                                        (literal 1)))))) \n statement)) 
                          (case_block 
                            (case_statement CASE 
                              (case_expr 
                                (expr 
                                  (variable_or_function_call RIGHT1)))) 
                            (block \n 
                              (statement 
                                (call_statement 
                                  (untyped_id MovePaddle) 
                                  (call_argument_list 
                                    (call_argument PADDLEHORIZONTALMOVE) , 
                                    (call_argument 
                                      (expr 
                                        (literal 0))) , 
                                    (call_argument 
                                      (expr 
                                        (literal 1)))))) \n statement)) 
                          (case_block 
                            (case_statement CASE 
                              (case_expr 
                                (expr 
                                  (variable_or_function_call UP1)))) 
                            (block \n 
                              (statement 
                                (call_statement 
                                  (untyped_id MovePaddle) 
                                  (call_argument_list 
                                    (call_argument 
                                      (expr 
                                        (literal 0))) , 
                                    (call_argument 
                                      (expr - 
                                        (expr 
                                          (variable_or_function_call PADDLEVERTICALMOVE)))) , 
                                    (call_argument 
                                      (expr 
                                        (literal 1)))))) \n statement)) 
                          (case_block 
                            (case_statement CASE 
                              (case_expr 
                                (expr 
                                  (variable_or_function_call DOWN1)))) 
                            (block \n 
                              (statement 
                                (call_statement 
                                  (untyped_id MovePaddle) 
                                  (call_argument_list 
                                    (call_argument 
                                      (expr 
                                        (literal 0))) , 
                                    (call_argument PADDLEVERTICALMOVE) , 
                                    (call_argument 
                                      (expr 
                                        (literal 1)))))) \n statement)) 
                          (end_select_statement END SELECT))) \n) 
                    (else_block_statement ELSE 
                      (else_block statement \n 
                        (if_block_statement IF 
                          (expr 
                            (expr 
                              (variable_or_function_call NumberOfPlayers)) = 
                            (expr 
                              (literal 2))) THEN \n 
                          (then_block 
                            (statement 
                              (select_case_statement SELECT CASE 
                                (expr 
                                  (variable_or_function_call ASC 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (variable_or_function_call LCASE$ 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (variable_or_function_call RIGHT$ 
                                                    (args_or_indices 
                                                      ( 
                                                        (expr 
                                                          (variable_or_function_call k$)) , 
                                                        (expr 
                                                          (literal 1)) )))) )))) )))) 
                                (before_first_case \n) 
                                (case_block 
                                  (case_statement CASE 
                                    (case_expr 
                                      (expr 
                                        (variable_or_function_call LEFT2)))) 
                                  (block \n 
                                    (statement 
                                      (call_statement 
                                        (untyped_id MovePaddle) 
                                        (call_argument_list 
                                          (call_argument 
                                            (expr - 
                                              (expr 
                                                (variable_or_function_call PADDLEHORIZONTALMOVE)))) , 
                                          (call_argument 
                                            (expr 
                                              (literal 0))) , 
                                          (call_argument 
                                            (expr 
                                              (literal 2)))))) \n statement)) 
                                (case_block 
                                  (case_statement CASE 
                                    (case_expr 
                                      (expr 
                                        (variable_or_function_call RIGHT2)))) 
                                  (block \n 
                                    (statement 
                                      (call_statement 
                                        (untyped_id MovePaddle) 
                                        (call_argument_list 
                                          (call_argument PADDLEHORIZONTALMOVE) , 
                                          (call_argument 
                                            (expr 
                                              (literal 0))) , 
                                          (call_argument 
                                            (expr 
                                              (literal 2)))))) \n statement)) 
                                (case_block 
                                  (case_statement CASE 
                                    (case_expr 
                                      (expr 
                                        (variable_or_function_call UP2)))) 
                                  (block \n 
                                    (statement 
                                      (call_statement 
                                        (untyped_id MovePaddle) 
                                        (call_argument_list 
                                          (call_argument 
                                            (expr 
                                              (literal 0))) , 
                                          (call_argument 
                                            (expr - 
                                              (expr 
                                                (variable_or_function_call PADDLEVERTICALMOVE)))) , 
                                          (call_argument 
                                            (expr 
                                              (literal 2)))))) \n statement)) 
                                (case_block 
                                  (case_statement CASE 
                                    (case_expr 
                                      (expr 
                                        (variable_or_function_call DOWN2)))) 
                                  (block \n 
                                    (statement 
                                      (call_statement 
                                        (untyped_id MovePaddle) 
                                        (call_argument_list 
                                          (call_argument 
                                            (expr 
                                              (literal 0))) , 
                                          (call_argument PADDLEVERTICALMOVE) , 
                                          (call_argument 
                                            (expr 
                                              (literal 2)))))) \n statement)) 
                                (end_select_statement END SELECT))) \n) 
                          (end_if_statement END IF)) \n 
                        (statement 
                          (select_case_statement SELECT CASE 
                            (expr 
                              (variable_or_function_call ASC 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call LCASE$ 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call RIGHT$ 
                                                (args_or_indices 
                                                  ( 
                                                    (expr 
                                                      (variable_or_function_call k$)) , 
                                                    (expr 
                                                      (literal 1)) )))) )))) )))) 
                            (before_first_case \n) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (variable_or_function_call PAUSE)))) 
                              (block \n 
                                (statement 
                                  (if_inline_statement IF 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call ScreenMode)) <> 
                                      (expr 
                                        (literal 1))) THEN 
                                    (if_inline_action 
                                      (statement 
                                        (color_statement COLOR 
                                          (expr 
                                            (expr 
                                              (literal 12)) + 
                                            (expr 
                                              (variable_or_function_call BACKGROUNDCOLOR)))))))) \n statement \n 
                                (statement 
                                  (call_statement 
                                    (untyped_id SOUND) 
                                    (call_argument_list 
                                      (call_argument 
                                        (expr 
                                          (literal 1100))) , 
                                      (call_argument 
                                        (expr 
                                          (literal .75)))))) \n 
                                (statement 
                                  (call_statement 
                                    (untyped_id Center) 
                                    (call_argument_list 
                                      (call_argument 
                                        (expr 
                                          (literal "* PAUSED *"))) , 
                                      (call_argument 
                                        (expr 
                                          (expr 
                                            (expr 
                                              (variable_or_function_call MINROW)) \ 
                                            (expr 
                                              (literal 8))) + 
                                          (expr 
                                            (literal 2))))))) \n 
                                (statement 
                                  (while_wend_statement WHILE 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call INKEY$)) = 
                                      (expr 
                                        (literal ""))) 
                                    (block :) WEND)) \n statement \n 
                                (statement 
                                  (color_statement COLOR 
                                    (expr 
                                      (variable_or_function_call BGCOLOR)))) \n 
                                (statement 
                                  (call_statement 
                                    (untyped_id Center) 
                                    (call_argument_list 
                                      (call_argument SPACE$ 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (literal 10)) ))) , 
                                      (call_argument 
                                        (expr 
                                          (expr 
                                            (expr 
                                              (variable_or_function_call MINROW)) \ 
                                            (expr 
                                              (literal 8))) + 
                                          (expr 
                                            (literal 2))))))) \n statement \n statement \n 
                                (if_block_statement IF 
                                  (expr 
                                    (variable_or_function_call EraseBallOK)) THEN \n 
                                  (then_block 
                                    (statement 
                                      (call_statement 
                                        (untyped_id EraseBall) 
                                        (call_argument_list 
                                          (call_argument Ball.X) , 
                                          (call_argument Ball.Y)))) \n 
                                    (statement 
                                      (call_statement 
                                        (untyped_id DrawBall) 
                                        (call_argument_list 
                                          (call_argument Ball.X) , 
                                          (call_argument Ball.Y)))) \n) 
                                  (end_if_statement END IF)) \n statement \n 
                                (statement 
                                  (call_statement 
                                    (untyped_id RedrawPaddles))) \n statement)) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (variable_or_function_call QUIT)))) 
                              (block \n 
                                (if_block_statement IF 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call ScreenMode)) = 
                                    (expr 
                                      (literal 1))) THEN \n 
                                  (then_block 
                                    (statement 
                                      (color_statement COLOR 
                                        (expr 
                                          (variable_or_function_call BGCOLOR)))) \n) 
                                  (else_block_statement ELSE 
                                    (else_block statement \n 
                                      (statement 
                                        (color_statement COLOR 
                                          (expr 
                                            (expr 
                                              (literal 3)) + 
                                            (expr 
                                              (variable_or_function_call BGCOLOR))) , 
                                          (expr 
                                            (variable_or_function_call BGCOLOR)))) \n)) 
                                  (end_if_statement END IF)) \n statement \n 
                                (statement 
                                  (call_statement 
                                    (untyped_id SOUND) 
                                    (call_argument_list 
                                      (call_argument 
                                        (expr 
                                          (literal 1700))) , 
                                      (call_argument 
                                        (expr 
                                          (literal 1)))))) \n 
                                (statement 
                                  (call_statement 
                                    (untyped_id SOUND) 
                                    (call_argument_list 
                                      (call_argument 
                                        (expr 
                                          (literal 1100))) , 
                                      (call_argument 
                                        (expr 
                                          (literal .75)))))) \n 
                                (statement 
                                  (call_statement 
                                    (untyped_id Center) 
                                    (call_argument_list 
                                      (call_argument 
                                        (expr 
                                          (literal "Really quit? 
                                            (Y/N) "))) , 
                                      (call_argument 
                                        (expr 
                                          ( 
                                            (expr 
                                              (expr 
                                                (expr 
                                                  (variable_or_function_call MINROW)) \ 
                                                (expr 
                                                  (literal 8))) + 
                                              (expr 
                                                (literal 2))) )))))) \n 
                                (statement 
                                  (do_loop_statement DO 
                                    (block \n 
                                      (statement 
                                        (assignment_statement 
                                          (variable_or_function_call k$) = 
                                          (expr 
                                            (variable_or_function_call UCASE$ 
                                              (args_or_indices 
                                                ( 
                                                  (expr 
                                                    (variable_or_function_call INKEY$)) )))))) \n statement) LOOP 
                                    (do_condition WHILE 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call k$)) = 
                                        (expr 
                                          (literal "")))))) \n 
                                (statement 
                                  (call_statement 
                                    (untyped_id Center) 
                                    (call_argument_list 
                                      (call_argument SPACE$ 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (literal 19)) ))) , 
                                      (call_argument 
                                        (expr 
                                          ( 
                                            (expr 
                                              (expr 
                                                (expr 
                                                  (variable_or_function_call MINROW)) \ 
                                                (expr 
                                                  (literal 8))) + 
                                              (expr 
                                                (literal 2))) )))))) \n statement \n 
                                (if_block_statement IF 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call k$)) = 
                                    (expr 
                                      (literal "Y"))) THEN \n 
                                  (then_block 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call Again) = 
                                        (expr 
                                          (variable_or_function_call FALSE)))) \n 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call NumBalls) = 
                                        (expr - 
                                          (expr 
                                            (literal 1))))) \n) 
                                  (end_if_statement END IF)) \n statement \n statement \n 
                                (if_block_statement IF 
                                  (expr 
                                    (variable_or_function_call EraseBallOK)) THEN \n 
                                  (then_block 
                                    (statement 
                                      (call_statement 
                                        (untyped_id EraseBall) 
                                        (call_argument_list 
                                          (call_argument Ball.X) , 
                                          (call_argument Ball.Y)))) \n 
                                    (statement 
                                      (call_statement 
                                        (untyped_id DrawBall) 
                                        (call_argument_list 
                                          (call_argument Ball.X) , 
                                          (call_argument Ball.Y)))) \n) 
                                  (end_if_statement END IF)) \n statement \n 
                                (statement 
                                  (call_statement 
                                    (untyped_id RedrawPaddles))) \n statement)) 
                            (end_select_statement END SELECT))) \n)) 
                    (end_if_statement END IF)) \n) 
                (end_if_statement END IF)) \n statement \n 
              (if_block_statement IF 
                (expr 
                  (variable_or_function_call NeedBall)) THEN \n 
                (then_block 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call NeedBall) = 
                      (expr 
                        (variable_or_function_call FALSE)))) \n 
                  (statement 
                    (call_statement 
                      (untyped_id NewBall))) \n) 
                (end_if_statement END IF)) \n statement) LOOP 
            (do_condition WHILE 
              (expr 
                (variable_or_function_call Again))))) \n statement \n 
        (statement 
          (call_statement 
            (untyped_id DisplayChanges))) \n statement \n 
        (statement 
          (def_seg_statement DEF SEG = 
            (expr 
              (literal 0)))) \n 
        (statement 
          (call_statement 
            (untyped_id POKE) 
            (call_argument_list 
              (call_argument 
                (expr 
                  (literal 1047))) , 
              (call_argument KeyFlags)))) \n 
        (statement 
          (def_seg_statement DEF SEG)) \n statement \n)) 
    (end_if_statement END IF)) \n statement \n 
  (statement 
    (end_statement END)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (statement 
    (data_statement DATA 
      (data_item 4) , 
      (data_item 5) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 5) , 
      (data_item 4))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 4) , 
      (data_item 5) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 2) , 
      (data_item 2) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 2) , 
      (data_item 2) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 5) , 
      (data_item 4) , 
      (data_item 0))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 4) , 
      (data_item 5) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 2) , 
      (data_item 3) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 2) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 5) , 
      (data_item 4) , 
      (data_item 0) , 
      (data_item 0))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 4) , 
      (data_item 5) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 5) , 
      (data_item 4) , 
      (data_item 0) , 
      (data_item 0))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 4) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 4) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 4) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 4) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 4) , 
      (data_item 4) , 
      (data_item 4) , 
      (data_item 4) , 
      (data_item 4) , 
      (data_item 4) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0))) \n statement \n statement \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 1))) \n 
  (statement 
    (data_statement DATA 
      (data_item 9) , 
      (data_item 9) , 
      (data_item 9) , 
      (data_item 9) , 
      (data_item 9) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 9) , 
      (data_item 9) , 
      (data_item 9) , 
      (data_item 9) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 9) , 
      (data_item 9) , 
      (data_item 9) , 
      (data_item 9) , 
      (data_item 9))) \n 
  (statement 
    (data_statement DATA 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 5))) \n 
  (statement 
    (data_statement DATA 
      (data_item 13) , 
      (data_item 13) , 
      (data_item 13) , 
      (data_item 13) , 
      (data_item 13) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 13) , 
      (data_item 13) , 
      (data_item 13) , 
      (data_item 13) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 13) , 
      (data_item 13) , 
      (data_item 13) , 
      (data_item 13) , 
      (data_item 13))) \n 
  (statement 
    (data_statement DATA 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 3))) \n 
  (statement 
    (data_statement DATA 
      (data_item 11) , 
      (data_item 11) , 
      (data_item 11) , 
      (data_item 11) , 
      (data_item 11) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 11) , 
      (data_item 11) , 
      (data_item 11) , 
      (data_item 11) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 11) , 
      (data_item 11) , 
      (data_item 11) , 
      (data_item 11) , 
      (data_item 11))) \n 
  (statement 
    (data_statement DATA 
      (data_item 11) , 
      (data_item 11) , 
      (data_item 11) , 
      (data_item 11) , 
      (data_item 11) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 11) , 
      (data_item 11) , 
      (data_item 11) , 
      (data_item 11) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 11) , 
      (data_item 11) , 
      (data_item 11) , 
      (data_item 11) , 
      (data_item 11))) \n statement \n statement \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 8) , 
      (data_item 8) , 
      (data_item 8) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 8) , 
      (data_item 8) , 
      (data_item 8) , 
      (data_item 1) , 
      (data_item 1))) \n 
  (statement 
    (data_statement DATA 
      (data_item 5) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 8) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 5) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 8) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 5))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 5) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 5) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 5) , 
      (data_item 0))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 1) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 5) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 1) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 0))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 5) , 
      (data_item 1) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 5) , 
      (data_item 1) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 0))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 5) , 
      (data_item 1) , 
      (data_item 8) , 
      (data_item 8) , 
      (data_item 1) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 8) , 
      (data_item 8) , 
      (data_item 8) , 
      (data_item 8) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0))) \n statement \n statement \n 
  (statement 
    (data_statement DATA 
      (data_item 5) , 
      (data_item 2) , 
      (data_item 14) , 
      (data_item 9) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 9) , 
      (data_item 14) , 
      (data_item 14) , 
      (data_item 9) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 9) , 
      (data_item 14) , 
      (data_item 2) , 
      (data_item 5))) \n 
  (statement 
    (data_statement DATA 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 2) , 
      (data_item 14) , 
      (data_item 14) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 14) , 
      (data_item 14) , 
      (data_item 2) , 
      (data_item 2) , 
      (data_item 14) , 
      (data_item 14) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 14) , 
      (data_item 14) , 
      (data_item 2) , 
      (data_item 5) , 
      (data_item 5))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 2) , 
      (data_item 2) , 
      (data_item 9) , 
      (data_item 9) , 
      (data_item 2) , 
      (data_item 2) , 
      (data_item 9) , 
      (data_item 9) , 
      (data_item 2) , 
      (data_item 2) , 
      (data_item 9) , 
      (data_item 9) , 
      (data_item 2) , 
      (data_item 2) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 0))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 9) , 
      (data_item 9) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 9) , 
      (data_item 9) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 0))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 2) , 
      (data_item 2) , 
      (data_item 9) , 
      (data_item 9) , 
      (data_item 2) , 
      (data_item 2) , 
      (data_item 9) , 
      (data_item 9) , 
      (data_item 2) , 
      (data_item 2) , 
      (data_item 9) , 
      (data_item 9) , 
      (data_item 2) , 
      (data_item 2) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 0))) \n 
  (statement 
    (data_statement DATA 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 2) , 
      (data_item 14) , 
      (data_item 14) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 14) , 
      (data_item 14) , 
      (data_item 2) , 
      (data_item 2) , 
      (data_item 14) , 
      (data_item 14) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 14) , 
      (data_item 14) , 
      (data_item 2) , 
      (data_item 5) , 
      (data_item 5))) \n 
  (statement 
    (data_statement DATA 
      (data_item 5) , 
      (data_item 2) , 
      (data_item 14) , 
      (data_item 9) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 9) , 
      (data_item 14) , 
      (data_item 14) , 
      (data_item 9) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 9) , 
      (data_item 14) , 
      (data_item 2) , 
      (data_item 5))) \n statement \n statement \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0))) \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 1) , 
      (data_item 9) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 1) , 
      (data_item 9) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 1) , 
      (data_item 9) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 1) , 
      (data_item 9) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 1))) \n 
  (statement 
    (data_statement DATA 
      (data_item 9) , 
      (data_item 1) , 
      (data_item 9) , 
      (data_item 5) , 
      (data_item 9) , 
      (data_item 1) , 
      (data_item 9) , 
      (data_item 5) , 
      (data_item 9) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 9) , 
      (data_item 5) , 
      (data_item 9) , 
      (data_item 1) , 
      (data_item 9) , 
      (data_item 5) , 
      (data_item 9) , 
      (data_item 1) , 
      (data_item 9))) \n 
  (statement 
    (data_statement DATA 
      (data_item 5) , 
      (data_item 9) , 
      (data_item 5) , 
      (data_item 13) , 
      (data_item 5) , 
      (data_item 9) , 
      (data_item 5) , 
      (data_item 13) , 
      (data_item 5) , 
      (data_item 9) , 
      (data_item 9) , 
      (data_item 5) , 
      (data_item 13) , 
      (data_item 5) , 
      (data_item 9) , 
      (data_item 5) , 
      (data_item 13) , 
      (data_item 5) , 
      (data_item 9) , 
      (data_item 5))) \n 
  (statement 
    (data_statement DATA 
      (data_item 13) , 
      (data_item 5) , 
      (data_item 13) , 
      (data_item 4) , 
      (data_item 13) , 
      (data_item 5) , 
      (data_item 13) , 
      (data_item 4) , 
      (data_item 13) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 13) , 
      (data_item 4) , 
      (data_item 13) , 
      (data_item 5) , 
      (data_item 13) , 
      (data_item 4) , 
      (data_item 13) , 
      (data_item 5) , 
      (data_item 13))) \n 
  (statement 
    (data_statement DATA 
      (data_item 4) , 
      (data_item 13) , 
      (data_item 4) , 
      (data_item 0) , 
      (data_item 4) , 
      (data_item 13) , 
      (data_item 4) , 
      (data_item 0) , 
      (data_item 4) , 
      (data_item 13) , 
      (data_item 13) , 
      (data_item 4) , 
      (data_item 0) , 
      (data_item 4) , 
      (data_item 13) , 
      (data_item 4) , 
      (data_item 0) , 
      (data_item 4) , 
      (data_item 13) , 
      (data_item 4))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 4) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 4) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 4) , 
      (data_item 4) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 4) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 4) , 
      (data_item 0))) \n statement \n statement \n 
  (label 
    (text_label 
      (untyped_id ScreenError)) :) statement \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call BadMode) = 
      (expr 
        (variable_or_function_call TRUE)))) \n 
  (statement 
    (resume_statement RESUME NEXT)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id BallHitPaddle) 
    ( 
      (parameter_list 
        (parameter Player)) ) 
    (block \n statement \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call ABS 
                  (args_or_indices 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call Paddle 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call Player)) )) . Y)) - 
                        (expr 
                          (variable_or_function_call Ball.Y))) )))) < 
              (expr 
                (literal 8))) AND 
            (expr 
              (expr 
                (variable_or_function_call Ball.X)) >= 
              (expr 
                (variable_or_function_call Paddle 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Player)) )) . X)))) AND 
          (expr 
            (expr 
              (variable_or_function_call Ball.X)) <= 
            (expr 
              (expr 
                (variable_or_function_call Paddle 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Player)) )) . X)) + 
              (expr 
                (variable_or_function_call Paddle 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Player)) )) . Size))))) THEN \n 
        (then_block 
          (statement 
            (call_statement 
              (untyped_id DrawPaddle) 
              (call_argument_list 
                (call_argument 
                  (expr 
                    (variable_or_function_call Paddle 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call Player)) )) . PColor))) , 
                (call_argument Player)))) \n statement \n statement \n statement \n statement \n 
          (statement 
            (if_inline_statement IF 
              (expr 
                (variable_or_function_call EraseBallOK)) THEN 
              (if_inline_action 
                (statement 
                  (call_statement 
                    (untyped_id DrawBall) 
                    (call_argument_list 
                      (call_argument Ball.X) , 
                      (call_argument Ball.Y))))))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call EraseBallOK) = 
              (expr 
                (variable_or_function_call FALSE)))) \n statement \n 
          (if_block_statement IF 
            (expr 
              (expr 
                (variable_or_function_call JustHit)) <> 
              (expr 
                (variable_or_function_call Player))) THEN \n 
            (then_block 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Ball.YOffset) = 
                  (expr - 
                    (expr 
                      (variable_or_function_call Ball.YOffset))))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call JustHit) = 
                  (expr 
                    (variable_or_function_call Player)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call LastHitBy) = 
                  (expr 
                    (variable_or_function_call Player)))) \n 
              (statement 
                (play_statement PLAY 
                  (expr 
                    (variable_or_function_call PADDLEHITSOUND)))) \n 
              (statement 
                (call_statement 
                  (untyped_id DrawPaddle) 
                  (call_argument_list 
                    (call_argument 
                      (expr 
                        (variable_or_function_call Paddle 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call Player)) )) . PColor))) , 
                    (call_argument Player)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call LastX) = 
                  (expr 
                    (variable_or_function_call FALSE)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call LastY) = 
                  (expr 
                    (variable_or_function_call FALSE)))) \n) 
            (end_if_statement END IF)) \n) 
        (end_if_statement END IF)) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id Center) 
    ( 
      (parameter_list 
        (parameter text$) , 
        (parameter Row)) ) 
    (block \n statement \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (expr 
              (expr 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call ScreenWide)) \ 
                    (expr 
                      (literal 2))) )) - 
              (expr 
                (expr 
                  (builtin_function LEN 
                    ( 
                      (expr 
                        (variable_or_function_call text$)) ))) \ 
                (expr 
                  (literal 2)))) + 
            (expr 
              (literal 1))))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call text$)) ;)) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id DisplayChanges) 
    (block \n statement \n 
      (statement 
        (call_statement 
          (untyped_id DisplayGameTitle))) \n statement \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "The following game characteristics can be easily changed from"))) , 
            (call_argument 
              (expr 
                (literal 5)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "within the QuickBASIC Interpreter.  To change the values of  "))) , 
            (call_argument 
              (expr 
                (literal 6)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "these characteristics, locate the corresponding CONST or DATA"))) , 
            (call_argument 
              (expr 
                (literal 7)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "statements in the source code and change their values, then  "))) , 
            (call_argument 
              (expr 
                (literal 8)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "restart the program 
                  (press Shift+F5).                        "))) , 
            (call_argument 
              (expr 
                (literal 9)))))) \n statement \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 15)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Block patterns               "))) , 
            (call_argument 
              (expr 
                (literal 11)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Length of paddles            "))) , 
            (call_argument 
              (expr 
                (literal 12)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Number of special bricks     "))) , 
            (call_argument 
              (expr 
                (literal 13)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Shape of the special bricks  "))) , 
            (call_argument 
              (expr 
                (literal 14)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "End-of-level bonus multiplier"))) , 
            (call_argument 
              (expr 
                (literal 15)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Paddle color                 "))) , 
            (call_argument 
              (expr 
                (literal 16)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Ball color                   "))) , 
            (call_argument 
              (expr 
                (literal 17)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Ball speed                   "))) , 
            (call_argument 
              (expr 
                (literal 18)))))) \n statement \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "The CONST statements and instructions on changing them are   "))) , 
            (call_argument 
              (expr 
                (literal 20)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "located at the beginning of the main program.                "))) , 
            (call_argument 
              (expr 
                (literal 21)))))) \n statement \n 
      (statement 
        (do_loop_statement DO 
          (do_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call INKEY$)) = 
              (expr 
                (literal "")))) 
          (block :) LOOP)) \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id DisplayGameTitle) 
    (block \n statement \n 
      (statement 
        (screen_statement SCREEN 
          (expr 
            (literal 0)))) \n 
      (statement 
        (width_statement WIDTH 
          (expr 
            (literal 80)) , 
          (expr 
            (literal 25)))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 4)) , 
          (expr 
            (literal 0)))) \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call ScreenWide) = 
          (expr 
            (literal 80)))) \n statement \n statement \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 1)) , 
          (expr 
            (literal 2)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call CHR$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 201)) )))) ; 
          (expr 
            (variable_or_function_call STRING$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 76)) , 
                  (expr 
                    (literal 205)) )))) ; 
          (expr 
            (variable_or_function_call CHR$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 187)) )))) ;)) \n 
      (statement 
        (for_next_statement FOR X = 
          (expr 
            (literal 2)) TO 
          (expr 
            (literal 24)) 
          (block \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call X)) , 
                (expr 
                  (literal 2)))) \n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 186)) )))) ; 
                (expr 
                  (variable_or_function_call TAB 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 79)) )))) ; 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 186)) )))) ;)) \n statement) NEXT X)) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 25)) , 
          (expr 
            (literal 2)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call CHR$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 200)) )))) ; 
          (expr 
            (variable_or_function_call STRING$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 76)) , 
                  (expr 
                    (literal 205)) )))) ; 
          (expr 
            (variable_or_function_call CHR$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 188)) )))) ;)) \n statement \n statement \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 0)) , 
          (expr 
            (literal 4)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "     Microsoft     "))) , 
            (call_argument 
              (expr 
                (literal 1)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "   Q B R I C K S   "))) , 
            (call_argument 
              (expr 
                (literal 2)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "   Press any key to continue   "))) , 
            (call_argument 
              (expr 
                (literal 25)))))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)) , 
          (expr 
            (literal 0)))) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id DisplayIntro) 
    (block \n statement \n 
      (statement 
        (call_statement 
          (untyped_id DisplayGameTitle))) \n statement \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Copyright 
                  (C) 1990 Microsoft Corporation.  All Rights Reserved."))) , 
            (call_argument 
              (expr 
                (literal 4)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Score points by deflecting the ball into the brick walls. In a      "))) , 
            (call_argument 
              (expr 
                (literal 6)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "two-player game, the player to hit the ball last gets the points.   "))) , 
            (call_argument 
              (expr 
                (literal 7)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (expr 
                  (expr 
                    (literal "Hit the special bricks 
                      (")) + 
                    (expr 
                      (variable_or_function_call CHR$ 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call SPECIALCHAR)) ))))) + 
                  (expr 
                    (literal ") or clear all the bricks to advance to    ")))) , 
            (call_argument 
              (expr 
                (literal 8)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "the next level.  Ball speed increases every level and the paddles
                  (s)"))) , 
            (call_argument 
              (expr 
                (literal 9)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "shorten after a certain level.  Bonus balls are awarded for clearing"))) , 
            (call_argument 
              (expr 
                (literal 10)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "several levels. The game ends when all balls have been played.      "))) , 
            (call_argument 
              (expr 
                (literal 11)))))) \n statement \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 4)))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 13)) , 
          (expr 
            (literal 4)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call STRING$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 74)) , 
                  (expr 
                    (literal 196)) )))))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal " Game Controls "))) , 
            (call_argument 
              (expr 
                (literal 13)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "General               Player 1               Player 2    "))) , 
            (call_argument 
              (expr 
                (literal 15)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "                        
                  (Up)                   
                  (Up)      "))) , 
            (call_argument 
              (expr 
                (literal 17)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (expr 
                  (expr 
                    (literal "P - Pause                ")) + 
                  (expr 
                    (variable_or_function_call CHR$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 24)) ))))) + 
                (expr 
                  (literal "                      E       ")))) , 
            (call_argument 
              (expr 
                (literal 18)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (expr 
                  (expr 
                    (expr 
                      (expr 
                        (literal "    Q - Quit        
                          (Left) ")) + 
                      (expr 
                        (variable_or_function_call CHR$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 27)) ))))) + 
                    (expr 
                      (literal "   "))) + 
                  (expr 
                    (variable_or_function_call CHR$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 26)) ))))) + 
                (expr 
                  (literal " 
                    (Right)   
                    (Left) S   F 
                    (Right)  ")))) , 
            (call_argument 
              (expr 
                (literal 19)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (expr 
                  (expr 
                    (literal "                         ")) + 
                  (expr 
                    (variable_or_function_call CHR$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 25)) ))))) + 
                (expr 
                  (literal "                      D       ")))) , 
            (call_argument 
              (expr 
                (literal 20)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "                       
                  (Down)                 
                  (Down)     "))) , 
            (call_argument 
              (expr 
                (literal 21)))))) \n statement \n 
      (statement 
        (play_statement PLAY 
          (expr 
            (variable_or_function_call STARTSOUND)))) \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call kbd$) = 
                (expr 
                  (variable_or_function_call UCASE$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call INKEY$)) )))))) \n statement) LOOP 
          (do_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call kbd$)) = 
              (expr 
                (literal "")))))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call kbd$)) = 
          (expr 
            (literal "Q"))) THEN \n 
        (then_block 
          (statement 
            (call_statement 
              (untyped_id CLS))) \n 
          (statement 
            (locate_statement LOCATE 
              (expr 
                (literal 10)) , 
              (expr 
                (literal 30)))) : 
          (statement 
            (print_statement PRINT 
              (expr 
                (literal "Really quit? 
                  (Y/N)")) ;)) \n 
          (statement 
            (do_loop_statement DO 
              (block \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call kbd$) = 
                    (expr 
                      (variable_or_function_call UCASE$ 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call INKEY$)) )))))) \n statement) LOOP 
              (do_condition WHILE 
                (expr 
                  (expr 
                    (variable_or_function_call kbd$)) = 
                  (expr 
                    (literal "")))))) \n 
          (if_block_statement IF 
            (expr 
              (expr 
                (variable_or_function_call kbd$)) = 
              (expr 
                (literal "Y"))) THEN \n 
            (then_block 
              (statement 
                (call_statement 
                  (untyped_id CLS))) \n 
              (statement 
                (end_statement END)) \n) 
            (end_if_statement END IF)) \n) 
        (end_if_statement END IF)) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id DrawBall) 
    ( 
      (parameter_list 
        (parameter BallX) , 
        (parameter BallY)) ) 
    (block \n statement \n 
      (statement 
        (put_graphics_statement PUT 
          ( 
            (expr 
              (variable_or_function_call BallX)) , 
            (expr 
              (variable_or_function_call BallY)) ) , 
          (variable_or_function_call Ballshape))) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id DrawBrick) 
    ( 
      (parameter_list 
        (parameter BrickX) , 
        (parameter BrickY) , 
        (parameter BrickColor)) ) 
    (block \n statement \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call X) = 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call BrickX)) * 
              (expr 
                (variable_or_function_call PIXELSIZE))) * 
            (expr 
              (variable_or_function_call BRICKSIZE))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Y) = 
          (expr 
            (expr 
              (variable_or_function_call BrickY)) * 
            (expr 
              (variable_or_function_call PIXELSIZE))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Size) = 
          (expr 
            (expr 
              (variable_or_function_call BRICKSIZE)) * 
            (expr 
              (variable_or_function_call PIXELSIZE))))) \n statement \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call BrickColor)) = 
          (expr 
            (variable_or_function_call BGCOLOR))) THEN \n 
        (then_block 
          (statement 
            (line_statement LINE 
              ( 
                (expr 
                  (variable_or_function_call X)) , 
                (expr 
                  (variable_or_function_call Y)) ) - 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call X)) + 
                  (expr 
                    (variable_or_function_call Size))) , 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call Y)) + 
                    (expr 
                      (variable_or_function_call PIXELSIZE))) - 
                  (expr 
                    (literal 1))) ) , 
              (expr 
                (variable_or_function_call BGCOLOR)) , 
              (box_style BF))) \n) 
        (else_block_statement ELSE 
          (else_block statement \n 
            (statement 
              (line_statement LINE 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call X)) + 
                    (expr 
                      (literal 1))) , 
                  (expr 
                    (expr 
                      (variable_or_function_call Y)) + 
                    (expr 
                      (literal 1))) ) - 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (variable_or_function_call Size))) - 
                    (expr 
                      (literal 1))) , 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (variable_or_function_call PIXELSIZE))) - 
                    (expr 
                      (literal 1))) ) , 
                (expr 
                  (literal 15)) , 
                (box_style B))) \n 
            (statement 
              (paint_statement PAINT 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call X)) + 
                    (expr 
                      (literal 2))) , 
                  (expr 
                    (expr 
                      (variable_or_function_call Y)) + 
                    (expr 
                      (literal 2))) ) , 
                (expr 
                  (variable_or_function_call BrickColor)) , 
                (expr 
                  (literal 15)))) \n 
            (statement 
              (line_statement LINE 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call X)) + 
                    (expr 
                      (literal 1))) , 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (variable_or_function_call PIXELSIZE))) - 
                    (expr 
                      (literal 1))) ) - 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (variable_or_function_call Size))) - 
                    (expr 
                      (literal 1))) , 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (variable_or_function_call PIXELSIZE))) - 
                    (expr 
                      (literal 1))) ) , 
                (expr 
                  (literal 7)))) \n 
            (statement 
              (line_statement LINE 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (variable_or_function_call Size))) - 
                    (expr 
                      (literal 1))) , 
                  (expr 
                    (expr 
                      (variable_or_function_call Y)) + 
                    (expr 
                      (literal 1))) ) - 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (variable_or_function_call Size))) - 
                    (expr 
                      (literal 1))) , 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (variable_or_function_call PIXELSIZE))) - 
                    (expr 
                      (literal 1))) ) , 
                (expr 
                  (literal 7)))) \n)) 
        (end_if_statement END IF)) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id DrawPaddle) 
    ( 
      (parameter_list 
        (parameter PColor) , 
        (parameter Player)) ) 
    (block \n statement \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (variable_or_function_call Paddle 
                (args_or_indices 
                  ( 
                    (expr 
                      (variable_or_function_call Player)) )) . X)) , 
            (expr 
              (variable_or_function_call Paddle 
                (args_or_indices 
                  ( 
                    (expr 
                      (variable_or_function_call Player)) )) . Y)) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call Paddle 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Player)) )) . X)) + 
              (expr 
                (variable_or_function_call Paddle 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Player)) )) . Size))) , 
            (expr 
              (expr 
                (variable_or_function_call Paddle 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Player)) )) . Y)) + 
              (expr 
                (literal 1))) ) , 
          (expr 
            (variable_or_function_call PColor)) , 
          (box_style BF))) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id EraseBall) 
    ( 
      (parameter_list 
        (parameter X) , 
        (parameter Y)) ) 
    (block \n statement \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (variable_or_function_call X)) , 
            (expr 
              (variable_or_function_call Y)) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call X)) + 
              (expr 
                (literal 2))) , 
            (expr 
              (expr 
                (variable_or_function_call Y)) + 
              (expr 
                (literal 2))) ) , 
          (expr 
            (variable_or_function_call BGCOLOR)) , 
          (box_style BF))) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id EraseBrick) 
    ( 
      (parameter_list 
        (parameter X) , 
        (parameter Y)) ) 
    (block \n statement \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call LevelOver)) = 
            (expr 
              (variable_or_function_call TRUE))) THEN 
          (if_inline_action 
            (statement 
              (exit_statement EXIT SUB))))) \n statement \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call BrickHit) = 
          (expr 
            (variable_or_function_call Bricks 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call Y)) , 
                  (expr 
                    (variable_or_function_call X)) )))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call LevelCount) = 
          (expr 
            (expr 
              (variable_or_function_call LevelCount)) + 
            (expr 
              (variable_or_function_call BrickHit))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Bricks 
            (args_or_indices 
              ( 
                (expr 
                  (variable_or_function_call Y)) , 
                (expr 
                  (variable_or_function_call X)) ))) = 
          (expr 
            (variable_or_function_call BGCOLOR)))) \n 
      (statement 
        (call_statement 
          (untyped_id DrawBrick) 
          (call_argument_list 
            (call_argument X) , 
            (call_argument Y) , 
            (call_argument BGCOLOR)))) \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Octave$) = 
          (expr 
            (variable_or_function_call STR$ 
              (args_or_indices 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call Y)) MOD 
                    (expr 
                      (literal 7))) )))))) \n 
      (statement 
        (play_statement PLAY 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call BLOCKHITSOUND)) + 
              (expr 
                (variable_or_function_call Octave$))) + 
            (expr 
              (literal " c"))))) \n statement \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Paddle 
            (args_or_indices 
              ( 
                (expr 
                  (variable_or_function_call LastHitBy)) )) . Score) = 
          (expr 
            (expr 
              (variable_or_function_call Paddle 
                (args_or_indices 
                  ( 
                    (expr 
                      (variable_or_function_call LastHitBy)) )) . Score)) + 
            (expr 
              (expr 
                (literal 10)) * 
              (expr 
                (variable_or_function_call Y)))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Paddle 
            (args_or_indices 
              ( 
                (expr 
                  (variable_or_function_call LastHitBy)) )) . NumBricksHit) = 
          (expr 
            (expr 
              (variable_or_function_call Paddle 
                (args_or_indices 
                  ( 
                    (expr 
                      (variable_or_function_call LastHitBy)) )) . NumBricksHit)) + 
            (expr 
              (literal 1))))) \n 
      (statement 
        (call_statement 
          (untyped_id UpdateScreen))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call JustHit) = 
          (expr 
            (variable_or_function_call FALSE)))) \n statement \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (expr 
              (variable_or_function_call BrickHit)) = 
            (expr 
              (literal 1000))) OR 
          (expr 
            (expr 
              (variable_or_function_call LevelCount)) = 
            (expr 
              (variable_or_function_call MAXLEVELCount)))) THEN \n 
        (then_block 
          (statement 
            (call_statement 
              (untyped_id NextLevel))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call LevelOver) = 
              (expr 
                (variable_or_function_call TRUE)))) \n) 
        (end_if_statement END IF)) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id GameOver) 
    (block \n statement \n 
      (statement 
        (call_statement 
          (untyped_id DrawBall) 
          (call_argument_list 
            (call_argument Ball.X) , 
            (call_argument Ball.Y)))) \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call NumBalls) = 
          (expr 
            (expr 
              (variable_or_function_call NumBalls)) - 
            (expr 
              (literal 1))))) \n 
      (statement 
        (call_statement 
          (untyped_id UpdateScreen))) \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call NumBalls)) < 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (statement 
            (play_statement PLAY 
              (expr 
                (variable_or_function_call GAMEOVERSOUND)))) \n 
          (statement 
            (call_statement 
              (untyped_id DrawBall) 
              (call_argument_list 
                (call_argument Ball.X) , 
                (call_argument Ball.Y)))) \n 
          (statement 
            (call_statement 
              (untyped_id DrawBall) 
              (call_argument_list 
                (call_argument Ball.OldX) , 
                (call_argument Ball.OldY)))) \n statement \n statement \n 
          (statement 
            (locate_statement LOCATE 
              (expr 
                (literal 25)) , 
              (expr 
                (literal 1)))) : 
          (statement 
            (print_statement PRINT 
              (expr 
                (variable_or_function_call SPACE$ 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call SCREENWIDTH)) )))) ;)) \n 
          (statement 
            (call_statement 
              (untyped_id DrawPaddle) 
              (call_argument_list 
                (call_argument BGCOLOR) , 
                (call_argument 
                  (expr 
                    (literal 1)))))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Play1Bricks$) = 
              (expr 
                (expr 
                  (literal "Bricks hit:")) + 
                (expr 
                  (variable_or_function_call RIGHT$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call SPACE$ 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (literal 2)) )))) + 
                              (expr 
                                (variable_or_function_call STR$ 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call Paddle 
                                          (args_or_indices 
                                            ( 
                                              (expr 
                                                (literal 1)) )) . NumBricksHit)) ))))) )) , 
                        (expr 
                          (literal 4)) ))))))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Play1Score$) = 
              (expr 
                (expr 
                  (literal "Score:")) + 
                (expr 
                  (variable_or_function_call RIGHT$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call SPACE$ 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (literal 9)) )))) + 
                              (expr 
                                (variable_or_function_call STR$ 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call Paddle 
                                          (args_or_indices 
                                            ( 
                                              (expr 
                                                (literal 1)) )) . Score)) ))))) )) , 
                        (expr 
                          (literal 9)) ))))))) \n statement \n 
          (if_block_statement IF 
            (expr 
              (expr 
                (variable_or_function_call NumberOfPlayers)) = 
              (expr 
                (literal 1))) THEN \n 
            (then_block 
              (statement 
                (call_statement 
                  (untyped_id Center) 
                  (call_argument_list 
                    (call_argument 
                      (expr 
                        (literal "Player 1 stats"))) , 
                    (call_argument 
                      (expr 
                        (expr 
                          (variable_or_function_call MAXBLOCKROW)) + 
                        (expr 
                          (literal 6))))))) \n 
              (statement 
                (call_statement 
                  (untyped_id Center) 
                  (call_argument_list 
                    (call_argument Play1Bricks$) , 
                    (call_argument 
                      (expr 
                        (expr 
                          (variable_or_function_call MAXBLOCKROW)) + 
                        (expr 
                          (literal 8))))))) \n 
              (statement 
                (call_statement 
                  (untyped_id Center) 
                  (call_argument_list 
                    (call_argument Play1Score$) , 
                    (call_argument 
                      (expr 
                        (expr 
                          (variable_or_function_call MAXBLOCKROW)) + 
                        (expr 
                          (literal 10))))))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call End$) = 
                  (expr 
                    (literal "")))) \n) 
            (else_block_statement ELSE 
              (else_block statement \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Play2Bricks$) = 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call Play1Bricks$)) + 
                        (expr 
                          (literal "     Bricks hit:"))) + 
                      (expr 
                        (variable_or_function_call RIGHT$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                ( 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call SPACE$ 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (literal 2)) )))) + 
                                    (expr 
                                      (variable_or_function_call STR$ 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call Paddle 
                                                (args_or_indices 
                                                  ( 
                                                    (expr 
                                                      (literal 2)) )) . NumBricksHit)) ))))) )) , 
                              (expr 
                                (literal 4)) ))))))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Play2Score$) = 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call Play1Score$)) + 
                        (expr 
                          (literal "     Score:"))) + 
                      (expr 
                        (variable_or_function_call RIGHT$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                ( 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call SPACE$ 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (literal 9)) )))) + 
                                    (expr 
                                      (variable_or_function_call STR$ 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call Paddle 
                                                (args_or_indices 
                                                  ( 
                                                    (expr 
                                                      (literal 2)) )) . Score)) ))))) )) , 
                              (expr 
                                (literal 9)) ))))))) \n 
                (statement 
                  (call_statement 
                    (untyped_id DrawPaddle) 
                    (call_argument_list 
                      (call_argument BGCOLOR) , 
                      (call_argument 
                        (expr 
                          (literal 2)))))) \n statement \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call WhoWon$) = 
                    (expr 
                      (literal "Tie Game.  Nobody")))) \n 
                (if_block_statement IF 
                  (expr 
                    (expr 
                      (variable_or_function_call Paddle 
                        (args_or_indices 
                          ( 
                            (expr 
                              (literal 1)) )) . Score)) > 
                    (expr 
                      (variable_or_function_call Paddle 
                        (args_or_indices 
                          ( 
                            (expr 
                              (literal 2)) )) . Score))) THEN \n 
                  (then_block 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call WhoWon$) = 
                        (expr 
                          (literal "Player 1")))) \n) 
                  (elseif_block_statement ELSEIF 
                    (expr 
                      (expr 
                        (variable_or_function_call Paddle 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 1)) )) . Score)) < 
                      (expr 
                        (variable_or_function_call Paddle 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 2)) )) . Score))) THEN 
                    (else_block statement \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call WhoWon$) = 
                          (expr 
                            (literal "Player 2")))) \n)) 
                  (end_if_statement END IF)) \n statement \n 
                (statement 
                  (call_statement 
                    (untyped_id Center) 
                    (call_argument_list 
                      (call_argument 
                        (expr 
                          (expr 
                            (expr 
                              (literal "Player 1 stats")) + 
                            (expr 
                              (variable_or_function_call SPACE$ 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (literal 6)) ))))) + 
                          (expr 
                            (literal "Player 2 stats ")))) , 
                      (call_argument 
                        (expr 
                          (expr 
                            (variable_or_function_call MAXBLOCKROW)) + 
                          (expr 
                            (literal 6))))))) \n 
                (statement 
                  (call_statement 
                    (untyped_id Center) 
                    (call_argument_list 
                      (call_argument Play2Bricks$) , 
                      (call_argument 
                        (expr 
                          (expr 
                            (variable_or_function_call MAXBLOCKROW)) + 
                          (expr 
                            (literal 8))))))) \n 
                (statement 
                  (call_statement 
                    (untyped_id Center) 
                    (call_argument_list 
                      (call_argument Play2Score$) , 
                      (call_argument 
                        (expr 
                          (expr 
                            (variable_or_function_call MAXBLOCKROW)) + 
                          (expr 
                            (literal 10))))))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call End$) = 
                    (expr 
                      (expr 
                        (variable_or_function_call WhoWon$)) + 
                      (expr 
                        (literal " is the winner!"))))) \n)) 
            (end_if_statement END IF)) \n statement \n 
          (statement 
            (call_statement 
              (untyped_id Center) 
              (call_argument_list 
                (call_argument End$) , 
                (call_argument 
                  (expr 
                    (expr 
                      (variable_or_function_call MAXBLOCKROW)) + 
                    (expr 
                      (literal 2))))))) \n 
          (statement 
            (call_statement 
              (untyped_id Center) 
              (call_argument_list 
                (call_argument 
                  (expr 
                    (expr 
                      (literal "Last level played: ")) + 
                    (expr 
                      (variable_or_function_call STR$ 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call Level)) )))))) , 
                (call_argument 
                  (expr 
                    (expr 
                      (variable_or_function_call MAXBLOCKROW)) + 
                    (expr 
                      (literal 4))))))) \n 
          (statement 
            (call_statement 
              (untyped_id Center) 
              (call_argument_list 
                (call_argument 
                  (expr 
                    (literal "Play again? 
                      (Y/N)"))) , 
                (call_argument 
                  (expr 
                    (literal 24)))))) \n statement \n 
          (statement 
            (do_loop_statement DO 
              (block \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call k$) = 
                    (expr 
                      (variable_or_function_call UCASE$ 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call INKEY$)) )))))) \n statement) LOOP 
              (do_condition WHILE 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call k$)) <> 
                    (expr 
                      (literal "Y"))) AND 
                  (expr 
                    (expr 
                      (variable_or_function_call k$)) <> 
                    (expr 
                      (literal "N"))))))) \n statement \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Again) = 
              (expr 
                (variable_or_function_call FALSE)))) \n statement \n 
          (if_block_statement IF 
            (expr 
              (expr 
                (variable_or_function_call k$)) = 
              (expr 
                (literal "Y"))) THEN \n 
            (then_block 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Again) = 
                  (expr 
                    (variable_or_function_call TRUE)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Level) = 
                  (expr 
                    (literal 0)))) \n 
              (statement 
                (call_statement 
                  (untyped_id NextLevel))) \n) 
            (end_if_statement END IF)) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call NeedBall) = 
              (expr 
                (variable_or_function_call FALSE)))) \n) 
        (else_block_statement ELSE 
          (else_block statement \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call NeedBall) = 
                (expr 
                  (variable_or_function_call TRUE)))) \n)) 
        (end_if_statement END IF)) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id GameParamSetup) 
    (block \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Paddle 
            (args_or_indices 
              ( 
                (expr 
                  (literal 1)) )) . PColor) = 
          (expr 
            (variable_or_function_call PLAYERCOLOR1)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call TempPADDLELENGTH) = 
          (expr 
            (variable_or_function_call PADDLELENGTH1)))) \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call NumberOfPlayers)) = 
          (expr 
            (literal 2))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call Paddle 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 2)) )) . PColor) = 
              (expr 
                (variable_or_function_call PLAYERCOLOR2)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call TempPADDLELENGTH) = 
              (expr 
                (variable_or_function_call PADDLELENGTH2)))) \n) 
        (end_if_statement END IF)) \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call ScreenWide) = 
          (expr 
            (variable_or_function_call SCREENWIDTH)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call GraphicsWidth) = 
          (expr 
            (expr 
              (variable_or_function_call ScreenWide)) * 
            (expr 
              (variable_or_function_call PIXELSIZE))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call UsableWidth) = 
          (expr 
            (expr 
              (variable_or_function_call GraphicsWidth)) - 
            (expr 
              (literal 7))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Ball.PColor) = 
          (expr 
            (variable_or_function_call BALLCOLOR)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call NumBalls) = 
          (expr 
            (variable_or_function_call INITNUMBALLS)))) \n statement \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call X!) = 
          (expr 
            (builtin_function TIMER)))) \n 
      (statement 
        (for_next_statement FOR g! = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 500)) 
          (block \n statement) NEXT g!)) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call X!) = 
          (expr 
            (expr 
              (builtin_function TIMER)) - 
            (expr 
              (variable_or_function_call X!))))) \n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call X!)) 
          (before_first_case \n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 0)) TO 
                (expr 
                  (literal .39)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call ActualBallSpeed) = 
                  (expr 
                    (variable_or_function_call INITIALBALLSPEED)))) \n statement)) 
          (case_block 
            (case_statement CASE 
              (case_expr IS < 
                (expr 
                  (literal .5)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call ActualBallSpeed) = 
                  (expr 
                    (expr 
                      (variable_or_function_call INITIALBALLSPEED)) / 
                    (expr 
                      (literal 2))))) \n statement)) 
          (case_block 
            (case_statement CASE ELSE) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call ActualBallSpeed) = 
                  (expr 
                    (literal 0)))) \n statement)) 
          (end_select_statement END SELECT))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Ball.speed) = 
          (expr 
            (variable_or_function_call ActualBallSpeed)))) \n statement \n 
      (statement 
        (for_next_statement FOR Indx = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call NumberOfPlayers)) 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Paddle 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Indx)) )) . Size) = 
                (expr 
                  (variable_or_function_call TempPADDLELENGTH)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Paddle 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Indx)) )) . Score) = 
                (expr 
                  (literal 0)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Paddle 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Indx)) )) . NumBricksHit) = 
                (expr 
                  (literal 0)))) \n statement) NEXT Indx)) \n statement \n 
      (statement 
        (screen_statement SCREEN 
          (expr 
            (variable_or_function_call ScreenMode)))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call ScreenMode)) = 
          (expr 
            (literal 7))) THEN \n 
        (then_block 
          (statement 
            (color_statement COLOR 
              (expr 
                (variable_or_function_call BGCOLOR)) , 
              (expr 
                (variable_or_function_call BGCOLOR)))) \n) 
        (else_block_statement ELSE 
          (else_block statement \n 
            (statement 
              (color_statement COLOR 
                (expr 
                  (variable_or_function_call BGCOLOR)))) \n)) 
        (end_if_statement END IF)) \n statement \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (literal 50)) , 
            (expr 
              (literal 49)) ) - 
          ( 
            (expr 
              (literal 50)) , 
            (expr 
              (literal 51)) ) , 
          (expr 
            (variable_or_function_call Ball.PColor)))) \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (literal 49)) , 
            (expr 
              (literal 50)) ) - 
          ( 
            (expr 
              (literal 51)) , 
            (expr 
              (literal 50)) ) , 
          (expr 
            (variable_or_function_call Ball.PColor)))) \n 
      (statement 
        (get_graphics_statement GET 
          ( 
            (expr 
              (literal 49)) , 
            (expr 
              (literal 49)) ) - 
          ( 
            (expr 
              (literal 51)) , 
            (expr 
              (literal 51)) ) , 
          (variable_or_function_call Ballshape))) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id GetGameOptions) 
    (block \n statement \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n statement \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 9)) , 
          (expr 
            (literal 32)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Default is")) ; 
          (expr 
            (variable_or_function_call DEFAULTPLAYERS)))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 15)))) \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 8)) , 
                (expr 
                  (literal 24)))) : 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call SPACE$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 50)) )))))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 8)) , 
                (expr 
                  (literal 24)))) \n 
            (statement 
              (input_statement INPUT "How many players? 
                (1 or 2) " , 
                (variable_or_function_call PaddleHold$))) \n statement) LOOP 
          (do_condition UNTIL 
            (expr 
              (expr 
                (expr 
                  (expr 
                    (variable_or_function_call PaddleHold$)) = 
                  (expr 
                    (literal "1"))) OR 
                (expr 
                  (expr 
                    (variable_or_function_call PaddleHold$)) = 
                  (expr 
                    (literal "2")))) OR 
              (expr 
                (expr 
                  (builtin_function LEN 
                    ( 
                      (expr 
                        (variable_or_function_call PaddleHold$)) ))) = 
                (expr 
                  (literal 0))))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call NumberOfPlayers) = 
          (expr 
            (variable_or_function_call VAL 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call PaddleHold$)) )))))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call NumberOfPlayers)) = 
            (expr 
              (literal 0))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call NumberOfPlayers) = 
                (expr 
                  (variable_or_function_call DEFAULTPLAYERS))))))) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id HorizontalScroll) 
    ( 
      (parameter_list 
        (parameter M$) , 
        (parameter Row)) ) 
    (block \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call M$) = 
          (expr 
            (expr 
              (variable_or_function_call SPACE$ 
                (args_or_indices 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call ScreenWide)) + 
                      (expr 
                        (literal 2))) )))) + 
            (expr 
              (variable_or_function_call M$))))) \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (expr 
              (builtin_function LEN 
                ( 
                  (expr 
                    (variable_or_function_call M$)) ))) - 
            (expr 
              (literal 1))) 
          (block \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (literal 1)))) \n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (builtin_function MID$ 
                    ( 
                      (expr 
                        (variable_or_function_call M$)) , 
                      (expr 
                        (expr 
                          (builtin_function LEN 
                            ( 
                              (expr 
                                (variable_or_function_call M$)) ))) - 
                        (expr 
                          (variable_or_function_call i))) , 
                      (expr 
                        (expr 
                          (variable_or_function_call ScreenWide)) - 
                        (expr 
                          (literal 1))) ))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Delay!) = 
                (expr 
                  (expr 
                    (builtin_function TIMER)) + 
                  (expr 
                    (literal .05))))) \n 
            (statement 
              (do_loop_statement DO 
                (do_condition WHILE 
                  (expr 
                    (expr 
                      (builtin_function TIMER)) < 
                    (expr 
                      (variable_or_function_call Delay!)))) 
                (block : 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call k$) = 
                      (expr 
                        (variable_or_function_call INKEY$)))) :) LOOP)) \n statement) NEXT i)) \n 
      (statement 
        (call_statement 
          (untyped_id RedrawPaddles))) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id MovePaddle) 
    ( 
      (parameter_list 
        (parameter NewX) , 
        (parameter NewY) , 
        (parameter PlayerNum)) ) 
    (block \n statement \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call TempX) = 
          (expr 
            (expr 
              (variable_or_function_call Paddle 
                (args_or_indices 
                  ( 
                    (expr 
                      (variable_or_function_call PlayerNum)) )) . X)) + 
            (expr 
              (variable_or_function_call NewX))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call TempY) = 
          (expr 
            (expr 
              (variable_or_function_call Paddle 
                (args_or_indices 
                  ( 
                    (expr 
                      (variable_or_function_call PlayerNum)) )) . Y)) + 
            (expr 
              (variable_or_function_call NewY))))) \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call OppOver) = 
          (expr 
            (variable_or_function_call FALSE)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call OppUnder) = 
          (expr 
            (variable_or_function_call FALSE)))) \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call NumberOfPlayers)) = 
          (expr 
            (literal 2))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call OppNum) = 
              (expr 
                (expr 
                  (literal 3)) - 
                (expr 
                  (variable_or_function_call PlayerNum))))) \n statement \n statement \n 
          (if_block_statement IF 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call TempX)) >= 
                (expr 
                  (variable_or_function_call Paddle 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call OppNum)) )) . X))) AND 
              (expr 
                (expr 
                  (variable_or_function_call TempX)) <= 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call Paddle 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call OppNum)) )) . X)) + 
                        (expr 
                          (variable_or_function_call Paddle 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call OppNum)) )) . Size))) - 
                      (expr 
                        (literal 1))) )))) THEN \n 
            (then_block 
              (statement 
                (assignment_statement 
                  (variable_or_function_call OppUnder) = 
                  (expr 
                    (variable_or_function_call TRUE)))) \n) 
            (end_if_statement END IF)) \n statement \n statement \n 
          (if_block_statement IF 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call TempX)) <= 
                (expr 
                  (variable_or_function_call Paddle 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call OppNum)) )) . X))) AND 
              (expr 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call TempX)) + 
                        (expr 
                          (variable_or_function_call Paddle 
                            (args_or_indices 
                              ( 
                                (expr 
                                  ( 
                                    (expr 
                                      (variable_or_function_call PlayerNum)) )) )) . Size))) - 
                      (expr 
                        (literal 1))) )) >= 
                (expr 
                  (variable_or_function_call Paddle 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call OppNum)) )) . X)))) THEN \n 
            (then_block 
              (statement 
                (assignment_statement 
                  (variable_or_function_call OppOver) = 
                  (expr 
                    (variable_or_function_call TRUE)))) \n) 
            (end_if_statement END IF)) \n statement \n statement \n 
          (statement 
            (if_inline_statement IF 
              (expr 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call NewX)) = 
                    (expr 
                      (literal 0))) AND 
                  (expr 
                    (expr 
                      (variable_or_function_call TempY)) = 
                    (expr 
                      (variable_or_function_call Paddle 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call OppNum)) )) . Y)))) AND 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call OppOver)) OR 
                      (expr 
                        (variable_or_function_call OppUnder))) ))) THEN 
              (if_inline_action 
                (statement 
                  (exit_statement EXIT SUB))))) \n statement \n statement \n 
          (statement 
            (if_inline_statement IF 
              (expr 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call NewY)) = 
                    (expr 
                      (literal 0))) AND 
                  (expr 
                    (expr 
                      (variable_or_function_call TempY)) = 
                    (expr 
                      (variable_or_function_call Paddle 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call OppNum)) )) . Y)))) AND 
                (expr 
                  (variable_or_function_call OppUnder))) THEN 
              (if_inline_action 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call TempX) = 
                    (expr 
                      (expr 
                        (variable_or_function_call Paddle 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call OppNum)) )) . X)) + 
                      (expr 
                        (variable_or_function_call Paddle 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call OppNum)) )) . Size)))))))) \n 
          (statement 
            (if_inline_statement IF 
              (expr 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call NewY)) = 
                    (expr 
                      (literal 0))) AND 
                  (expr 
                    (expr 
                      (variable_or_function_call TempY)) = 
                    (expr 
                      (variable_or_function_call Paddle 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call OppNum)) )) . Y)))) AND 
                (expr 
                  (variable_or_function_call OppOver))) THEN 
              (if_inline_action 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call TempX) = 
                    (expr 
                      (expr 
                        (variable_or_function_call Paddle 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call OppNum)) )) . X)) - 
                      (expr 
                        (variable_or_function_call Paddle 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call OppNum)) )) . Size)))))))) \n) 
        (end_if_statement END IF)) \n statement \n statement \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call TempY)) > 
              (expr 
                (variable_or_function_call MAXROW))) OR 
            (expr 
              (expr 
                (variable_or_function_call TempY)) < 
              (expr 
                (variable_or_function_call MINROW)))) THEN 
          (if_inline_action 
            (statement 
              (exit_statement EXIT SUB))))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call TempX)) < 
            (expr 
              (literal 1))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call TempX) = 
                (expr 
                  (literal 1))))))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call TempX)) + 
              (expr 
                (variable_or_function_call Paddle 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call PlayerNum)) )) . Size))) >= 
            (expr 
              (variable_or_function_call GraphicsWidth))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call TempX) = 
                (expr 
                  (expr 
                    (variable_or_function_call GraphicsWidth)) - 
                  (expr 
                    (variable_or_function_call Paddle 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call PlayerNum)) )) . Size)))))))) \n statement \n statement \n 
      (statement 
        (call_statement 
          (untyped_id DrawPaddle) 
          (call_argument_list 
            (call_argument BGCOLOR) , 
            (call_argument PlayerNum)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Paddle 
            (args_or_indices 
              ( 
                (expr 
                  (variable_or_function_call PlayerNum)) )) . OldX) = 
          (expr 
            (variable_or_function_call Paddle 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call PlayerNum)) )) . X)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Paddle 
            (args_or_indices 
              ( 
                (expr 
                  (variable_or_function_call PlayerNum)) )) . OldY) = 
          (expr 
            (variable_or_function_call Paddle 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call PlayerNum)) )) . Y)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Paddle 
            (args_or_indices 
              ( 
                (expr 
                  (variable_or_function_call PlayerNum)) )) . X) = 
          (expr 
            (variable_or_function_call TempX)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Paddle 
            (args_or_indices 
              ( 
                (expr 
                  (variable_or_function_call PlayerNum)) )) . Y) = 
          (expr 
            (variable_or_function_call TempY)))) \n 
      (statement 
        (call_statement 
          (untyped_id BallHitPaddle) 
          (call_argument_list 
            (call_argument PlayerNum)))) \n 
      (statement 
        (call_statement 
          (untyped_id DrawPaddle) 
          (call_argument_list 
            (call_argument 
              (expr 
                (variable_or_function_call Paddle 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call PlayerNum)) )) . PColor))) , 
            (call_argument PlayerNum)))) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id NewBall) 
    (block \n statement \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Ball.X) = 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call INT 
                  (args_or_indices 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call RND 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 1)) )))) * 
                        (expr 
                          (literal 20))) )))) * 
              (expr 
                (literal 4))) + 
            (expr 
              (literal 120))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Ball.Y) = 
          (expr 
            (expr 
              (variable_or_function_call MINROW)) - 
            (expr 
              (literal 8))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Ball.OldX) = 
          (expr 
            (variable_or_function_call Ball.X)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Ball.OldY) = 
          (expr 
            (variable_or_function_call Ball.Y)))) \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Ball.XOffset) = 
          (expr 
            (literal 4)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Ball.YOffset) = 
          (expr 
            (literal 4)))) \n statement \n statement \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call RND 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 1)) )))) > 
            (expr 
              (literal .5))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call Ball.XOffset) = 
                (expr - 
                  (expr 
                    (variable_or_function_call Ball.XOffset)))))))) \n statement \n 
      (statement 
        (call_statement 
          (untyped_id SetDefaultPaddle))) \n statement \n 
      (statement 
        (call_statement 
          (untyped_id DrawBall) 
          (call_argument_list 
            (call_argument Ball.X) , 
            (call_argument Ball.Y)))) \n 
      (statement 
        (call_statement 
          (untyped_id UpdateScreen))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call JustHit) = 
          (expr 
            (variable_or_function_call FALSE)))) \n statement \n 
      (statement 
        (for_next_statement FOR Indx = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 2)) 
          (block \n 
            (statement 
              (call_statement 
                (untyped_id SOUND) 
                (call_argument_list 
                  (call_argument 
                    (expr 
                      (literal 300))) , 
                  (call_argument 
                    (expr 
                      (literal .4)))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Restart&) = 
                (expr 
                  (expr 
                    (builtin_function TIMER)) + 
                  (expr 
                    (literal .9))))) \n 
            (statement 
              (do_loop_statement DO 
                (block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call ClearKeyBuffer$) = 
                      (expr 
                        (variable_or_function_call INKEY$)))) \n statement) LOOP 
                (do_condition WHILE 
                  (expr 
                    (expr 
                      (builtin_function TIMER)) < 
                    (expr 
                      (variable_or_function_call Restart&)))))) \n statement) NEXT Indx)) \n statement \n statement \n 
      (statement 
        (call_statement 
          (untyped_id SOUND) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal 300))) , 
            (call_argument 
              (expr 
                (literal .4)))))) \n 
      (statement 
        (call_statement 
          (untyped_id SOUND) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal 400))) , 
            (call_argument 
              (expr 
                (literal .2)))))) \n statement \n 
      (statement 
        (do_loop_statement DO 
          (do_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call INKEY$)) <> 
              (expr 
                (literal "")))) 
          (block :) LOOP)) \n statement \n 
      (statement 
        (call_statement 
          (untyped_id EraseBall) 
          (call_argument_list 
            (call_argument Ball.X) , 
            (call_argument Ball.Y)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call EraseBallOK) = 
          (expr 
            (variable_or_function_call FALSE)))) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id NextLevel) 
    (block \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Level) = 
          (expr 
            (expr 
              (variable_or_function_call Level)) + 
            (expr 
              (literal 1))))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Level)) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (statement 
            (call_statement 
              (untyped_id GameParamSetup))) \n) 
        (else_block_statement ELSE 
          (else_block statement \n 
            (statement 
              (play_statement PLAY 
                (expr 
                  (variable_or_function_call NEXTLEVELSOUND)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call LevelEnd$) = 
                (expr 
                  (expr 
                    (expr 
                      (expr 
                        (expr 
                          (literal " Level")) + 
                        (expr 
                          (variable_or_function_call STR$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call Level)) - 
                                  (expr 
                                    (literal 1))) ))))) + 
                      (expr 
                        (literal " completed! "))) + 
                    (expr 
                      (variable_or_function_call STR$ 
                        (args_or_indices 
                          ( 
                            (expr 
                              (expr 
                                ( 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call Level)) - 
                                    (expr 
                                      (literal 1))) )) * 
                              (expr 
                                (variable_or_function_call BONUSMULTIPLIER))) ))))) + 
                  (expr 
                    (literal " Bonus Points! "))))) \n 
            (statement 
              (call_statement 
                (untyped_id HorizontalScroll) 
                (call_argument_list 
                  (call_argument LevelEnd$) , 
                  (call_argument 
                    (expr 
                      (literal 15)))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Ball.speed) = 
                (expr 
                  (expr 
                    (variable_or_function_call INT 
                      (args_or_indices 
                        ( 
                          (expr 
                            (expr 
                              (expr 
                                (expr 
                                  (variable_or_function_call ActualBallSpeed)) * 
                                (expr 
                                  ( 
                                    (expr 
                                      (expr 
                                        (literal .95)) ^ 
                                      (expr 
                                        (variable_or_function_call Level))) ))) * 
                              (expr 
                                (literal 100))) + 
                            (expr 
                              (literal .5))) )))) / 
                  (expr 
                    (literal 100))))) \n statement \n 
            (statement 
              (for_next_statement FOR Indx = 
                (expr 
                  (literal 1)) TO 
                (expr 
                  (expr 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call BONUSMULTIPLIER)) * 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call Level)) - 
                              (expr 
                                (literal 1))) ))) )) \ 
                  (expr 
                    (literal 100))) 
                (block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Paddle 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call LastHitBy)) )) . Score) = 
                      (expr 
                        (expr 
                          (variable_or_function_call Paddle 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call LastHitBy)) )) . Score)) + 
                        (expr 
                          (literal 100))))) \n 
                  (statement 
                    (call_statement 
                      (untyped_id UpdateScreen))) \n 
                  (statement 
                    (call_statement 
                      (untyped_id SOUND) 
                      (call_argument_list 
                        (call_argument 
                          (expr 
                            ( 
                              (expr 
                                (expr 
                                  (expr 
                                    (variable_or_function_call Indx)) * 
                                  (expr 
                                    (literal 25))) + 
                                (expr 
                                  (literal 15))) ))) , 
                        (call_argument 
                          (expr 
                            (expr 
                              (expr 
                                (literal 1)) / 
                              (expr 
                                (variable_or_function_call Indx))) * 
                            (expr 
                              (literal 18.2))))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call PauseLen#) = 
                      (expr 
                        (expr 
                          (builtin_function TIMER)) + 
                        (expr 
                          (expr 
                            (literal 1)) / 
                          (expr 
                            (variable_or_function_call Indx)))))) \n 
                  (statement 
                    (while_wend_statement WHILE 
                      (expr 
                        (expr 
                          (builtin_function TIMER)) < 
                        (expr 
                          (variable_or_function_call PauseLen#))) 
                      (block :) WEND)) \n statement) NEXT Indx)) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call EraseBallOK) = 
                (expr 
                  (variable_or_function_call TRUE)))) \n)) 
        (end_if_statement END IF)) \n statement \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n statement \n 
      (statement 
        (for_next_statement FOR Y = 
          (expr 
            (literal 0)) TO 
          (expr 
            (literal 25)) 
          (block \n 
            (statement 
              (for_next_statement FOR X = 
                (expr 
                  (literal 0)) TO 
                (expr 
                  (literal 20)) 
                (block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Bricks 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call Y)) , 
                            (expr 
                              (variable_or_function_call X)) ))) = 
                      (expr 
                        (variable_or_function_call BGCOLOR)))) \n statement) NEXT X)) \n statement) NEXT Y)) \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (expr 
              (variable_or_function_call Level)) MOD 
            (expr 
              (variable_or_function_call CUTLEVEL))) = 
          (expr 
            (literal 0))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call TempPADDLELENGTH) = 
              (expr 
                (expr 
                  (variable_or_function_call TempPADDLELENGTH)) * 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        ( 
                          (expr 
                            (expr 
                              (literal 100)) - 
                            (expr 
                              (variable_or_function_call PADDLECUT))) )) / 
                      (expr 
                        (literal 100))) ))))) \n 
          (statement 
            (if_inline_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call TempPADDLELENGTH)) < 
                (expr 
                  (literal 8))) THEN 
              (if_inline_action 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call TempPADDLELENGTH) = 
                    (expr 
                      (literal 8))))))) \n statement \n 
          (statement 
            (for_next_statement FOR Indx = 
              (expr 
                (literal 1)) TO 
              (expr 
                (variable_or_function_call NumberOfPlayers)) 
              (block \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Paddle 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call Indx)) )) . Size) = 
                    (expr 
                      (variable_or_function_call TempPADDLELENGTH)))) \n statement) NEXT Indx)) \n) 
        (end_if_statement END IF)) \n statement \n statement \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call Level)) MOD 
              (expr 
                (variable_or_function_call LEVELNEWBALL))) = 
            (expr 
              (literal 0))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call NumBalls) = 
                (expr 
                  (expr 
                    (variable_or_function_call NumBalls)) + 
                  (expr 
                    (literal 1)))))))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call Level)) MOD 
              (expr 
                (variable_or_function_call MAXLEVEL))) = 
            (expr 
              (literal 1))) THEN 
          (if_inline_action 
            (statement 
              (call_statement 
                (untyped_id RESTORE)))))) \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call MAXLEVELCount) = 
          (expr 
            (literal 0)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call LevelCount) = 
          (expr 
            (literal 0)))) \n statement \n 
      (statement 
        (for_next_statement FOR Y = 
          (expr 
            (variable_or_function_call STARTBRICKROW)) TO 
          (expr 
            (expr 
              (variable_or_function_call MAXBLOCKROW)) - 
            (expr 
              (literal 1))) 
          (block \n 
            (statement 
              (for_next_statement FOR X = 
                (expr 
                  (literal 0)) TO 
                (expr 
                  (literal 19)) 
                (block \n 
                  (statement 
                    (read_statement READ 
                      (variable_or_function_call C))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Bricks 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call Y)) , 
                            (expr 
                              (variable_or_function_call X)) ))) = 
                      (expr 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call C)) MOD 
                              (expr 
                                (literal 32))) )) + 
                        (expr 
                          (variable_or_function_call BGCOLOR))))) \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (variable_or_function_call Bricks 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call Y)) , 
                              (expr 
                                (variable_or_function_call X)) )))) <> 
                      (expr 
                        (variable_or_function_call BGCOLOR))) THEN \n 
                    (then_block 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call MAXLEVELCount) = 
                          (expr 
                            (expr 
                              (variable_or_function_call MAXLEVELCount)) + 
                            (expr 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call C)) MOD 
                                  (expr 
                                    (literal 32))) ))))) \n statement \n statement \n 
                      (if_block_statement IF 
                        (expr 
                          (expr 
                            (variable_or_function_call ScreenMode)) = 
                          (expr 
                            (literal 1))) THEN \n 
                        (then_block 
                          (statement 
                            (call_statement 
                              (untyped_id DrawBrick) 
                              (call_argument_list 
                                (call_argument X) , 
                                (call_argument Y) , 
                                (call_argument 
                                  (expr 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call Bricks 
                                          (args_or_indices 
                                            ( 
                                              (expr 
                                                (variable_or_function_call Y)) , 
                                              (expr 
                                                (variable_or_function_call X)) )))) MOD 
                                      (expr 
                                        (literal 3))) + 
                                    (expr 
                                      (literal 1))))))) \n) 
                        (else_block_statement ELSE 
                          (else_block statement \n 
                            (statement 
                              (call_statement 
                                (untyped_id DrawBrick) 
                                (call_argument_list 
                                  (call_argument X) , 
                                  (call_argument Y) , 
                                  (call_argument 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call Bricks 
                                          (args_or_indices 
                                            ( 
                                              (expr 
                                                (variable_or_function_call Y)) , 
                                              (expr 
                                                (variable_or_function_call X)) )))) MOD 
                                      (expr 
                                        (literal 16))))))) \n)) 
                        (end_if_statement END IF)) \n) 
                    (end_if_statement END IF)) \n statement) NEXT X)) \n statement) NEXT Y)) \n statement \n statement \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Indx) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (do_loop_statement DO 
          (do_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call Indx)) <= 
              (expr 
                (variable_or_function_call NUMSPECIALBRICKS)))) 
          (block \n 
            (statement 
              (do_loop_statement DO 
                (block \n statement \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call XRandom) = 
                      (expr 
                        (variable_or_function_call INT 
                          (args_or_indices 
                            ( 
                              (expr 
                                (expr 
                                  (variable_or_function_call RND 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (literal 1)) )))) * 
                                (expr 
                                  (literal 20))) )))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call YRandom) = 
                      (expr 
                        (expr 
                          (variable_or_function_call INT 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call RND 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (literal 1)) )))) * 
                                  (expr 
                                    (literal 5))) )))) + 
                        (expr 
                          (variable_or_function_call STARTBRICKROW))))) \n statement) LOOP 
                (do_condition WHILE 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call Bricks 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call YRandom)) , 
                              (expr 
                                (variable_or_function_call XRandom)) )))) = 
                      (expr 
                        (variable_or_function_call BGCOLOR))) OR 
                    (expr 
                      (expr 
                        (variable_or_function_call Bricks 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call YRandom)) , 
                              (expr 
                                (variable_or_function_call XRandom)) )))) = 
                      (expr 
                        (literal 1000))))))) \n statement \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call ScreenMode)) <> 
                  (expr 
                    (literal 1))) THEN 
                (if_inline_action 
                  (statement 
                    (color_statement COLOR 
                      (expr 
                        (literal 14))))))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (expr 
                    (variable_or_function_call YRandom)) + 
                  (expr 
                    (literal 1))) , 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call XRandom)) * 
                    (expr 
                      (variable_or_function_call BRICKSIZE))) + 
                  (expr 
                    (literal 1))))) \n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call special)) ;)) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Bricks 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call YRandom)) , 
                      (expr 
                        (variable_or_function_call XRandom)) ))) = 
                (expr 
                  (literal 1000)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Indx) = 
                (expr 
                  (expr 
                    (variable_or_function_call Indx)) + 
                  (expr 
                    (literal 1))))) \n statement) LOOP)) \n statement \n 
      (statement 
        (call_statement 
          (untyped_id NewBall))) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id RedrawPaddles) 
    (block \n statement \n 
      (statement 
        (for_next_statement FOR paddles = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call NumberOfPlayers)) 
          (block \n 
            (statement 
              (call_statement 
                (untyped_id DrawPaddle) 
                (call_argument_list 
                  (call_argument 
                    (expr 
                      (variable_or_function_call Paddle 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call paddles)) )) . PColor))) , 
                  (call_argument paddles)))) \n statement) NEXT paddles)) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id SetDefaultPaddle) 
    (block \n statement \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call NumberOfPlayers)) 
          (block \n 
            (statement 
              (call_statement 
                (untyped_id DrawPaddle) 
                (call_argument_list 
                  (call_argument BGCOLOR) , 
                  (call_argument i)))) \n statement) NEXT i)) \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call NumberOfPlayers)) = 
          (expr 
            (literal 2))) THEN \n 
        (then_block 
          (statement 
            (for_next_statement FOR PaddleNumber = 
              (expr 
                (literal 1)) TO 
              (expr 
                (variable_or_function_call NumberOfPlayers)) 
              (block \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Paddle 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call PaddleNumber)) )) . X) = 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            ( 
                              (expr 
                                (expr 
                                  ( 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call GraphicsWidth)) - 
                                      (expr 
                                        (literal 80))) )) \ 
                                (expr 
                                  (variable_or_function_call PaddleNumber))) )) - 
                          (expr 
                            (variable_or_function_call TempPADDLELENGTH))) )))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Paddle 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call PaddleNumber)) )) . Y) = 
                    (expr 
                      (variable_or_function_call MAXROW)))) \n statement) NEXT PaddleNumber)) \n) 
        (else_block_statement ELSE 
          (else_block statement \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Paddle 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 1)) )) . X) = 
                (expr 
                  (expr 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call GraphicsWidth)) - 
                        (expr 
                          (variable_or_function_call TempPADDLELENGTH))) )) / 
                  (expr 
                    (literal 2))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Paddle 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 1)) )) . Y) = 
                (expr 
                  (variable_or_function_call MAXROW)))) \n)) 
        (end_if_statement END IF)) \n statement \n 
      (statement 
        (call_statement 
          (untyped_id RedrawPaddles))) \n statement \n statement) 
    (end_sub_statement END SUB)) \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n statement \n 
  (sub_statement SUB 
    (untyped_id UpdateScreen) 
    (block \n statement \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call ScreenMode)) <> 
            (expr 
              (literal 1))) THEN 
          (if_inline_action 
            (statement 
              (color_statement COLOR 
                (expr 
                  (variable_or_function_call SCORECOLOR))))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 25)) , 
          (expr 
            (literal 1)))) \n statement \n statement \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call NumberOfPlayers)) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (statement 
            (print_using_statement PRINT USING 
              (expr 
                (literal "Balls:###")) ; 
              (expr 
                (variable_or_function_call NumBalls)) ;)) \n 
          (statement 
            (print_using_statement PRINT USING 
              (expr 
                (literal " Level:###")) ; 
              (expr 
                (variable_or_function_call Level)) ;)) \n 
          (statement 
            (if_inline_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call Paddle 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 1)) )) . Score)) > 
                (expr 
                  (literal 9999000))) THEN 
              (if_inline_action 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Paddle 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 1)) )) . Score) = 
                    (expr 
                      (literal 0))))))) \n 
          (statement 
            (print_using_statement PRINT USING 
              (expr 
                (literal " Player 1:#,###,###")) ; 
              (expr 
                (variable_or_function_call Paddle 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 1)) )) . Score)) ;)) \n) 
        (else_block_statement ELSE 
          (else_block statement \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call Paddle 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 2)) )) . Score)) > 
                  (expr 
                    (literal 999000))) THEN 
                (if_inline_action 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Paddle 
                        (args_or_indices 
                          ( 
                            (expr 
                              (literal 2)) )) . Score) = 
                      (expr 
                        (literal 0))))))) \n 
            (statement 
              (print_using_statement PRINT USING 
                (expr 
                  (literal "Play2:###,###")) ; 
                (expr 
                  (variable_or_function_call Paddle 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 2)) )) . Score)) ;)) \n 
            (statement 
              (print_using_statement PRINT USING 
                (expr 
                  (literal " B:###")) ; 
                (expr 
                  (variable_or_function_call NumBalls)) ;)) \n 
            (statement 
              (print_using_statement PRINT USING 
                (expr 
                  (literal " L:###")) ; 
                (expr 
                  (variable_or_function_call Level)) ;)) \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call Paddle 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 1)) )) . Score)) > 
                  (expr 
                    (literal 999000))) THEN 
                (if_inline_action 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Paddle 
                        (args_or_indices 
                          ( 
                            (expr 
                              (literal 1)) )) . Score) = 
                      (expr 
                        (literal 0))))))) \n 
            (statement 
              (print_using_statement PRINT USING 
                (expr 
                  (literal " Play1:###,###")) ; 
                (expr 
                  (variable_or_function_call Paddle 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 1)) )) . Score)) ;)) \n)) 
        (end_if_statement END IF)) \n statement \n statement) 
    (end_sub_statement END SUB)) \n <EOF>)
