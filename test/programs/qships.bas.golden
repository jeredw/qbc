(program \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n 
  (statement 
    (deftype_statement DEFINT 
      (letter_range A - Z))) \n \n 
  (statement 
    (const_statement CONST 
      (const_assignment ISLLENGTH = 
        (const_expr 
          (expr 
            (literal 80)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment NUMTREES = 
        (const_expr 
          (expr 
            (literal 3)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment GRAVITY = 
        (const_expr 
          (expr 
            (literal 9.8)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment INITNUMGAMES = 
        (const_expr 
          (expr 
            (literal 3)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment MAXVELOCITY = 
        (const_expr 
          (expr 
            (literal 150)))))) \n \n \n \n \n \n 
  (statement 
    (const_statement CONST 
      (const_assignment INTROSOUND = 
        (const_expr 
          (expr 
            (literal "T160O1L8CDEDCDL4ECC")))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment CANNONFIRESOUND = 
        (const_expr 
          (expr 
            (literal "MBo0L32A-L64CL16BL64A+")))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment CANNONHITSOUND = 
        (const_expr 
          (expr 
            (literal "MBO0L32EFGEFDC")))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment SHIPEXPLOSIONSOUND = 
        (const_expr 
          (expr 
            (literal "MBO0L16EFGEFDC")))))) \n \n \n 
  (statement 
    (const_statement CONST 
      (const_assignment TRUE = 
        (const_expr 
          (expr - 
            (expr 
              (literal 1))))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment FALSE = 
        (const_expr 
          (expr NOT 
            (expr 
              (variable_or_function_call TRUE))))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment SHOOTSELF = 
        (const_expr 
          (expr 
            (literal 1)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment TREEWIDTH = 
        (const_expr 
          (expr 
            (literal 16)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment SHIPWIDTH = 
        (const_expr 
          (expr 
            (literal 16)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment MOVESHIPBY = 
        (const_expr 
          (expr 
            (literal 16)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment UP = 
        (const_expr 
          (expr 
            (expr 
              (literal 0)) + 
            (expr 
              (literal 72))))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment DOWN = 
        (const_expr 
          (expr 
            (expr 
              (literal 0)) + 
            (expr 
              (literal 80))))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment LEFT = 
        (const_expr 
          (expr 
            (expr 
              (literal 0)) + 
            (expr 
              (literal 75))))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment RIGHT = 
        (const_expr 
          (expr 
            (expr 
              (literal 0)) + 
            (expr 
              (literal 77))))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment ENTERKEY = 
        (const_expr 
          (expr 
            (literal 13)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment BACKGROUNDCOLOR = 
        (const_expr 
          (expr 
            (literal 0)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment WATERCOLOR = 
        (const_expr 
          (expr 
            (literal 1)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment ISLANDCOLOR = 
        (const_expr 
          (expr 
            (literal 2)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment OBJECTCOLOR = 
        (const_expr 
          (expr 
            (literal 3)))))) \n \n \n 
  (declare_statement DECLARE FUNCTION MoveShip 
    ( 
      (declare_parameter_list 
        (declare_parameter PlayerNum) , 
        (declare_parameter SeaLevel 
          (array_declaration 
            ( )))) )) \n 
  (declare_statement DECLARE FUNCTION SinkShip 
    ( 
      (declare_parameter_list 
        (declare_parameter x) , 
        (declare_parameter y)) )) \n 
  (declare_statement DECLARE FUNCTION PlotShot 
    ( 
      (declare_parameter_list 
        (declare_parameter startX) , 
        (declare_parameter startY) , 
        (declare_parameter angle#) , 
        (declare_parameter velocity)) )) \n 
  (declare_statement DECLARE FUNCTION GetPlayerCommand 
    ( 
      (declare_parameter_list 
        (declare_parameter PlayerNum) , 
        (declare_parameter SeaLevel 
          (array_declaration 
            ( )))) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id Center) 
    ( 
      (declare_parameter_list 
        (declare_parameter text$) , 
        (declare_parameter row)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id ClearArea) 
    ( 
      (declare_parameter_list 
        (declare_parameter startRow) , 
        (declare_parameter startCol) , 
        (declare_parameter endRow) , 
        (declare_parameter endCol)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id CyclePalette) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DisplayChanges) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DisplayGameTitle) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DisplayIntro) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DrawIsland) 
    ( 
      (declare_parameter_list 
        (declare_parameter SeaLevel 
          (array_declaration 
            ( )))) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DrawWaves) 
    ( 
      (declare_parameter_list 
        (declare_parameter offset) , 
        (declare_parameter hmult) , 
        (declare_parameter tmult) , 
        (declare_parameter SeaLevel 
          (array_declaration 
            ( )))) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DrawWind) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id GetGameOptions) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id GetShotParams) 
    ( 
      (declare_parameter_list 
        (declare_parameter PlayerNum) , 
        (declare_parameter NewAngle#) , 
        (declare_parameter NewVelocity)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id InitializeVariables) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id MakeBattleField) 
    ( 
      (declare_parameter_list 
        (declare_parameter SeaLevel 
          (array_declaration 
            ( )))) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id PlaceShips) 
    ( 
      (declare_parameter_list 
        (declare_parameter SeaLevel 
          (array_declaration 
            ( )))) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id PlayGame) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id PlotAngle) 
    ( 
      (declare_parameter_list 
        (declare_parameter col) , 
        (declare_parameter angle#) , 
        (declare_parameter PlayerNum)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id PlotBattleField) 
    ( 
      (declare_parameter_list 
        (declare_parameter SeaLevel 
          (array_declaration 
            ( )))) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id PlotVelocity) 
    ( 
      (declare_parameter_list 
        (declare_parameter col) , 
        (declare_parameter velocity) , 
        (declare_parameter PlayerNum)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id CannonHit) 
    ( 
      (declare_parameter_list 
        (declare_parameter x) , 
        (declare_parameter y) , 
        (declare_parameter theColor)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id UpdateScores) 
    ( 
      (declare_parameter_list 
        (declare_parameter Record 
          (array_declaration 
            ( ))) , 
        (declare_parameter PlayerNum) , 
        (declare_parameter Results)) )) \n \n \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id ShipX) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 2))) )) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id ShipY) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 2))) )) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id TotalShots) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 2))) )) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id TotalWins) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 2))) )) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable TheAngle# 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 2))) ))))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id TheVelocity) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 2))) )) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable Player$ 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 2))) ))))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable Pi#))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id TreePic1) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 20))) )) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id TreePic2) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 36))) )) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id ShipPic) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 36))) )) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable Shot& 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 2))) ))))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id ScreenHeight) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id ScreenWidth) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id NumGames) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id Wind) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id ScreenMode) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id MaxCol) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id IStart) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id IEnd) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id Delay) AS 
        (type_name INTEGER)))) \n \n 
  (statement 
    (dim_statement DIM 
      (dim_variable 
        (untyped_id KeyFlags) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM 
      (dim_variable 
        (untyped_id BadMode) AS 
        (type_name INTEGER)))) \n \n \n \n \n 
  (label 
    (text_label 
      (untyped_id ShipPicData)) :) \n 
  (statement 
    (data_statement DATA 
      (data_item 32) , 
      (data_item 16) , 
      (data_item 0) , 
      (data_item 192) , 
      (data_item 0) , 
      (data_item 192) , 
      (data_item 768) , 
      (data_item 192) , 
      (data_item 3840) , 
      (data_item 192) , 
      (data_item 16128) , 
      (data_item 195))) \n 
  (statement 
    (data_statement DATA 
      (data_item -256) , 
      (data_item 195) , 
      (data_item -253) , 
      (data_item -16189) , 
      (data_item -241) , 
      (data_item -3901) , 
      (data_item -193) , 
      (data_item -829) , 
      (data_item -1) , 
      (data_item -61) , 
      (data_item 0) , 
      (data_item 195))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 195) , 
      (data_item -21846) , 
      (data_item -21846) , 
      (data_item -21926) , 
      (data_item -23126) , 
      (data_item -21931) , 
      (data_item 21930) , 
      (data_item 23125) , 
      (data_item 21925) , 
      (data_item 0) , 
      (data_item 0))) \n \n 
  (label 
    (text_label 
      (untyped_id TreePic1Data)) :) \n 
  (statement 
    (data_statement DATA 
      (data_item 16) , 
      (data_item 16) , 
      (data_item -32760) , 
      (data_item -32760) , 
      (data_item -32758) , 
      (data_item -32760) , 
      (data_item -32760) , 
      (data_item -32758) , 
      (data_item -32760) , 
      (data_item -32760))) \n 
  (statement 
    (data_statement DATA 
      (data_item -32758) , 
      (data_item -32760) , 
      (data_item -32760) , 
      (data_item -32758) , 
      (data_item -24024) , 
      (data_item -30584) , 
      (data_item 8226) , 
      (data_item -30072) , 
      (data_item 0) , 
      (data_item 0))) \n \n 
  (label 
    (text_label 
      (untyped_id TreePic2Data)) :) \n 
  (statement 
    (data_statement DATA 
      (data_item 32) , 
      (data_item 16) , 
      (data_item 0) , 
      (data_item 2) , 
      (data_item 0) , 
      (data_item -32758) , 
      (data_item 0) , 
      (data_item 10272) , 
      (data_item -32766) , 
      (data_item 2720) , 
      (data_item -24566) , 
      (data_item 640))) \n 
  (statement 
    (data_statement DATA 
      (data_item 10792) , 
      (data_item -32766) , 
      (data_item 10912) , 
      (data_item -24566) , 
      (data_item 2688) , 
      (data_item 10280) , 
      (data_item 2176) , 
      (data_item 10400) , 
      (data_item 512) , 
      (data_item 2688) , 
      (data_item 2562) , 
      (data_item 512))) \n 
  (statement 
    (data_statement DATA 
      (data_item -30198) , 
      (data_item 522) , 
      (data_item -24024) , 
      (data_item -32598) , 
      (data_item 10784) , 
      (data_item -24416) , 
      (data_item 2208) , 
      (data_item 10368) , 
      (data_item 2176) , 
      (data_item 640) , 
      (data_item 0) , 
      (data_item 0))) \n \n 
  (label 
    (text_label 
      (untyped_id ShotData)) :) \n 
  (statement 
    (data_statement DATA 
      (data_item 196614) , 
      (data_item 3210288&))) \n \n \n \n \n \n 
  (statement 
    (on_error_statement ON ERROR GOTO 
      (target 
        (text_label 
          (untyped_id ScreenError))))) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call BadMode) = 
      (expr 
        (variable_or_function_call FALSE)))) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call ScreenMode) = 
      (expr 
        (literal 1)))) \n 
  (statement 
    (screen_statement SCREEN 
      (expr 
        (variable_or_function_call ScreenMode)))) \n \n 
  (statement 
    (on_error_statement ON ERROR GOTO 
      (target 
        (line_number 0)))) \n \n 
  (if_block_statement IF 
    (expr 
      (expr 
        (variable_or_function_call BadMode)) = 
      (expr 
        (variable_or_function_call TRUE))) THEN \n 
    (then_block 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 11)) , 
          (expr 
            (literal 13)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "CGA, EGA Color, or VGA graphics required to run QSHIPS.BAS")))) \n) 
    (else_block_statement ELSE 
      (else_block \n 
        (statement 
          (def_seg_statement DEF SEG = 
            (expr 
              (literal 0)))) \n 
        (statement 
          (assignment_statement 
            (variable_or_function_call KeyFlags) = 
            (expr 
              (variable_or_function_call PEEK 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 1047)) )))))) \n 
        (if_block_statement IF 
          (expr 
            (expr 
              (variable_or_function_call KeyFlags)) AND 
            (expr 
              (literal 32))) THEN \n 
          (then_block 
            (statement 
              (call_statement 
                (untyped_id POKE) 
                (call_argument_list 
                  (call_argument 
                    (expr 
                      (literal 1047))) , 
                  (call_argument 
                    (expr 
                      (expr 
                        (variable_or_function_call KeyFlags)) AND 
                      (expr 
                        (literal 223))))))) \n) 
          (end_if_statement END IF)) \n 
        (statement 
          (def_seg_statement DEF SEG)) \n \n 
        (statement 
          (call_statement 
            (untyped_id DisplayIntro))) \n 
        (statement 
          (call_statement 
            (untyped_id GetGameOptions))) \n 
        (statement 
          (call_statement 
            (untyped_id InitializeVariables))) \n 
        (statement 
          (call_statement 
            (untyped_id PlayGame))) \n 
        (statement 
          (call_statement 
            (untyped_id DisplayChanges))) \n \n 
        (if_block_statement IF 
          (expr 
            (expr 
              (variable_or_function_call KeyFlags)) AND 
            (expr 
              (literal 32))) THEN \n 
          (then_block 
            (statement 
              (def_seg_statement DEF SEG = 
                (expr 
                  (literal 0)))) \n 
            (statement 
              (call_statement 
                (untyped_id POKE) 
                (call_argument_list 
                  (call_argument 
                    (expr 
                      (literal 1047))) , 
                  (call_argument 
                    (expr 
                      (expr 
                        (variable_or_function_call KeyFlags)) OR 
                      (expr 
                        (literal 32))))))) \n 
            (statement 
              (def_seg_statement DEF SEG)) \n) 
          (end_if_statement END IF)) \n)) 
    (end_if_statement END IF)) \n \n 
  (statement 
    (end_statement END)) \n \n \n 
  (label 
    (text_label 
      (untyped_id ScreenError)) :) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call BadMode) = 
      (expr 
        (variable_or_function_call TRUE)))) \n 
  (statement 
    (resume_statement RESUME NEXT)) \n \n \n \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id CannonHit) 
    ( 
      (parameter_list 
        (parameter x) , 
        (parameter y) , 
        (parameter theColor)) ) 
    (block \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call fragments) = 
          (expr 
            (literal 11)))) \n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call Delay)) 
          (before_first_case \n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 500)))) 
            (block : 
              (statement 
                (assignment_statement 
                  (variable_or_function_call cycles) = 
                  (expr 
                    (literal 8)))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 200)))) 
            (block : 
              (statement 
                (assignment_statement 
                  (variable_or_function_call cycles) = 
                  (expr 
                    (literal 5)))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 50)))) 
            (block : 
              (statement 
                (assignment_statement 
                  (variable_or_function_call cycles) = 
                  (expr 
                    (literal 3)))) \n)) 
          (end_select_statement END SELECT))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call offset) = 
          (expr 
            (expr 
              (variable_or_function_call ScreenHeight)) / 
            (expr 
              (literal 10))))) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call theColor)) <> 
          (expr 
            (variable_or_function_call WATERCOLOR))) THEN \n 
        (then_block 
          (statement 
            (play_statement PLAY 
              (expr 
                (variable_or_function_call CANNONHITSOUND)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call radius) = 
              (expr 
                (expr 
                  (variable_or_function_call ScreenHeight)) / 
                (expr 
                  (literal 70))))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call increment#) = 
              (expr 
                (literal 1.2)))) \n 
          (statement 
            (for_next_statement FOR Counter# = 
              (expr 
                (literal 0)) TO 
              (expr 
                (variable_or_function_call radius)) STEP 
              (expr 
                (variable_or_function_call increment#)) 
              (block \n 
                (statement 
                  (circle_statement CIRCLE 
                    ( 
                      (expr 
                        (variable_or_function_call x)) , 
                      (expr 
                        (variable_or_function_call y)) ) , 
                    (expr 
                      (variable_or_function_call Counter#)) , 
                    (expr 
                      (variable_or_function_call ISLANDCOLOR)))) \n) NEXT Counter#)) \n 
          (statement 
            (for_next_statement FOR Counter# = 
              (expr 
                (variable_or_function_call radius)) TO 
              (expr 
                (literal 0)) STEP 
              (expr 
                ( 
                  (expr 
                    (expr - 
                      (expr 
                        (literal 1))) * 
                    (expr 
                      (variable_or_function_call increment#))) )) 
              (block \n 
                (statement 
                  (circle_statement CIRCLE 
                    ( 
                      (expr 
                        (variable_or_function_call x)) , 
                      (expr 
                        (variable_or_function_call y)) ) , 
                    (expr 
                      (variable_or_function_call Counter#)) , 
                    (expr 
                      (variable_or_function_call BACKGROUNDCOLOR)))) \n) NEXT Counter#)) \n) 
        (end_if_statement END IF)) \n \n \n 
      (statement 
        (dim_statement DIM 
          (dim_variable xpos 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 1)) TO 
                  (expr 
                    (variable_or_function_call fragments))) ))) , 
          (dim_variable ypos 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 1)) TO 
                  (expr 
                    (variable_or_function_call fragments))) ))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call radius#) = 
          (expr 
            (literal .5)))) \n 
      (statement 
        (play_statement PLAY 
          (expr 
            (variable_or_function_call CANNONHITSOUND)))) \n 
      (statement 
        (for_next_statement FOR j = 
          (expr - 
            (expr 
              (literal 3))) TO 
          (expr 
            (literal 3)) STEP 
          (expr 
            (literal 3)) 
          (block \n 
            (statement 
              (line_statement LINE 
                ( 
                  (expr 
                    (variable_or_function_call x)) , 
                  (expr 
                    (variable_or_function_call y)) ) - 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call x)) + 
                    (expr 
                      (variable_or_function_call j))) , 
                  (expr 
                    (expr 
                      (variable_or_function_call y)) - 
                    (expr 
                      (variable_or_function_call offset))) ) , 
                (expr 
                  (variable_or_function_call theColor)))) \n) NEXT j)) \n \n \n 
      (statement 
        (for_next_statement FOR kt = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call cycles)) 
          (block \n 
            (statement 
              (for_next_statement FOR i = 
                (expr 
                  (literal 1)) TO 
                (expr 
                  (variable_or_function_call fragments)) 
                (block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call xpos 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call i)) ))) = 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call x)) + 
                          (expr 
                            (expr 
                              ( 
                                (expr 
                                  (expr 
                                    ( 
                                      (expr 
                                        (expr 
                                          ( 
                                            (expr 
                                              (expr 
                                                (literal 10)) * 
                                              (expr 
                                                (variable_or_function_call RND))) )) - 
                                        (expr 
                                          (literal 5))) )) / 
                                  (expr 
                                    (literal 5))) )) * 
                            (expr 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call offset)) / 
                                  (expr 
                                    (literal 2))) )))) + 
                        (expr 
                          (expr 
                            ( 
                              (expr 
                                (expr 
                                  (literal 2)) * 
                                (expr 
                                  (variable_or_function_call kt))) )) / 
                          (expr 
                            (variable_or_function_call cycles)))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call ypos 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call i)) ))) = 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call y)) - 
                          (expr 
                            (expr 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call RND)) + 
                                  (expr 
                                    (literal 1))) )) * 
                            (expr 
                              (variable_or_function_call offset)))) + 
                        (expr 
                          (expr 
                            ( 
                              (expr 
                                (expr 
                                  (literal 3)) * 
                                (expr 
                                  (variable_or_function_call kt))) )) / 
                          (expr 
                            (variable_or_function_call cycles)))))) \n) NEXT i)) \n 
            (statement 
              (for_next_statement FOR i = 
                (expr 
                  (literal 1)) TO 
                (expr 
                  (variable_or_function_call fragments)) 
                (block \n 
                  (statement 
                    (circle_statement CIRCLE 
                      ( 
                        (expr 
                          (variable_or_function_call xpos 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call i)) )))) , 
                        (expr 
                          (variable_or_function_call ypos 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call i)) )))) ) , 
                      (expr 
                        (variable_or_function_call radius#)) , 
                      (expr 
                        (variable_or_function_call theColor)))) \n) NEXT i)) \n 
            (statement 
              (for_next_statement FOR j = 
                (expr - 
                  (expr 
                    (literal 3))) TO 
                (expr 
                  (literal 3)) STEP 
                (expr 
                  (literal 3)) 
                (block \n 
                  (statement 
                    (line_statement LINE 
                      ( 
                        (expr 
                          (variable_or_function_call x)) , 
                        (expr 
                          (variable_or_function_call y)) ) - 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call x)) + 
                          (expr 
                            (variable_or_function_call j))) , 
                        (expr 
                          (expr 
                            (variable_or_function_call y)) - 
                          (expr 
                            (variable_or_function_call offset))) ) , 
                      (expr 
                        (variable_or_function_call BACKGROUNDCOLOR)))) \n) NEXT j)) \n 
            (statement 
              (for_next_statement FOR i = 
                (expr 
                  (literal 1)) TO 
                (expr 
                  (variable_or_function_call fragments)) 
                (block \n 
                  (statement 
                    (circle_statement CIRCLE 
                      ( 
                        (expr 
                          (variable_or_function_call xpos 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call i)) )))) , 
                        (expr 
                          (variable_or_function_call ypos 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call i)) )))) ) , 
                      (expr 
                        (variable_or_function_call radius#)) , 
                      (expr 
                        (variable_or_function_call BACKGROUNDCOLOR)))) \n) NEXT i)) \n) NEXT kt)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id Center) 
    ( 
      (parameter_list 
        (parameter text$) , 
        (parameter row)) ) 
    (block \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call row%)) , 
          (expr 
            (expr 
              (expr 
                (literal 40)) - 
              (expr 
                (expr 
                  (builtin_function LEN 
                    ( 
                      (expr 
                        (variable_or_function_call text$)) ))) \ 
                (expr 
                  (literal 2)))) + 
            (expr 
              (literal 1))))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call text$)) ;)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id ClearArea) 
    ( 
      (parameter_list 
        (parameter startRow) , 
        (parameter startCol) , 
        (parameter endRow) , 
        (parameter endCol)) ) 
    (block \n \n 
      (statement 
        (for_next_statement FOR row = 
          (expr 
            (variable_or_function_call startRow)) TO 
          (expr 
            (variable_or_function_call endRow)) 
          (block \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call row)) , 
                (expr 
                  (variable_or_function_call startCol)))) \n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call SPACE$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (expr 
                            (expr 
                              (variable_or_function_call endCol)) - 
                            (expr 
                              (variable_or_function_call startCol))) + 
                          (expr 
                            (literal 1))) )))))) \n) NEXT row)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id CyclePalette) 
    (block \n \n \n \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 12)) , 
          (expr 
            (variable_or_function_call ISLANDCOLOR)))) \n 
      (statement 
        (for_next_statement FOR g! = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call Delay)) 
          (block :) NEXT g!)) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 14)) , 
          (expr 
            (variable_or_function_call ISLANDCOLOR)))) \n 
      (statement 
        (for_next_statement FOR g! = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call Delay)) 
          (block :) NEXT g!)) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 0)) , 
          (expr 
            (literal 1)))) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id DisplayChanges) 
    (block \n \n 
      (statement 
        (call_statement 
          (untyped_id DisplayGameTitle))) \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "The following game characteristics can be easily changed from"))) , 
            (call_argument 
              (expr 
                (literal 5)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "within the QuickBASIC Interpreter.  To change the values of  "))) , 
            (call_argument 
              (expr 
                (literal 6)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "these characteristics, locate the corresponding CONST or DATA"))) , 
            (call_argument 
              (expr 
                (literal 7)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "statements in the source code and change their values, then  "))) , 
            (call_argument 
              (expr 
                (literal 8)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "restart the program 
                  (press Shift + F5).                      "))) , 
            (call_argument 
              (expr 
                (literal 9)))))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 15)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Size of the island                            "))) , 
            (call_argument 
              (expr 
                (literal 11)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Number of trees on the island                 "))) , 
            (call_argument 
              (expr 
                (literal 12)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Strength of gravity that affects your shots   "))) , 
            (call_argument 
              (expr 
                (literal 13)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Maximum velocity your cannons can fire        "))) , 
            (call_argument 
              (expr 
                (literal 14)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Default number of hits needed to win the game "))) , 
            (call_argument 
              (expr 
                (literal 15)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Sounds of the cannon firing and the explosions"))) , 
            (call_argument 
              (expr 
                (literal 16)))))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "The CONST statements and instructions on changing them are   "))) , 
            (call_argument 
              (expr 
                (literal 18)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "located at the beginning of the main program.                "))) , 
            (call_argument 
              (expr 
                (literal 19)))))) \n \n 
      (statement 
        (do_loop_statement DO 
          (do_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call INKEY$)) = 
              (expr 
                (literal "")))) 
          (block :) LOOP)) \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id DisplayGameTitle) 
    (block \n \n 
      (statement 
        (screen_statement SCREEN 
          (expr 
            (literal 0)))) \n 
      (statement 
        (width_statement WIDTH 
          (expr 
            (literal 80)) , 
          (expr 
            (literal 25)))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 4)) , 
          (expr 
            (literal 0)))) \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 1)) , 
          (expr 
            (literal 2)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call CHR$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 201)) )))) ; 
          (expr 
            (variable_or_function_call STRING$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 76)) , 
                  (expr 
                    (literal 205)) )))) ; 
          (expr 
            (variable_or_function_call CHR$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 187)) )))) ;)) \n 
      (statement 
        (for_next_statement FOR x% = 
          (expr 
            (literal 2)) TO 
          (expr 
            (literal 24)) 
          (block \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call x%)) , 
                (expr 
                  (literal 2)))) \n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 186)) )))) ; 
                (expr 
                  (variable_or_function_call TAB 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 79)) )))) ; 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 186)) )))) ;)) \n) NEXT x%)) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 25)) , 
          (expr 
            (literal 2)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call CHR$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 200)) )))) ; 
          (expr 
            (variable_or_function_call STRING$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 76)) , 
                  (expr 
                    (literal 205)) )))) ; 
          (expr 
            (variable_or_function_call CHR$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 188)) )))) ;)) \n \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 0)) , 
          (expr 
            (literal 4)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "      Microsoft      "))) , 
            (call_argument 
              (expr 
                (literal 1)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "     Q S H I P S     "))) , 
            (call_argument 
              (expr 
                (literal 2)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "   Press any key to continue   "))) , 
            (call_argument 
              (expr 
                (literal 25)))))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)) , 
          (expr 
            (literal 0)))) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id DisplayIntro) 
    (block \n \n 
      (statement 
        (call_statement 
          (untyped_id DisplayGameTitle))) \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Copyright 
                  (C) 1990 Microsoft Corporation.  All Rights Reserved."))) , 
            (call_argument 
              (expr 
                (literal 4)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Each player's mission is to destroy the opponent's ship by varying the     "))) , 
            (call_argument 
              (expr 
                (literal 6)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "angle and speed of your cannon, taking into account wind speed and terrain."))) , 
            (call_argument 
              (expr 
                (literal 7)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "The wind speed is shown by a directional arrow on the playing field, its   "))) , 
            (call_argument 
              (expr 
                (literal 8)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "length relative to its strength.  With each turn, you may EITHER move your "))) , 
            (call_argument 
              (expr 
                (literal 9)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "ship to avoid your opponent's cannon fire OR shoot your cannon.            "))) , 
            (call_argument 
              (expr 
                (literal 10)))))) \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 4)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument STRING$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 74)) , 
                  (expr 
                    (literal 196)) ))) , 
            (call_argument 
              (expr 
                (literal 12)))))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal " Game Controls "))) , 
            (call_argument 
              (expr 
                (literal 12)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "    General              Shooting Cannon                  Moving Ship     "))) , 
            (call_argument 
              (expr 
                (literal 13)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (expr 
                  (expr 
                    (expr 
                      (expr 
                        (literal "S - Shoot cannon    ")) + 
                      (expr 
                        (variable_or_function_call CHR$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 24)) ))))) + 
                    (expr 
                      (literal " - Increase cannon angle          "))) + 
                  (expr 
                    (variable_or_function_call CHR$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 27)) ))))) + 
                (expr 
                  (literal " - Move ship left ")))) , 
            (call_argument 
              (expr 
                (literal 15)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (expr 
                  (expr 
                    (expr 
                      (expr 
                        (literal "M - Move ship       ")) + 
                      (expr 
                        (variable_or_function_call CHR$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 25)) ))))) + 
                    (expr 
                      (literal " - Decrease cannon angle          "))) + 
                  (expr 
                    (variable_or_function_call CHR$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 26)) ))))) + 
                (expr 
                  (literal " - Move ship right")))) , 
            (call_argument 
              (expr 
                (literal 16)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (expr 
                  (expr 
                    (literal "Q - Quit game       ")) + 
                  (expr 
                    (variable_or_function_call CHR$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 26)) ))))) + 
                (expr 
                  (literal " - Increase cannon velocity                          ")))) , 
            (call_argument 
              (expr 
                (literal 17)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "                        for Player 1, decrease                            "))) , 
            (call_argument 
              (expr 
                (literal 18)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "                        cannon velocity for Player 2                      "))) , 
            (call_argument 
              (expr 
                (literal 19)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (expr 
                  (expr 
                    (literal "                    ")) + 
                  (expr 
                    (variable_or_function_call CHR$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 27)) ))))) + 
                (expr 
                  (literal " - Decrease cannon velocity                          ")))) , 
            (call_argument 
              (expr 
                (literal 20)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "                        for Player 1, increase                            "))) , 
            (call_argument 
              (expr 
                (literal 21)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "                        cannon velocity for Player 2                      "))) , 
            (call_argument 
              (expr 
                (literal 22)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "                    Enter - Fire cannon                                   "))) , 
            (call_argument 
              (expr 
                (literal 23)))))) \n \n 
      (statement 
        (play_statement PLAY 
          (expr 
            (variable_or_function_call INTROSOUND)))) \n \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call kbd$) = 
                (expr 
                  (variable_or_function_call UCASE$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call INKEY$)) )))))) \n) LOOP 
          (do_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call kbd$)) = 
              (expr 
                (literal "")))))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call kbd$)) = 
          (expr 
            (literal "Q"))) THEN \n 
        (then_block 
          (statement 
            (call_statement 
              (untyped_id CLS))) \n 
          (statement 
            (locate_statement LOCATE 
              (expr 
                (literal 10)) , 
              (expr 
                (literal 30)))) : 
          (statement 
            (print_statement PRINT 
              (expr 
                (literal "Really quit? 
                  (Y/N)")) ;)) \n 
          (statement 
            (do_loop_statement DO 
              (block \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call kbd$) = 
                    (expr 
                      (variable_or_function_call UCASE$ 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call INKEY$)) )))))) \n) LOOP 
              (do_condition WHILE 
                (expr 
                  (expr 
                    (variable_or_function_call kbd$)) = 
                  (expr 
                    (literal "")))))) \n 
          (if_block_statement IF 
            (expr 
              (expr 
                (variable_or_function_call kbd$)) = 
              (expr 
                (literal "Y"))) THEN \n 
            (then_block 
              (statement 
                (call_statement 
                  (untyped_id CLS))) \n 
              (statement 
                (end_statement END)) \n) 
            (end_if_statement END IF)) \n) 
        (end_if_statement END IF)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id DrawIsland) 
    ( 
      (parameter_list 
        (parameter SeaLevel 
          (array_declaration 
            ( )))) ) 
    (block \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call iScale#) = 
          (expr 
            (expr 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call INT 
                      (args_or_indices 
                        ( 
                          (expr 
                            (expr 
                              ( 
                                (expr 
                                  (expr 
                                    ( 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call SeaLevel 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (literal 0)) )))) - 
                                        (expr 
                                          (literal 60))) )) / 
                                  (expr 
                                    (literal 3))) )) * 
                            (expr 
                              (variable_or_function_call RND))) )))) + 
                  (expr 
                    (variable_or_function_call INT 
                      (args_or_indices 
                        ( 
                          (expr 
                            (expr 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call SeaLevel 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (literal 0)) )))) - 
                                  (expr 
                                    (literal 60))) )) / 
                            (expr 
                              (literal 3))) ))))) )) / 
            (expr 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call ISLLENGTH)) / 
                  (expr 
                    (literal 2))) ))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call IStart) = 
          (expr 
            (expr 
              (expr 
                (expr 
                  (expr 
                    ( 
                      (expr 
                        (expr 
                          (expr 
                            ( 
                              (expr 
                                (expr 
                                  (variable_or_function_call ShipX 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (literal 2)) )))) - 
                                (expr 
                                  ( 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call ShipX 
                                          (args_or_indices 
                                            ( 
                                              (expr 
                                                (literal 1)) )))) + 
                                      (expr 
                                        (variable_or_function_call SHIPWIDTH))) ))) )) - 
                          (expr 
                            (variable_or_function_call ISLLENGTH))) - 
                        (expr 
                          (literal 6))) )) * 
                  (expr 
                    (variable_or_function_call RND))) + 
                (expr 
                  (variable_or_function_call ShipX 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 1)) ))))) + 
              (expr 
                (variable_or_function_call SHIPWIDTH))) + 
            (expr 
              (literal 3))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call IEnd) = 
          (expr 
            (expr 
              (variable_or_function_call IStart)) + 
            (expr 
              (variable_or_function_call ISLLENGTH))))) \n \n \n 
      (statement 
        (for_next_statement FOR Counter = 
          (expr 
            (variable_or_function_call IStart)) TO 
          (expr 
            (variable_or_function_call IEnd)) 
          (block \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call Counter)) < 
                (expr 
                  (expr 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call IStart)) + 
                        (expr 
                          (variable_or_function_call IEnd))) )) / 
                  (expr 
                    (literal 2)))) THEN \n 
              (then_block 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call yoffset) = 
                    (expr 
                      (expr 
                        (variable_or_function_call iScale#)) * 
                      (expr 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call Counter)) - 
                            (expr 
                              (variable_or_function_call IStart))) ))))) \n) 
              (else_block_statement ELSE 
                (else_block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call yoffset) = 
                      (expr 
                        (expr 
                          (variable_or_function_call iScale#)) * 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call IEnd)) - 
                              (expr 
                                (variable_or_function_call Counter))) ))))) \n)) 
              (end_if_statement END IF)) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call y1) = 
                (expr 
                  (expr 
                    (variable_or_function_call SeaLevel 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call Counter)) )))) + 
                  (expr 
                    (variable_or_function_call yoffset))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call y2) = 
                (expr 
                  (expr 
                    (variable_or_function_call SeaLevel 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call Counter)) )))) - 
                  (expr 
                    (variable_or_function_call yoffset))))) \n 
            (statement 
              (line_statement LINE 
                ( 
                  (expr 
                    (variable_or_function_call Counter)) , 
                  (expr 
                    (variable_or_function_call y1)) ) - 
                ( 
                  (expr 
                    (variable_or_function_call Counter)) , 
                  (expr 
                    (variable_or_function_call y2)) ) , 
                (expr 
                  (variable_or_function_call ISLANDCOLOR)))) \n) NEXT Counter)) \n \n \n \n \n 
      (statement 
        (for_next_statement FOR Counter = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call NUMTREES)) 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call xpos) = 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call IStart)) + 
                    (expr 
                      (literal 6))) + 
                  (expr 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call Counter)) - 
                          (expr 
                            (literal 1))) )) * 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call ISLLENGTH)) / 
                          (expr 
                            (variable_or_function_call NUMTREES))) )))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call subtot#) = 
                (expr 
                  (literal 0)))) : 
            (statement 
              (assignment_statement 
                (variable_or_function_call trend) = 
                (expr 
                  (literal 10)))) \n 
            (statement 
              (for_next_statement FOR j = 
                (expr 
                  (variable_or_function_call xpos)) TO 
                (expr 
                  (expr 
                    (variable_or_function_call xpos)) + 
                  (expr 
                    (variable_or_function_call trend))) 
                (block \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (variable_or_function_call j)) < 
                      (expr 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call IStart)) + 
                              (expr 
                                (variable_or_function_call IEnd))) )) / 
                        (expr 
                          (literal 2)))) THEN \n 
                    (then_block 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call yoffset) = 
                          (expr 
                            (expr 
                              (variable_or_function_call iScale#)) * 
                            (expr 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call j)) - 
                                  (expr 
                                    (variable_or_function_call IStart))) ))))) \n) 
                    (else_block_statement ELSE 
                      (else_block \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call yoffset) = 
                            (expr 
                              (expr 
                                (variable_or_function_call iScale#)) * 
                              (expr 
                                ( 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call IEnd)) - 
                                    (expr 
                                      (variable_or_function_call j))) ))))) \n)) 
                    (end_if_statement END IF)) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call subtot#) = 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call subtot#)) + 
                          (expr 
                            (variable_or_function_call SeaLevel 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call j)) ))))) - 
                        (expr 
                          (variable_or_function_call yoffset))))) \n) NEXT j)) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call ypos) = 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call subtot#)) / 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call trend)) + 
                          (expr 
                            (literal 1))) ))) - 
                  (expr 
                    (literal 28))))) \n 
            (statement 
              (put_graphics_statement PUT 
                ( 
                  (expr 
                    (variable_or_function_call xpos)) , 
                  (expr 
                    (variable_or_function_call ypos)) ) , 
                (variable_or_function_call TreePic2) , PSET)) \n 
            (statement 
              (put_graphics_statement PUT 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call xpos)) + 
                    (expr 
                      (literal 4))) , 
                  (expr 
                    (expr 
                      (variable_or_function_call ypos)) + 
                    (expr 
                      (variable_or_function_call TREEWIDTH))) ) , 
                (variable_or_function_call TreePic1) , PSET)) \n) NEXT Counter)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id DrawWaves) 
    ( 
      (parameter_list 
        (parameter offset) , 
        (parameter hmult) , 
        (parameter tmult) , 
        (parameter SeaLevel 
          (array_declaration 
            ( )))) ) 
    (block \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call radius) = 
          (expr 
            (expr 
              (variable_or_function_call ScreenWidth)) / 
            (expr 
              (literal 80))))) \n \n \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (expr 
              (variable_or_function_call ScreenWidth)) / 
            (expr 
              (variable_or_function_call offset))) TO 
          (expr 
            (expr 
              (variable_or_function_call ScreenWidth)) - 
            (expr 
              (expr 
                (variable_or_function_call ScreenWidth)) / 
              (expr 
                (variable_or_function_call offset)))) STEP 
          (expr 
            (expr 
              (variable_or_function_call ScreenWidth)) / 
            (expr 
              (literal 5))) 
          (block \n \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call ypos) = 
                (expr 
                  (expr 
                    ( 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call hmult)) * 
                          (expr 
                            (variable_or_function_call ScreenHeight))) + 
                        (expr 
                          (expr 
                            (variable_or_function_call tmult)) * 
                          (expr 
                            (variable_or_function_call SeaLevel 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call i)) )))))) )) / 
                  (expr 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call hmult)) + 
                        (expr 
                          (variable_or_function_call tmult))) ))))) \n 
            (statement 
              (circle_statement CIRCLE 
                ( 
                  (expr 
                    (variable_or_function_call i)) , 
                  (expr 
                    (variable_or_function_call ypos)) ) , 
                (expr 
                  (variable_or_function_call radius)) , 
                (expr 
                  (variable_or_function_call ISLANDCOLOR)) , 
                (expr 
                  (expr 
                    (expr 
                      (literal 5)) * 
                    (expr 
                      (variable_or_function_call Pi#))) / 
                  (expr 
                    (literal 4))) , 
                (expr 
                  (expr 
                    (literal 2)) * 
                  (expr 
                    (variable_or_function_call Pi#))))) \n 
            (statement 
              (circle_statement CIRCLE 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call i)) + 
                    (expr 
                      (expr 
                        (literal 2)) * 
                      (expr 
                        (variable_or_function_call radius)))) , 
                  (expr 
                    (variable_or_function_call ypos)) ) , 
                (expr 
                  (variable_or_function_call radius)) , 
                (expr 
                  (variable_or_function_call ISLANDCOLOR)) , 
                (expr 
                  (variable_or_function_call Pi#)) , 
                (expr 
                  (expr 
                    (variable_or_function_call Pi#)) * 
                  (expr 
                    (literal 2))))) \n 
            (statement 
              (circle_statement CIRCLE 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call i)) + 
                    (expr 
                      (expr 
                        (literal 4)) * 
                      (expr 
                        (variable_or_function_call radius)))) , 
                  (expr 
                    (variable_or_function_call ypos)) ) , 
                (expr 
                  (variable_or_function_call radius)) , 
                (expr 
                  (variable_or_function_call ISLANDCOLOR)) , 
                (expr 
                  (variable_or_function_call Pi#)) , 
                (expr 
                  (expr 
                    (expr 
                      (literal 7)) * 
                    (expr 
                      (variable_or_function_call Pi#))) / 
                  (expr 
                    (literal 4))))) \n \n) NEXT i)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id DrawWind) 
    (block \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call WindTmp) = 
          (expr 
            (variable_or_function_call Wind)))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call WindTmp)) = 
            (expr 
              (literal 0))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call WindTmp) = 
                (expr 
                  (literal 1))))))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call WindLineLength) = 
          (expr 
            (expr 
              (variable_or_function_call WindTmp)) * 
            (expr 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call ScreenWidth)) / 
                  (expr 
                    (literal 80))) ))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call x1) = 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call ScreenWidth)) / 
              (expr 
                (literal 2))) - 
            (expr 
              (expr 
                (variable_or_function_call WindLineLength)) / 
              (expr 
                (literal 2)))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call x2) = 
          (expr 
            (expr 
              (variable_or_function_call x1)) + 
            (expr 
              (variable_or_function_call WindLineLength))))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call ArrowDir) = 
          (expr 
            (expr - 
              (expr 
                (literal 2))) * 
            (expr 
              (variable_or_function_call SGN 
                (args_or_indices 
                  ( 
                    (expr 
                      (variable_or_function_call WindTmp)) ))))))) \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (variable_or_function_call x1)) , 
            (expr 
              (literal 16)) ) - 
          ( 
            (expr 
              (variable_or_function_call x2)) , 
            (expr 
              (literal 16)) ) , 
          (expr 
            (variable_or_function_call ISLANDCOLOR)))) \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (variable_or_function_call x2)) , 
            (expr 
              (literal 16)) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x2)) + 
              (expr 
                (variable_or_function_call ArrowDir))) , 
            (expr 
              (literal 14)) ) , 
          (expr 
            (variable_or_function_call ISLANDCOLOR)))) \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (variable_or_function_call x2)) , 
            (expr 
              (literal 16)) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call x2)) + 
              (expr 
                (variable_or_function_call ArrowDir))) , 
            (expr 
              (literal 18)) ) , 
          (expr 
            (variable_or_function_call ISLANDCOLOR)))) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id GetGameOptions) 
    (block \n \n 
      (statement 
        (screen_statement SCREEN 
          (expr 
            (literal 0)))) \n 
      (statement 
        (width_statement WIDTH 
          (expr 
            (literal 80)))) \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) : 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Default is 'Player 1'"))) , 
            (call_argument 
              (expr 
                (literal 9)))))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 15)))) : 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 8)) , 
          (expr 
            (literal 30)))) \n 
      (statement 
        (line_input_statement LINE INPUT "Name of Player 1: " ; 
          (variable_or_function_call Player$ 
            (args_or_indices 
              ( 
                (expr 
                  (literal 1)) ))))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Player$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 1)) )))) = 
          (expr 
            (literal ""))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call Player$ 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 1)) ))) = 
              (expr 
                (literal "Player 1")))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Player$ 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 1)) ))) = 
                (expr 
                  (variable_or_function_call LEFT$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call Player$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 1)) )))) , 
                        (expr 
                          (literal 10)) )))))) \n)) 
        (end_if_statement END IF)) \n \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) : 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Default is 'Player 2'"))) , 
            (call_argument 
              (expr 
                (literal 12)))))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 15)))) : 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 11)) , 
          (expr 
            (literal 30)))) \n 
      (statement 
        (line_input_statement LINE INPUT "Name of Player 2: " ; 
          (variable_or_function_call Player$ 
            (args_or_indices 
              ( 
                (expr 
                  (literal 2)) ))))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Player$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 2)) )))) = 
          (expr 
            (literal ""))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call Player$ 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 2)) ))) = 
              (expr 
                (literal "Player 2")))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Player$ 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 2)) ))) = 
                (expr 
                  (variable_or_function_call LEFT$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call Player$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 2)) )))) , 
                        (expr 
                          (literal 10)) )))))) \n)) 
        (end_if_statement END IF)) \n \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) : 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (expr 
                  (literal "Default is")) + 
                (expr 
                  (variable_or_function_call STR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call INITNUMGAMES)) )))))) , 
            (call_argument 
              (expr 
                (literal 15)))))) \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (color_statement COLOR 
                (expr 
                  (literal 15)))) : 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 14)) , 
                (expr 
                  (literal 27)))) : 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call SPACE$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 50)) )))) ;)) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 14)) , 
                (expr 
                  (literal 27)))) \n 
            (statement 
              (input_statement INPUT "Play to how many points" ; 
                (variable_or_function_call NumHold$))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call NumGames) = 
                (expr 
                  (variable_or_function_call VAL 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call LEFT$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call NumHold$)) , 
                                (expr 
                                  (literal 2)) )))) )))))) \n) LOOP 
          (do_condition UNTIL 
            (expr 
              (expr 
                (expr 
                  (expr 
                    (variable_or_function_call NumGames)) > 
                  (expr 
                    (literal 0))) AND 
                (expr 
                  (expr 
                    (builtin_function LEN 
                      ( 
                        (expr 
                          (variable_or_function_call NumHold$)) ))) < 
                  (expr 
                    (literal 3)))) OR 
              (expr 
                (expr 
                  (builtin_function LEN 
                    ( 
                      (expr 
                        (variable_or_function_call NumHold$)) ))) = 
                (expr 
                  (literal 0))))))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call NumGames)) = 
            (expr 
              (literal 0))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call NumGames) = 
                (expr 
                  (variable_or_function_call INITNUMGAMES))))))) \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n \n \n \n \n 
  (function_statement FUNCTION GetPlayerCommand 
    ( 
      (parameter_list 
        (parameter PlayerNum) , 
        (parameter SeaLevel 
          (array_declaration 
            ( )))) ) 
    (block \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call finished) = 
          (expr 
            (variable_or_function_call FALSE)))) \n 
      (statement 
        (do_loop_statement DO 
          (block :) LOOP 
          (do_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call INKEY$)) <> 
              (expr 
                (literal "")))))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call xpos) = 
          (expr 
            (variable_or_function_call ShipX 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call PlayerNum)) )))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call ypos) = 
          (expr 
            (variable_or_function_call ShipY 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call PlayerNum)) )))))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call PlayerNum)) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call MenuCol) = 
              (expr 
                (literal 3)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call startCol) = 
              (expr 
                (literal 30)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call endCol) = 
              (expr 
                (literal 40)))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call MenuCol) = 
                (expr 
                  (literal 25)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call startCol) = 
                (expr 
                  (literal 1)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call endCol) = 
                (expr 
                  (literal 24)))) \n)) 
        (end_if_statement END IF)) \n \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call YShotPos) = 
          (expr 
            (expr 
              (variable_or_function_call ypos)) - 
            (expr 
              (literal 3))))) \n \n 
      (statement 
        (do_loop_statement DO 
          (do_condition WHILE 
            (expr NOT 
              (expr 
                (variable_or_function_call finished)))) 
          (block \n \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 1)) , 
                (expr 
                  (literal 1)))) : 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call Player$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 1)) )))))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 1)) , 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call MaxCol)) - 
                      (expr 
                        (builtin_function LEN 
                          ( 
                            (expr 
                              (variable_or_function_call Player$ 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (literal 2)) )))) )))) )))) : 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call Player$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 2)) )))))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 1)) , 
                (expr 
                  (literal 19)))) : 
            (statement 
              (print_statement PRINT 
                (expr 
                  (literal "Wind")) ;)) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 2)) , 
                (expr 
                  (literal 1)))) : 
            (statement 
              (print_statement PRINT 
                (expr 
                  (literal "Hits:")) ; 
                (expr 
                  (variable_or_function_call TotalWins 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 1)) )))) ;)) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 2)) , 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call MaxCol)) - 
                    (expr 
                      (literal 6))) - 
                  (expr 
                    (builtin_function LEN 
                      ( 
                        (expr 
                          (variable_or_function_call STR$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call TotalWins 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (literal 2)) )))) )))) )))))) : 
            (statement 
              (print_statement PRINT 
                (expr 
                  (literal "Hits:")) ; 
                (expr 
                  (variable_or_function_call TotalWins 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 2)) )))) ;)) \n \n 
            (statement 
              (call_statement CALL 
                (untyped_id DrawWind))) \n \n \n 
            (statement 
              (call_statement CALL 
                (untyped_id ClearArea) 
                ( 
                  (call_argument_list 
                    (call_argument 
                      (expr 
                        (literal 4))) , 
                    (call_argument MenuCol) , 
                    (call_argument 
                      (expr 
                        (literal 8))) , 
                    (call_argument 
                      (expr 
                        (expr 
                          (variable_or_function_call MenuCol)) + 
                        (expr 
                          (literal 12))))) ))) \n 
            (statement 
              (line_statement LINE 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call MenuCol)) * 
                      (expr 
                        (literal 8))) - 
                    (expr 
                      (literal 2))) , 
                  (expr 
                    (literal 28)) ) - 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call MenuCol)) * 
                      (expr 
                        (literal 8))) + 
                    (expr 
                      (literal 87))) , 
                  (expr 
                    (literal 60)) ) , , 
                (box_style B))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 5)) , 
                (expr 
                  (expr 
                    (variable_or_function_call MenuCol)) + 
                  (expr 
                    (literal 2))))) : 
            (statement 
              (print_statement PRINT 
                (expr 
                  (literal "S = Shoot")))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 6)) , 
                (expr 
                  (expr 
                    (variable_or_function_call MenuCol)) + 
                  (expr 
                    (literal 2))))) : 
            (statement 
              (print_statement PRINT 
                (expr 
                  (literal "M = Move ")))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 7)) , 
                (expr 
                  (expr 
                    (variable_or_function_call MenuCol)) + 
                  (expr 
                    (literal 2))))) : 
            (statement 
              (print_statement PRINT 
                (expr 
                  (literal "Q = Quit ")))) \n \n 
            (statement 
              (do_loop_statement DO 
                (block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call kbd$) = 
                      (expr 
                        (variable_or_function_call UCASE$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call INKEY$)) )))))) \n) LOOP 
                (do_condition UNTIL 
                  (expr 
                    (expr 
                      (variable_or_function_call kbd$)) <> 
                    (expr 
                      (literal "")))))) \n 
            (statement 
              (call_statement CALL 
                (untyped_id ClearArea) 
                ( 
                  (call_argument_list 
                    (call_argument 
                      (expr 
                        (literal 4))) , 
                    (call_argument MenuCol) , 
                    (call_argument 
                      (expr 
                        (literal 8))) , 
                    (call_argument 
                      (expr 
                        (expr 
                          (variable_or_function_call MenuCol)) + 
                        (expr 
                          (literal 12))))) ))) \n \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call kbd$)) 
                (before_first_case \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal "Q")))) 
                  (block \n 
                    (statement 
                      (call_statement 
                        (untyped_id SOUND) 
                        (call_argument_list 
                          (call_argument 
                            (expr 
                              (literal 600))) , 
                          (call_argument 
                            (expr 
                              (literal .5)))))) \n 
                    (statement 
                      (call_statement 
                        (untyped_id SOUND) 
                        (call_argument_list 
                          (call_argument 
                            (expr 
                              (literal 800))) , 
                          (call_argument 
                            (expr 
                              (literal .5)))))) \n 
                    (statement 
                      (locate_statement LOCATE 
                        (expr 
                          (literal 5)) , 
                        (expr 
                          (literal 11)))) : 
                    (statement 
                      (print_statement PRINT 
                        (expr 
                          (literal "Really quit? 
                            (Y/N)")) ;)) \n 
                    (statement 
                      (do_loop_statement DO 
                        (block \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call kbd$) = 
                              (expr 
                                (variable_or_function_call UCASE$ 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call INKEY$)) )))))) \n) LOOP 
                        (do_condition WHILE 
                          (expr 
                            (expr 
                              (variable_or_function_call kbd$)) = 
                            (expr 
                              (literal "")))))) \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call kbd$)) = 
                        (expr 
                          (literal "Y"))) THEN \n 
                      (then_block 
                        (statement 
                          (call_statement CALL 
                            (untyped_id DisplayChanges))) \n 
                        (statement 
                          (end_statement END)) \n) 
                      (else_block_statement ELSE 
                        (else_block \n 
                          (statement 
                            (call_statement CALL 
                              (untyped_id ClearArea) 
                              ( 
                                (call_argument_list 
                                  (call_argument 
                                    (expr 
                                      (literal 5))) , 
                                  (call_argument 
                                    (expr 
                                      (literal 1))) , 
                                  (call_argument 
                                    (expr 
                                      (literal 5))) , 
                                  (call_argument 
                                    (expr 
                                      (literal 40)))) ))) \n)) 
                      (end_if_statement END IF)) \n \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal "M")))) 
                  (block \n 
                    (if_block_statement IF 
                      (expr 
                        (variable_or_function_call MoveShip 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call PlayerNum)) , 
                              (expr 
                                (variable_or_function_call SeaLevel 
                                  (args_or_indices 
                                    ( )))) )))) THEN \n 
                      (then_block 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call finished) = 
                            (expr 
                              (variable_or_function_call TRUE)))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call GetPlayerCommand) = 
                            (expr 
                              (variable_or_function_call FALSE)))) \n) 
                      (end_if_statement END IF)) \n \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal "S"))) , 
                    (case_expr 
                      (expr 
                        (variable_or_function_call CHR$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call ENTERKEY)) )))))) 
                  (block \n \n 
                    (statement 
                      (call_statement CALL 
                        (untyped_id GetShotParams) 
                        ( 
                          (call_argument_list 
                            (call_argument PlayerNum) , 
                            (call_argument angle#) , 
                            (call_argument velocity)) ))) \n \n \n 
                    (statement 
                      (if_inline_statement IF 
                        (expr 
                          (expr 
                            (variable_or_function_call PlayerNum)) = 
                          (expr 
                            (literal 2))) THEN 
                        (if_inline_action 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call angle#) = 
                              (expr 
                                (expr 
                                  (literal 180)) - 
                                (expr 
                                  (variable_or_function_call angle#)))))))) \n \n \n 
                    (statement 
                      (view_print_statement VIEW PRINT 
                        (expr 
                          (literal 1)) TO 
                        (expr 
                          (literal 7)))) \n 
                    (statement 
                      (call_statement 
                        (untyped_id CLS) 
                        (call_argument_list 
                          (call_argument 
                            (expr 
                              (literal 2)))))) \n 
                    (statement 
                      (view_print_statement VIEW PRINT)) \n \n \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call playerHit) = 
                        (expr 
                          (variable_or_function_call PlotShot 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call xpos)) , 
                                (expr 
                                  (variable_or_function_call YShotPos)) , 
                                (expr 
                                  (variable_or_function_call angle#)) , 
                                (expr 
                                  (variable_or_function_call velocity)) )))))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call TotalShots 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call PlayerNum)) ))) = 
                        (expr 
                          (expr 
                            (variable_or_function_call TotalShots 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call PlayerNum)) )))) + 
                          (expr 
                            (literal 1))))) \n \n \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call playerHit)) = 
                        (expr 
                          (variable_or_function_call PlayerNum))) THEN \n 
                      (then_block 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call GetPlayerCommand) = 
                            (expr 
                              (variable_or_function_call SHOOTSELF)))) \n) 
                      (elseif_block_statement ELSEIF 
                        (expr 
                          (expr 
                            (variable_or_function_call playerHit)) <> 
                          (expr 
                            (literal 0))) THEN 
                        (else_block \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call GetPlayerCommand) = 
                              (expr 
                                (variable_or_function_call TRUE)))) \n)) 
                      (else_block_statement ELSE 
                        (else_block \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call GetPlayerCommand) = 
                              (expr 
                                (variable_or_function_call FALSE)))) \n)) 
                      (end_if_statement END IF)) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call finished) = 
                        (expr 
                          (variable_or_function_call TRUE)))) \n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \n 
                    (statement 
                      (call_statement 
                        (untyped_id BEEP))) \n)) 
                (end_select_statement END SELECT))) \n) LOOP)) \n \n) 
    (end_function_statement END FUNCTION)) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id GetShotParams) 
    ( 
      (parameter_list 
        (parameter PlayerNum) , 
        (parameter NewAngle#) , 
        (parameter NewVelocity)) ) 
    (block \n \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call PlayerNum)) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call locateCol) = 
              (expr 
                (literal 1)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call locateCol2) = 
              (expr 
                (literal 26)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call ArrowAffect) = 
              (expr 
                (literal 1)))) \n 
          (statement 
            (call_statement CALL 
              (untyped_id ClearArea) 
              ( 
                (call_argument_list 
                  (call_argument 
                    (expr 
                      (literal 2))) , 
                  (call_argument 
                    (expr 
                      (literal 1))) , 
                  (call_argument 
                    (expr 
                      (literal 6))) , 
                  (call_argument 
                    (expr 
                      (literal 16)))) ))) \n 
          (statement 
            (call_statement CALL 
              (untyped_id ClearArea) 
              ( 
                (call_argument_list 
                  (call_argument 
                    (expr 
                      (literal 1))) , 
                  (call_argument 
                    (expr 
                      (literal 26))) , 
                  (call_argument 
                    (expr 
                      (literal 6))) , 
                  (call_argument 
                    (expr 
                      (literal 40)))) ))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call locateCol) = 
                (expr 
                  (literal 30)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call locateCol2) = 
                (expr 
                  (literal 1)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call ArrowAffect) = 
                (expr - 
                  (expr 
                    (literal 1))))) \n 
            (statement 
              (call_statement CALL 
                (untyped_id ClearArea) 
                ( 
                  (call_argument_list 
                    (call_argument 
                      (expr 
                        (literal 1))) , 
                    (call_argument 
                      (expr 
                        (literal 1))) , 
                    (call_argument 
                      (expr 
                        (literal 6))) , 
                    (call_argument 
                      (expr 
                        (literal 16)))) ))) \n 
            (statement 
              (call_statement CALL 
                (untyped_id ClearArea) 
                ( 
                  (call_argument_list 
                    (call_argument 
                      (expr 
                        (literal 2))) , 
                    (call_argument 
                      (expr 
                        (literal 26))) , 
                    (call_argument 
                      (expr 
                        (literal 6))) , 
                    (call_argument 
                      (expr 
                        (literal 40)))) ))) \n)) 
        (end_if_statement END IF)) \n \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 2)) , 
          (expr 
            (variable_or_function_call locateCol2)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Change angle ")))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 3)) , 
          (expr 
            (variable_or_function_call locateCol2)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "with  and .")))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 4)) , 
          (expr 
            (variable_or_function_call locateCol2)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Change speed ")))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 5)) , 
          (expr 
            (variable_or_function_call locateCol2)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (expr 
              (expr 
                (expr 
                  (expr 
                    (literal "with ")) + 
                  (expr 
                    (variable_or_function_call CHR$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 26)) ))))) + 
                (expr 
                  (literal " and "))) + 
              (expr 
                (variable_or_function_call CHR$ 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 27)) ))))) + 
            (expr 
              (literal "."))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 6)) , 
          (expr 
            (variable_or_function_call locateCol2)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "ENTER to fire.")))) \n \n \n 
      (statement 
        (call_statement CALL 
          (untyped_id PlotAngle) 
          ( 
            (call_argument_list 
              (call_argument locateCol) , 
              (call_argument TheAngle# 
                (args_or_indices 
                  ( 
                    (expr 
                      (variable_or_function_call PlayerNum)) ))) , 
              (call_argument PlayerNum)) ))) \n 
      (statement 
        (call_statement CALL 
          (untyped_id PlotVelocity) 
          ( 
            (call_argument_list 
              (call_argument locateCol) , 
              (call_argument TheVelocity 
                (args_or_indices 
                  ( 
                    (expr 
                      (variable_or_function_call PlayerNum)) ))) , 
              (call_argument PlayerNum)) ))) \n \n \n \n \n \n 
      (statement 
        (do_loop_statement DO 
          (do_condition WHILE 
            (expr NOT 
              (expr 
                (variable_or_function_call finished)))) 
          (block \n 
            (statement 
              (do_loop_statement DO 
                (block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call kbd$) = 
                      (expr 
                        (variable_or_function_call INKEY$)))) \n) LOOP 
                (do_condition WHILE 
                  (expr 
                    (expr 
                      (variable_or_function_call kbd$)) = 
                    (expr 
                      (literal "")))))) \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call cursorkey) = 
                (expr 
                  (variable_or_function_call ASC 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call RIGHT$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call kbd$)) , 
                                (expr 
                                  (literal 1)) )))) )))))) \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call cursorkey)) 
                (before_first_case \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call LEFT))) , 
                    (case_expr 
                      (expr 
                        (variable_or_function_call RIGHT)))) 
                  (block \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call cursorkey)) = 
                        (expr 
                          (variable_or_function_call RIGHT))) THEN \n 
                      (then_block 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call increment) = 
                            (expr 
                              (expr 
                                (literal 1)) * 
                              (expr 
                                (variable_or_function_call ArrowAffect))))) \n) 
                      (else_block_statement ELSE 
                        (else_block \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call increment) = 
                              (expr 
                                (expr - 
                                  (expr 
                                    (literal 1))) * 
                                (expr 
                                  (variable_or_function_call ArrowAffect))))) \n)) 
                      (end_if_statement END IF)) \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (expr 
                                  (variable_or_function_call increment)) < 
                                (expr 
                                  (literal 0))) AND 
                              (expr 
                                (expr 
                                  (variable_or_function_call TheVelocity 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (variable_or_function_call PlayerNum)) )))) > 
                                (expr 
                                  (literal 0)))) )) OR 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (expr 
                                  (variable_or_function_call increment)) > 
                                (expr 
                                  (literal 0))) AND 
                              (expr 
                                (expr 
                                  (variable_or_function_call TheVelocity 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (variable_or_function_call PlayerNum)) )))) < 
                                (expr 
                                  (variable_or_function_call MAXVELOCITY)))) ))) THEN \n 
                      (then_block 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call TheVelocity 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call PlayerNum)) ))) = 
                            (expr 
                              (expr 
                                (variable_or_function_call TheVelocity 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call PlayerNum)) )))) + 
                              (expr 
                                (variable_or_function_call increment))))) \n 
                        (statement 
                          (call_statement CALL 
                            (untyped_id PlotVelocity) 
                            ( 
                              (call_argument_list 
                                (call_argument locateCol) , 
                                (call_argument TheVelocity 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call PlayerNum)) ))) , 
                                (call_argument PlayerNum)) ))) \n) 
                      (else_block_statement ELSE 
                        (else_block \n 
                          (statement 
                            (call_statement 
                              (untyped_id BEEP))) \n 
                          (statement 
                            (do_loop_statement DO 
                              (block \n 
                                (statement 
                                  (assignment_statement 
                                    (variable_or_function_call temp$) = 
                                    (expr 
                                      (variable_or_function_call INKEY$)))) \n) LOOP 
                              (do_condition WHILE 
                                (expr 
                                  (expr 
                                    (variable_or_function_call temp$)) <> 
                                  (expr 
                                    (literal "")))))) \n)) 
                      (end_if_statement END IF)) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call UP))) , 
                    (case_expr 
                      (expr 
                        (variable_or_function_call DOWN)))) 
                  (block \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call cursorkey)) = 
                        (expr 
                          (variable_or_function_call UP))) THEN \n 
                      (then_block 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call increment) = 
                            (expr 
                              (literal 1)))) \n) 
                      (else_block_statement ELSE 
                        (else_block \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call increment) = 
                              (expr - 
                                (expr 
                                  (literal 1))))) \n)) 
                      (end_if_statement END IF)) \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (expr 
                                  (variable_or_function_call increment)) < 
                                (expr 
                                  (literal 0))) AND 
                              (expr 
                                (expr 
                                  (variable_or_function_call TheAngle# 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (variable_or_function_call PlayerNum)) )))) > 
                                (expr 
                                  (literal 0)))) )) OR 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (expr 
                                  (variable_or_function_call increment)) > 
                                (expr 
                                  (literal 0))) AND 
                              (expr 
                                (expr 
                                  (variable_or_function_call TheAngle# 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (variable_or_function_call PlayerNum)) )))) < 
                                (expr 
                                  (literal 90)))) ))) THEN \n 
                      (then_block 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call TheAngle# 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call PlayerNum)) ))) = 
                            (expr 
                              (expr 
                                (variable_or_function_call TheAngle# 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call PlayerNum)) )))) + 
                              (expr 
                                (variable_or_function_call increment))))) \n 
                        (statement 
                          (call_statement CALL 
                            (untyped_id PlotAngle) 
                            ( 
                              (call_argument_list 
                                (call_argument locateCol) , 
                                (call_argument TheAngle# 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call PlayerNum)) ))) , 
                                (call_argument PlayerNum)) ))) \n) 
                      (else_block_statement ELSE 
                        (else_block \n 
                          (statement 
                            (call_statement 
                              (untyped_id BEEP))) \n 
                          (statement 
                            (do_loop_statement DO 
                              (block \n 
                                (statement 
                                  (assignment_statement 
                                    (variable_or_function_call temp$) = 
                                    (expr 
                                      (variable_or_function_call INKEY$)))) \n) LOOP 
                              (do_condition WHILE 
                                (expr 
                                  (expr 
                                    (variable_or_function_call temp$)) <> 
                                  (expr 
                                    (literal "")))))) \n)) 
                      (end_if_statement END IF)) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call ENTERKEY)))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call finished) = 
                        (expr 
                          (variable_or_function_call TRUE)))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call NewAngle#) = 
                        (expr 
                          (variable_or_function_call TheAngle# 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call PlayerNum)) )))))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call NewVelocity) = 
                        (expr 
                          (variable_or_function_call TheVelocity 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call PlayerNum)) )))))) \n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \n 
                    (statement 
                      (call_statement 
                        (untyped_id BEEP))) \n)) 
                (end_select_statement END SELECT))) \n) LOOP)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id InitializeVariables) 
    (block \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Pi#) = 
          (expr 
            (expr 
              (literal 4)) * 
            (expr 
              (variable_or_function_call ATN 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 1#)) ))))))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call ScreenWidth) = 
          (expr 
            (literal 320)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call ScreenHeight) = 
          (expr 
            (literal 200)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call MaxCol) = 
          (expr 
            (literal 40)))) \n \n 
      (statement 
        (call_statement 
          (untyped_id RESTORE) 
          (call_argument_list 
            (call_argument ShipPicData)))) \n 
      (statement 
        (for_next_statement FOR Counter = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 36)) 
          (block \n 
            (statement 
              (read_statement READ 
                (variable_or_function_call ShipPic 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Counter)) ))))) \n) NEXT Counter)) \n 
      (statement 
        (for_next_statement FOR Counter = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 20)) 
          (block \n 
            (statement 
              (read_statement READ 
                (variable_or_function_call TreePic1 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Counter)) ))))) \n) NEXT Counter)) \n 
      (statement 
        (for_next_statement FOR Counter = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 36)) 
          (block \n 
            (statement 
              (read_statement READ 
                (variable_or_function_call TreePic2 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Counter)) ))))) \n) NEXT Counter)) \n 
      (statement 
        (for_next_statement FOR Counter = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 2)) 
          (block \n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Shot& 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Counter)) ))))) \n) NEXT Counter)) \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call x!) = 
          (expr 
            (builtin_function TIMER)))) \n 
      (statement 
        (for_next_statement FOR g! = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 500)) 
          (block \n) NEXT g!)) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call x!) = 
          (expr 
            (expr 
              (builtin_function TIMER)) - 
            (expr 
              (variable_or_function_call x!))))) \n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call x!)) 
          (before_first_case \n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 0)) TO 
                (expr 
                  (literal .18)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Delay) = 
                  (expr 
                    (literal 500)))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr IS < 
                (expr 
                  (literal .45)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Delay) = 
                  (expr 
                    (literal 200)))) \n)) 
          (case_block 
            (case_statement CASE ELSE) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Delay) = 
                  (expr 
                    (literal 50)))) \n)) 
          (end_select_statement END SELECT))) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id MakeBattleField) 
    ( 
      (parameter_list 
        (parameter SeaLevel 
          (array_declaration 
            ( )))) ) 
    (block \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call increment) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call range) = 
          (expr 
            (literal 5)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call SeaLevel 
            (args_or_indices 
              ( 
                (expr 
                  (literal 0)) ))) = 
          (expr 
            (expr 
              (variable_or_function_call ScreenHeight)) - 
            (expr 
              ( 
                (expr 
                  (expr 
                    (literal 45)) + 
                  (expr 
                    (variable_or_function_call INT 
                      (args_or_indices 
                        ( 
                          (expr 
                            (expr 
                              (expr 
                                ( 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call ScreenHeight)) / 
                                    (expr 
                                      (literal 8))) )) * 
                              (expr 
                                (variable_or_function_call RND))) + 
                            (expr 
                              (literal 1))) ))))) ))))) \n \n \n 
      (statement 
        (for_next_statement FOR Counter = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call ScreenWidth)) 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Motion) = 
                (expr 
                  (variable_or_function_call INT 
                    (args_or_indices 
                      ( 
                        (expr 
                          (expr 
                            (expr 
                              (variable_or_function_call range)) * 
                            (expr 
                              (variable_or_function_call RND))) + 
                          (expr 
                            (literal 1))) )))))) \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call Motion)) 
                (before_first_case \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal 1)) TO 
                      (expr 
                        (expr 
                          (variable_or_function_call range)) / 
                        (expr 
                          (literal 2))))) 
                  (block \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call Motion)) < 
                        (expr 
                          (expr 
                            (expr 
                              (variable_or_function_call range)) / 
                            (expr 
                              (literal 2))) - 
                          (expr 
                            (literal 1)))) THEN \n 
                      (then_block 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call trend) = 
                            (expr 
                              (expr 
                                (variable_or_function_call trend)) + 
                              (expr 
                                (variable_or_function_call increment))))) \n) 
                      (else_block_statement ELSE 
                        (else_block \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call trend) = 
                              (expr 
                                (expr 
                                  (variable_or_function_call trend)) - 
                                (expr 
                                  (variable_or_function_call increment))))) \n)) 
                      (end_if_statement END IF)) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call range)) / 
                          (expr 
                            (literal 2))) + 
                        (expr 
                          (literal 1))) TO 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call range)) / 
                          (expr 
                            (literal 2))) + 
                        (expr 
                          (literal 2))))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call trend) = 
                        (expr 
                          (expr 
                            (literal 1)) * 
                          (expr 
                            (variable_or_function_call SGN 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call Wind)) ))))))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call range)) / 
                          (expr 
                            (literal 2))) + 
                        (expr 
                          (literal 3))))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call trend) = 
                        (expr 
                          (literal 0)))) \n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call trend) = 
                        (expr 
                          (expr - 
                            (expr 
                              (literal 1))) * 
                          (expr 
                            (variable_or_function_call SGN 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call Wind)) ))))))) \n)) 
                (end_select_statement END SELECT))) \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call trend)) 
                (before_first_case \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr IS < 
                      (expr 
                        (literal 0)))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call SeaLevel 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call Counter)) ))) = 
                        (expr 
                          (expr 
                            (variable_or_function_call SeaLevel 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call Counter)) - 
                                    (expr 
                                      (literal 1))) )))) - 
                          (expr 
                            (literal 1))))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr IS > 
                      (expr 
                        (literal 0)))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call SeaLevel 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call Counter)) ))) = 
                        (expr 
                          (expr 
                            (variable_or_function_call SeaLevel 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call Counter)) - 
                                    (expr 
                                      (literal 1))) )))) + 
                          (expr 
                            (literal 1))))) \n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call SeaLevel 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call Counter)) ))) = 
                        (expr 
                          (variable_or_function_call SeaLevel 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call Counter)) - 
                                  (expr 
                                    (literal 1))) )))))) \n)) 
                (end_select_statement END SELECT))) \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call SeaLevel 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call Counter)) )))) > 
                  (expr 
                    (expr 
                      (variable_or_function_call SeaLevel 
                        (args_or_indices 
                          ( 
                            (expr 
                              (literal 0)) )))) + 
                    (expr 
                      (variable_or_function_call range)))) THEN 
                (if_inline_action 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call SeaLevel 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call Counter)) ))) = 
                      (expr 
                        (expr 
                          (variable_or_function_call SeaLevel 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call Counter)) - 
                                  (expr 
                                    (literal 1))) )))) - 
                        (expr 
                          (literal 3)))))))) \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call SeaLevel 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call Counter)) )))) < 
                  (expr 
                    (expr 
                      (variable_or_function_call SeaLevel 
                        (args_or_indices 
                          ( 
                            (expr 
                              (literal 0)) )))) - 
                    (expr 
                      (variable_or_function_call range)))) THEN 
                (if_inline_action 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call SeaLevel 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call Counter)) ))) = 
                      (expr 
                        (expr 
                          (variable_or_function_call SeaLevel 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call Counter)) - 
                                  (expr 
                                    (literal 1))) )))) + 
                        (expr 
                          (literal 3)))))))) \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (expr 
                    (variable_or_function_call Counter)) > 
                  (expr 
                    (variable_or_function_call range))) AND 
                (expr 
                  (expr 
                    (variable_or_function_call Counter)) < 
                  (expr 
                    (expr 
                      (variable_or_function_call ScreenWidth)) - 
                    (expr 
                      (variable_or_function_call range))))) THEN \n 
              (then_block 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call diff) = 
                    (expr 
                      (expr 
                        (variable_or_function_call SeaLevel 
                          (args_or_indices 
                            ( 
                              (expr 
                                (expr 
                                  (variable_or_function_call Counter)) - 
                                (expr 
                                  (literal 4))) )))) - 
                      (expr 
                        (variable_or_function_call SeaLevel 
                          (args_or_indices 
                            ( 
                              (expr 
                                (expr 
                                  (variable_or_function_call Counter)) - 
                                (expr 
                                  (literal 1))) ))))))) \n 
                (if_block_statement IF 
                  (expr 
                    (expr 
                      (variable_or_function_call ABS 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call diff)) )))) > 
                    (expr 
                      (variable_or_function_call range))) THEN \n 
                  (then_block 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call trend) = 
                        (expr 
                          (expr - 
                            (expr 
                              (variable_or_function_call increment))) * 
                          (expr 
                            (variable_or_function_call SGN 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call diff)) ))))))) \n) 
                  (end_if_statement END IF)) \n) 
              (end_if_statement END IF)) \n) NEXT Counter)) \n \n \n \n \n \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n \n \n 
  (function_statement FUNCTION MoveShip 
    ( 
      (parameter_list 
        (parameter PlayerNum) , 
        (parameter SeaLevel 
          (array_declaration 
            ( )))) ) 
    (block \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call finished) = 
          (expr 
            (variable_or_function_call FALSE)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call MoveShip) = 
          (expr 
            (variable_or_function_call FALSE)))) \n \n \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 5)) , 
          (expr 
            (literal 2)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "To move your ship, press either the")))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 6)) , 
          (expr 
            (literal 2)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 26)) )))) + 
                (expr 
                  (literal " or "))) + 
              (expr 
                (variable_or_function_call CHR$ 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 27)) ))))) + 
            (expr 
              (literal " arrow keys, then press Enter."))))) \n \n \n \n 
      (statement 
        (do_loop_statement DO 
          (do_condition WHILE 
            (expr NOT 
              (expr 
                (variable_or_function_call finished)))) 
          (block \n 
            (statement 
              (do_loop_statement DO 
                (block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call kbd$) = 
                      (expr 
                        (variable_or_function_call INKEY$)))) \n) LOOP 
                (do_condition WHILE 
                  (expr 
                    (expr 
                      (variable_or_function_call kbd$)) = 
                    (expr 
                      (literal "")))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call cursorkey) = 
                (expr 
                  (variable_or_function_call ASC 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call RIGHT$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call kbd$)) , 
                                (expr 
                                  (literal 1)) )))) )))))) \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call cursorkey)) 
                (before_first_case \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call LEFT)))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call MoveShip) = 
                        (expr 
                          (variable_or_function_call TRUE)))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call moveit) = 
                        (expr - 
                          (expr 
                            (variable_or_function_call MOVESHIPBY))))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call RIGHT)))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call MoveShip) = 
                        (expr 
                          (variable_or_function_call TRUE)))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call moveit) = 
                        (expr 
                          (variable_or_function_call MOVESHIPBY)))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call ENTERKEY)))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call finished) = 
                        (expr 
                          (variable_or_function_call TRUE)))) \n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \n 
                    (statement 
                      (call_statement 
                        (untyped_id BEEP))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call moveit) = 
                        (expr 
                          (literal 0)))) \n)) 
                (end_select_statement END SELECT))) \n \n 
            (if_block_statement IF 
              (expr NOT 
                (expr 
                  (variable_or_function_call finished))) THEN \n 
              (then_block 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call xpos) = 
                    (expr 
                      (expr 
                        (variable_or_function_call ShipX 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call PlayerNum)) )))) + 
                      (expr 
                        (variable_or_function_call moveit))))) \n \n 
                (if_block_statement IF 
                  (expr 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (expr 
                              (variable_or_function_call xpos)) > 
                            (expr 
                              (literal 3))) AND 
                          (expr 
                            (expr 
                              (variable_or_function_call xpos)) < 
                            (expr 
                              (expr 
                                (expr 
                                  (variable_or_function_call IStart)) - 
                                (expr 
                                  (variable_or_function_call MOVESHIPBY))) - 
                              (expr 
                                (literal 3))))) )) OR 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (expr 
                              (variable_or_function_call xpos)) > 
                            (expr 
                              (expr 
                                (variable_or_function_call IEnd)) + 
                              (expr 
                                (literal 3)))) AND 
                          (expr 
                            (expr 
                              (variable_or_function_call xpos)) < 
                            (expr 
                              (expr 
                                (expr 
                                  (variable_or_function_call ScreenWidth)) - 
                                (expr 
                                  (variable_or_function_call SHIPWIDTH))) - 
                              (expr 
                                (literal 3))))) ))) THEN \n 
                  (then_block 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call ypos) = 
                        (expr 
                          (expr 
                            (variable_or_function_call SeaLevel 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call xpos)) )))) - 
                          (expr 
                            (literal 9))))) \n \n 
                    (statement 
                      (put_graphics_statement PUT 
                        ( 
                          (expr 
                            (variable_or_function_call ShipX 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call PlayerNum)) )))) , 
                          (expr 
                            (variable_or_function_call ShipY 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call PlayerNum)) )))) ) , 
                        (variable_or_function_call ShipPic) , XOR)) \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call moveit)) > 
                        (expr 
                          (literal 0))) THEN \n 
                      (then_block 
                        (statement 
                          (for_next_statement FOR i = 
                            (expr 
                              (variable_or_function_call ShipX 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call PlayerNum)) )))) TO 
                            (expr 
                              (expr 
                                (variable_or_function_call xpos)) - 
                              (expr 
                                (literal 1))) 
                            (block \n 
                              (statement 
                                (line_statement LINE 
                                  ( 
                                    (expr 
                                      (variable_or_function_call i)) , 
                                    (expr 
                                      (variable_or_function_call SeaLevel 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call i)) )))) ) - 
                                  ( 
                                    (expr 
                                      (variable_or_function_call i)) , 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call SeaLevel 
                                          (args_or_indices 
                                            ( 
                                              (expr 
                                                (variable_or_function_call i)) )))) + 
                                      (expr 
                                        (variable_or_function_call SHIPWIDTH))) ) , 
                                  (expr 
                                    (variable_or_function_call WATERCOLOR)))) \n) NEXT i)) \n) 
                      (else_block_statement ELSE 
                        (else_block \n 
                          (statement 
                            (for_next_statement FOR i = 
                              (expr 
                                (variable_or_function_call ShipX 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call PlayerNum)) )))) TO 
                              (expr 
                                (expr 
                                  (variable_or_function_call ShipX 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (variable_or_function_call PlayerNum)) )))) - 
                                (expr 
                                  (variable_or_function_call moveit))) 
                              (block \n 
                                (statement 
                                  (line_statement LINE 
                                    ( 
                                      (expr 
                                        (variable_or_function_call i)) , 
                                      (expr 
                                        (variable_or_function_call SeaLevel 
                                          (args_or_indices 
                                            ( 
                                              (expr 
                                                (variable_or_function_call i)) )))) ) - 
                                    ( 
                                      (expr 
                                        (variable_or_function_call i)) , 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call SeaLevel 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (variable_or_function_call i)) )))) + 
                                        (expr 
                                          (variable_or_function_call SHIPWIDTH))) ) , 
                                    (expr 
                                      (variable_or_function_call WATERCOLOR)))) \n) NEXT i)) \n)) 
                      (end_if_statement END IF)) \n 
                    (statement 
                      (put_graphics_statement PUT 
                        ( 
                          (expr 
                            (variable_or_function_call xpos)) , 
                          (expr 
                            (variable_or_function_call ypos)) ) , 
                        (variable_or_function_call ShipPic) , PSET)) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call ShipX 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call PlayerNum)) ))) = 
                        (expr 
                          (variable_or_function_call xpos)))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call ShipY 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call PlayerNum)) ))) = 
                        (expr 
                          (variable_or_function_call ypos)))) \n) 
                  (else_block_statement ELSE 
                    (else_block \n 
                      (statement 
                        (call_statement 
                          (untyped_id BEEP))) \n)) 
                  (end_if_statement END IF)) \n) 
              (end_if_statement END IF)) \n) LOOP)) \n \n 
      (statement 
        (call_statement CALL 
          (untyped_id ClearArea) 
          ( 
            (call_argument_list 
              (call_argument 
                (expr 
                  (literal 5))) , 
              (call_argument 
                (expr 
                  (literal 1))) , 
              (call_argument 
                (expr 
                  (literal 6))) , 
              (call_argument 
                (expr 
                  (literal 40)))) ))) \n \n) 
    (end_function_statement END FUNCTION)) \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id PlaceShips) 
    ( 
      (parameter_list 
        (parameter SeaLevel 
          (array_declaration 
            ( )))) ) 
    (block \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call ShipX 
            (args_or_indices 
              ( 
                (expr 
                  (literal 1)) ))) = 
          (expr 
            (expr 
              (variable_or_function_call INT 
                (args_or_indices 
                  ( 
                    (expr 
                      (expr 
                        ( 
                          (expr 
                            (expr 
                              (expr 
                                (expr 
                                  ( 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call ScreenWidth)) - 
                                      (expr 
                                        (variable_or_function_call ISLLENGTH))) )) / 
                                (expr 
                                  (literal 2))) - 
                              (expr 
                                (variable_or_function_call SHIPWIDTH))) - 
                            (expr 
                              (literal 6))) )) * 
                      (expr 
                        (variable_or_function_call RND))) )))) + 
            (expr 
              (literal 3))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call ShipY 
            (args_or_indices 
              ( 
                (expr 
                  (literal 1)) ))) = 
          (expr 
            (expr 
              (variable_or_function_call SeaLevel 
                (args_or_indices 
                  ( 
                    (expr 
                      (variable_or_function_call ShipX 
                        (args_or_indices 
                          ( 
                            (expr 
                              (literal 1)) )))) )))) - 
            (expr 
              (literal 12))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call ShipX 
            (args_or_indices 
              ( 
                (expr 
                  (literal 2)) ))) = 
          (expr 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call ScreenWidth)) - 
                (expr 
                  (variable_or_function_call INT 
                    (args_or_indices 
                      ( 
                        (expr 
                          (expr 
                            ( 
                              (expr 
                                (expr 
                                  (expr 
                                    (expr 
                                      ( 
                                        (expr 
                                          (expr 
                                            (variable_or_function_call ScreenWidth)) - 
                                          (expr 
                                            (variable_or_function_call ISLLENGTH))) )) / 
                                    (expr 
                                      (literal 2))) - 
                                  (expr 
                                    (variable_or_function_call SHIPWIDTH))) - 
                                (expr 
                                  (literal 6))) )) * 
                          (expr 
                            (variable_or_function_call RND))) ))))) - 
              (expr 
                (variable_or_function_call SHIPWIDTH))) - 
            (expr 
              (literal 3))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call ShipY 
            (args_or_indices 
              ( 
                (expr 
                  (literal 2)) ))) = 
          (expr 
            (expr 
              (variable_or_function_call SeaLevel 
                (args_or_indices 
                  ( 
                    (expr 
                      (variable_or_function_call ShipX 
                        (args_or_indices 
                          ( 
                            (expr 
                              (literal 2)) )))) )))) - 
            (expr 
              (literal 12))))) \n \n 
      (statement 
        (for_next_statement FOR Counter = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 2)) 
          (block \n 
            (statement 
              (put_graphics_statement PUT 
                ( 
                  (expr 
                    (variable_or_function_call ShipX 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call Counter)) )))) , 
                  (expr 
                    (variable_or_function_call ShipY 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call Counter)) )))) ) , 
                (variable_or_function_call ShipPic) , PSET)) \n 
            (statement 
              (for_next_statement FOR FixTerrain = 
                (expr 
                  (variable_or_function_call ShipX 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call Counter)) )))) TO 
                (expr 
                  (expr 
                    (variable_or_function_call ShipX 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call Counter)) )))) + 
                  (expr 
                    (variable_or_function_call SHIPWIDTH))) 
                (block \n 
                  (statement 
                    (line_statement LINE 
                      ( 
                        (expr 
                          (variable_or_function_call FixTerrain)) , 
                        (expr 
                          (expr 
                            (variable_or_function_call ShipY 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call Counter)) )))) + 
                          (expr 
                            (expr 
                              (literal 2)) * 
                            (expr 
                              (variable_or_function_call SHIPWIDTH)))) ) - 
                      ( 
                        (expr 
                          (variable_or_function_call FixTerrain)) , 
                        (expr 
                          (expr 
                            (variable_or_function_call ShipY 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call Counter)) )))) + 
                          (expr 
                            (variable_or_function_call SHIPWIDTH))) ) , 
                      (expr 
                        (variable_or_function_call WATERCOLOR)))) \n) NEXT FixTerrain)) \n) NEXT Counter)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id PlayGame) 
    (block \n \n \n 
      (statement 
        (dim_statement DIM 
          (dim_variable SeaLevel 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 0)) TO 
                  (expr 
                    (variable_or_function_call ScreenWidth))) ))))) \n 
      (statement 
        (call_statement 
          (untyped_id RANDOMIZE) 
          (call_argument_list 
            (call_argument 
              (expr 
                ( 
                  (expr 
                    (builtin_function TIMER)) )))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Counter) = 
          (expr 
            (literal 0)))) \n \n \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (call_statement 
                (untyped_id Center) 
                (call_argument_list 
                  (call_argument 
                    (expr 
                      (literal "Creating game battleground, please wait."))) , 
                  (call_argument 
                    (expr 
                      (literal 22)))))) \n \n \n 
            (statement 
              (for_next_statement FOR i = 
                (expr 
                  (literal 1)) TO 
                (expr 
                  (literal 2)) 
                (block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call TotalShots 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call i)) ))) = 
                      (expr 
                        (literal 0)))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call TotalWins 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call i)) ))) = 
                      (expr 
                        (literal 0)))) \n) NEXT i)) \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call firstPlayer) = 
                (expr 
                  (variable_or_function_call INT 
                    (args_or_indices 
                      ( 
                        (expr 
                          (expr 
                            (expr 
                              (literal 2)) * 
                            (expr 
                              (variable_or_function_call RND))) + 
                          (expr 
                            (literal 1))) )))))) \n \n \n 
            (statement 
              (do_loop_statement DO 
                (do_condition UNTIL 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call TotalWins 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 1)) )))) >= 
                      (expr 
                        (variable_or_function_call NumGames))) OR 
                    (expr 
                      (expr 
                        (variable_or_function_call TotalWins 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 2)) )))) >= 
                      (expr 
                        (variable_or_function_call NumGames))))) 
                (block \n \n 
                  (statement 
                    (for_next_statement FOR i = 
                      (expr 
                        (literal 1)) TO 
                      (expr 
                        (literal 2)) 
                      (block \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call TheAngle# 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call i)) ))) = 
                            (expr 
                              (literal 45)))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call TheVelocity 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call i)) ))) = 
                            (expr 
                              (literal 50)))) \n) NEXT i)) \n \n \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Wind) = 
                      (expr 
                        (expr 
                          (variable_or_function_call INT 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (expr 
                                    (expr 
                                      (literal 11)) * 
                                    (expr 
                                      (variable_or_function_call RND))) + 
                                  (expr 
                                    (literal 1))) )))) - 
                        (expr 
                          (literal 6))))) \n 
                  (if_block_statement IF 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call INT 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (expr 
                                      (expr 
                                        (literal 4)) * 
                                      (expr 
                                        (variable_or_function_call RND))) + 
                                    (expr 
                                      (literal 1))) )))) = 
                          (expr 
                            (literal 1))) )) THEN \n 
                    (then_block 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Wind) = 
                          (expr 
                            (expr 
                              (variable_or_function_call Wind)) + 
                            (expr 
                              (expr 
                                (variable_or_function_call SGN 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call Wind)) )))) * 
                              (expr 
                                (literal 10)))))) \n) 
                    (end_if_statement END IF)) \n \n 
                  (statement 
                    (call_statement CALL 
                      (untyped_id MakeBattleField) 
                      ( 
                        (call_argument_list 
                          (call_argument SeaLevel 
                            ( ))) ))) \n 
                  (statement 
                    (do_loop_statement DO 
                      (block \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call kbd$) = 
                            (expr 
                              (variable_or_function_call INKEY$)))) \n) LOOP 
                      (do_condition UNTIL 
                        (expr 
                          (expr 
                            (variable_or_function_call kbd$)) = 
                          (expr 
                            (literal "")))))) \n 
                  (statement 
                    (screen_statement SCREEN 
                      (expr 
                        (variable_or_function_call ScreenMode)))) \n 
                  (statement 
                    (color_statement COLOR 
                      (expr 
                        (literal 0)) , 
                      (expr 
                        (literal 1)))) \n 
                  (statement 
                    (call_statement 
                      (untyped_id CLS))) \n 
                  (statement 
                    (call_statement CALL 
                      (untyped_id PlotBattleField) 
                      ( 
                        (call_argument_list 
                          (call_argument SeaLevel 
                            ( ))) ))) \n \n 
                  (statement 
                    (do_loop_statement DO 
                      (block \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Counter) = 
                            (expr 
                              (expr 
                                (variable_or_function_call Counter)) + 
                              (expr 
                                (literal 1))))) \n \n \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call directHit) = 
                            (expr 
                              (variable_or_function_call GetPlayerCommand 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call firstPlayer)) , 
                                    (expr 
                                      (variable_or_function_call SeaLevel 
                                        (args_or_indices 
                                          ( )))) )))))) \n \n 
                        (if_block_statement IF 
                          (expr 
                            (expr 
                              (variable_or_function_call directHit)) <> 
                            (expr 
                              (variable_or_function_call FALSE))) THEN \n 
                          (then_block 
                            (if_block_statement IF 
                              (expr 
                                (expr 
                                  (variable_or_function_call directHit)) = 
                                (expr 
                                  (variable_or_function_call SHOOTSELF))) THEN \n 
                              (then_block 
                                (statement 
                                  (assignment_statement 
                                    (variable_or_function_call TotalWins 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call ABS 
                                              (args_or_indices 
                                                ( 
                                                  (expr 
                                                    (expr 
                                                      (variable_or_function_call firstPlayer)) - 
                                                    (expr 
                                                      (literal 3))) )))) ))) = 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call TotalWins 
                                          (args_or_indices 
                                            ( 
                                              (expr 
                                                (variable_or_function_call ABS 
                                                  (args_or_indices 
                                                    ( 
                                                      (expr 
                                                        (expr 
                                                          (variable_or_function_call firstPlayer)) - 
                                                        (expr 
                                                          (literal 3))) )))) )))) + 
                                      (expr 
                                        (literal 1))))) \n) 
                              (else_block_statement ELSE 
                                (else_block \n 
                                  (statement 
                                    (assignment_statement 
                                      (variable_or_function_call TotalWins 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call firstPlayer)) ))) = 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call TotalWins 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (variable_or_function_call firstPlayer)) )))) + 
                                        (expr 
                                          (literal 1))))) \n)) 
                              (end_if_statement END IF)) \n 
                            (statement 
                              (if_inline_statement IF 
                                (expr 
                                  (expr 
                                    (variable_or_function_call directHit)) = 
                                  (expr 
                                    (variable_or_function_call TRUE))) THEN 
                                (if_inline_action 
                                  (statement 
                                    (assignment_statement 
                                      (variable_or_function_call Counter) = 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call Counter)) + 
                                        (expr 
                                          (literal 1)))))))) \n) 
                          (end_if_statement END IF)) \n \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call firstPlayer) = 
                            (expr 
                              (variable_or_function_call ABS 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call firstPlayer)) - 
                                      (expr 
                                        (literal 3))) )))))) \n \n) LOOP 
                      (do_condition WHILE 
                        (expr 
                          (expr 
                            (variable_or_function_call directHit)) = 
                          (expr 
                            (variable_or_function_call FALSE)))))) \n \n \n) LOOP)) \n \n 
            (statement 
              (color_statement COLOR 
                (expr 
                  (literal 1)) , 
                (expr 
                  (literal 1)))) \n 
            (statement 
              (call_statement 
                (untyped_id CLS))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 3)) , 
                (expr 
                  (literal 15)))) : 
            (statement 
              (print_statement PRINT 
                (expr 
                  (literal "GAME OVER!")))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call diff) = 
                (expr 
                  (expr 
                    (variable_or_function_call TotalWins 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 1)) )))) - 
                  (expr 
                    (variable_or_function_call TotalWins 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 2)) ))))))) \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call diff)) > 
                  (expr 
                    (literal 0))) THEN 
                (if_inline_action 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call ofst) = 
                      (expr 
                        (literal 1))))) ELSE 
                (if_inline_action 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call ofst) = 
                      (expr 
                        (literal 2))))))) \n \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 7)) , 
                (expr 
                  (literal 4)))) \n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call Player$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call ofst)) )))) + 
                      (expr 
                        (literal " won by"))) + 
                    (expr 
                      (variable_or_function_call STR$ 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call ABS 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call diff)) )))) ))))) + 
                  (expr 
                    (literal " point
                      (s)."))))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 11)) , 
                (expr 
                  (literal 2)))) : 
            (statement 
              (print_statement PRINT 
                (expr 
                  (literal "Player:       Hits:      Shots Fired:")))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 12)) , 
                (expr 
                  (literal 2)))) : 
            (statement 
              (print_statement PRINT 
                (expr 
                  (literal "-------       -----      ------------")))) \n \n 
            (statement 
              (for_next_statement FOR j = 
                (expr 
                  (literal 1)) TO 
                (expr 
                  (literal 2)) 
                (block \n 
                  (statement 
                    (locate_statement LOCATE 
                      (expr 
                        (expr 
                          (literal 13)) + 
                        (expr 
                          (variable_or_function_call j))) , 
                      (expr 
                        (literal 2)))) : 
                  (statement 
                    (print_statement PRINT 
                      (expr 
                        (variable_or_function_call Player$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call j)) )))))) \n 
                  (statement 
                    (locate_statement LOCATE 
                      (expr 
                        (expr 
                          (literal 13)) + 
                        (expr 
                          (variable_or_function_call j))) , 
                      (expr 
                        (literal 17)))) : 
                  (statement 
                    (print_statement PRINT 
                      (expr 
                        (variable_or_function_call TotalWins 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call j)) )))))) \n 
                  (statement 
                    (locate_statement LOCATE 
                      (expr 
                        (expr 
                          (literal 13)) + 
                        (expr 
                          (variable_or_function_call j))) , 
                      (expr 
                        (literal 32)))) : 
                  (statement 
                    (print_statement PRINT 
                      (expr 
                        (variable_or_function_call TotalShots 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call j)) )))))) \n) NEXT j)) \n \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 20)) , 
                (expr 
                  (literal 11)))) : 
            (statement 
              (print_statement PRINT 
                (expr 
                  (literal "Play again? 
                    (Y/N) ")))) \n 
            (statement 
              (do_loop_statement DO 
                (block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call StillPlay$) = 
                      (expr 
                        (variable_or_function_call UCASE$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call INKEY$)) )))))) \n) LOOP 
                (do_condition WHILE 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call StillPlay$)) <> 
                      (expr 
                        (literal "Y"))) AND 
                    (expr 
                      (expr 
                        (variable_or_function_call StillPlay$)) <> 
                      (expr 
                        (literal "N"))))))) \n \n) LOOP 
          (do_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call StillPlay$)) = 
              (expr 
                (literal "Y")))))) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id PlotAngle) 
    ( 
      (parameter_list 
        (parameter col) , 
        (parameter NewAngle#) , 
        (parameter PlayerNum)) ) 
    (block \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call radius) = 
          (expr 
            (literal 28.57143)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call YCenter) = 
          (expr 
            (literal 34.28572)))) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call PlayerNum)) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call XCenter) = 
              (expr 
                (literal 78.57143)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call XIncrement) = 
              (expr 
                (variable_or_function_call radius)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call xoffset) = 
              (expr - 
                (expr 
                  (literal 1))))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call XCenter) = 
                (expr 
                  (literal 228.5714)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call XIncrement) = 
                (expr - 
                  (expr 
                    (variable_or_function_call radius))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call xoffset) = 
                (expr 
                  (literal 1)))) \n)) 
        (end_if_statement END IF)) \n \n \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (variable_or_function_call XCenter)) , 
            (expr 
              (variable_or_function_call YCenter)) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call XCenter)) + 
              (expr 
                (variable_or_function_call XIncrement))) , 
            (expr 
              (expr 
                (variable_or_function_call YCenter)) - 
              (expr 
                (expr 
                  (variable_or_function_call radius)) * 
                (expr 
                  (literal .8333333)))) ) , 
          (expr 
            (variable_or_function_call BACKGROUNDCOLOR)) , 
          (box_style BF))) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call PlayerNum)) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (statement 
            (circle_statement CIRCLE 
              ( 
                (expr 
                  (variable_or_function_call XCenter)) , 
                (expr 
                  (variable_or_function_call YCenter)) ) , 
              (expr 
                (variable_or_function_call radius)) , 
              (expr 
                (variable_or_function_call OBJECTCOLOR)) , 
              (expr - 
                (expr 
                  (literal .00001))) , 
              (expr 
                (expr - 
                  (expr 
                    (variable_or_function_call Pi#))) / 
                (expr 
                  (literal 2))))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (circle_statement CIRCLE 
                ( 
                  (expr 
                    (variable_or_function_call XCenter)) , 
                  (expr 
                    (variable_or_function_call YCenter)) ) , 
                (expr 
                  (variable_or_function_call radius)) , 
                (expr 
                  (variable_or_function_call OBJECTCOLOR)) , 
                (expr 
                  (expr - 
                    (expr 
                      (variable_or_function_call Pi#))) / 
                  (expr 
                    (literal 2))) , 
                (expr - 
                  (expr 
                    (variable_or_function_call Pi#))))) \n)) 
        (end_if_statement END IF)) \n \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (variable_or_function_call XCenter)) , 
            (expr 
              (variable_or_function_call YCenter)) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call XCenter)) + 
              (expr 
                (expr 
                  (variable_or_function_call COS 
                    (args_or_indices 
                      ( 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call NewAngle#)) * 
                              (expr 
                                ( 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call Pi#)) / 
                                    (expr 
                                      (literal 180))) ))) )) )))) * 
                (expr 
                  (variable_or_function_call XIncrement)))) , 
            (expr 
              (expr 
                (variable_or_function_call YCenter)) - 
              (expr 
                (expr 
                  (variable_or_function_call SIN 
                    (args_or_indices 
                      ( 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call NewAngle#)) * 
                              (expr 
                                ( 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call Pi#)) / 
                                    (expr 
                                      (literal 180))) ))) )) )))) * 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call radius)) * 
                      (expr 
                        (literal .8333333))) )))) ) , 
          (expr 
            (variable_or_function_call OBJECTCOLOR)))) \n \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call NewAngle#)) > 
            (expr 
              (literal 1))) THEN 
          (if_inline_action 
            (statement 
              (paint_statement PAINT 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call XCenter)) + 
                      (expr 
                        (variable_or_function_call XIncrement))) + 
                    (expr 
                      (variable_or_function_call xoffset))) , 
                  (expr 
                    (expr 
                      (variable_or_function_call YCenter)) - 
                    (expr 
                      (literal 1))) ) , 
                (expr 
                  (variable_or_function_call ISLANDCOLOR)) , 
                (expr 
                  (variable_or_function_call OBJECTCOLOR))))))) \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 3)) , 
          (expr 
            (variable_or_function_call col)))) \n 
      (statement 
        (print_using_statement PRINT USING 
          (expr 
            (literal "Angle: ##")) ; 
          (expr 
            (variable_or_function_call NewAngle#)))) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id PlotBattleField) 
    ( 
      (parameter_list 
        (parameter SeaLevel 
          (array_declaration 
            ( )))) ) 
    (block \n \n 
      (statement 
        (for_next_statement FOR Counter = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call ScreenWidth)) 
          (block \n 
            (statement 
              (line_statement LINE 
                ( 
                  (expr 
                    (variable_or_function_call Counter)) , 
                  (expr 
                    (variable_or_function_call ScreenHeight)) ) - 
                ( 
                  (expr 
                    (variable_or_function_call Counter)) , 
                  (expr 
                    (variable_or_function_call SeaLevel 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call Counter)) )))) ) , 
                (expr 
                  (variable_or_function_call WATERCOLOR)))) \n) NEXT Counter)) \n \n 
      (statement 
        (call_statement CALL 
          (untyped_id DrawWaves) 
          ( 
            (call_argument_list 
              (call_argument 
                (expr 
                  (literal 10))) , 
              (call_argument 
                (expr 
                  (literal 4))) , 
              (call_argument 
                (expr 
                  (literal 1))) , 
              (call_argument SeaLevel 
                ( ))) ))) \n 
      (statement 
        (call_statement CALL 
          (untyped_id DrawWaves) 
          ( 
            (call_argument_list 
              (call_argument 
                (expr 
                  (literal 20))) , 
              (call_argument 
                (expr 
                  (literal 2))) , 
              (call_argument 
                (expr 
                  (literal 1))) , 
              (call_argument SeaLevel 
                ( ))) ))) \n 
      (statement 
        (call_statement CALL 
          (untyped_id DrawWaves) 
          ( 
            (call_argument_list 
              (call_argument 
                (expr 
                  (literal 30))) , 
              (call_argument 
                (expr 
                  (literal 1))) , 
              (call_argument 
                (expr 
                  (literal 1))) , 
              (call_argument SeaLevel 
                ( ))) ))) \n 
      (statement 
        (call_statement CALL 
          (untyped_id DrawWaves) 
          ( 
            (call_argument_list 
              (call_argument 
                (expr 
                  (literal 40))) , 
              (call_argument 
                (expr 
                  (literal 3))) , 
              (call_argument 
                (expr 
                  (literal 1))) , 
              (call_argument SeaLevel 
                ( ))) ))) \n 
      (statement 
        (call_statement CALL 
          (untyped_id DrawWaves) 
          ( 
            (call_argument_list 
              (call_argument 
                (expr 
                  (literal 50))) , 
              (call_argument 
                (expr 
                  (literal 7))) , 
              (call_argument 
                (expr 
                  (literal 1))) , 
              (call_argument SeaLevel 
                ( ))) ))) \n \n 
      (statement 
        (call_statement CALL 
          (untyped_id PlaceShips) 
          ( 
            (call_argument_list 
              (call_argument SeaLevel 
                ( ))) ))) \n 
      (statement 
        (call_statement CALL 
          (untyped_id DrawIsland) 
          ( 
            (call_argument_list 
              (call_argument SeaLevel 
                ( ))) ))) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n 
  (function_statement FUNCTION PlotShot 
    ( 
      (parameter_list 
        (parameter startX) , 
        (parameter startY) , 
        (parameter angle#) , 
        (parameter velocity)) ) 
    (block \n \n 
      (statement 
        (const_statement CONST 
          (const_assignment cSeconds = 
            (const_expr 
              (expr 
                (literal 3.5)))))) \n \n 
      (statement 
        (play_statement PLAY 
          (expr 
            (variable_or_function_call CANNONFIRESOUND)))) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call velocity)) < 
          (expr 
            (literal 2))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call PlotShot) = 
              (expr 
                (variable_or_function_call SinkShip 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call startX)) , 
                      (expr 
                        (variable_or_function_call startY)) )))))) \n) 
        (else_block_statement ELSE 
          (else_block \n \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call angle#) = 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call angle#)) / 
                    (expr 
                      (literal 180))) * 
                  (expr 
                    (variable_or_function_call Pi#))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call InitialXVelocity#) = 
                (expr 
                  (expr 
                    (variable_or_function_call COS 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call angle#)) )))) * 
                  (expr 
                    (variable_or_function_call velocity))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call InitialYVelocity#) = 
                (expr 
                  (expr 
                    (variable_or_function_call SIN 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call angle#)) )))) * 
                  (expr 
                    (variable_or_function_call velocity))))) \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call PlotShot) = 
                (expr 
                  (literal 0)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call NEEDERASE) = 
                (expr 
                  (variable_or_function_call FALSE)))) \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call t1#) = 
                (expr 
                  (builtin_function TIMER)))) \n \n \n \n 
            (statement 
              (do_loop_statement DO 
                (block \n \n \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call x) = 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call startX)) + 
                          (expr 
                            ( 
                              (expr 
                                (expr 
                                  (variable_or_function_call InitialXVelocity#)) * 
                                (expr 
                                  (variable_or_function_call t#))) ))) + 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (expr 
                                  (expr 
                                    (literal .5)) * 
                                  (expr 
                                    ( 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call Wind)) / 
                                        (expr 
                                          (literal 5))) ))) * 
                                (expr 
                                  (variable_or_function_call t#))) * 
                              (expr 
                                (variable_or_function_call t#))) ))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call y) = 
                      (expr 
                        (expr 
                          (variable_or_function_call startY)) + 
                        (expr 
                          (expr 
                            ( 
                              (expr 
                                (expr - 
                                  (expr 
                                    ( 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call InitialYVelocity#)) * 
                                        (expr 
                                          (variable_or_function_call t#))) ))) + 
                                (expr 
                                  ( 
                                    (expr 
                                      (expr 
                                        (expr 
                                          (expr 
                                            (literal .5)) * 
                                          (expr 
                                            (variable_or_function_call GRAVITY))) * 
                                        (expr 
                                          (variable_or_function_call t#))) * 
                                      (expr 
                                        (variable_or_function_call t#))) ))) )) * 
                          (expr 
                            ( 
                              (expr 
                                (expr 
                                  (variable_or_function_call ScreenHeight)) / 
                                (expr 
                                  (literal 350))) )))))) \n \n \n 
                  (if_block_statement IF 
                    (expr 
                      (variable_or_function_call NEEDERASE)) THEN \n 
                    (then_block 
                      (statement 
                        (put_graphics_statement PUT 
                          ( 
                            (expr 
                              (variable_or_function_call Oldx)) , 
                            (expr 
                              (variable_or_function_call Oldy)) ) , 
                          (variable_or_function_call Shot&) , XOR)) \n) 
                    (end_if_statement END IF)) \n \n \n \n \n \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call x)) >= 
                              (expr 
                                (expr 
                                  (variable_or_function_call ScreenWidth)) - 
                                (expr 
                                  (literal 3)))) )) OR 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call x)) <= 
                              (expr 
                                (literal 3))) ))) OR 
                      (expr 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call y)) >= 
                            (expr 
                              (expr 
                                (variable_or_function_call ScreenHeight)) - 
                              (expr 
                                (literal 3)))) ))) THEN \n 
                    (then_block 
                      (statement 
                        (exit_statement EXIT DO)) \n) 
                    (end_if_statement END IF)) \n \n \n \n \n \n \n 
                  (statement 
                    (for_next_statement FOR lookX = 
                      (expr - 
                        (expr 
                          (literal 1))) TO 
                      (expr 
                        (literal 1)) 
                      (block \n 
                        (statement 
                          (for_next_statement FOR lookY = 
                            (expr - 
                              (expr 
                                (literal 1))) TO 
                            (expr 
                              (literal 1)) 
                            (block \n 
                              (if_block_statement IF 
                                (expr 
                                  (expr 
                                    (variable_or_function_call POINT 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (expr 
                                              (variable_or_function_call x)) + 
                                            (expr 
                                              (variable_or_function_call lookX))) , 
                                          (expr 
                                            (expr 
                                              (variable_or_function_call y)) + 
                                            (expr 
                                              (variable_or_function_call lookY))) )))) <> 
                                  (expr 
                                    (variable_or_function_call BACKGROUNDCOLOR))) THEN \n 
                                (then_block 
                                  (if_block_statement IF 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call POINT 
                                          (args_or_indices 
                                            ( 
                                              (expr 
                                                (expr 
                                                  (variable_or_function_call x)) + 
                                                (expr 
                                                  (variable_or_function_call lookX))) , 
                                              (expr 
                                                (expr 
                                                  (variable_or_function_call y)) + 
                                                (expr 
                                                  (variable_or_function_call lookY))) )))) = 
                                      (expr 
                                        (variable_or_function_call OBJECTCOLOR))) THEN \n 
                                    (then_block 
                                      (statement 
                                        (assignment_statement 
                                          (variable_or_function_call PlotShot) = 
                                          (expr 
                                            (variable_or_function_call SinkShip 
                                              (args_or_indices 
                                                ( 
                                                  (expr 
                                                    (variable_or_function_call x)) , 
                                                  (expr 
                                                    (variable_or_function_call y)) )))))) \n 
                                      (statement 
                                        (exit_statement EXIT DO)) \n) 
                                    (elseif_block_statement ELSEIF 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call POINT 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call x)) + 
                                                  (expr 
                                                    (variable_or_function_call lookX))) , 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call y)) + 
                                                  (expr 
                                                    (variable_or_function_call lookY))) )))) = 
                                        (expr 
                                          (variable_or_function_call ISLANDCOLOR))) THEN 
                                      (else_block \n 
                                        (statement 
                                          (call_statement CALL 
                                            (untyped_id CannonHit) 
                                            ( 
                                              (call_argument_list 
                                                (call_argument x) , 
                                                (call_argument y) , 
                                                (call_argument ISLANDCOLOR)) ))) \n 
                                        (statement 
                                          (exit_statement EXIT DO)) \n)) 
                                    (elseif_block_statement ELSEIF 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call POINT 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call x)) + 
                                                  (expr 
                                                    (variable_or_function_call lookX))) , 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call y)) + 
                                                  (expr 
                                                    (variable_or_function_call lookY))) )))) = 
                                        (expr 
                                          (variable_or_function_call WATERCOLOR))) THEN 
                                      (else_block \n 
                                        (statement 
                                          (call_statement CALL 
                                            (untyped_id CannonHit) 
                                            ( 
                                              (call_argument_list 
                                                (call_argument x) , 
                                                (call_argument y) , 
                                                (call_argument WATERCOLOR)) ))) \n 
                                        (statement 
                                          (exit_statement EXIT DO)) \n)) 
                                    (end_if_statement END IF)) \n) 
                                (end_if_statement END IF)) \n) NEXT)) \n) NEXT)) \n \n \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (variable_or_function_call y)) > 
                      (expr 
                        (literal 0))) THEN \n 
                    (then_block 
                      (statement 
                        (put_graphics_statement PUT 
                          ( 
                            (expr 
                              (variable_or_function_call x)) , 
                            (expr 
                              (variable_or_function_call y)) ) , 
                          (variable_or_function_call Shot&) , PSET)) \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Oldx) = 
                          (expr 
                            (variable_or_function_call x)))) \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Oldy) = 
                          (expr 
                            (variable_or_function_call y)))) \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call NEEDERASE) = 
                          (expr 
                            (variable_or_function_call TRUE)))) \n) 
                    (else_block_statement ELSE 
                      (else_block \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call NEEDERASE) = 
                            (expr 
                              (variable_or_function_call FALSE)))) \n)) 
                    (end_if_statement END IF)) \n \n \n 
                  (statement 
                    (do_loop_statement DO 
                      (block \n \n 
                        (if_block_statement IF 
                          (expr 
                            (expr 
                              (builtin_function TIMER)) < 
                            (expr 
                              (variable_or_function_call t1#))) THEN \n 
                          (then_block 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call t1#) = 
                                (expr 
                                  (expr 
                                    (variable_or_function_call t1#)) - 
                                  (expr 
                                    (literal 86400))))) \n) 
                          (end_if_statement END IF)) \n \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call t2#) = 
                            (expr 
                              (expr 
                                (expr 
                                  ( 
                                    (expr 
                                      (expr 
                                        (builtin_function TIMER)) - 
                                      (expr 
                                        (variable_or_function_call t1#))) )) * 
                                (expr 
                                  (literal 8))) / 
                              (expr 
                                (variable_or_function_call cSeconds))))) \n) LOOP 
                      (do_condition WHILE 
                        (expr 
                          (expr 
                            (expr 
                              (variable_or_function_call t2#)) - 
                            (expr 
                              (variable_or_function_call t#))) < 
                          (expr 
                            (literal .05)))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call t#) = 
                      (expr 
                        (variable_or_function_call t2#)))) \n) LOOP)) \n)) 
        (end_if_statement END IF)) \n \n) 
    (end_function_statement END FUNCTION)) \n \n \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id PlotVelocity) 
    ( 
      (parameter_list 
        (parameter col) , 
        (parameter NewVelocity) , 
        (parameter PlayerNum)) ) 
    (block \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call margin) = 
          (expr 
            (literal 33.33333)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call YHeight) = 
          (expr 
            (literal 5)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call YCenter) = 
          (expr 
            (literal 50)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call XWidth) = 
          (expr 
            (literal 106.66667#)))) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call PlayerNum)) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call XCenter) = 
              (expr 
                (literal .66666)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call XIncrement) = 
              (expr 
                (variable_or_function_call XWidth)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call xoffset) = 
              (expr - 
                (expr 
                  (literal 1))))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call XCenter) = 
                (expr 
                  (literal 236.6667)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call XIncrement) = 
                (expr - 
                  (expr 
                    (variable_or_function_call XWidth))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call xoffset) = 
                (expr 
                  (literal 1)))) \n)) 
        (end_if_statement END IF)) \n \n \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (variable_or_function_call XCenter)) , 
            (expr 
              (variable_or_function_call YCenter)) ) - 
          ( 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call XCenter)) + 
                (expr 
                  (expr 
                    (variable_or_function_call XIncrement)) * 
                  (expr 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call NewVelocity)) / 
                        (expr 
                          (variable_or_function_call MAXVELOCITY))) )))) + 
              (expr 
                (variable_or_function_call xoffset))) , 
            (expr 
              (expr 
                (variable_or_function_call YCenter)) - 
              (expr 
                (variable_or_function_call YHeight))) ) , 
          (expr 
            (variable_or_function_call ISLANDCOLOR)) , 
          (box_style BF))) \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call XCenter)) + 
              (expr 
                (expr 
                  (variable_or_function_call XIncrement)) * 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call NewVelocity)) / 
                      (expr 
                        (variable_or_function_call MAXVELOCITY))) )))) , 
            (expr 
              (variable_or_function_call YCenter)) ) - 
          ( 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call XCenter)) + 
                (expr 
                  (variable_or_function_call XIncrement))) + 
              (expr 
                (variable_or_function_call xoffset))) , 
            (expr 
              (expr 
                (variable_or_function_call YCenter)) - 
              (expr 
                (variable_or_function_call YHeight))) ) , 
          (expr 
            (variable_or_function_call BACKGROUNDCOLOR)) , 
          (box_style BF))) \n \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call XCenter)) + 
              (expr 
                (variable_or_function_call xoffset))) , 
            (expr 
              (expr 
                (variable_or_function_call YCenter)) + 
              (expr 
                (literal 1))) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call XCenter)) + 
              (expr 
                (variable_or_function_call XIncrement))) , 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call YCenter)) - 
                (expr 
                  (variable_or_function_call YHeight))) - 
              (expr 
                (literal 1))) ) , 
          (expr 
            (variable_or_function_call OBJECTCOLOR)) , 
          (box_style B))) \n \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call XCenter)) + 
                (expr 
                  (expr 
                    (variable_or_function_call XIncrement)) * 
                  (expr 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call NewVelocity)) / 
                        (expr 
                          (variable_or_function_call MAXVELOCITY))) )))) + 
              (expr 
                (variable_or_function_call xoffset))) , 
            (expr 
              (variable_or_function_call YCenter)) ) - 
          ( 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call XCenter)) + 
                (expr 
                  (expr 
                    (variable_or_function_call XIncrement)) * 
                  (expr 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call NewVelocity)) / 
                        (expr 
                          (variable_or_function_call MAXVELOCITY))) )))) + 
              (expr 
                (variable_or_function_call xoffset))) , 
            (expr 
              (expr 
                (variable_or_function_call YCenter)) - 
              (expr 
                (variable_or_function_call YHeight))) ) , 
          (expr 
            (variable_or_function_call OBJECTCOLOR)))) \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 5)) , 
          (expr 
            (variable_or_function_call col)))) \n 
      (statement 
        (print_using_statement PRINT USING 
          (expr 
            (literal "Speed:###")) ; 
          (expr 
            (variable_or_function_call NewVelocity)))) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n \n \n \n 
  (function_statement FUNCTION SinkShip 
    ( 
      (parameter_list 
        (parameter x) , 
        (parameter y)) ) 
    (block \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call XWidth) = 
          (expr 
            (literal 8)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call YHeight) = 
          (expr 
            (literal 10)))) \n \n 
      (statement 
        (call_statement CALL 
          (untyped_id CannonHit) 
          ( 
            (call_argument_list 
              (call_argument x) , 
              (call_argument y) , 
              (call_argument ISLANDCOLOR)) ))) \n \n 
      (statement 
        (call_statement CALL 
          (untyped_id CyclePalette))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call x)) < 
            (expr 
              (expr 
                (variable_or_function_call ScreenWidth)) / 
              (expr 
                (literal 2)))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call playerHit) = 
                (expr 
                  (literal 1))))) ELSE 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call playerHit) = 
                (expr 
                  (literal 2))))))) \n \n 
      (statement 
        (play_statement PLAY 
          (expr 
            (variable_or_function_call SHIPEXPLOSIONSOUND)))) \n \n \n 
      (statement 
        (for_next_statement FOR blast = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call XWidth)) 
          (block \n 
            (statement 
              (circle_statement CIRCLE 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call ShipX 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call playerHit)) )))) + 
                    (expr 
                      (expr 
                        (variable_or_function_call SHIPWIDTH)) / 
                      (expr 
                        (literal 2)))) , 
                  (expr 
                    (expr 
                      (variable_or_function_call ShipY 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call playerHit)) )))) + 
                    (expr 
                      (variable_or_function_call YHeight))) ) , 
                (expr 
                  (variable_or_function_call blast)) , 
                (expr 
                  (variable_or_function_call ISLANDCOLOR)) , , , 
                (expr - 
                  (expr 
                    (literal 1.57))))) \n 
            (statement 
              (line_statement LINE 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call ShipX 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call playerHit)) )))) + 
                      (expr 
                        (expr 
                          (variable_or_function_call SHIPWIDTH)) / 
                        (expr 
                          (literal 2)))) - 
                    (expr 
                      (literal 3.5))) , 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call ShipY 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call playerHit)) )))) + 
                      (expr 
                        (variable_or_function_call YHeight))) - 
                    (expr 
                      (variable_or_function_call blast))) ) - 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call ShipX 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call playerHit)) )))) + 
                      (expr 
                        (expr 
                          (variable_or_function_call SHIPWIDTH)) / 
                        (expr 
                          (literal 2)))) + 
                    (expr 
                      (literal 3.5))) , 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call ShipY 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call playerHit)) )))) + 
                      (expr 
                        (variable_or_function_call YHeight))) - 
                    (expr 
                      (variable_or_function_call blast))) ) , 
                (expr 
                  (variable_or_function_call ISLANDCOLOR)))) \n) NEXT blast)) \n \n 
      (statement 
        (call_statement CALL 
          (untyped_id CyclePalette))) \n \n \n 
      (statement 
        (for_next_statement FOR Cloud = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call SHIPWIDTH)) 
          (block \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call Cloud)) < 
                  (expr 
                    ( 
                      (expr 
                        (variable_or_function_call XWidth)) ))) THEN 
                (if_inline_action 
                  (statement 
                    (circle_statement CIRCLE 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call ShipX 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call playerHit)) )))) + 
                          (expr 
                            (expr 
                              (variable_or_function_call SHIPWIDTH)) / 
                            (expr 
                              (literal 2)))) , 
                        (expr 
                          (expr 
                            (variable_or_function_call ShipY 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call playerHit)) )))) + 
                          (expr 
                            (variable_or_function_call YHeight))) ) , 
                      (expr 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call XWidth)) + 
                              (expr 
                                (literal 1))) )) - 
                        (expr 
                          (variable_or_function_call Cloud))) , 
                      (expr 
                        (variable_or_function_call BACKGROUNDCOLOR)) , , , 
                      (expr - 
                        (expr 
                          (literal 1.57)))))))) \n 
            (statement 
              (circle_statement CIRCLE 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call ShipX 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call playerHit)) )))) + 
                    (expr 
                      (expr 
                        (variable_or_function_call SHIPWIDTH)) / 
                      (expr 
                        (literal 2)))) , 
                  (expr 
                    (variable_or_function_call ShipY 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call playerHit)) )))) ) , 
                (expr 
                  (variable_or_function_call Cloud)) , 
                (expr 
                  (variable_or_function_call ISLANDCOLOR)) , , , 
                (expr - 
                  (expr 
                    (literal 1.57))))) \n) NEXT Cloud)) \n \n 
      (statement 
        (call_statement CALL 
          (untyped_id CyclePalette))) \n \n 
      (statement 
        (for_next_statement FOR Cloud = 
          (expr 
            (variable_or_function_call SHIPWIDTH)) TO 
          (expr 
            (literal 1)) STEP 
          (expr - 
            (expr 
              (literal 1))) 
          (block \n 
            (statement 
              (circle_statement CIRCLE 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call ShipX 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call playerHit)) )))) + 
                    (expr 
                      (expr 
                        (variable_or_function_call SHIPWIDTH)) / 
                      (expr 
                        (literal 2)))) , 
                  (expr 
                    (variable_or_function_call ShipY 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call playerHit)) )))) ) , 
                (expr 
                  (variable_or_function_call Cloud)) , 
                (expr 
                  (variable_or_function_call BACKGROUNDCOLOR)) , , , 
                (expr - 
                  (expr 
                    (literal 1.57))))) \n) NEXT Cloud)) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call SinkShip) = 
          (expr 
            (variable_or_function_call playerHit)))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call xcol) = 
          (expr 
            (variable_or_function_call ShipX 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call playerHit)) )))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call origycol) = 
          (expr 
            (variable_or_function_call ShipY 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call playerHit)) )))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call ycol) = 
          (expr 
            (variable_or_function_call origycol)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call i) = 
          (expr 
            (literal 1)))) \n \n \n 
      (statement 
        (do_loop_statement DO 
          (do_condition WHILE 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call i)) <= 
                (expr 
                  (variable_or_function_call SHIPWIDTH))) AND 
              (expr 
                (expr 
                  (expr 
                    (variable_or_function_call ycol)) + 
                  (expr 
                    (variable_or_function_call SHIPWIDTH))) < 
                (expr 
                  (variable_or_function_call ScreenHeight))))) 
          (block \n 
            (statement 
              (put_graphics_statement PUT 
                ( 
                  (expr 
                    (variable_or_function_call xcol)) , 
                  (expr 
                    (variable_or_function_call ycol)) ) , 
                (variable_or_function_call ShipPic) , XOR)) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call ycol) = 
                (expr 
                  (expr 
                    (variable_or_function_call ycol)) + 
                  (expr 
                    (literal 1))))) \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (expr 
                    (variable_or_function_call ycol)) + 
                  (expr 
                    (variable_or_function_call SHIPWIDTH))) < 
                (expr 
                  (variable_or_function_call ScreenHeight))) THEN \n 
              (then_block 
                (statement 
                  (line_statement LINE 
                    ( 
                      (expr 
                        (variable_or_function_call xcol)) , 
                      (expr 
                        (expr 
                          (variable_or_function_call ycol)) - 
                        (expr 
                          (literal 1))) ) - 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call xcol)) + 
                        (expr 
                          (variable_or_function_call SHIPWIDTH))) , 
                      (expr 
                        (expr 
                          (variable_or_function_call ycol)) - 
                        (expr 
                          (literal 1))) ) , 
                    (expr 
                      (variable_or_function_call BACKGROUNDCOLOR)))) \n 
                (statement 
                  (put_graphics_statement PUT 
                    ( 
                      (expr 
                        (variable_or_function_call xcol)) , 
                      (expr 
                        (variable_or_function_call ycol)) ) , 
                    (variable_or_function_call ShipPic) , PSET)) \n 
                (statement 
                  (for_next_statement FOR j = 
                    (expr 
                      (literal 0)) TO 
                    (expr 
                      (variable_or_function_call i)) 
                    (block \n 
                      (statement 
                        (line_statement LINE 
                          ( 
                            (expr 
                              (variable_or_function_call xcol)) , 
                            (expr 
                              (expr 
                                (expr 
                                  (variable_or_function_call origycol)) + 
                                (expr 
                                  (variable_or_function_call j))) + 
                              (expr 
                                (variable_or_function_call SHIPWIDTH))) ) - 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call xcol)) + 
                              (expr 
                                (variable_or_function_call SHIPWIDTH))) , 
                            (expr 
                              (expr 
                                (expr 
                                  (variable_or_function_call origycol)) + 
                                (expr 
                                  (variable_or_function_call j))) + 
                              (expr 
                                (variable_or_function_call SHIPWIDTH))) ) , 
                          (expr 
                            (variable_or_function_call WATERCOLOR)))) \n) NEXT j)) \n) 
              (end_if_statement END IF)) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call i) = 
                (expr 
                  (expr 
                    (variable_or_function_call i)) + 
                  (expr 
                    (literal 1))))) \n) LOOP)) \n \n) 
    (end_function_statement END FUNCTION)) \n <EOF>)
