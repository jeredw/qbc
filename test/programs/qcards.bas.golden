(program 
  (declare_statement DECLARE SUB 
    (untyped_id DirectionKey) 
    ( 
      (declare_parameter_list 
        (declare_parameter Choice$) , 
        (declare_parameter TopCard%) , 
        (declare_parameter LastCard%)) )) \r\n 
  (declare_statement DECLARE SUB 
    (untyped_id Alarm) 
    ( )) \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 
  (statement 
    (deftype_statement DEFINT 
      (letter_range A - Z))) \r\n \r\n \r\n 
  (statement 
    (const_statement CONST 
      (const_assignment SPACE = 
        (const_expr 
          (expr 
            (literal 32)))) , 
      (const_assignment ESC = 
        (const_expr 
          (expr 
            (literal 27)))) , 
      (const_assignment ENTER = 
        (const_expr 
          (expr 
            (literal 13)))) , 
      (const_assignment TABKEY = 
        (const_expr 
          (expr 
            (literal 9)))))) \r\n 
  (statement 
    (const_statement CONST 
      (const_assignment DOWN = 
        (const_expr 
          (expr 
            (literal 80)))) , 
      (const_assignment UP = 
        (const_expr 
          (expr 
            (literal 72)))) , 
      (const_assignment LEFT = 
        (const_expr 
          (expr 
            (literal 75)))) , 
      (const_assignment RIGHT = 
        (const_expr 
          (expr 
            (literal 77)))))) \r\n 
  (statement 
    (const_statement CONST 
      (const_assignment HOME = 
        (const_expr 
          (expr 
            (literal 71)))) , 
      (const_assignment ENDK = 
        (const_expr 
          (expr 
            (literal 79)))) , 
      (const_assignment PGDN = 
        (const_expr 
          (expr 
            (literal 81)))) , 
      (const_assignment PGUP = 
        (const_expr 
          (expr 
            (literal 73)))))) \r\n 
  (statement 
    (const_statement CONST 
      (const_assignment INS = 
        (const_expr 
          (expr 
            (literal 82)))) , 
      (const_assignment DEL = 
        (const_expr 
          (expr 
            (literal 83)))) , 
      (const_assignment NULL = 
        (const_expr 
          (expr 
            (literal 0)))))) \r\n 
  (statement 
    (const_statement CONST 
      (const_assignment CTRLD = 
        (const_expr 
          (expr 
            (literal 4)))) , 
      (const_assignment CTRLG = 
        (const_expr 
          (expr 
            (literal 7)))) , 
      (const_assignment CTRLH = 
        (const_expr 
          (expr 
            (literal 8)))) , 
      (const_assignment CTRLS = 
        (const_expr 
          (expr 
            (literal 19)))) , 
      (const_assignment CTRLV = 
        (const_expr 
          (expr 
            (literal 22)))))) \r\n \r\n \r\n \r\n 
  (statement 
    (const_statement CONST 
      (const_assignment BLACK = 
        (const_expr 
          (expr 
            (literal 0)))) , 
      (const_assignment BLUE = 
        (const_expr 
          (expr 
            (literal 1)))) , 
      (const_assignment GREEN = 
        (const_expr 
          (expr 
            (literal 2)))) , 
      (const_assignment CYAN = 
        (const_expr 
          (expr 
            (literal 3)))) , 
      (const_assignment RED = 
        (const_expr 
          (expr 
            (literal 4)))) , 
      (const_assignment MAGENTA = 
        (const_expr 
          (expr 
            (literal 5)))))) \r\n 
  (statement 
    (const_statement CONST 
      (const_assignment YELLOW = 
        (const_expr 
          (expr 
            (literal 6)))) , 
      (const_assignment WHITE = 
        (const_expr 
          (expr 
            (literal 7)))) , 
      (const_assignment BRIGHT = 
        (const_expr 
          (expr 
            (literal 8)))))) \r\n \r\n \r\n \r\n \r\n 
  (statement 
    (const_statement CONST 
      (const_assignment BACKGROUND = 
        (const_expr 
          (expr 
            (variable_or_function_call BLACK)))) , 
      (const_assignment NORMAL = 
        (const_expr 
          (expr 
            (variable_or_function_call WHITE)))) , 
      (const_assignment HILITE = 
        (const_expr 
          (expr 
            (expr 
              (variable_or_function_call WHITE)) + 
            (expr 
              (variable_or_function_call BRIGHT))))))) \r\n \r\n 
  (statement 
    (const_statement CONST 
      (const_assignment CNORMAL = 
        (const_expr 
          (expr 
            (literal 0)))) , 
      (const_assignment CHILITE = 
        (const_expr 
          (expr 
            (literal 1)))))) \r\n \r\n \r\n \r\n 
  (statement 
    (const_statement CONST 
      (const_assignment HELPTOP = 
        (const_expr 
          (expr 
            (literal 15)))) , 
      (const_assignment HELPBOT = 
        (const_expr 
          (expr 
            (literal 23)))) , 
      (const_assignment HELPLEFT = 
        (const_expr 
          (expr 
            (literal 60)))) , 
      (const_assignment HELPWID = 
        (const_expr 
          (expr 
            (literal 20)))))) \r\n 
  (statement 
    (const_statement CONST 
      (const_assignment CARDSPERSCREEN = 
        (const_expr 
          (expr 
            (literal 7)))) , 
      (const_assignment LASTROW = 
        (const_expr 
          (expr 
            (literal 25)))))) \r\n \r\n \r\n 
  (statement 
    (const_statement CONST 
      (const_assignment FALSE = 
        (const_expr 
          (expr 
            (literal 0)))) , 
      (const_assignment TRUE = 
        (const_expr 
          (expr NOT 
            (expr 
              (variable_or_function_call FALSE))))))) \r\n 
  (statement 
    (const_statement CONST 
      (const_assignment CURSORON = 
        (const_expr 
          (expr 
            (literal 1)))) , 
      (const_assignment CURSOROFF = 
        (const_expr 
          (expr 
            (literal 0)))))) \r\n \r\n \r\n 
  (statement 
    (const_statement CONST 
      (const_assignment TMPFILE$ = 
        (const_expr 
          (expr 
            (literal "$$$87y$.$5$")))))) \r\n \r\n \r\n 
  (statement 
    (const_statement CONST 
      (const_assignment NPERSON = 
        (const_expr 
          (expr 
            (literal 0)))) , 
      (const_assignment NNOTE = 
        (const_expr 
          (expr 
            (literal 1)))) , 
      (const_assignment NMONTH = 
        (const_expr 
          (expr 
            (literal 2)))) , 
      (const_assignment NDAY = 
        (const_expr 
          (expr 
            (literal 3)))) , 
      (const_assignment NYEAR = 
        (const_expr 
          (expr 
            (literal 4)))) , 
      (const_assignment NPHONE = 
        (const_expr 
          (expr 
            (literal 5)))))) \r\n 
  (statement 
    (const_statement CONST 
      (const_assignment NSTREET = 
        (const_expr 
          (expr 
            (literal 6)))) , 
      (const_assignment NCITY = 
        (const_expr 
          (expr 
            (literal 7)))) , 
      (const_assignment NSTATE = 
        (const_expr 
          (expr 
            (literal 8)))) , 
      (const_assignment NZIP = 
        (const_expr 
          (expr 
            (literal 9)))) , 
      (const_assignment NFIELDS = 
        (const_expr 
          (expr 
            (expr 
              (variable_or_function_call NZIP)) + 
            (expr 
              (literal 1))))))) \r\n \r\n \r\n 
  (type_statement TYPE 
    (untyped_id Person) \r\n 
    (type_element 
      (untyped_id CardNum) AS 
      (type_name_for_type_element INTEGER) \r\n) 
    (type_element 
      (untyped_id Names) AS 
      (type_name_for_type_element 
        (fixed_string STRING * 37)) \r\n) 
    (type_element 
      (untyped_id Note) AS 
      (type_name_for_type_element 
        (fixed_string STRING * 31)) \r\n) 
    (type_element 
      (untyped_id Month) AS 
      (type_name_for_type_element INTEGER) \r\n) 
    (type_element 
      (untyped_id Day) AS 
      (type_name_for_type_element INTEGER) \r\n) 
    (type_element 
      (untyped_id Year) AS 
      (type_name_for_type_element INTEGER) \r\n) 
    (type_element 
      (untyped_id Phone) AS 
      (type_name_for_type_element 
        (fixed_string STRING * 12)) \r\n) 
    (type_element 
      (untyped_id Street) AS 
      (type_name_for_type_element 
        (fixed_string STRING * 29)) \r\n) 
    (type_element 
      (untyped_id City) AS 
      (type_name_for_type_element 
        (fixed_string STRING * 13)) \r\n) 
    (type_element 
      (untyped_id State) AS 
      (type_name_for_type_element 
        (fixed_string STRING * 2)) \r\n) 
    (type_element 
      (untyped_id Zip) AS 
      (type_name_for_type_element 
        (fixed_string STRING * 5)) \r\n) END TYPE) \r\n \r\n \r\n \r\n \r\n \r\n 
  (declare_statement DECLARE SUB 
    (untyped_id AsciiKey) 
    ( 
      (declare_parameter_list 
        (declare_parameter Choice$) , 
        (declare_parameter TopCard%) , 
        (declare_parameter LastCard%)) )) \r\n 
  (declare_statement DECLARE SUB 
    (untyped_id CleanUp) 
    ( 
      (declare_parameter_list 
        (declare_parameter LastCard%)) )) \r\n 
  (declare_statement DECLARE SUB 
    (untyped_id ClearHelp) 
    ( )) \r\n 
  (declare_statement DECLARE SUB 
    (untyped_id DrawCards) 
    ( )) \r\n 
  (declare_statement DECLARE SUB 
    (untyped_id EditCard) 
    ( 
      (declare_parameter_list 
        (declare_parameter 
          (untyped_id Card) AS 
          (type_name_for_declare_parameter 
            (untyped_id Person)))) )) \r\n 
  (declare_statement DECLARE SUB 
    (untyped_id InitIndex) 
    ( 
      (declare_parameter_list 
        (declare_parameter LastCard%)) )) \r\n 
  (declare_statement DECLARE SUB 
    (untyped_id PrintLabel) 
    ( 
      (declare_parameter_list 
        (declare_parameter 
          (untyped_id Card) AS 
          (type_name_for_declare_parameter 
            (untyped_id Person)))) )) \r\n 
  (declare_statement DECLARE SUB 
    (untyped_id SortIndex) 
    ( 
      (declare_parameter_list 
        (declare_parameter SortField%) , 
        (declare_parameter LastCard%)) )) \r\n 
  (declare_statement DECLARE SUB 
    (untyped_id ShowViewHelp) 
    ( )) \r\n 
  (declare_statement DECLARE SUB 
    (untyped_id ShowTopCard) 
    ( 
      (declare_parameter_list 
        (declare_parameter 
          (untyped_id WorkCard) AS 
          (type_name_for_declare_parameter 
            (untyped_id Person)))) )) \r\n 
  (declare_statement DECLARE SUB 
    (untyped_id ShowEditHelp) 
    ( )) \r\n 
  (declare_statement DECLARE SUB 
    (untyped_id ShowCmdLine) 
    ( )) \r\n 
  (declare_statement DECLARE SUB 
    (untyped_id ShowCards) 
    ( 
      (declare_parameter_list 
        (declare_parameter TopCard%) , 
        (declare_parameter LastCard%)) )) \r\n \r\n \r\n 
  (declare_statement DECLARE FUNCTION EditString$ 
    ( 
      (declare_parameter_list 
        (declare_parameter InString$) , 
        (declare_parameter Length%) , 
        (declare_parameter NextField%)) )) \r\n 
  (declare_statement DECLARE FUNCTION FindCard% 
    ( 
      (declare_parameter_list 
        (declare_parameter TopCard%) , 
        (declare_parameter LastCard%)) )) \r\n 
  (declare_statement DECLARE FUNCTION Prompt$ 
    ( 
      (declare_parameter_list 
        (declare_parameter Msg$) , 
        (declare_parameter Row%) , 
        (declare_parameter Column%) , 
        (declare_parameter Length%)) )) \r\n 
  (declare_statement DECLARE FUNCTION SelectField% 
    ( )) \r\n \r\n \r\n \r\n \r\n 
  (statement 
    (dim_statement REDIM SHARED 
      (dim_variable 
        (untyped_id Index) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1))) )) AS 
        (type_name 
          (untyped_id Person))))) \r\n \r\n \r\n 
  (statement 
    (dim_statement DIM 
      (dim_variable 
        (untyped_id Card) AS 
        (type_name 
          (untyped_id Person))))) \r\n \r\n \r\n \r\n \r\n \r\n \r\n 
  (statement 
    (open_statement OPEN 
      (expr 
        (literal "QCARDS.DAT")) FOR 
      (open_mode RANDOM) AS # 
      (expr 
        (literal 1)) LEN = 
      (expr 
        (builtin_function LEN 
          ( 
            (expr 
              (variable_or_function_call Card)) ))))) \r\n \r\n \r\n \r\n \r\n \r\n 
  (statement 
    (assignment_statement 
      (variable_or_function_call LastCard) = 
      (expr 
        (expr 
          (variable_or_function_call LOF 
            (args_or_indices 
              ( 
                (expr 
                  (literal 1)) )))) \ 
        (expr 
          (builtin_function LEN 
            ( 
              (expr 
                (variable_or_function_call Card)) )))))) \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 
  (statement 
    (on_error_statement ON ERROR GOTO 
      (target 
        (text_label 
          (untyped_id MemoryErr))))) \r\n 
  (statement 
    (dim_statement REDIM SHARED 
      (dim_variable 
        (untyped_id Index) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (expr 
                  (variable_or_function_call LastCard)) + 
                (expr 
                  (literal 20)))) )) AS 
        (type_name 
          (untyped_id Person))))) \r\n 
  (statement 
    (on_error_statement ON ERROR GOTO 
      (target 
        (line_number 0)))) \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 
  (if_block_statement IF 
    (expr 
      (expr 
        (variable_or_function_call LastCard)) <> 
      (expr 
        (literal 0))) THEN \r\n 
    (then_block 
      (statement 
        (call_statement CALL 
          (untyped_id InitIndex) 
          ( 
            (call_argument_list 
              (call_argument LastCard)) ))) \r\n) 
    (else_block_statement ELSE 
      (else_block \r\n 
        (statement 
          (assignment_statement 
            (variable_or_function_call Card.CardNum) = 
            (expr 
              (literal 1)))) \r\n 
        (statement 
          (assignment_statement 
            (variable_or_function_call Index 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 1)) ))) = 
            (expr 
              (variable_or_function_call Card)))) \r\n 
        (statement 
          (put_io_statement PUT # 
            (expr 
              (literal 1)) , 
            (expr 
              (literal 1)) , 
            (variable_or_function_call Card))) \r\n)) 
    (end_if_statement END IF)) \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 
  (statement 
    (call_statement CALL 
      (untyped_id DrawCards))) \r\n 
  (statement 
    (assignment_statement 
      (variable_or_function_call TopCard) = 
      (expr 
        (literal 1)))) \r\n 
  (statement 
    (call_statement CALL 
      (untyped_id ShowCards) 
      ( 
        (call_argument_list 
          (call_argument TopCard) , 
          (call_argument LastCard)) ))) \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 
  (statement 
    (do_loop_statement DO 
      (block \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 
        (statement 
          (do_loop_statement DO 
            (block \r\n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Choice$) = 
                  (expr 
                    (variable_or_function_call INKEY$)))) \r\n) LOOP 
            (loop_condition WHILE 
              (expr 
                (expr 
                  (variable_or_function_call Choice$)) = 
                (expr 
                  (literal "")))))) \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 
        (if_block_statement IF 
          (expr 
            (expr 
              (builtin_function LEN 
                ( 
                  (expr 
                    (variable_or_function_call Choice$)) ))) = 
            (expr 
              (literal 1))) THEN \r\n 
          (then_block 
            (statement 
              (call_statement CALL 
                (untyped_id AsciiKey) 
                ( 
                  (call_argument_list 
                    (call_argument Choice$) , 
                    (call_argument TopCard) , 
                    (call_argument LastCard)) ))) \r\n) 
          (else_block_statement ELSE 
            (else_block \r\n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Choice$) = 
                  (expr 
                    (variable_or_function_call RIGHT$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call Choice$)) , 
                          (expr 
                            (literal 1)) )))))) \r\n 
              (statement 
                (call_statement CALL 
                  (untyped_id DirectionKey) 
                  ( 
                    (call_argument_list 
                      (call_argument Choice$) , 
                      (call_argument TopCard) , 
                      (call_argument LastCard)) ))) \r\n)) 
          (end_if_statement END IF)) \r\n \r\n \r\n \r\n \r\n 
        (statement 
          (if_inline_statement IF 
            (expr 
              (expr 
                (variable_or_function_call TopCard)) < 
              (expr 
                (literal 1))) THEN 
            (if_inline_action 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TopCard) = 
                  (expr 
                    (expr 
                      (variable_or_function_call LastCard)) + 
                    (expr 
                      (variable_or_function_call TopCard)))))))) \r\n 
        (statement 
          (if_inline_statement IF 
            (expr 
              (expr 
                (variable_or_function_call TopCard)) > 
              (expr 
                (variable_or_function_call LastCard))) THEN 
            (if_inline_action 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TopCard) = 
                  (expr 
                    (expr 
                      (variable_or_function_call TopCard)) - 
                    (expr 
                      (variable_or_function_call LastCard)))))))) \r\n 
        (statement 
          (if_inline_statement IF 
            (expr 
              (expr 
                (variable_or_function_call TopCard)) <= 
              (expr 
                (literal 0))) THEN 
            (if_inline_action 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TopCard) = 
                  (expr 
                    (literal 1))))))) \r\n 
        (statement 
          (call_statement CALL 
            (untyped_id ShowCards) 
            ( 
              (call_argument_list 
                (call_argument TopCard) , 
                (call_argument LastCard)) ))) \r\n \r\n \r\n \r\n) LOOP)) \r\n \r\n 
  (statement 
    (end_statement END)) \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 
  (label 
    (text_label 
      (untyped_id MemoryErr)) :) \r\n 
  (statement 
    (print_statement PRINT 
      (expr 
        (literal "Not enough memory. Can't read file.")))) \r\n 
  (statement 
    (end_statement END)) \r\n \r\n \r\n \r\n \r\n 
  (label 
    (text_label 
      (untyped_id CardScreen)) :) \r\n 
  (statement 
    (data_statement DATA 
      (data_item "                  ���������������������������������������Ŀ"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item "                  �                                       �"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item "               ������������������������������������������͵"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item "               �                                       �  �"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item "            ������������������������������������������͵  �"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item "            �                                       �  �  �"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item "         ������������������������������������������͵  �  �"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item "         �                                       �  �  �  �"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item "      ������������������������������������������͵  �  �  �"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item "      �                                       �  �  �  �  �"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item "   ������������������������������������������͵  �  �  ����"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item "   �                                       �  �  �  �  �"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item "������������������������������������������͵  �  �  ����"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item "� _____________________________________ �  �  �  �  �"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item "���������������������������������������͵  �  �  ����"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item "� Note: _______________________________ �  �  �  �"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item "�                                       �  �  ����"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item "� Birth: __/__/__   Phone: ___-___-____ �  �  �"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item "�                                       �  ����"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item "� Street: _____________________________ �  �"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item "�                                       ����"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item "� City: ____________ ST: __  Zip: _____ �"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item "�����������������������������������������"))) \r\n \r\n \r\n \r\n 
  (label 
    (text_label 
      (untyped_id ViewHelp)) :) \r\n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item "Select card with:"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item "      UP"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item "      DOWN"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item "      PGUP"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item "      PGDN"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item "      HOME"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item "      END"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item ""))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item ""))) \r\n \r\n \r\n \r\n 
  (label 
    (text_label 
      (untyped_id EditHelp)) :) \r\n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item "Next field:"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item "      TAB"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item "Accept card:"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item "      ENTER"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item "Edit field:"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item "      DEL     BKSP"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item "      RIGHT   LEFT"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item "      HOME    END"))) \r\n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item "      INS     ESC"))) \r\n \r\n \r\n \r\n 
  (label 
    (text_label 
      (untyped_id FieldPositions)) :) \r\n 
  (statement 
    (data_statement DATA 
      (data_item 14) , 
      (data_item 6) , 
      (data_item 37))) : \r\n 
  (statement 
    (data_statement DATA 
      (data_item 16) , 
      (data_item 12) , 
      (data_item 31))) : \r\n 
  (statement 
    (data_statement DATA 
      (data_item 18) , 
      (data_item 13) , 
      (data_item 2))) : \r\n 
  (statement 
    (data_statement DATA 
      (data_item 18) , 
      (data_item 16) , 
      (data_item 2))) : \r\n 
  (statement 
    (data_statement DATA 
      (data_item 18) , 
      (data_item 19) , 
      (data_item 2))) : \r\n 
  (statement 
    (data_statement DATA 
      (data_item 18) , 
      (data_item 31) , 
      (data_item 12))) : \r\n 
  (statement 
    (data_statement DATA 
      (data_item 20) , 
      (data_item 14) , 
      (data_item 29))) : \r\n 
  (statement 
    (data_statement DATA 
      (data_item 22) , 
      (data_item 12) , 
      (data_item 13))) : \r\n 
  (statement 
    (data_statement DATA 
      (data_item 22) , 
      (data_item 29) , 
      (data_item 2))) : \r\n 
  (statement 
    (data_statement DATA 
      (data_item 22) , 
      (data_item 38) , 
      (data_item 5))) : \r\n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0))) \r\n \r\n 
  (sub_statement SUB 
    (untyped_id Alarm) 
    (block \r\n 
      (statement 
        (for_next_statement FOR Tone = 
          (expr 
            (literal 600)) TO 
          (expr 
            (literal 2000)) STEP 
          (expr 
            (literal 40)) 
          (block \r\n 
            (statement 
              (call_statement 
                (untyped_id SOUND) 
                (call_argument_list 
                  (call_argument Tone) , 
                  (call_argument 
                    (expr 
                      (expr 
                        (variable_or_function_call Tone)) / 
                      (expr 
                        (literal 7000))))))) \r\n) NEXT Tone)) \r\n) 
    (end_sub_statement END SUB)) \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 
  (sub_statement SUB 
    (untyped_id AsciiKey) 
    ( 
      (parameter_list 
        (parameter UserChoice$) , 
        (parameter TopCard%) , 
        (parameter LastCard%)) ) 
    (block \r\n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id WorkCard) AS 
            (type_name 
              (untyped_id Person))))) \r\n \r\n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call UserChoice$)) 
          (before_first_case \r\n \r\n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal "e")))) 
            (block \r\n 
              (statement 
                (call_statement CALL 
                  (untyped_id ShowEditHelp))) \r\n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Tmp$) = 
                  (expr 
                    (variable_or_function_call Prompt$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal "Editing Card...")) , 
                          (expr 
                            (variable_or_function_call LASTROW)) , 
                          (expr 
                            (literal 1)) , 
                          (expr 
                            (literal 0)) )))))) \r\n 
              (statement 
                (call_statement CALL 
                  (untyped_id EditCard) 
                  ( 
                    (call_argument_list 
                      (call_argument Index 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call TopCard)) )))) ))) \r\n 
              (statement 
                (put_io_statement PUT # 
                  (expr 
                    (literal 1)) , 
                  (expr 
                    (variable_or_function_call Index 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call TopCard)) )) . CardNum)) , 
                  (variable_or_function_call Index 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call TopCard)) ))))) \r\n 
              (statement 
                (locate_statement LOCATE , , 
                  (expr 
                    (variable_or_function_call CURSOROFF)))) \r\n 
              (statement 
                (call_statement CALL 
                  (untyped_id ShowViewHelp))) \r\n \r\n \r\n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal "a"))) , 
              (case_expr 
                (expr 
                  (literal "c")))) 
            (block \r\n 
              (if_block_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call UserChoice$)) = 
                  (expr 
                    (literal "c"))) THEN \r\n 
                (then_block 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call WorkCard) = 
                      (expr 
                        (variable_or_function_call Index 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call TopCard)) )))))) \r\n) 
                (else_block_statement ELSE 
                  (else_block \r\n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call WorkCard.CardNum) = 
                        (expr 
                          (literal 0)))) \r\n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call WorkCard.Names) = 
                        (expr 
                          (literal "")))) \r\n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call WorkCard.Note) = 
                        (expr 
                          (literal "")))) \r\n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call WorkCard.Month) = 
                        (expr 
                          (literal 0)))) \r\n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call WorkCard.Day) = 
                        (expr 
                          (literal 0)))) \r\n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call WorkCard.Year) = 
                        (expr 
                          (literal 0)))) \r\n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call WorkCard.Phone) = 
                        (expr 
                          (literal "")))) \r\n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call WorkCard.Street) = 
                        (expr 
                          (literal "")))) \r\n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call WorkCard.City) = 
                        (expr 
                          (literal "")))) \r\n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call WorkCard.State) = 
                        (expr 
                          (literal "")))) \r\n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call WorkCard.Zip) = 
                        (expr 
                          (literal "")))) \r\n)) 
                (end_if_statement END IF)) \r\n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TopCard) = 
                  (expr 
                    (expr 
                      (variable_or_function_call LastCard)) + 
                    (expr 
                      (literal 1))))) \r\n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call LastCard) = 
                  (expr 
                    (variable_or_function_call TopCard)))) \r\n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Index 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call TopCard)) ))) = 
                  (expr 
                    (variable_or_function_call WorkCard)))) \r\n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Index 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call TopCard)) )) . CardNum) = 
                  (expr 
                    (variable_or_function_call TopCard)))) \r\n 
              (statement 
                (call_statement CALL 
                  (untyped_id ShowCards) 
                  ( 
                    (call_argument_list 
                      (call_argument TopCard) , 
                      (call_argument LastCard)) ))) \r\n 
              (statement 
                (call_statement CALL 
                  (untyped_id ShowEditHelp))) \r\n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Tmp$) = 
                  (expr 
                    (variable_or_function_call Prompt$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal "Editing Card...")) , 
                          (expr 
                            (variable_or_function_call LASTROW)) , 
                          (expr 
                            (literal 1)) , 
                          (expr 
                            (literal 0)) )))))) \r\n 
              (statement 
                (call_statement CALL 
                  (untyped_id EditCard) 
                  ( 
                    (call_argument_list 
                      (call_argument Index 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call TopCard)) )))) ))) \r\n 
              (statement 
                (put_io_statement PUT # 
                  (expr 
                    (literal 1)) , 
                  (expr 
                    (variable_or_function_call Index 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call TopCard)) )) . CardNum)) , 
                  (variable_or_function_call Index 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call TopCard)) ))))) \r\n 
              (statement 
                (locate_statement LOCATE , , 
                  (expr 
                    (variable_or_function_call CURSOROFF)))) \r\n 
              (statement 
                (call_statement CALL 
                  (untyped_id ShowViewHelp))) \r\n \r\n \r\n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal "d")))) 
            (block \r\n 
              (statement 
                (for_next_statement FOR Card = 
                  (expr 
                    (variable_or_function_call TopCard)) TO 
                  (expr 
                    (expr 
                      (variable_or_function_call LastCard)) - 
                    (expr 
                      (literal 1))) 
                  (block \r\n 
                    (statement 
                      (call_statement 
                        (untyped_id SWAP) 
                        (call_argument_list 
                          (call_argument Index 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call Card)) + 
                                  (expr 
                                    (literal 1))) ))) , 
                          (call_argument Index 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call Card)) )))))) \r\n) NEXT Card)) \r\n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call LastCard) = 
                  (expr 
                    (expr 
                      (variable_or_function_call LastCard)) - 
                    (expr 
                      (literal 1))))) \r\n \r\n \r\n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal "f")))) 
            (block \r\n 
              (statement 
                (call_statement CALL 
                  (untyped_id ShowEditHelp))) \r\n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Tmp$) = 
                  (expr 
                    (literal "Enter fields for search 
                      (blank fields are ignored)")))) \r\n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Tmp$) = 
                  (expr 
                    (variable_or_function_call Prompt$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call Tmp$)) , 
                          (expr 
                            (variable_or_function_call LASTROW)) , 
                          (expr 
                            (literal 1)) , 
                          (expr 
                            (literal 0)) )))))) \r\n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Card) = 
                  (expr 
                    (variable_or_function_call FindCard 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call TopCard)) , 
                          (expr 
                            (variable_or_function_call LastCard)) )))))) \r\n 
              (if_block_statement IF 
                (expr 
                  (variable_or_function_call Card)) THEN \r\n 
                (then_block 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call TopCard) = 
                      (expr 
                        (variable_or_function_call Card)))) \r\n) 
                (else_block_statement ELSE 
                  (else_block \r\n 
                    (statement 
                      (call_statement 
                        (untyped_id BEEP))) \r\n 
                    (statement 
                      (call_statement CALL 
                        (untyped_id ClearHelp))) \r\n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Tmp$) = 
                        (expr 
                          (literal "Can't find card. Press any key...")))) \r\n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Tmp$) = 
                        (expr 
                          (variable_or_function_call Prompt$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call Tmp$)) , 
                                (expr 
                                  (variable_or_function_call LASTROW)) , 
                                (expr 
                                  (literal 1)) , 
                                (expr 
                                  (literal 1)) )))))) \r\n)) 
                (end_if_statement END IF)) \r\n 
              (statement 
                (locate_statement LOCATE , , 
                  (expr 
                    (variable_or_function_call CURSOROFF)))) \r\n 
              (statement 
                (call_statement CALL 
                  (untyped_id ShowViewHelp))) \r\n \r\n \r\n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal "s")))) 
            (block \r\n 
              (statement 
                (call_statement CALL 
                  (untyped_id ClearHelp))) \r\n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Tmp$) = 
                  (expr 
                    (literal "TAB to desired sort field, then press ENTER")))) \r\n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Tmp$) = 
                  (expr 
                    (variable_or_function_call Prompt$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call Tmp$)) , 
                          (expr 
                            (variable_or_function_call LASTROW)) , 
                          (expr 
                            (literal 1)) , 
                          (expr 
                            (literal 0)) )))))) \r\n 
              (statement 
                (call_statement CALL 
                  (untyped_id SortIndex) 
                  ( 
                    (call_argument_list 
                      (call_argument SelectField) , 
                      (call_argument LastCard)) ))) \r\n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TopCard) = 
                  (expr 
                    (literal 1)))) \r\n 
              (statement 
                (call_statement CALL 
                  (untyped_id ShowViewHelp))) \r\n \r\n \r\n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal "p")))) 
            (block \r\n 
              (statement 
                (call_statement CALL 
                  (untyped_id PrintLabel) 
                  ( 
                    (call_argument_list 
                      (call_argument Index 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call TopCard)) )))) ))) \r\n \r\n \r\n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal "q"))) , 
              (case_expr 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call ESC)) )))))) 
            (block \r\n 
              (statement 
                (call_statement CALL 
                  (untyped_id CleanUp) 
                  ( 
                    (call_argument_list 
                      (call_argument LastCard)) ))) \r\n 
              (statement 
                (locate_statement LOCATE , , 
                  (expr 
                    (variable_or_function_call CURSORON)))) \r\n 
              (statement 
                (call_statement 
                  (untyped_id CLS))) \r\n 
              (statement 
                (end_statement END)) \r\n)) 
          (case_block 
            (case_statement CASE ELSE) 
            (block \r\n 
              (statement 
                (call_statement 
                  (untyped_id BEEP))) \r\n)) 
          (end_select_statement END SELECT))) \r\n \r\n) 
    (end_sub_statement END SUB)) \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 
  (sub_statement SUB 
    (untyped_id CleanUp) 
    ( 
      (parameter_list 
        (parameter LastCard)) ) 
    (block \r\n \r\n \r\n 
      (statement 
        (open_statement OPEN 
          (expr 
            (variable_or_function_call TMPFILE$)) FOR 
          (open_mode RANDOM) AS # 
          (expr 
            (literal 2)) LEN = 
          (expr 
            (builtin_function LEN 
              ( 
                (expr 
                  (variable_or_function_call Index 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 1)) )))) ))))) \r\n 
      (statement 
        (for_next_statement FOR Card = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call LastCard)) 
          (block \r\n 
            (statement 
              (put_io_statement PUT # 
                (expr 
                  (literal 2)) , 
                (expr 
                  (variable_or_function_call Card)) , 
                (variable_or_function_call Index 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Card)) ))))) \r\n) NEXT)) \r\n \r\n \r\n 
      (statement 
        (close_statement CLOSE)) \r\n 
      (statement 
        (call_statement 
          (untyped_id KILL) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "QCARDS.DAT")))))) \r\n 
      (statement 
        (name_statement NAME 
          (expr 
            (variable_or_function_call TMPFILE$)) AS 
          (expr 
            (literal "QCARDS.DAT")))) \r\n \r\n) 
    (end_sub_statement END SUB)) \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 
  (sub_statement SUB 
    (untyped_id ClearHelp) 
    (block \r\n \r\n \r\n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call NORMAL)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) \r\n 
      (statement 
        (for_next_statement FOR Row = 
          (expr 
            (variable_or_function_call HELPTOP)) TO 
          (expr 
            (variable_or_function_call HELPBOT)) 
          (block \r\n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call HELPLEFT)))) \r\n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call SPACE$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call HELPWID)) )))))) \r\n) NEXT)) \r\n \r\n \r\n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call LASTROW)) , 
          (expr 
            (literal 1)))) \r\n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call SPACE$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 80)) )))) ;)) \r\n \r\n) 
    (end_sub_statement END SUB)) \r\n \r\n 
  (sub_statement SUB 
    (untyped_id DirectionKey) 
    ( 
      (parameter_list 
        (parameter Choice$) , 
        (parameter TopCard%) , 
        (parameter LastCard%)) ) 
    (block \r\n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call Choice$)) 
          (before_first_case \r\n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call DOWN)) )))))) 
            (block \r\n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TopCard) = 
                  (expr 
                    (expr 
                      (variable_or_function_call TopCard)) - 
                    (expr 
                      (literal 1))))) \r\n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call UP)) )))))) 
            (block \r\n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TopCard) = 
                  (expr 
                    (expr 
                      (variable_or_function_call TopCard)) + 
                    (expr 
                      (literal 1))))) \r\n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call PGDN)) )))))) 
            (block \r\n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TopCard) = 
                  (expr 
                    (expr 
                      (variable_or_function_call TopCard)) - 
                    (expr 
                      (variable_or_function_call CARDSPERSCREEN))))) \r\n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call PGUP)) )))))) 
            (block \r\n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TopCard) = 
                  (expr 
                    (expr 
                      (variable_or_function_call TopCard)) + 
                    (expr 
                      (variable_or_function_call CARDSPERSCREEN))))) \r\n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call HOME)) )))))) 
            (block \r\n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TopCard) = 
                  (expr 
                    (variable_or_function_call LastCard)))) \r\n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call ENDK)) )))))) 
            (block \r\n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TopCard) = 
                  (expr 
                    (literal 1)))) \r\n)) 
          (case_block 
            (case_statement CASE ELSE) 
            (block \r\n 
              (statement 
                (call_statement CALL 
                  (untyped_id Alarm))) \r\n)) 
          (end_select_statement END SELECT))) \r\n) 
    (end_sub_statement END SUB)) \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 
  (sub_statement SUB 
    (untyped_id DrawCards) 
    (block \r\n \r\n \r\n 
      (statement 
        (width_statement WIDTH 
          (expr 
            (literal 80)) , 
          (expr 
            (variable_or_function_call LASTROW)))) \r\n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call NORMAL)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) \r\n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \r\n 
      (statement 
        (locate_statement LOCATE , , 
          (expr 
            (variable_or_function_call CURSOROFF)) , 
          (expr 
            (literal 0)) , 
          (expr 
            (literal 7)))) \r\n \r\n \r\n 
      (statement 
        (call_statement 
          (untyped_id RESTORE) 
          (call_argument_list 
            (call_argument CardScreen)))) \r\n 
      (statement 
        (for_next_statement FOR Row = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 23)) 
          (block \r\n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (literal 4)))) \r\n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Tmp$))) \r\n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call Tmp$)) ;)) \r\n) NEXT)) \r\n \r\n \r\n 
      (statement 
        (call_statement CALL 
          (untyped_id ShowViewHelp))) \r\n \r\n) 
    (end_sub_statement END SUB)) \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 
  (sub_statement SUB 
    (untyped_id EditCard) 
    ( 
      (parameter_list 
        (parameter 
          (untyped_id Card) AS 
          (type_name_for_parameter 
            (untyped_id Person)))) ) 
    (block \r\n \r\n \r\n \r\n \r\n 
      (statement 
        (assignment_statement 
          (variable_or_function_call NextFlag) = 
          (expr 
            (variable_or_function_call TRUE)))) \r\n 
      (statement 
        (do_loop_statement DO 
          (block \r\n \r\n 
            (statement 
              (call_statement 
                (untyped_id RESTORE) 
                (call_argument_list 
                  (call_argument FieldPositions)))) \r\n \r\n \r\n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Row) , 
                (variable_or_function_call Column) , 
                (variable_or_function_call Length))) \r\n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \r\n \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Card.Names) = 
                (expr 
                  (variable_or_function_call EditString 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call RTRIM$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call Card.Names)) )))) , 
                        (expr 
                          (variable_or_function_call Length)) , 
                        (expr 
                          (variable_or_function_call NextFlag)) )))))) \r\n \r\n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call NextFlag)) = 
                  (expr 
                    (variable_or_function_call FALSE))) THEN 
                (if_inline_action 
                  (statement 
                    (exit_statement EXIT SUB))))) \r\n \r\n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Row) , 
                (variable_or_function_call Column) , 
                (variable_or_function_call Length))) \r\n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Card.Note) = 
                (expr 
                  (variable_or_function_call EditString 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call RTRIM$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call Card.Note)) )))) , 
                        (expr 
                          (variable_or_function_call Length)) , 
                        (expr 
                          (variable_or_function_call NextFlag)) )))))) \r\n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call NextFlag)) = 
                  (expr 
                    (variable_or_function_call FALSE))) THEN 
                (if_inline_action 
                  (statement 
                    (exit_statement EXIT SUB))))) \r\n \r\n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Row) , 
                (variable_or_function_call Column) , 
                (variable_or_function_call Length))) \r\n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \r\n \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Tmp$) = 
                (expr 
                  (variable_or_function_call LTRIM$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call STR$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call Card.Month)) )))) )))))) \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Tmp$) = 
                (expr 
                  (variable_or_function_call EditString 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call Tmp$)) , 
                        (expr 
                          (variable_or_function_call Length)) , 
                        (expr 
                          (variable_or_function_call NextFlag)) )))))) \r\n \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Card.Month) = 
                (expr 
                  (variable_or_function_call VAL 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call Tmp$)) )))))) \r\n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \r\n 
            (statement 
              (print_using_statement PRINT USING 
                (expr 
                  (literal "##_/")) ; 
                (expr 
                  (variable_or_function_call Card.Month)) ;)) \r\n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call NextFlag)) = 
                  (expr 
                    (variable_or_function_call FALSE))) THEN 
                (if_inline_action 
                  (statement 
                    (exit_statement EXIT SUB))))) \r\n \r\n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Row) , 
                (variable_or_function_call Column) , 
                (variable_or_function_call Length))) \r\n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Tmp$) = 
                (expr 
                  (variable_or_function_call LTRIM$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call STR$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call Card.Day)) )))) )))))) \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Tmp$) = 
                (expr 
                  (variable_or_function_call EditString 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call Tmp$)) , 
                        (expr 
                          (variable_or_function_call Length)) , 
                        (expr 
                          (variable_or_function_call NextFlag)) )))))) \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Card.Day) = 
                (expr 
                  (variable_or_function_call VAL 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call Tmp$)) )))))) \r\n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \r\n 
            (statement 
              (print_using_statement PRINT USING 
                (expr 
                  (literal "##_/")) ; 
                (expr 
                  (variable_or_function_call Card.Day)) ;)) \r\n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call NextFlag)) = 
                  (expr 
                    (variable_or_function_call FALSE))) THEN 
                (if_inline_action 
                  (statement 
                    (exit_statement EXIT SUB))))) \r\n \r\n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Row) , 
                (variable_or_function_call Column) , 
                (variable_or_function_call Length))) \r\n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Tmp$) = 
                (expr 
                  (variable_or_function_call LTRIM$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call STR$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call Card.Year)) )))) )))))) \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Tmp$) = 
                (expr 
                  (variable_or_function_call EditString 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call Tmp$)) , 
                        (expr 
                          (variable_or_function_call Length)) , 
                        (expr 
                          (variable_or_function_call NextFlag)) )))))) \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Card.Year) = 
                (expr 
                  (variable_or_function_call VAL 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call Tmp$)) )))))) \r\n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \r\n 
            (statement 
              (print_using_statement PRINT USING 
                (expr 
                  (literal "##")) ; 
                (expr 
                  (variable_or_function_call Card.Year)) ;)) \r\n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call NextFlag)) = 
                  (expr 
                    (variable_or_function_call FALSE))) THEN 
                (if_inline_action 
                  (statement 
                    (exit_statement EXIT SUB))))) \r\n \r\n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Row) , 
                (variable_or_function_call Column) , 
                (variable_or_function_call Length))) \r\n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Card.Phone) = 
                (expr 
                  (variable_or_function_call EditString 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call RTRIM$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call Card.Phone)) )))) , 
                        (expr 
                          (variable_or_function_call Length)) , 
                        (expr 
                          (variable_or_function_call NextFlag)) )))))) \r\n 
            (statement 
              (rset_statement RSET 
                (variable_or_function_call Card.Phone) = 
                (expr 
                  (variable_or_function_call Card.Phone)))) \r\n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call NextFlag)) = 
                  (expr 
                    (variable_or_function_call FALSE))) THEN 
                (if_inline_action 
                  (statement 
                    (exit_statement EXIT SUB))))) \r\n \r\n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Row) , 
                (variable_or_function_call Column) , 
                (variable_or_function_call Length))) \r\n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Card.Street) = 
                (expr 
                  (variable_or_function_call EditString 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call RTRIM$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call Card.Street)) )))) , 
                        (expr 
                          (variable_or_function_call Length)) , 
                        (expr 
                          (variable_or_function_call NextFlag)) )))))) \r\n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call NextFlag)) = 
                  (expr 
                    (variable_or_function_call FALSE))) THEN 
                (if_inline_action 
                  (statement 
                    (exit_statement EXIT SUB))))) \r\n \r\n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Row) , 
                (variable_or_function_call Column) , 
                (variable_or_function_call Length))) \r\n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Card.City) = 
                (expr 
                  (variable_or_function_call EditString 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call RTRIM$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call Card.City)) )))) , 
                        (expr 
                          (variable_or_function_call Length)) , 
                        (expr 
                          (variable_or_function_call NextFlag)) )))))) \r\n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call NextFlag)) = 
                  (expr 
                    (variable_or_function_call FALSE))) THEN 
                (if_inline_action 
                  (statement 
                    (exit_statement EXIT SUB))))) \r\n \r\n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Row) , 
                (variable_or_function_call Column) , 
                (variable_or_function_call Length))) \r\n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Card.State) = 
                (expr 
                  (variable_or_function_call EditString 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call RTRIM$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call Card.State)) )))) , 
                        (expr 
                          (variable_or_function_call Length)) , 
                        (expr 
                          (variable_or_function_call NextFlag)) )))))) \r\n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call NextFlag)) = 
                  (expr 
                    (variable_or_function_call FALSE))) THEN 
                (if_inline_action 
                  (statement 
                    (exit_statement EXIT SUB))))) \r\n \r\n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Row) , 
                (variable_or_function_call Column) , 
                (variable_or_function_call Length))) \r\n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Card.Zip) = 
                (expr 
                  (variable_or_function_call EditString 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call RTRIM$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call Card.Zip)) )))) , 
                        (expr 
                          (variable_or_function_call Length)) , 
                        (expr 
                          (variable_or_function_call NextFlag)) )))))) \r\n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call NextFlag)) = 
                  (expr 
                    (variable_or_function_call FALSE))) THEN 
                (if_inline_action 
                  (statement 
                    (exit_statement EXIT SUB))))) \r\n \r\n) LOOP)) \r\n \r\n) 
    (end_sub_statement END SUB)) \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 
  (function_statement FUNCTION EditString$ 
    ( 
      (parameter_list 
        (parameter InString$) , 
        (parameter Length) , 
        (parameter NextField)) ) 
    (block \r\n 
      (statement 
        (static_statement STATIC 
          (scope_variable Insert))) \r\n \r\n \r\n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Work$) = 
          (expr 
            (variable_or_function_call InString$)))) \r\n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Row) = 
          (expr 
            (variable_or_function_call CSRLIN)))) : 
      (statement 
        (assignment_statement 
          (variable_or_function_call Column) = 
          (expr 
            (variable_or_function_call POS 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 0)) )))))) \r\n 
      (statement 
        (assignment_statement 
          (variable_or_function_call FirstTime) = 
          (expr 
            (variable_or_function_call TRUE)))) \r\n 
      (statement 
        (assignment_statement 
          (variable_or_function_call P) = 
          (expr 
            (builtin_function LEN 
              ( 
                (expr 
                  (variable_or_function_call Work$)) ))))) : 
      (statement 
        (assignment_statement 
          (variable_or_function_call MaxP) = 
          (expr 
            (variable_or_function_call P)))) \r\n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call SPACE$ 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call Length)) )))) ;)) \r\n \r\n \r\n \r\n \r\n 
      (if_block_statement IF 
        (expr 
          (variable_or_function_call Insert)) THEN \r\n 
        (then_block 
          (statement 
            (locate_statement LOCATE 
              (expr 
                (variable_or_function_call Row)) , 
              (expr 
                (variable_or_function_call Column)) , 
              (expr 
                (variable_or_function_call CURSORON)) , 
              (expr 
                (literal 6)) , 
              (expr 
                (literal 7)))) \r\n) 
        (else_block_statement ELSE 
          (else_block \r\n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)) , 
                (expr 
                  (variable_or_function_call CURSORON)) , 
                (expr 
                  (literal 0)) , 
                (expr 
                  (literal 7)))) \r\n)) 
        (end_if_statement END IF)) \r\n \r\n \r\n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call BACKGROUND)) , 
          (expr 
            (variable_or_function_call NORMAL)))) \r\n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call Work$)) ;)) \r\n \r\n \r\n 
      (statement 
        (do_loop_statement DO 
          (block \r\n \r\n \r\n \r\n 
            (statement 
              (do_loop_statement DO 
                (block \r\n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Choice$) = 
                      (expr 
                        (variable_or_function_call INKEY$)))) \r\n) LOOP 
                (loop_condition WHILE 
                  (expr 
                    (expr 
                      (variable_or_function_call Choice$)) = 
                    (expr 
                      (literal "")))))) \r\n \r\n \r\n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (builtin_function LEN 
                    ( 
                      (expr 
                        (variable_or_function_call Choice$)) ))) = 
                (expr 
                  (literal 2))) THEN \r\n 
              (then_block 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Choice$) = 
                    (expr 
                      (variable_or_function_call RIGHT$ 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call Choice$)) , 
                            (expr 
                              (literal 1)) )))))) \r\n 
                (statement 
                  (select_case_statement SELECT CASE 
                    (expr 
                      (variable_or_function_call Choice$)) 
                    (before_first_case \r\n \r\n \r\n) 
                    (case_block 
                      (case_statement CASE 
                        (case_expr 
                          (expr 
                            (variable_or_function_call CHR$ 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call LEFT)) )))))) 
                      (block \r\n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Choice$) = 
                            (expr 
                              (variable_or_function_call CHR$ 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call CTRLS)) )))))) \r\n)) 
                    (case_block 
                      (case_statement CASE 
                        (case_expr 
                          (expr 
                            (variable_or_function_call CHR$ 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call RIGHT)) )))))) 
                      (block \r\n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Choice$) = 
                            (expr 
                              (variable_or_function_call CHR$ 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call CTRLD)) )))))) \r\n)) 
                    (case_block 
                      (case_statement CASE 
                        (case_expr 
                          (expr 
                            (variable_or_function_call CHR$ 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call INS)) )))))) 
                      (block \r\n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Choice$) = 
                            (expr 
                              (variable_or_function_call CHR$ 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call CTRLV)) )))))) \r\n)) 
                    (case_block 
                      (case_statement CASE 
                        (case_expr 
                          (expr 
                            (variable_or_function_call CHR$ 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call DEL)) )))))) 
                      (block \r\n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Choice$) = 
                            (expr 
                              (variable_or_function_call CHR$ 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call CTRLG)) )))))) \r\n \r\n \r\n \r\n)) 
                    (case_block 
                      (case_statement CASE 
                        (case_expr 
                          (expr 
                            (variable_or_function_call CHR$ 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call HOME)) )))))) 
                      (block \r\n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call P) = 
                            (expr 
                              (literal 0)))) \r\n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Choice$) = 
                            (expr 
                              (variable_or_function_call CHR$ 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call NULL)) )))))) \r\n)) 
                    (case_block 
                      (case_statement CASE 
                        (case_expr 
                          (expr 
                            (variable_or_function_call CHR$ 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call ENDK)) )))))) 
                      (block \r\n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call P) = 
                            (expr 
                              (variable_or_function_call MaxP)))) \r\n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Choice$) = 
                            (expr 
                              (variable_or_function_call CHR$ 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call NULL)) )))))) \r\n \r\n \r\n)) 
                    (case_block 
                      (case_statement CASE ELSE) 
                      (block \r\n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Choice$) = 
                            (expr 
                              (variable_or_function_call CHR$ 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (literal 1)) )))))) \r\n)) 
                    (end_select_statement END SELECT))) \r\n) 
              (end_if_statement END IF)) \r\n \r\n \r\n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call ASC 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call Choice$)) )))) 
                (before_first_case \r\n \r\n \r\n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call NULL)))) 
                  (block \r\n \r\n \r\n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call ENTER)))) 
                  (block \r\n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call NextField) = 
                        (expr 
                          (variable_or_function_call FALSE)))) \r\n 
                    (statement 
                      (exit_statement EXIT DO)) \r\n \r\n \r\n \r\n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call TABKEY)))) 
                  (block \r\n 
                    (if_block_statement IF 
                      (expr 
                        (variable_or_function_call NextField)) THEN \r\n 
                      (then_block 
                        (statement 
                          (exit_statement EXIT DO)) \r\n) 
                      (else_block_statement ELSE 
                        (else_block \r\n 
                          (statement 
                            (call_statement 
                              (untyped_id BEEP))) \r\n)) 
                      (end_if_statement END IF)) \r\n \r\n \r\n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call ESC)))) 
                  (block \r\n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Work$) = 
                        (expr 
                          (variable_or_function_call InString$)))) \r\n 
                    (statement 
                      (locate_statement LOCATE 
                        (expr 
                          (variable_or_function_call Row)) , 
                        (expr 
                          (variable_or_function_call Column)) , 
                        (expr 
                          (variable_or_function_call CURSOROFF)))) \r\n 
                    (statement 
                      (print_statement PRINT 
                        (expr 
                          (variable_or_function_call SPACE$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call MaxP)) )))))) \r\n 
                    (statement 
                      (exit_statement EXIT DO)) \r\n \r\n \r\n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call CTRLS)))) 
                  (block \r\n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call P)) > 
                        (expr 
                          (literal 0))) THEN \r\n 
                      (then_block 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call P) = 
                            (expr 
                              (expr 
                                (variable_or_function_call P)) - 
                              (expr 
                                (literal 1))))) \r\n 
                        (statement 
                          (locate_statement LOCATE , 
                            (expr 
                              (expr 
                                (variable_or_function_call P)) + 
                              (expr 
                                (variable_or_function_call Column))))) \r\n) 
                      (else_block_statement ELSE 
                        (else_block \r\n 
                          (statement 
                            (call_statement 
                              (untyped_id BEEP))) \r\n)) 
                      (end_if_statement END IF)) \r\n \r\n \r\n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call CTRLD)))) 
                  (block \r\n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call P)) < 
                        (expr 
                          (variable_or_function_call MaxP))) THEN \r\n 
                      (then_block 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call P) = 
                            (expr 
                              (expr 
                                (variable_or_function_call P)) + 
                              (expr 
                                (literal 1))))) \r\n 
                        (statement 
                          (locate_statement LOCATE , 
                            (expr 
                              (expr 
                                (variable_or_function_call P)) + 
                              (expr 
                                (variable_or_function_call Column))))) \r\n) 
                      (else_block_statement ELSE 
                        (else_block \r\n 
                          (statement 
                            (call_statement 
                              (untyped_id BEEP))) \r\n)) 
                      (end_if_statement END IF)) \r\n \r\n \r\n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call CTRLG)))) 
                  (block \r\n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call P)) < 
                        (expr 
                          (variable_or_function_call MaxP))) THEN \r\n 
                      (then_block 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Work$) = 
                            (expr 
                              (expr 
                                (variable_or_function_call LEFT$ 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call Work$)) , 
                                      (expr 
                                        (variable_or_function_call P)) )))) + 
                              (expr 
                                (variable_or_function_call RIGHT$ 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call Work$)) , 
                                      (expr 
                                        (expr 
                                          (expr 
                                            (variable_or_function_call MaxP)) - 
                                          (expr 
                                            (variable_or_function_call P))) - 
                                        (expr 
                                          (literal 1))) ))))))) \r\n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call MaxP) = 
                            (expr 
                              (expr 
                                (variable_or_function_call MaxP)) - 
                              (expr 
                                (literal 1))))) \r\n) 
                      (else_block_statement ELSE 
                        (else_block \r\n 
                          (statement 
                            (call_statement 
                              (untyped_id BEEP))) \r\n)) 
                      (end_if_statement END IF)) \r\n \r\n \r\n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call CTRLH))) , 
                    (case_expr 
                      (expr 
                        (literal 127)))) 
                  (block \r\n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call P)) > 
                        (expr 
                          (literal 0))) THEN \r\n 
                      (then_block 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Work$) = 
                            (expr 
                              (expr 
                                (variable_or_function_call LEFT$ 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call Work$)) , 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call P)) - 
                                        (expr 
                                          (literal 1))) )))) + 
                              (expr 
                                (variable_or_function_call RIGHT$ 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call Work$)) , 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call MaxP)) - 
                                        (expr 
                                          (variable_or_function_call P))) ))))))) \r\n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call P) = 
                            (expr 
                              (expr 
                                (variable_or_function_call P)) - 
                              (expr 
                                (literal 1))))) \r\n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call MaxP) = 
                            (expr 
                              (expr 
                                (variable_or_function_call MaxP)) - 
                              (expr 
                                (literal 1))))) \r\n) 
                      (end_if_statement END IF)) \r\n \r\n \r\n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call CTRLV)))) 
                  (block \r\n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Insert) = 
                        (expr NOT 
                          (expr 
                            (variable_or_function_call Insert))))) \r\n 
                    (if_block_statement IF 
                      (expr 
                        (variable_or_function_call Insert)) THEN \r\n 
                      (then_block 
                        (statement 
                          (locate_statement LOCATE , , , 
                            (expr 
                              (literal 6)) , 
                            (expr 
                              (literal 7)))) \r\n) 
                      (else_block_statement ELSE 
                        (else_block \r\n 
                          (statement 
                            (locate_statement LOCATE , , , 
                              (expr 
                                (literal 0)) , 
                              (expr 
                                (literal 7)))) \r\n)) 
                      (end_if_statement END IF)) \r\n \r\n \r\n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr IS >= 
                      (expr 
                        (variable_or_function_call SPACE)))) 
                  (block \r\n \r\n \r\n \r\n 
                    (if_block_statement IF 
                      (expr 
                        (variable_or_function_call FirstTime)) THEN \r\n 
                      (then_block 
                        (statement 
                          (locate_statement LOCATE , 
                            (expr 
                              (variable_or_function_call Column)))) \r\n 
                        (statement 
                          (color_statement COLOR 
                            (expr 
                              (variable_or_function_call NORMAL)) , 
                            (expr 
                              (variable_or_function_call BACKGROUND)))) \r\n 
                        (statement 
                          (print_statement PRINT 
                            (expr 
                              (variable_or_function_call SPACE$ 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call MaxP)) )))) ;)) \r\n 
                        (statement 
                          (locate_statement LOCATE , 
                            (expr 
                              (variable_or_function_call Column)))) \r\n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call P) = 
                            (expr 
                              (literal 0)))) : 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call MaxP) = 
                            (expr 
                              (variable_or_function_call P)))) \r\n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Work$) = 
                            (expr 
                              (literal "")))) \r\n) 
                      (end_if_statement END IF)) \r\n \r\n \r\n 
                    (if_block_statement IF 
                      (expr 
                        (variable_or_function_call Insert)) THEN \r\n 
                      (then_block 
                        (if_block_statement IF 
                          (expr 
                            (expr 
                              (variable_or_function_call MaxP)) < 
                            (expr 
                              (variable_or_function_call Length))) THEN \r\n 
                          (then_block 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call Work$) = 
                                (expr 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call LEFT$ 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call Work$)) , 
                                            (expr 
                                              (variable_or_function_call P)) )))) + 
                                    (expr 
                                      (variable_or_function_call Choice$))) + 
                                  (expr 
                                    (variable_or_function_call RIGHT$ 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call Work$)) , 
                                          (expr 
                                            (expr 
                                              (variable_or_function_call MaxP)) - 
                                            (expr 
                                              (variable_or_function_call P))) ))))))) \r\n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call MaxP) = 
                                (expr 
                                  (expr 
                                    (variable_or_function_call MaxP)) + 
                                  (expr 
                                    (literal 1))))) \r\n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call P) = 
                                (expr 
                                  (expr 
                                    (variable_or_function_call P)) + 
                                  (expr 
                                    (literal 1))))) \r\n) 
                          (else_block_statement ELSE 
                            (else_block \r\n 
                              (statement 
                                (call_statement 
                                  (untyped_id BEEP))) \r\n)) 
                          (end_if_statement END IF)) \r\n \r\n) 
                      (else_block_statement ELSE 
                        (else_block \r\n \r\n \r\n 
                          (if_block_statement IF 
                            (expr 
                              (expr 
                                (variable_or_function_call P)) = 
                              (expr 
                                (variable_or_function_call MaxP))) THEN \r\n 
                            (then_block 
                              (if_block_statement IF 
                                (expr 
                                  (expr 
                                    (variable_or_function_call MaxP)) < 
                                  (expr 
                                    (variable_or_function_call Length))) THEN \r\n 
                                (then_block 
                                  (statement 
                                    (assignment_statement 
                                      (variable_or_function_call Work$) = 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call Work$)) + 
                                        (expr 
                                          (variable_or_function_call Choice$))))) \r\n 
                                  (statement 
                                    (assignment_statement 
                                      (variable_or_function_call MaxP) = 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call MaxP)) + 
                                        (expr 
                                          (literal 1))))) \r\n 
                                  (statement 
                                    (assignment_statement 
                                      (variable_or_function_call P) = 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call P)) + 
                                        (expr 
                                          (literal 1))))) \r\n) 
                                (else_block_statement ELSE 
                                  (else_block \r\n 
                                    (statement 
                                      (call_statement 
                                        (untyped_id BEEP))) \r\n)) 
                                (end_if_statement END IF)) \r\n \r\n \r\n) 
                            (else_block_statement ELSE 
                              (else_block \r\n 
                                (statement 
                                  (mid_statement MID$ 
                                    ( 
                                      (variable_or_function_call Work$) , 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call P)) + 
                                        (expr 
                                          (literal 1))) , 
                                      (expr 
                                        (literal 1)) ) = 
                                    (expr 
                                      (variable_or_function_call Choice$)))) \r\n 
                                (statement 
                                  (assignment_statement 
                                    (variable_or_function_call P) = 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call P)) + 
                                      (expr 
                                        (literal 1))))) \r\n)) 
                            (end_if_statement END IF)) \r\n)) 
                      (end_if_statement END IF)) \r\n \r\n \r\n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \r\n 
                    (statement 
                      (call_statement 
                        (untyped_id BEEP))) \r\n)) 
                (end_select_statement END SELECT))) \r\n \r\n \r\n 
            (statement 
              (color_statement COLOR 
                (expr 
                  (variable_or_function_call NORMAL)) , 
                (expr 
                  (variable_or_function_call BACKGROUND)))) \r\n 
            (statement 
              (locate_statement LOCATE , 
                (expr 
                  (variable_or_function_call Column)) , 
                (expr 
                  (variable_or_function_call CURSOROFF)))) \r\n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (expr 
                    (variable_or_function_call Work$)) + 
                  (expr 
                    (literal " "))) ;)) \r\n 
            (statement 
              (locate_statement LOCATE , 
                (expr 
                  (expr 
                    (variable_or_function_call Column)) + 
                  (expr 
                    (variable_or_function_call P))) , 
                (expr 
                  (variable_or_function_call CURSORON)))) \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call FirstTime) = 
                (expr 
                  (variable_or_function_call FALSE)))) \r\n \r\n) LOOP)) \r\n \r\n \r\n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call NORMAL)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) \r\n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)) , 
          (expr 
            (variable_or_function_call CURSOROFF)))) \r\n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call Work$)) ;)) \r\n 
      (statement 
        (assignment_statement 
          (variable_or_function_call EditString$) = 
          (expr 
            (variable_or_function_call Work$)))) \r\n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \r\n \r\n) 
    (end_function_statement END FUNCTION)) \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 
  (function_statement FUNCTION FindCard% 
    ( 
      (parameter_list 
        (parameter TopCard%) , 
        (parameter LastCard%)) ) 
    (block \r\n \r\n 
      (statement 
        (static_statement STATIC 
          (scope_variable 
            (untyped_id TmpCard) AS 
            (type_name 
              (untyped_id Person))) , 
          (scope_variable NotFirst))) \r\n \r\n \r\n \r\n \r\n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call NotFirst)) = 
          (expr 
            (variable_or_function_call FALSE))) THEN \r\n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call TmpCard.Names) = 
              (expr 
                (literal "")))) \r\n 
          (statement 
            (assignment_statement 
              (variable_or_function_call TmpCard.Note) = 
              (expr 
                (literal "")))) \r\n 
          (statement 
            (assignment_statement 
              (variable_or_function_call TmpCard.Phone) = 
              (expr 
                (literal "")))) \r\n 
          (statement 
            (assignment_statement 
              (variable_or_function_call TmpCard.Street) = 
              (expr 
                (literal "")))) \r\n 
          (statement 
            (assignment_statement 
              (variable_or_function_call TmpCard.City) = 
              (expr 
                (literal "")))) \r\n 
          (statement 
            (assignment_statement 
              (variable_or_function_call TmpCard.State) = 
              (expr 
                (literal "")))) \r\n 
          (statement 
            (assignment_statement 
              (variable_or_function_call TmpCard.Zip) = 
              (expr 
                (literal "")))) \r\n 
          (statement 
            (assignment_statement 
              (variable_or_function_call NotFirst) = 
              (expr 
                (variable_or_function_call TRUE)))) \r\n) 
        (end_if_statement END IF)) \r\n \r\n \r\n \r\n 
      (statement 
        (call_statement CALL 
          (untyped_id ShowTopCard) 
          ( 
            (call_argument_list 
              (call_argument TmpCard)) ))) \r\n 
      (statement 
        (call_statement CALL 
          (untyped_id EditCard) 
          ( 
            (call_argument_list 
              (call_argument TmpCard)) ))) \r\n \r\n \r\n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Card) = 
          (expr 
            (variable_or_function_call TopCard)))) \r\n 
      (statement 
        (do_loop_statement DO 
          (block \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Card) = 
                (expr 
                  (expr 
                    (variable_or_function_call Card)) + 
                  (expr 
                    (literal 1))))) \r\n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call Card)) > 
                  (expr 
                    (variable_or_function_call LastCard))) THEN 
                (if_inline_action 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Card) = 
                      (expr 
                        (literal 1))))))) \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Found) = 
                (expr 
                  (literal 0)))) \r\n \r\n \r\n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call RTRIM$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call UCASE$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call TmpCard.Names)) )))) )))) 
                (before_first_case \r\n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal ""))) , 
                    (case_expr 
                      (expr 
                        (variable_or_function_call RTRIM$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call UCASE$ 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call Index 
                                          (args_or_indices 
                                            ( 
                                              (expr 
                                                (variable_or_function_call Card)) )) . Names)) )))) )))))) 
                  (block \r\n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Found) = 
                        (expr 
                          (expr 
                            (variable_or_function_call Found)) + 
                          (expr 
                            (literal 1))))) \r\n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \r\n)) 
                (end_select_statement END SELECT))) \r\n \r\n \r\n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call RTRIM$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call UCASE$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call TmpCard.Note)) )))) )))) 
                (before_first_case \r\n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal ""))) , 
                    (case_expr 
                      (expr 
                        (variable_or_function_call RTRIM$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call UCASE$ 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call Index 
                                          (args_or_indices 
                                            ( 
                                              (expr 
                                                (variable_or_function_call Card)) )) . Note)) )))) )))))) 
                  (block \r\n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Found) = 
                        (expr 
                          (expr 
                            (variable_or_function_call Found)) + 
                          (expr 
                            (literal 1))))) \r\n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \r\n)) 
                (end_select_statement END SELECT))) \r\n \r\n \r\n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call TmpCard.Month)) 
                (before_first_case \r\n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal 0))) , 
                    (case_expr 
                      (expr 
                        (variable_or_function_call Index 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call Card)) )) . Month)))) 
                  (block \r\n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Found) = 
                        (expr 
                          (expr 
                            (variable_or_function_call Found)) + 
                          (expr 
                            (literal 1))))) \r\n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \r\n)) 
                (end_select_statement END SELECT))) \r\n \r\n \r\n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call TmpCard.Day)) 
                (before_first_case \r\n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal 0))) , 
                    (case_expr 
                      (expr 
                        (variable_or_function_call Index 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call Card)) )) . Day)))) 
                  (block \r\n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Found) = 
                        (expr 
                          (expr 
                            (variable_or_function_call Found)) + 
                          (expr 
                            (literal 1))))) \r\n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \r\n)) 
                (end_select_statement END SELECT))) \r\n \r\n \r\n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call TmpCard.Year)) 
                (before_first_case \r\n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal 0))) , 
                    (case_expr 
                      (expr 
                        (variable_or_function_call Index 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call Card)) )) . Year)))) 
                  (block \r\n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Found) = 
                        (expr 
                          (expr 
                            (variable_or_function_call Found)) + 
                          (expr 
                            (literal 1))))) \r\n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \r\n)) 
                (end_select_statement END SELECT))) \r\n \r\n \r\n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call RTRIM$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call UCASE$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call TmpCard.Phone)) )))) )))) 
                (before_first_case \r\n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal ""))) , 
                    (case_expr 
                      (expr 
                        (variable_or_function_call RTRIM$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call UCASE$ 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call Index 
                                          (args_or_indices 
                                            ( 
                                              (expr 
                                                (variable_or_function_call Card)) )) . Phone)) )))) )))))) 
                  (block \r\n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Found) = 
                        (expr 
                          (expr 
                            (variable_or_function_call Found)) + 
                          (expr 
                            (literal 1))))) \r\n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \r\n)) 
                (end_select_statement END SELECT))) \r\n \r\n \r\n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call RTRIM$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call UCASE$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call TmpCard.Street)) )))) )))) 
                (before_first_case \r\n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal ""))) , 
                    (case_expr 
                      (expr 
                        (variable_or_function_call RTRIM$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call UCASE$ 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call Index 
                                          (args_or_indices 
                                            ( 
                                              (expr 
                                                (variable_or_function_call Card)) )) . Street)) )))) )))))) 
                  (block \r\n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Found) = 
                        (expr 
                          (expr 
                            (variable_or_function_call Found)) + 
                          (expr 
                            (literal 1))))) \r\n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \r\n)) 
                (end_select_statement END SELECT))) \r\n \r\n \r\n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call RTRIM$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call UCASE$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call TmpCard.City)) )))) )))) 
                (before_first_case \r\n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal ""))) , 
                    (case_expr 
                      (expr 
                        (variable_or_function_call RTRIM$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call UCASE$ 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call Index 
                                          (args_or_indices 
                                            ( 
                                              (expr 
                                                (variable_or_function_call Card)) )) . City)) )))) )))))) 
                  (block \r\n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Found) = 
                        (expr 
                          (expr 
                            (variable_or_function_call Found)) + 
                          (expr 
                            (literal 1))))) \r\n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \r\n)) 
                (end_select_statement END SELECT))) \r\n \r\n \r\n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call RTRIM$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call UCASE$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call TmpCard.State)) )))) )))) 
                (before_first_case \r\n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal ""))) , 
                    (case_expr 
                      (expr 
                        (variable_or_function_call RTRIM$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call UCASE$ 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call Index 
                                          (args_or_indices 
                                            ( 
                                              (expr 
                                                (variable_or_function_call Card)) )) . State)) )))) )))))) 
                  (block \r\n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Found) = 
                        (expr 
                          (expr 
                            (variable_or_function_call Found)) + 
                          (expr 
                            (literal 1))))) \r\n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \r\n)) 
                (end_select_statement END SELECT))) \r\n \r\n \r\n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call TmpCard.Zip)) 
                (before_first_case \r\n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal ""))) , 
                    (case_expr 
                      (expr 
                        (variable_or_function_call RTRIM$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call UCASE$ 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call Index 
                                          (args_or_indices 
                                            ( 
                                              (expr 
                                                (variable_or_function_call Card)) )) . Zip)) )))) )))))) 
                  (block \r\n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Found) = 
                        (expr 
                          (expr 
                            (variable_or_function_call Found)) + 
                          (expr 
                            (literal 1))))) \r\n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \r\n)) 
                (end_select_statement END SELECT))) \r\n \r\n \r\n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call Found)) = 
                (expr 
                  (expr 
                    (variable_or_function_call NFIELDS)) - 
                  (expr 
                    (literal 1)))) THEN \r\n 
              (then_block 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call FindCard%) = 
                    (expr 
                      (variable_or_function_call Card)))) \r\n 
                (statement 
                  (exit_statement EXIT FUNCTION)) \r\n) 
              (end_if_statement END IF)) \r\n \r\n) LOOP 
          (loop_condition UNTIL 
            (expr 
              (expr 
                (variable_or_function_call Card)) = 
              (expr 
                (variable_or_function_call TopCard)))))) \r\n \r\n \r\n 
      (statement 
        (assignment_statement 
          (variable_or_function_call FindCard%) = 
          (expr 
            (variable_or_function_call FALSE)))) \r\n \r\n) 
    (end_function_statement END FUNCTION)) \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 
  (sub_statement SUB 
    (untyped_id InitIndex) 
    ( 
      (parameter_list 
        (parameter LastCard)) ) STATIC 
    (block \r\n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id Card) AS 
            (type_name 
              (untyped_id Person))))) \r\n \r\n 
      (statement 
        (for_next_statement FOR Record = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call LastCard)) 
          (block \r\n \r\n \r\n 
            (statement 
              (get_io_statement GET # 
                (expr 
                  (literal 1)) , 
                (expr 
                  (variable_or_function_call Record)) , 
                (variable_or_function_call Card))) \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Index 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Record)) )) . CardNum) = 
                (expr 
                  (variable_or_function_call Record)))) \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Index 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Record)) )) . Names) = 
                (expr 
                  (variable_or_function_call Card.Names)))) \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Index 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Record)) )) . Note) = 
                (expr 
                  (variable_or_function_call Card.Note)))) \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Index 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Record)) )) . Month) = 
                (expr 
                  (variable_or_function_call Card.Month)))) \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Index 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Record)) )) . Day) = 
                (expr 
                  (variable_or_function_call Card.Day)))) \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Index 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Record)) )) . Year) = 
                (expr 
                  (variable_or_function_call Card.Year)))) \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Index 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Record)) )) . Phone) = 
                (expr 
                  (variable_or_function_call Card.Phone)))) \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Index 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Record)) )) . Street) = 
                (expr 
                  (variable_or_function_call Card.Street)))) \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Index 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Record)) )) . City) = 
                (expr 
                  (variable_or_function_call Card.City)))) \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Index 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Record)) )) . State) = 
                (expr 
                  (variable_or_function_call Card.State)))) \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Index 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Record)) )) . Zip) = 
                (expr 
                  (variable_or_function_call Card.Zip)))) \r\n \r\n) NEXT Record)) \r\n \r\n) 
    (end_sub_statement END SUB)) \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 
  (sub_statement SUB 
    (untyped_id PrintLabel) 
    ( 
      (parameter_list 
        (parameter 
          (untyped_id Card) AS 
          (type_name_for_parameter 
            (untyped_id Person)))) ) 
    (block \r\n \r\n 
      (statement 
        (lprint_statement LPRINT 
          (expr 
            (variable_or_function_call Card.Names)))) \r\n 
      (statement 
        (lprint_statement LPRINT 
          (expr 
            (variable_or_function_call Card.Street)))) \r\n 
      (statement 
        (lprint_statement LPRINT 
          (expr 
            (variable_or_function_call Card.City)) ; 
          (expr 
            (literal ", ")) ; 
          (expr 
            (variable_or_function_call Card.State)) ; 
          (expr 
            (variable_or_function_call Card.Zip)))) \r\n 
      (statement 
        (lprint_statement LPRINT)) \r\n \r\n) 
    (end_sub_statement END SUB)) \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 
  (function_statement FUNCTION Prompt$ 
    ( 
      (parameter_list 
        (parameter Msg$) , 
        (parameter Row) , 
        (parameter Column) , 
        (parameter Length)) ) 
    (block \r\n \r\n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \r\n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call Msg$)) ;)) \r\n \r\n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call Length)) 
          (before_first_case \r\n) 
          (case_block 
            (case_statement CASE 
              (case_expr IS <= 
                (expr 
                  (literal 0)))) 
            (block \r\n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Prompt$) = 
                  (expr 
                    (literal "")))) \r\n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 1)))) 
            (block \r\n 
              (statement 
                (locate_statement LOCATE , , 
                  (expr 
                    (variable_or_function_call CURSORON)))) \r\n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Prompt$) = 
                  (expr 
                    (builtin_function INPUT$ 
                      ( 
                        (expr 
                          (literal 1)) ))))) \r\n)) 
          (case_block 
            (case_statement CASE ELSE) 
            (block \r\n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Prompt$) = 
                  (expr 
                    (variable_or_function_call EditString 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal "")) , 
                          (expr 
                            (variable_or_function_call Length)) , 
                          (expr 
                            (variable_or_function_call FALSE)) )))))) \r\n)) 
          (end_select_statement END SELECT))) \r\n \r\n) 
    (end_function_statement END FUNCTION)) \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 
  (function_statement FUNCTION SelectField% 
    (block \r\n \r\n \r\n 
      (statement 
        (call_statement 
          (untyped_id RESTORE) 
          (call_argument_list 
            (call_argument FieldPositions)))) \r\n 
      (statement 
        (read_statement READ 
          (variable_or_function_call Row) , 
          (variable_or_function_call Column) , 
          (variable_or_function_call Length))) \r\n 
      (statement 
        (assignment_statement 
          (variable_or_function_call FieldNum) = 
          (expr 
            (literal 0)))) \r\n \r\n \r\n 
      (statement 
        (do_loop_statement DO 
          (block \r\n \r\n \r\n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)) , 
                (expr 
                  (variable_or_function_call CURSORON)))) \r\n \r\n \r\n 
            (statement 
              (do_loop_statement DO 
                (block \r\n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Ky) = 
                      (expr 
                        (variable_or_function_call ASC 
                          (args_or_indices 
                            ( 
                              (expr 
                                (builtin_function INPUT$ 
                                  ( 
                                    (expr 
                                      (literal 1)) ))) )))))) \r\n) LOOP 
                (loop_condition UNTIL 
                  (expr 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call Ky)) = 
                          (expr 
                            (variable_or_function_call ENTER))) )) OR 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call Ky)) = 
                          (expr 
                            (variable_or_function_call TABKEY))) )))))) \r\n \r\n \r\n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call Ky)) = 
                (expr 
                  (variable_or_function_call ENTER))) THEN \r\n 
              (then_block \r\n 
                (statement 
                  (locate_statement LOCATE , , 
                    (expr 
                      (variable_or_function_call CURSOROFF)))) \r\n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call SelectField%) = 
                    (expr 
                      (variable_or_function_call FieldNum)))) \r\n 
                (statement 
                  (exit_statement EXIT FUNCTION)) \r\n \r\n \r\n) 
              (else_block_statement ELSE 
                (else_block \r\n \r\n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call FieldNum) = 
                      (expr 
                        (expr 
                          (variable_or_function_call FieldNum)) + 
                        (expr 
                          (literal 1))))) \r\n 
                  (statement 
                    (read_statement READ 
                      (variable_or_function_call Row) , 
                      (variable_or_function_call Column) , 
                      (variable_or_function_call Length))) \r\n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (variable_or_function_call Row)) = 
                      (expr 
                        (literal 0))) THEN \r\n 
                    (then_block 
                      (statement 
                        (call_statement 
                          (untyped_id RESTORE) 
                          (call_argument_list 
                            (call_argument FieldPositions)))) \r\n 
                      (statement 
                        (read_statement READ 
                          (variable_or_function_call Row) , 
                          (variable_or_function_call Column) , 
                          (variable_or_function_call Length))) \r\n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call FieldNum) = 
                          (expr 
                            (literal 0)))) \r\n) 
                    (end_if_statement END IF)) \r\n \r\n)) 
              (end_if_statement END IF)) \r\n \r\n) LOOP)) \r\n \r\n) 
    (end_function_statement END FUNCTION)) \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 
  (sub_statement SUB 
    (untyped_id ShowCards) 
    ( 
      (parameter_list 
        (parameter TopCard) , 
        (parameter LastCard)) ) 
    (block \r\n \r\n \r\n 
      (statement 
        (call_statement CALL 
          (untyped_id ShowTopCard) 
          ( 
            (call_argument_list 
              (call_argument Index 
                (args_or_indices 
                  ( 
                    (expr 
                      (variable_or_function_call TopCard)) )))) ))) \r\n \r\n \r\n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Card) = 
          (expr 
            (variable_or_function_call TopCard)))) \r\n 
      (statement 
        (call_statement 
          (untyped_id RESTORE) 
          (call_argument_list 
            (call_argument FieldPositions)))) \r\n 
      (statement 
        (read_statement READ 
          (variable_or_function_call Row) , 
          (variable_or_function_call Column) , 
          (variable_or_function_call Length))) \r\n 
      (statement 
        (for_next_statement FOR Count = 
          (expr 
            (literal 2)) TO 
          (expr 
            (variable_or_function_call CARDSPERSCREEN)) 
          (block \r\n \r\n \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Row) = 
                (expr 
                  (expr 
                    (variable_or_function_call Row)) - 
                  (expr 
                    (literal 2))))) : 
            (statement 
              (assignment_statement 
                (variable_or_function_call Column) = 
                (expr 
                  (expr 
                    (variable_or_function_call Column)) + 
                  (expr 
                    (literal 3))))) \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Card) = 
                (expr 
                  (expr 
                    (variable_or_function_call Card)) + 
                  (expr 
                    (literal 1))))) \r\n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call Card)) > 
                  (expr 
                    (variable_or_function_call LastCard))) THEN 
                (if_inline_action 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Card) = 
                      (expr 
                        (literal 1))))))) \r\n \r\n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \r\n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call SPACE$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call Length)) )))))) \r\n \r\n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \r\n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call Index 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call Card)) )) . Names)))) \r\n \r\n) NEXT Count)) \r\n \r\n) 
    (end_sub_statement END SUB)) \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 
  (sub_statement SUB 
    (untyped_id ShowCmdLine) 
    (block \r\n \r\n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call LASTROW)) , 
          (expr 
            (literal 1)))) \r\n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call HILITE)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal " E")) ;)) \r\n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call NORMAL)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "dit Top   ")) ;)) \r\n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call HILITE)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "A")) ;)) \r\n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call NORMAL)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "dd New   ")) ;)) \r\n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call HILITE)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "C")) ;)) \r\n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call NORMAL)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "opy to New   ")) ;)) \r\n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call HILITE)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "D")) ;)) \r\n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call NORMAL)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "elete   ")) ;)) \r\n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call HILITE)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "F")) ;)) \r\n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call NORMAL)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "ind   ")) ;)) \r\n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call HILITE)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "S")) ;)) \r\n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call NORMAL)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "ort   ")) ;)) \r\n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call HILITE)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "P")) ;)) \r\n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call NORMAL)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "rint   ")) ;)) \r\n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call HILITE)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Q")) ;)) \r\n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call NORMAL)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "uit ")) ;)) \r\n \r\n) 
    (end_sub_statement END SUB)) \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 
  (sub_statement SUB 
    (untyped_id ShowEditHelp) 
    (block \r\n \r\n \r\n 
      (statement 
        (call_statement 
          (untyped_id ClearHelp))) \r\n 
      (statement 
        (call_statement 
          (untyped_id RESTORE) 
          (call_argument_list 
            (call_argument EditHelp)))) \r\n 
      (statement 
        (for_next_statement FOR Row = 
          (expr 
            (variable_or_function_call HELPTOP)) TO 
          (expr 
            (variable_or_function_call HELPBOT)) 
          (block \r\n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Clr))) \r\n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call Clr)) = 
                (expr 
                  (variable_or_function_call CNORMAL))) THEN \r\n 
              (then_block 
                (statement 
                  (color_statement COLOR 
                    (expr 
                      (variable_or_function_call NORMAL)) , 
                    (expr 
                      (variable_or_function_call BACKGROUND)))) \r\n) 
              (else_block_statement ELSE 
                (else_block \r\n 
                  (statement 
                    (color_statement COLOR 
                      (expr 
                        (variable_or_function_call HILITE)) , 
                      (expr 
                        (variable_or_function_call BACKGROUND)))) \r\n)) 
              (end_if_statement END IF)) \r\n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call HELPLEFT)))) \r\n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Tmp$))) \r\n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call Tmp$)) ;)) \r\n) NEXT)) \r\n \r\n \r\n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call NORMAL)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) \r\n \r\n) 
    (end_sub_statement END SUB)) \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 
  (sub_statement SUB 
    (untyped_id ShowTopCard) 
    ( 
      (parameter_list 
        (parameter 
          (untyped_id WorkCard) AS 
          (type_name_for_parameter 
            (untyped_id Person)))) ) 
    (block \r\n \r\n \r\n 
      (statement 
        (call_statement 
          (untyped_id RESTORE) 
          (call_argument_list 
            (call_argument FieldPositions)))) \r\n 
      (statement 
        (read_statement READ 
          (variable_or_function_call Row) , 
          (variable_or_function_call Column) , 
          (variable_or_function_call Length))) \r\n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \r\n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call SPACE$ 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call Length)) )))) ;)) \r\n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \r\n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call WorkCard.Names)) ;)) \r\n \r\n 
      (statement 
        (read_statement READ 
          (variable_or_function_call Row) , 
          (variable_or_function_call Column) , 
          (variable_or_function_call Length))) \r\n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \r\n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call SPACE$ 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call Length)) )))) ;)) \r\n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \r\n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call WorkCard.Note)) ;)) \r\n \r\n 
      (statement 
        (read_statement READ 
          (variable_or_function_call Row) , 
          (variable_or_function_call Column) , 
          (variable_or_function_call Length))) \r\n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \r\n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call SPACE$ 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call Length)) )))) ;)) \r\n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \r\n 
      (statement 
        (print_using_statement PRINT USING 
          (expr 
            (literal "##_/")) ; 
          (expr 
            (variable_or_function_call WorkCard.Month)) ; 
          (expr 
            (variable_or_function_call WorkCard.Day)) ;)) \r\n 
      (statement 
        (print_using_statement PRINT USING 
          (expr 
            (literal "##")) ; 
          (expr 
            (variable_or_function_call WorkCard.Year)) ;)) \r\n 
      (statement 
        (read_statement READ 
          (variable_or_function_call Row) , 
          (variable_or_function_call Column) , 
          (variable_or_function_call Length) , 
          (variable_or_function_call Row) , 
          (variable_or_function_call Column) , 
          (variable_or_function_call Length))) \r\n \r\n 
      (statement 
        (read_statement READ 
          (variable_or_function_call Row) , 
          (variable_or_function_call Column) , 
          (variable_or_function_call Length))) \r\n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \r\n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call SPACE$ 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call Length)) )))) ;)) \r\n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \r\n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call WorkCard.Phone)) ;)) \r\n \r\n 
      (statement 
        (read_statement READ 
          (variable_or_function_call Row) , 
          (variable_or_function_call Column) , 
          (variable_or_function_call Length))) \r\n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \r\n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call SPACE$ 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call Length)) )))) ;)) \r\n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \r\n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call WorkCard.Street)) ;)) \r\n \r\n 
      (statement 
        (read_statement READ 
          (variable_or_function_call Row) , 
          (variable_or_function_call Column) , 
          (variable_or_function_call Length))) \r\n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \r\n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call SPACE$ 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call Length)) )))) ;)) \r\n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \r\n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call WorkCard.City)) ;)) \r\n \r\n 
      (statement 
        (read_statement READ 
          (variable_or_function_call Row) , 
          (variable_or_function_call Column) , 
          (variable_or_function_call Length))) \r\n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \r\n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call SPACE$ 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call Length)) )))) ;)) \r\n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \r\n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call WorkCard.State)) ;)) \r\n \r\n 
      (statement 
        (read_statement READ 
          (variable_or_function_call Row) , 
          (variable_or_function_call Column) , 
          (variable_or_function_call Length))) \r\n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \r\n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call SPACE$ 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call Length)) )))))) \r\n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \r\n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call WorkCard.Zip)) ;)) \r\n \r\n) 
    (end_sub_statement END SUB)) \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 
  (sub_statement SUB 
    (untyped_id ShowViewHelp) 
    (block \r\n \r\n \r\n 
      (statement 
        (call_statement 
          (untyped_id ClearHelp))) \r\n 
      (statement 
        (call_statement 
          (untyped_id RESTORE) 
          (call_argument_list 
            (call_argument ViewHelp)))) \r\n 
      (statement 
        (for_next_statement FOR Row = 
          (expr 
            (variable_or_function_call HELPTOP)) TO 
          (expr 
            (variable_or_function_call HELPBOT)) 
          (block \r\n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Clr))) \r\n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call Clr)) = 
                (expr 
                  (variable_or_function_call CNORMAL))) THEN \r\n 
              (then_block 
                (statement 
                  (color_statement COLOR 
                    (expr 
                      (variable_or_function_call NORMAL)) , 
                    (expr 
                      (variable_or_function_call BACKGROUND)))) \r\n) 
              (else_block_statement ELSE 
                (else_block \r\n 
                  (statement 
                    (color_statement COLOR 
                      (expr 
                        (variable_or_function_call HILITE)) , 
                      (expr 
                        (variable_or_function_call BACKGROUND)))) \r\n)) 
              (end_if_statement END IF)) \r\n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call HELPLEFT)))) \r\n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Tmp$))) \r\n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call Tmp$)) ;)) \r\n) NEXT)) \r\n \r\n \r\n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call NORMAL)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) \r\n 
      (statement 
        (call_statement 
          (untyped_id ShowCmdLine))) \r\n \r\n) 
    (end_sub_statement END SUB)) \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n 
  (sub_statement SUB 
    (untyped_id SortIndex) 
    ( 
      (parameter_list 
        (parameter SortField) , 
        (parameter LastCard)) ) 
    (block \r\n \r\n \r\n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Offset) = 
          (expr 
            (expr 
              (variable_or_function_call LastCard)) \ 
            (expr 
              (literal 2))))) \r\n \r\n \r\n 
      (statement 
        (do_loop_statement DO 
          (do_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call Offset)) > 
              (expr 
                (literal 0)))) 
          (block \r\n \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Limit) = 
                (expr 
                  (expr 
                    (variable_or_function_call LastCard)) - 
                  (expr 
                    (variable_or_function_call Offset))))) \r\n \r\n 
            (statement 
              (do_loop_statement DO 
                (block \r\n \r\n \r\n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Switch) = 
                      (expr 
                        (variable_or_function_call FALSE)))) \r\n \r\n \r\n \r\n 
                  (statement 
                    (for_next_statement FOR i = 
                      (expr 
                        (literal 1)) TO 
                      (expr 
                        (variable_or_function_call Limit)) 
                      (block \r\n 
                        (statement 
                          (select_case_statement SELECT CASE 
                            (expr 
                              (variable_or_function_call SortField)) 
                            (before_first_case \r\n) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (variable_or_function_call NPERSON)))) 
                              (block \r\n 
                                (if_block_statement IF 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call Index 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call i)) )) . Names)) > 
                                    (expr 
                                      (variable_or_function_call Index 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (expr 
                                                (variable_or_function_call i)) + 
                                              (expr 
                                                (variable_or_function_call Offset))) )) . Names))) THEN \r\n 
                                  (then_block 
                                    (statement 
                                      (call_statement 
                                        (untyped_id SWAP) 
                                        (call_argument_list 
                                          (call_argument Index 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (variable_or_function_call i)) ))) , 
                                          (call_argument Index 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call i)) + 
                                                  (expr 
                                                    (variable_or_function_call Offset))) )))))) \r\n 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call Switch) = 
                                        (expr 
                                          (variable_or_function_call i)))) \r\n) 
                                  (end_if_statement END IF)) \r\n)) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (variable_or_function_call NNOTE)))) 
                              (block \r\n 
                                (if_block_statement IF 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call Index 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call i)) )) . Note)) > 
                                    (expr 
                                      (variable_or_function_call Index 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (expr 
                                                (variable_or_function_call i)) + 
                                              (expr 
                                                (variable_or_function_call Offset))) )) . Note))) THEN \r\n 
                                  (then_block 
                                    (statement 
                                      (call_statement 
                                        (untyped_id SWAP) 
                                        (call_argument_list 
                                          (call_argument Index 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (variable_or_function_call i)) ))) , 
                                          (call_argument Index 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call i)) + 
                                                  (expr 
                                                    (variable_or_function_call Offset))) )))))) \r\n 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call Switch) = 
                                        (expr 
                                          (variable_or_function_call i)))) \r\n) 
                                  (end_if_statement END IF)) \r\n)) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (variable_or_function_call NMONTH)))) 
                              (block \r\n 
                                (if_block_statement IF 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call Index 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call i)) )) . Month)) > 
                                    (expr 
                                      (variable_or_function_call Index 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (expr 
                                                (variable_or_function_call i)) + 
                                              (expr 
                                                (variable_or_function_call Offset))) )) . Month))) THEN \r\n 
                                  (then_block 
                                    (statement 
                                      (call_statement 
                                        (untyped_id SWAP) 
                                        (call_argument_list 
                                          (call_argument Index 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (variable_or_function_call i)) ))) , 
                                          (call_argument Index 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call i)) + 
                                                  (expr 
                                                    (variable_or_function_call Offset))) )))))) \r\n 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call Switch) = 
                                        (expr 
                                          (variable_or_function_call i)))) \r\n) 
                                  (end_if_statement END IF)) \r\n)) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (variable_or_function_call NDAY)))) 
                              (block \r\n 
                                (if_block_statement IF 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call Index 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call i)) )) . Day)) > 
                                    (expr 
                                      (variable_or_function_call Index 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (expr 
                                                (variable_or_function_call i)) + 
                                              (expr 
                                                (variable_or_function_call Offset))) )) . Day))) THEN \r\n 
                                  (then_block 
                                    (statement 
                                      (call_statement 
                                        (untyped_id SWAP) 
                                        (call_argument_list 
                                          (call_argument Index 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (variable_or_function_call i)) ))) , 
                                          (call_argument Index 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call i)) + 
                                                  (expr 
                                                    (variable_or_function_call Offset))) )))))) \r\n 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call Switch) = 
                                        (expr 
                                          (variable_or_function_call i)))) \r\n) 
                                  (end_if_statement END IF)) \r\n)) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (variable_or_function_call NYEAR)))) 
                              (block \r\n 
                                (if_block_statement IF 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call Index 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call i)) )) . Year)) > 
                                    (expr 
                                      (variable_or_function_call Index 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (expr 
                                                (variable_or_function_call i)) + 
                                              (expr 
                                                (variable_or_function_call Offset))) )) . Year))) THEN \r\n 
                                  (then_block 
                                    (statement 
                                      (call_statement 
                                        (untyped_id SWAP) 
                                        (call_argument_list 
                                          (call_argument Index 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (variable_or_function_call i)) ))) , 
                                          (call_argument Index 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call i)) + 
                                                  (expr 
                                                    (variable_or_function_call Offset))) )))))) \r\n 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call Switch) = 
                                        (expr 
                                          (variable_or_function_call i)))) \r\n) 
                                  (end_if_statement END IF)) \r\n)) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (variable_or_function_call NPHONE)))) 
                              (block \r\n 
                                (if_block_statement IF 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call Index 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call i)) )) . Phone)) > 
                                    (expr 
                                      (variable_or_function_call Index 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (expr 
                                                (variable_or_function_call i)) + 
                                              (expr 
                                                (variable_or_function_call Offset))) )) . Phone))) THEN \r\n 
                                  (then_block 
                                    (statement 
                                      (call_statement 
                                        (untyped_id SWAP) 
                                        (call_argument_list 
                                          (call_argument Index 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (variable_or_function_call i)) ))) , 
                                          (call_argument Index 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call i)) + 
                                                  (expr 
                                                    (variable_or_function_call Offset))) )))))) \r\n 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call Switch) = 
                                        (expr 
                                          (variable_or_function_call i)))) \r\n) 
                                  (end_if_statement END IF)) \r\n)) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (variable_or_function_call NSTREET)))) 
                              (block \r\n 
                                (if_block_statement IF 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call Index 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call i)) )) . Street)) > 
                                    (expr 
                                      (variable_or_function_call Index 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (expr 
                                                (variable_or_function_call i)) + 
                                              (expr 
                                                (variable_or_function_call Offset))) )) . Street))) THEN \r\n 
                                  (then_block 
                                    (statement 
                                      (call_statement 
                                        (untyped_id SWAP) 
                                        (call_argument_list 
                                          (call_argument Index 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (variable_or_function_call i)) ))) , 
                                          (call_argument Index 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call i)) + 
                                                  (expr 
                                                    (variable_or_function_call Offset))) )))))) \r\n 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call Switch) = 
                                        (expr 
                                          (variable_or_function_call i)))) \r\n) 
                                  (end_if_statement END IF)) \r\n)) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (variable_or_function_call NCITY)))) 
                              (block \r\n 
                                (if_block_statement IF 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call Index 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call i)) )) . City)) > 
                                    (expr 
                                      (variable_or_function_call Index 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (expr 
                                                (variable_or_function_call i)) + 
                                              (expr 
                                                (variable_or_function_call Offset))) )) . City))) THEN \r\n 
                                  (then_block 
                                    (statement 
                                      (call_statement 
                                        (untyped_id SWAP) 
                                        (call_argument_list 
                                          (call_argument Index 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (variable_or_function_call i)) ))) , 
                                          (call_argument Index 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call i)) + 
                                                  (expr 
                                                    (variable_or_function_call Offset))) )))))) \r\n 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call Switch) = 
                                        (expr 
                                          (variable_or_function_call i)))) \r\n) 
                                  (end_if_statement END IF)) \r\n)) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (variable_or_function_call NSTATE)))) 
                              (block \r\n 
                                (if_block_statement IF 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call Index 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call i)) )) . State)) > 
                                    (expr 
                                      (variable_or_function_call Index 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (expr 
                                                (variable_or_function_call i)) + 
                                              (expr 
                                                (variable_or_function_call Offset))) )) . State))) THEN \r\n 
                                  (then_block 
                                    (statement 
                                      (call_statement 
                                        (untyped_id SWAP) 
                                        (call_argument_list 
                                          (call_argument Index 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (variable_or_function_call i)) ))) , 
                                          (call_argument Index 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call i)) + 
                                                  (expr 
                                                    (variable_or_function_call Offset))) )))))) \r\n 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call Switch) = 
                                        (expr 
                                          (variable_or_function_call i)))) \r\n) 
                                  (end_if_statement END IF)) \r\n)) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (variable_or_function_call NZIP)))) 
                              (block \r\n 
                                (if_block_statement IF 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call Index 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call i)) )) . Zip)) > 
                                    (expr 
                                      (variable_or_function_call Index 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (expr 
                                                (variable_or_function_call i)) + 
                                              (expr 
                                                (variable_or_function_call Offset))) )) . Zip))) THEN \r\n 
                                  (then_block 
                                    (statement 
                                      (call_statement 
                                        (untyped_id SWAP) 
                                        (call_argument_list 
                                          (call_argument Index 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (variable_or_function_call i)) ))) , 
                                          (call_argument Index 
                                            (args_or_indices 
                                              ( 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call i)) + 
                                                  (expr 
                                                    (variable_or_function_call Offset))) )))))) \r\n 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call Switch) = 
                                        (expr 
                                          (variable_or_function_call i)))) \r\n) 
                                  (end_if_statement END IF)) \r\n)) 
                            (end_select_statement END SELECT))) \r\n \r\n) NEXT i)) \r\n \r\n \r\n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Limit) = 
                      (expr 
                        (variable_or_function_call Switch)))) \r\n \r\n) LOOP 
                (loop_condition WHILE 
                  (expr 
                    (variable_or_function_call Switch))))) \r\n \r\n \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Offset) = 
                (expr 
                  (expr 
                    (variable_or_function_call Offset)) \ 
                  (expr 
                    (literal 2))))) \r\n) LOOP)) \r\n \r\n) 
    (end_sub_statement END SUB)) \r\n \r\n <EOF>)
