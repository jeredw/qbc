(program \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n 
  (statement 
    (deftype_statement DEFINT 
      (letter_range A - Z))) \n \n \n 
  (statement 
    (const_statement CONST 
      (const_assignment PRESSEDKEYCOLOR = 
        (const_expr 
          (expr 
            (literal 15)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment BACKGROUNDCOLOR = 
        (const_expr 
          (expr 
            (literal 3)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment TEXTCOLOR = 
        (const_expr 
          (expr 
            (literal 0)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment TITLECOLOR = 
        (const_expr 
          (expr 
            (literal 15)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment PITCH = 
        (const_expr 
          (expr 
            (literal 4)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment XTNOTELENGTH = 
        (const_expr 
          (expr 
            (literal 4)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment INTROSONG = 
        (const_expr 
          (expr 
            (literal "T100O2L16CCDFDEL4DL16FEDO1BO2L4C")))))) \n \n \n \n \n \n 
  (statement 
    (const_statement CONST 
      (const_assignment C = 
        (const_expr 
          (expr 
            (literal 1)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment DF = 
        (const_expr 
          (expr 
            (literal 2)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment D = 
        (const_expr 
          (expr 
            (literal 3)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment EF = 
        (const_expr 
          (expr 
            (literal 4)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment E = 
        (const_expr 
          (expr 
            (literal 5)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment F = 
        (const_expr 
          (expr 
            (literal 6)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment GF = 
        (const_expr 
          (expr 
            (literal 7)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment G = 
        (const_expr 
          (expr 
            (literal 8)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment AF = 
        (const_expr 
          (expr 
            (literal 9)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment A = 
        (const_expr 
          (expr 
            (literal 10)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment BF = 
        (const_expr 
          (expr 
            (literal 11)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment B = 
        (const_expr 
          (expr 
            (literal 12)))))) \n \n 
  (statement 
    (const_statement CONST 
      (const_assignment MAIN = 
        (const_expr 
          (expr 
            (literal 0)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment PRACTICE = 
        (const_expr 
          (expr 
            (literal 1)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment RECORD = 
        (const_expr 
          (expr 
            (literal 2)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment PLAYBACK = 
        (const_expr 
          (expr 
            (literal 3)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment PLAYING = 
        (const_expr 
          (expr 
            (literal 6)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment SAVING = 
        (const_expr 
          (expr 
            (literal 7)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment EDITOR = 
        (const_expr 
          (expr 
            (literal 8)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment EDITMENU = 
        (const_expr 
          (expr 
            (literal 9)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment GETNAME = 
        (const_expr 
          (expr 
            (literal 10)))))) \n \n 
  (statement 
    (const_statement CONST 
      (const_assignment MAXSONG = 
        (const_expr 
          (expr 
            (literal 50)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment MAXNOTE = 
        (const_expr 
          (expr 
            (literal 2000)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment FALSE = 
        (const_expr 
          (expr 
            (literal 0)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment TRUE = 
        (const_expr 
          (expr NOT 
            (expr 
              (variable_or_function_call FALSE))))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment UP = 
        (const_expr 
          (expr 
            (variable_or_function_call FALSE)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment DOWN = 
        (const_expr 
          (expr 
            (variable_or_function_call TRUE)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment CANCEL = 
        (const_expr 
          (expr 
            (literal 255)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment NOTETICK = 
        (const_expr 
          (expr 
            (literal .6)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment RESTTICK = 
        (const_expr 
          (expr 
            (literal .7)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment CR = 
        (const_expr 
          (expr 
            (literal 13)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment ESC = 
        (const_expr 
          (expr 
            (literal 27)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment TABCHAR = 
        (const_expr 
          (expr 
            (literal 9)))))) \n \n \n 
  (type_statement TYPE 
    (untyped_id KeyMap) \n 
    (type_element 
      (untyped_id Note) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id Oct) AS 
      (type_name_for_type_element INTEGER) \n) END TYPE) \n \n 
  (type_statement TYPE 
    (untyped_id SongElement) \n 
    (type_element 
      (untyped_id Note) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id Oct) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id Dur) AS 
      (type_name_for_type_element INTEGER) \n) END TYPE) \n \n 
  (type_statement TYPE 
    (untyped_id SongIndexCard) \n 
    (type_element 
      (untyped_id naym) AS 
      (type_name_for_type_element 
        (fixed_string STRING * 25)) \n) 
    (type_element 
      (untyped_id desc) AS 
      (type_name_for_type_element 
        (fixed_string STRING * 40)) \n) 
    (type_element 
      (untyped_id Size) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id Offset) AS 
      (type_name_for_type_element LONG) \n) END TYPE) \n \n 
  (type_statement TYPE 
    (untyped_id FileHeader) \n 
    (type_element 
      (untyped_id Count) AS 
      (type_name_for_type_element INTEGER) \n) 
    (type_element 
      (untyped_id NextNote) AS 
      (type_name_for_type_element LONG) \n) END TYPE) \n \n \n 
  (declare_statement DECLARE FUNCTION ConfirmDelete% 
    ( )) \n 
  (declare_statement DECLARE FUNCTION GetNote$ 
    ( 
      (declare_parameter_list 
        (declare_parameter Note%)) )) \n 
  (declare_statement DECLARE FUNCTION SaveChanges% 
    ( )) \n 
  (declare_statement DECLARE FUNCTION SimpleEdit% 
    ( 
      (declare_parameter_list 
        (declare_parameter row%) , 
        (declare_parameter col%) , 
        (declare_parameter text$) , 
        (declare_parameter MaxLen%)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id Center) 
    ( 
      (declare_parameter_list 
        (declare_parameter text$) , 
        (declare_parameter row%)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id ChangeTempo) 
    ( 
      (declare_parameter_list 
        (declare_parameter Inc%)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id ClearMenuScreen) 
    ( 
      (declare_parameter_list 
        (declare_parameter Title$)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id CreateSongFile) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DeleteSong) 
    ( 
      (declare_parameter_list 
        (declare_parameter SongNo%)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DisplayChanges) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DisplayGameTitle) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DisplayIntro) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DisplayMenuText) 
    ( 
      (declare_parameter_list 
        (declare_parameter Menu%)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DrawBox) 
    ( 
      (declare_parameter_list 
        (declare_parameter r1%) , 
        (declare_parameter c1%) , 
        (declare_parameter r2%) , 
        (declare_parameter c2%) , 
        (declare_parameter Title$)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DrawKeyboard) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DrawNote) 
    ( 
      (declare_parameter_list 
        (declare_parameter Note%) , 
        (declare_parameter Octave%) , 
        (declare_parameter Action%)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id EditSong) 
    ( 
      (declare_parameter_list 
        (declare_parameter SongNo%)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id ErrorMessage) 
    ( 
      (declare_parameter_list 
        (declare_parameter msg$)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id GetNameAndSave) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id InitFreq) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id LoadDefaultSong) 
    ( 
      (declare_parameter_list 
        (declare_parameter num%)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id LoadSong) 
    ( 
      (declare_parameter_list 
        (declare_parameter SongNo%)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id MainMenu) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id PlayNote) 
    ( 
      (declare_parameter_list 
        (declare_parameter Note%) , 
        (declare_parameter Octave%) , 
        (declare_parameter Duration#)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id PlaySong) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id RecordMenu) 
    ( 
      (declare_parameter_list 
        (declare_parameter NoSave%)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id RecordMode) 
    ( 
      (declare_parameter_list 
        (declare_parameter NoSave%)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id SaveSong) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id TimeDelay) 
    ( 
      (declare_parameter_list 
        (declare_parameter Dur#)) )) \n \n \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id Freq) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 12))) )) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id Kyb) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 127))) )) AS 
        (type_name 
          (untyped_id KeyMap))))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id Song) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (variable_or_function_call MAXNOTE))) )) AS 
        (type_name 
          (untyped_id SongElement))))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id Counter) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id SongName) AS 
        (type_name 
          (fixed_string STRING * 25))))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id SongDesc) AS 
        (type_name 
          (fixed_string STRING * 40))))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id TEMPO) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id TFACTOR) AS 
        (type_name SINGLE)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id FileError) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id SongRecorded) AS 
        (type_name INTEGER)))) \n \n 
  (statement 
    (dim_statement DIM 
      (dim_variable 
        (untyped_id KeyFlags) AS 
        (type_name INTEGER)))) \n 
  (statement 
    (dim_statement DIM 
      (dim_variable 
        (untyped_id BadMode) AS 
        (type_name INTEGER)))) \n \n \n 
  (statement 
    (on_error_statement ON ERROR GOTO 
      (target 
        (text_label 
          (untyped_id ScreenError))))) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call BadMode) = 
      (expr 
        (variable_or_function_call FALSE)))) \n 
  (statement 
    (screen_statement SCREEN 
      (expr 
        (literal 1)))) \n \n 
  (if_block_statement IF 
    (expr 
      (expr 
        (variable_or_function_call BadMode)) = 
      (expr 
        (variable_or_function_call TRUE))) THEN \n 
    (then_block 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 11)) , 
          (expr 
            (literal 13)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "CGA, EGA Color, or VGA graphics required to run QSYNTH.BAS")))) \n \n) 
    (else_block_statement ELSE 
      (else_block \n \n 
        (statement 
          (def_seg_statement DEF SEG = 
            (expr 
              (literal 0)))) \n 
        (statement 
          (assignment_statement 
            (variable_or_function_call KeyFlags) = 
            (expr 
              (variable_or_function_call PEEK 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 1047)) )))))) \n 
        (if_block_statement IF 
          (expr 
            (expr 
              (variable_or_function_call KeyFlags)) AND 
            (expr 
              (literal 32))) THEN \n 
          (then_block 
            (statement 
              (call_statement 
                (untyped_id POKE) 
                (call_argument_list 
                  (call_argument 
                    (expr 
                      (literal 1047))) , 
                  (call_argument 
                    (expr 
                      (expr 
                        (variable_or_function_call KeyFlags)) AND 
                      (expr 
                        (literal 223))))))) \n) 
          (end_if_statement END IF)) \n 
        (statement 
          (def_seg_statement DEF SEG)) \n \n 
        (statement 
          (on_error_statement ON ERROR GOTO 
            (target 
              (text_label 
                (untyped_id ErrorTrap))))) \n 
        (statement 
          (call_statement 
            (untyped_id DisplayIntro))) \n 
        (statement 
          (assignment_statement 
            (variable_or_function_call FileError) = 
            (expr 
              (literal 0)))) \n \n 
        (label 
          (text_label 
            (untyped_id StartAgain)) :) \n 
        (statement 
          (call_statement 
            (untyped_id DrawKeyboard))) \n 
        (statement 
          (call_statement 
            (untyped_id InitFreq))) \n 
        (statement 
          (call_statement 
            (untyped_id MainMenu))) \n 
        (statement 
          (call_statement 
            (untyped_id DisplayChanges))) \n \n 
        (if_block_statement IF 
          (expr 
            (expr 
              (variable_or_function_call KeyFlags)) AND 
            (expr 
              (literal 32))) THEN \n 
          (then_block 
            (statement 
              (def_seg_statement DEF SEG = 
                (expr 
                  (literal 0)))) \n 
            (statement 
              (call_statement 
                (untyped_id POKE) 
                (call_argument_list 
                  (call_argument 
                    (expr 
                      (literal 1047))) , 
                  (call_argument 
                    (expr 
                      (expr 
                        (variable_or_function_call KeyFlags)) OR 
                      (expr 
                        (literal 32))))))) \n 
            (statement 
              (def_seg_statement DEF SEG)) \n) 
          (end_if_statement END IF)) \n \n)) 
    (end_if_statement END IF)) \n \n 
  (statement 
    (end_statement END)) \n \n \n \n 
  (label 
    (text_label 
      (untyped_id ErrorTrap)) :) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call errnum) = 
      (expr 
        (variable_or_function_call ERR)))) \n 
  (statement 
    (select_case_statement SELECT CASE 
      (expr 
        (variable_or_function_call errnum)) 
      (before_first_case \n) 
      (case_block 
        (case_statement CASE 
          (case_expr 
            (expr 
              (literal 52)) TO 
            (expr 
              (literal 76)))) 
        (block \n 
          (if_block_statement IF 
            (expr 
              (expr 
                (variable_or_function_call FileError)) = 
              (expr 
                (literal 0))) THEN \n 
            (then_block 
              (statement 
                (call_statement 
                  (untyped_id ErrorMessage) 
                  (call_argument_list 
                    (call_argument 
                      (expr 
                        (literal "Cannot access QSYNTH.DAT file.")))))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call FileError) = 
                  (expr 
                    (literal 1)))) \n) 
            (end_if_statement END IF)) \n 
          (statement 
            (resume_statement RESUME NEXT)) \n)) 
      (case_block 
        (case_statement CASE ELSE) 
        (block \n 
          (statement 
            (call_statement 
              (untyped_id ErrorMessage) 
              (call_argument_list 
                (call_argument 
                  (expr 
                    (literal "Sorry, an unexpected error has occurred.")))))) \n 
          (statement 
            (resume_statement RESUME 
              (target 
                (text_label 
                  (untyped_id StartAgain))))) \n)) 
      (end_select_statement END SELECT))) \n \n \n 
  (label 
    (text_label 
      (untyped_id ScreenError)) :) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call BadMode) = 
      (expr 
        (variable_or_function_call TRUE)))) \n 
  (statement 
    (resume_statement RESUME NEXT)) \n \n \n \n \n \n \n \n \n \n 
  (label 
    (text_label 
      (untyped_id SONG1)) :) \n 
  (statement 
    (data_statement DATA 
      (data_item "Yankee") , 
      (data_item "Yankee Doodle Dandy") , 
      (data_item 107))) \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 0) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3))) \n 
  (statement 
    (data_statement DATA 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 0) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 8) , 
      (data_item -1) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3))) \n 
  (statement 
    (data_statement DATA 
      (data_item 3) , 
      (data_item 0) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 38) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 6) , 
      (data_item 12) , 
      (data_item -1) , 
      (data_item 38) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 6) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3))) \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 0) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 6) , 
      (data_item 0) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3))) \n 
  (statement 
    (data_statement DATA 
      (data_item 3) , 
      (data_item 0) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 12) , 
      (data_item -1) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 8) , 
      (data_item -1) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 10) , 
      (data_item -1) , 
      (data_item 18))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 12) , 
      (data_item -1) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 38) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 6) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 38) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 6) , 
      (data_item 10) , 
      (data_item -1) , 
      (data_item 38) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3))) \n 
  (statement 
    (data_statement DATA 
      (data_item 12) , 
      (data_item -1) , 
      (data_item 15) , 
      (data_item 10) , 
      (data_item -1) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 8) , 
      (data_item -1) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 10) , 
      (data_item -1) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 12) , 
      (data_item -1) , 
      (data_item 18))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 38) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 6) , 
      (data_item 8) , 
      (data_item -1) , 
      (data_item 38) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 10) , 
      (data_item -1) , 
      (data_item 15) , 
      (data_item 8) , 
      (data_item -1) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 6) , 
      (data_item -1) , 
      (data_item 18))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 5) , 
      (data_item -1) , 
      (data_item 38) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 6) , 
      (data_item 8) , 
      (data_item -1) , 
      (data_item 38) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 6) , 
      (data_item 10) , 
      (data_item -1) , 
      (data_item 38) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 12) , 
      (data_item -1) , 
      (data_item 15) , 
      (data_item 10) , 
      (data_item -1) , 
      (data_item 18))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 8) , 
      (data_item -1) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 10) , 
      (data_item -1) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 12) , 
      (data_item -1) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3))) \n 
  (statement 
    (data_statement DATA 
      (data_item 10) , 
      (data_item -1) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 8) , 
      (data_item -1) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 12) , 
      (data_item -1) , 
      (data_item 18) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 3) , 
      (data_item 0) , 
      (data_item 18))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 3) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 38) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 6) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 38) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 6))) \n \n 
  (label 
    (text_label 
      (untyped_id SONG2)) :) \n 
  (statement 
    (data_statement DATA 
      (data_item "Hat") , 
      (data_item "Mexican Hat Dance") , 
      (data_item 36))) \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 16) , 
      (data_item 6) , 
      (data_item 0) , 
      (data_item 10) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 5) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 16) , 
      (data_item 6) , 
      (data_item 0) , 
      (data_item 10) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 5) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 16) , 
      (data_item 6) , 
      (data_item 0) , 
      (data_item 10) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 12))) \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 16) , 
      (data_item 6) , 
      (data_item 0) , 
      (data_item 16) , 
      (data_item 8) , 
      (data_item 0) , 
      (data_item 16) , 
      (data_item 6) , 
      (data_item 0) , 
      (data_item 16) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 10) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 5) , 
      (data_item 6) , 
      (data_item 0) , 
      (data_item 16) , 
      (data_item 8) , 
      (data_item 0) , 
      (data_item 10) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 15))) \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 16) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 10) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 5) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 16) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 10) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 5) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 16) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 10) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 12))) \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 16) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 16) , 
      (data_item 6) , 
      (data_item 0) , 
      (data_item 16) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 16) , 
      (data_item 3) , 
      (data_item 0) , 
      (data_item 10) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 5) , 
      (data_item 5) , 
      (data_item 0) , 
      (data_item 16) , 
      (data_item 6) , 
      (data_item 0) , 
      (data_item 10) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 15))) \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id Center) 
    ( 
      (parameter_list 
        (parameter text$) , 
        (parameter row)) ) 
    (block \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call row%)) , 
          (expr 
            (expr 
              (expr 
                (literal 40)) - 
              (expr 
                (expr 
                  (builtin_function LEN 
                    ( 
                      (expr 
                        (variable_or_function_call text$)) ))) \ 
                (expr 
                  (literal 2)))) + 
            (expr 
              (literal 1))))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call text$)) ;)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id ChangeTempo) 
    ( 
      (parameter_list 
        (parameter Inc)) ) STATIC 
    (block \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 0)) , 
          (expr 
            (literal 7)))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 23)) , 
          (expr 
            (expr 
              (literal 17)) + 
            (expr 
              (variable_or_function_call TEMPO))))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call CHR$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 205)) )))))) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (expr 
              (variable_or_function_call Inc)) = 
            (expr 
              (variable_or_function_call UP))) AND 
          (expr 
            (expr 
              (variable_or_function_call TEMPO)) < 
            (expr 
              (literal 45)))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call TEMPO) = 
              (expr 
                (expr 
                  (variable_or_function_call TEMPO)) + 
                (expr 
                  (literal 1))))) \n) 
        (elseif_block_statement ELSEIF 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call Inc)) = 
              (expr 
                (variable_or_function_call DOWN))) AND 
            (expr 
              (expr 
                (variable_or_function_call TEMPO)) > 
              (expr 
                (literal 1)))) THEN 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call TEMPO) = 
                (expr 
                  (expr 
                    (variable_or_function_call TEMPO)) - 
                  (expr 
                    (literal 1))))) \n)) 
        (end_if_statement END IF)) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call TFACTOR) = 
          (expr 
            (expr 
              (literal 1)) + 
            (expr 
              (expr 
                ( 
                  (expr 
                    (expr 
                      (literal 23)) - 
                    (expr 
                      (variable_or_function_call TEMPO))) )) * 
              (expr 
                (literal .03)))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 23)) , 
          (expr 
            (expr 
              (literal 17)) + 
            (expr 
              (variable_or_function_call TEMPO))))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call CHR$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 219)) )))))) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id ClearMenuScreen) 
    ( 
      (parameter_list 
        (parameter Title$)) ) STATIC 
    (block \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call TEXTCOLOR)) , 
          (expr 
            (variable_or_function_call BACKGROUNDCOLOR)))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Title$)) <> 
          (expr 
            (literal "RETAIN"))) THEN \n 
        (then_block 
          (statement 
            (color_statement COLOR 
              (expr 
                (variable_or_function_call TITLECOLOR)))) \n 
          (statement 
            (locate_statement LOCATE 
              (expr 
                (literal 3)) , 
              (expr 
                (literal 20)))) \n \n \n 
          (statement 
            (print_statement PRINT 
              (expr 
                (variable_or_function_call LEFT$ 
                  (args_or_indices 
                    ( 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call SPACE$ 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (expr 
                                      (literal 20)) - 
                                    (expr 
                                      (expr 
                                        (builtin_function LEN 
                                          ( 
                                            (expr 
                                              (variable_or_function_call Title$)) ))) \ 
                                      (expr 
                                        (literal 2)))) )))) + 
                          (expr 
                            (variable_or_function_call Title$))) + 
                        (expr 
                          (variable_or_function_call SPACE$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 20)) ))))) , 
                      (expr 
                        (literal 40)) )))))) \n 
          (statement 
            (color_statement COLOR 
              (expr 
                (variable_or_function_call TEXTCOLOR)))) \n) 
        (end_if_statement END IF)) \n \n 
      (statement 
        (view_print_statement VIEW PRINT 
          (expr 
            (literal 13)) TO 
          (expr 
            (literal 25)))) \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n 
      (statement 
        (view_print_statement VIEW PRINT)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n 
  (function_statement FUNCTION ConfirmDelete STATIC 
    (block \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call BACKGROUNDCOLOR)) , 
          (expr 
            (variable_or_function_call BACKGROUNDCOLOR)))) \n 
      (statement 
        (call_statement 
          (untyped_id DrawBox) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal 13))) , 
            (call_argument 
              (expr 
                (literal 38))) , 
            (call_argument 
              (expr 
                (literal 24))) , 
            (call_argument 
              (expr 
                (literal 78))) , 
            (call_argument 
              (expr 
                (literal "")))))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 0)) , 
          (expr 
            (literal 7)))) \n 
      (statement 
        (call_statement 
          (untyped_id DrawBox) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal 15))) , 
            (call_argument 
              (expr 
                (literal 41))) , 
            (call_argument 
              (expr 
                (literal 20))) , 
            (call_argument 
              (expr 
                (literal 75))) , 
            (call_argument 
              (expr 
                (literal "Delete Song")))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 17)) , 
          (expr 
            (literal 43)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Are you sure you want to delete")))) \n 
      (statement 
        (locate_statement LOCATE , 
          (expr 
            (literal 43)) , 
          (expr 
            (literal 1)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "the current song? 
              (Y/N) ")) ;)) \n \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call i$) = 
                (expr 
                  (variable_or_function_call UCASE$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call INKEY$)) )))))) \n) LOOP 
          (do_condition UNTIL 
            (expr 
              (expr 
                (variable_or_function_call i$)) <> 
              (expr 
                (literal "")))))) \n \n 
      (statement 
        (locate_statement LOCATE , , 
          (expr 
            (literal 0)))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call i$)) = 
          (expr 
            (literal "Y"))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call ConfirmDelete) = 
              (expr 
                (variable_or_function_call TRUE)))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call ConfirmDelete) = 
                (expr 
                  (variable_or_function_call FALSE)))) \n)) 
        (end_if_statement END IF)) \n \n) 
    (end_function_statement END FUNCTION)) \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id CreateSongFile) STATIC 
    (block \n \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id Hdr) AS 
            (type_name 
              (untyped_id FileHeader))))) \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id S) AS 
            (type_name 
              (untyped_id SongIndexCard))))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Hdr.Count) = 
          (expr 
            (literal 0)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Hdr.NextNote) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (seek_statement SEEK # 
          (expr 
            (literal 1)) , 
          (expr 
            (literal 1)))) \n 
      (statement 
        (put_io_statement PUT # 
          (expr 
            (literal 1)) , , 
          (variable_or_function_call Hdr))) \n \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call MAXSONG)) 
          (block \n 
            (statement 
              (put_io_statement PUT # 
                (expr 
                  (literal 1)) , , 
                (variable_or_function_call S))) \n) NEXT i)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id DeleteSong) 
    ( 
      (parameter_list 
        (parameter SongNo)) ) STATIC 
    (block \n \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id HeaderInfo) AS 
            (type_name 
              (untyped_id FileHeader))))) \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id S) AS 
            (type_name 
              (untyped_id SongIndexCard))))) \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id n) AS 
            (type_name 
              (untyped_id SongElement))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call FileError) = 
          (expr 
            (literal 0)))) \n \n 
      (statement 
        (open_statement OPEN 
          (expr 
            (literal "QSYNTH.DAT")) FOR 
          (open_mode BINARY) AS 
          (expr 
            (literal 1)))) \n 
      (statement 
        (get_io_statement GET # 
          (expr 
            (literal 1)) , , 
          (variable_or_function_call HeaderInfo))) \n \n 
      (statement 
        (seek_statement SEEK # 
          (expr 
            (literal 1)) , 
          (expr 
            (expr 
              (expr 
                (builtin_function LEN 
                  ( 
                    (expr 
                      (variable_or_function_call HeaderInfo)) ))) + 
              (expr 
                ( 
                  (expr 
                    (expr 
                      (builtin_function LEN 
                        ( 
                          (expr 
                            (variable_or_function_call S)) ))) * 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call SongNo)) - 
                          (expr 
                            (literal 1))) ))) ))) + 
            (expr 
              (literal 1))))) \n 
      (statement 
        (get_io_statement GET # 
          (expr 
            (literal 1)) , , 
          (variable_or_function_call S))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call BackPtr) = 
          (expr 
            (variable_or_function_call S.Offset)))) \n \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call SongNo)) = 
          (expr 
            (variable_or_function_call HeaderInfo.Count))) THEN \n 
        (then_block \n \n \n \n \n \n \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call HeaderInfo.Count) = 
              (expr 
                (expr 
                  (variable_or_function_call HeaderInfo.Count)) - 
                (expr 
                  (literal 1))))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call HeaderInfo.NextNote) = 
              (expr 
                (variable_or_function_call S.Offset)))) \n \n 
          (statement 
            (seek_statement SEEK # 
              (expr 
                (literal 1)) , 
              (expr 
                (literal 1)))) \n 
          (statement 
            (put_io_statement PUT # 
              (expr 
                (literal 1)) , , 
              (variable_or_function_call HeaderInfo))) \n 
          (statement 
            (close_statement CLOSE 
              (expr 
                (literal 1)))) \n 
          (statement 
            (exit_statement EXIT SUB)) \n) 
        (else_block_statement ELSE 
          (else_block \n \n \n \n \n \n \n 
            (statement 
              (get_io_statement GET # 
                (expr 
                  (literal 1)) , , 
                (variable_or_function_call S))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call ForePtr) = 
                (expr 
                  (variable_or_function_call S.Offset)))) \n)) 
        (end_if_statement END IF)) \n \n \n \n \n \n \n \n \n \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (expr 
              (variable_or_function_call SongNo)) + 
            (expr 
              (literal 1))) TO 
          (expr 
            (variable_or_function_call HeaderInfo.Count)) 
          (block \n 
            (statement 
              (seek_statement SEEK # 
                (expr 
                  (literal 1)) , 
                (expr 
                  (expr 
                    (expr 
                      (builtin_function LEN 
                        ( 
                          (expr 
                            (variable_or_function_call HeaderInfo)) ))) + 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (builtin_function LEN 
                              ( 
                                (expr 
                                  (variable_or_function_call S)) ))) * 
                          (expr 
                            ( 
                              (expr 
                                (expr 
                                  (variable_or_function_call i)) - 
                                (expr 
                                  (literal 1))) ))) ))) + 
                  (expr 
                    (literal 1))))) \n 
            (statement 
              (get_io_statement GET # 
                (expr 
                  (literal 1)) , , 
                (variable_or_function_call S))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call S.Offset) = 
                (expr 
                  (expr 
                    (variable_or_function_call S.Offset)) - 
                  (expr 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call ForePtr)) - 
                        (expr 
                          (variable_or_function_call BackPtr))) ))))) \n 
            (statement 
              (seek_statement SEEK # 
                (expr 
                  (literal 1)) , 
                (expr 
                  (expr 
                    (expr 
                      (builtin_function LEN 
                        ( 
                          (expr 
                            (variable_or_function_call HeaderInfo)) ))) + 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (builtin_function LEN 
                              ( 
                                (expr 
                                  (variable_or_function_call S)) ))) * 
                          (expr 
                            ( 
                              (expr 
                                (expr 
                                  (variable_or_function_call i)) - 
                                (expr 
                                  (literal 2))) ))) ))) + 
                  (expr 
                    (literal 1))))) \n 
            (statement 
              (put_io_statement PUT # 
                (expr 
                  (literal 1)) , , 
                (variable_or_function_call S))) \n) NEXT i)) \n \n \n \n \n \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (variable_or_function_call ForePtr)) TO 
          (expr 
            (expr 
              (variable_or_function_call HeaderInfo.NextNote)) - 
            (expr 
              (builtin_function LEN 
                ( 
                  (expr 
                    (variable_or_function_call n)) )))) STEP 
          (expr 
            (builtin_function LEN 
              ( 
                (expr 
                  (variable_or_function_call n)) ))) 
          (block \n 
            (statement 
              (seek_statement SEEK # 
                (expr 
                  (literal 1)) , 
                (expr 
                  (expr 
                    (expr 
                      (builtin_function LEN 
                        ( 
                          (expr 
                            (variable_or_function_call HeaderInfo)) ))) + 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (builtin_function LEN 
                              ( 
                                (expr 
                                  (variable_or_function_call S)) ))) * 
                          (expr 
                            (variable_or_function_call MAXSONG))) ))) + 
                  (expr 
                    (variable_or_function_call i))))) \n 
            (statement 
              (get_io_statement GET # 
                (expr 
                  (literal 1)) , , 
                (variable_or_function_call n))) \n 
            (statement 
              (seek_statement SEEK # 
                (expr 
                  (literal 1)) , 
                (expr 
                  (expr 
                    (expr 
                      (builtin_function LEN 
                        ( 
                          (expr 
                            (variable_or_function_call HeaderInfo)) ))) + 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (builtin_function LEN 
                              ( 
                                (expr 
                                  (variable_or_function_call S)) ))) * 
                          (expr 
                            (variable_or_function_call MAXSONG))) ))) + 
                  (expr 
                    (variable_or_function_call BackPtr))))) \n 
            (statement 
              (put_io_statement PUT # 
                (expr 
                  (literal 1)) , , 
                (variable_or_function_call n))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call BackPtr) = 
                (expr 
                  (expr 
                    (variable_or_function_call BackPtr)) + 
                  (expr 
                    (builtin_function LEN 
                      ( 
                        (expr 
                          (variable_or_function_call n)) )))))) \n) NEXT i)) \n \n \n \n \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call HeaderInfo.Count) = 
          (expr 
            (expr 
              (variable_or_function_call HeaderInfo.Count)) - 
            (expr 
              (literal 1))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call HeaderInfo.NextNote) = 
          (expr 
            (variable_or_function_call i)))) \n 
      (statement 
        (seek_statement SEEK # 
          (expr 
            (literal 1)) , 
          (expr 
            (literal 1)))) \n 
      (statement 
        (put_io_statement PUT # 
          (expr 
            (literal 1)) , , 
          (variable_or_function_call HeaderInfo))) \n 
      (statement 
        (close_statement CLOSE 
          (expr 
            (literal 1)))) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id DisplayChanges) 
    (block \n \n 
      (statement 
        (call_statement 
          (untyped_id DisplayGameTitle))) \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "The following game characteristics can be easily changed from"))) , 
            (call_argument 
              (expr 
                (literal 5)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "within QuickBASIC Interpreter.  To change the values of these"))) , 
            (call_argument 
              (expr 
                (literal 6)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "characteristics, locate the corresponding CONST or DATA      "))) , 
            (call_argument 
              (expr 
                (literal 7)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "statements in the source code and change their values, then  "))) , 
            (call_argument 
              (expr 
                (literal 8)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "restart the program 
                  (press Shift + F5).                      "))) , 
            (call_argument 
              (expr 
                (literal 9)))))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 15)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Pitch of song playback "))) , 
            (call_argument 
              (expr 
                (literal 11)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Background color       "))) , 
            (call_argument 
              (expr 
                (literal 12)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Text color             "))) , 
            (call_argument 
              (expr 
                (literal 13)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Pressed piano key color"))) , 
            (call_argument 
              (expr 
                (literal 14)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "System songs           "))) , 
            (call_argument 
              (expr 
                (literal 15)))))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "The CONST statements and instructions on changing them are   "))) , 
            (call_argument 
              (expr 
                (literal 17)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "located at the beginning of the main program.                "))) , 
            (call_argument 
              (expr 
                (literal 18)))))) \n \n 
      (statement 
        (do_loop_statement DO 
          (do_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call INKEY$)) = 
              (expr 
                (literal "")))) 
          (block :) LOOP)) \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id DisplayGameTitle) 
    (block \n \n \n 
      (statement 
        (screen_statement SCREEN 
          (expr 
            (literal 0)))) \n 
      (statement 
        (width_statement WIDTH 
          (expr 
            (literal 80)) , 
          (expr 
            (literal 25)))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 4)) , 
          (expr 
            (literal 0)))) \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 1)) , 
          (expr 
            (literal 2)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call CHR$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 201)) )))) ; 
          (expr 
            (variable_or_function_call STRING$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 76)) , 
                  (expr 
                    (literal 205)) )))) ; 
          (expr 
            (variable_or_function_call CHR$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 187)) )))) ;)) \n 
      (statement 
        (for_next_statement FOR x% = 
          (expr 
            (literal 2)) TO 
          (expr 
            (literal 24)) 
          (block \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call x%)) , 
                (expr 
                  (literal 2)))) \n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 186)) )))) ; 
                (expr 
                  (variable_or_function_call TAB 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 79)) )))) ; 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 186)) )))) ;)) \n) NEXT x%)) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 25)) , 
          (expr 
            (literal 2)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call CHR$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 200)) )))) ; 
          (expr 
            (variable_or_function_call STRING$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 76)) , 
                  (expr 
                    (literal 205)) )))) ; 
          (expr 
            (variable_or_function_call CHR$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 188)) )))) ;)) \n \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 0)) , 
          (expr 
            (literal 4)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "          Microsoft          "))) , 
            (call_argument 
              (expr 
                (literal 1)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "   Q S Y N T H E S I Z E R   "))) , 
            (call_argument 
              (expr 
                (literal 2)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "   Press any key to continue   "))) , 
            (call_argument 
              (expr 
                (literal 25)))))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)) , 
          (expr 
            (literal 0)))) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id DisplayIntro) 
    (block \n \n 
      (statement 
        (call_statement 
          (untyped_id DisplayGameTitle))) \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Copyright 
                  (C) 1990 Microsoft Corporation.  All Rights Reserved."))) , 
            (call_argument 
              (expr 
                (literal 4)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Microsoft QSynthesizer allows you to record and play back songs"))) , 
            (call_argument 
              (expr 
                (literal 7)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "entered by pressing keys on the keyboard.  You can save up to "))) , 
            (call_argument 
              (expr 
                (literal 8)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (expr 
                  (variable_or_function_call LTRIM$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call STR$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call MAXSONG)) )))) )))) + 
                (expr 
                  (literal " songs on disk and play them back as often as you like.  You")))) , 
            (call_argument 
              (expr 
                (literal 9)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "can also use the song editor to fine-tune your songs.         "))) , 
            (call_argument 
              (expr 
                (literal 10)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "Just follow the directions in the menus to play, record, save,"))) , 
            (call_argument 
              (expr 
                (literal 12)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal "edit, and delete your songs.                                  "))) , 
            (call_argument 
              (expr 
                (literal 13)))))) \n \n 
      (statement 
        (play_statement PLAY 
          (expr 
            (variable_or_function_call INTROSONG)))) \n \n 
      (statement 
        (do_loop_statement DO 
          (do_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call INKEY$)) = 
              (expr 
                (literal "")))) 
          (block :) LOOP)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id DisplayMenuText) 
    ( 
      (parameter_list 
        (parameter Menu)) ) STATIC 
    (block \n \n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call Menu)) 
          (before_first_case \n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call MAIN)))) 
            (block \n 
              (statement 
                (call_statement 
                  (untyped_id ClearMenuScreen) 
                  (call_argument_list 
                    (call_argument 
                      (expr 
                        (literal "")))))) \n 
              (statement 
                (color_statement COLOR 
                  (expr 
                    (literal 0)) , 
                  (expr 
                    (literal 7)))) \n 
              (statement 
                (call_statement 
                  (untyped_id DrawBox) 
                  (call_argument_list 
                    (call_argument 
                      (expr 
                        (literal 14))) , 
                    (call_argument 
                      (expr 
                        (literal 7))) , 
                    (call_argument 
                      (expr 
                        (literal 24))) , 
                    (call_argument 
                      (expr 
                        (literal 35))) , 
                    (call_argument 
                      (expr 
                        (literal "Song List")))))) \n 
              (statement 
                (color_statement COLOR 
                  (expr 
                    (variable_or_function_call TEXTCOLOR)) , 
                  (expr 
                    (variable_or_function_call BACKGROUNDCOLOR)))) \n 
              (statement 
                (locate_statement LOCATE 
                  (expr 
                    (literal 14)) , 
                  (expr 
                    (literal 46)))) \n 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (literal "P - Play current song")))) \n 
              (statement 
                (locate_statement LOCATE , 
                  (expr 
                    (literal 46)))) \n 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (literal "R - Record a new song")))) \n 
              (statement 
                (locate_statement LOCATE , 
                  (expr 
                    (literal 46)))) \n 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (literal "E - Edit song from list")))) \n 
              (statement 
                (locate_statement LOCATE , 
                  (expr 
                    (literal 46)))) \n 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (literal "D - Delete song from list")))) \n 
              (statement 
                (locate_statement LOCATE , 
                  (expr 
                    (literal 46)))) \n 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (literal "S - Practice QSynthesizer")))) \n 
              (statement 
                (locate_statement LOCATE , 
                  (expr 
                    (literal 46)))) \n 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (literal "Q - Quit QSynthesizer")))) \n 
              (statement 
                (locate_statement LOCATE 
                  (expr 
                    (literal 21)) , 
                  (expr 
                    (literal 40)))) \n 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (literal "Use the arrow keys to select a song.")))) \n 
              (statement 
                (locate_statement LOCATE , 
                  (expr 
                    (literal 41)))) \n 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (literal "Press the corresponding letter to")))) \n 
              (statement 
                (locate_statement LOCATE , 
                  (expr 
                    (literal 44)))) \n 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (literal "make a selection from above.")))) \n \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call PRACTICE))) , 
              (case_expr 
                (expr 
                  (variable_or_function_call RECORD)))) 
            (block \n 
              (if_block_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call Menu)) = 
                  (expr 
                    (variable_or_function_call PRACTICE))) THEN \n 
                (then_block 
                  (statement 
                    (call_statement 
                      (untyped_id ClearMenuScreen) 
                      (call_argument_list 
                        (call_argument 
                          (expr 
                            (literal "Practice Mode")))))) \n 
                  (statement 
                    (call_statement 
                      (untyped_id Center) 
                      (call_argument_list 
                        (call_argument 
                          (expr 
                            (literal "When finished practicing, press the Esc key."))) , 
                        (call_argument 
                          (expr 
                            (literal 20)))))) \n) 
                (else_block_statement ELSE 
                  (else_block \n 
                    (statement 
                      (call_statement 
                        (untyped_id ClearMenuScreen) 
                        (call_argument_list 
                          (call_argument 
                            (expr 
                              (literal "Record Mode")))))) \n 
                    (statement 
                      (call_statement 
                        (untyped_id Center) 
                        (call_argument_list 
                          (call_argument 
                            (expr 
                              (literal "When finished recording, press the Esc key."))) , 
                          (call_argument 
                            (expr 
                              (literal 20)))))) \n)) 
                (end_if_statement END IF)) \n 
              (statement 
                (call_statement 
                  (untyped_id Center) 
                  (call_argument_list 
                    (call_argument 
                      (expr 
                        (literal "To play a note, press the key on the keyboard"))) , 
                    (call_argument 
                      (expr 
                        (literal 16)))))) \n 
              (statement 
                (call_statement 
                  (untyped_id Center) 
                  (call_argument_list 
                    (call_argument 
                      (expr 
                        (literal "corresponding to the desired note shown on"))) , 
                    (call_argument 
                      (expr 
                        (literal 17)))))) \n 
              (statement 
                (call_statement 
                  (untyped_id Center) 
                  (call_argument_list 
                    (call_argument 
                      (expr 
                        (literal "the piano above. "))) , 
                    (call_argument 
                      (expr 
                        (literal 18)))))) \n \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call PLAYBACK)))) 
            (block \n 
              (statement 
                (call_statement 
                  (untyped_id ClearMenuScreen) 
                  (call_argument_list 
                    (call_argument 
                      (expr 
                        (expr 
                          (literal "Playback Mode: ")) + 
                        (expr 
                          (variable_or_function_call RTRIM$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call SongName)) ))))))))) \n 
              (statement 
                (color_statement COLOR 
                  (expr 
                    (variable_or_function_call TITLECOLOR)))) \n 
              (statement 
                (locate_statement LOCATE 
                  (expr 
                    (literal 14)) , 
                  (expr 
                    (expr 
                      (literal 40)) - 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (builtin_function LEN 
                              ( 
                                (expr 
                                  (variable_or_function_call RTRIM$ 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (variable_or_function_call SongDesc)) )))) ))) \ 
                          (expr 
                            (literal 2))) ))))) \n 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (variable_or_function_call RTRIM$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call SongDesc)) )))))) \n 
              (statement 
                (color_statement COLOR 
                  (expr 
                    (variable_or_function_call TEXTCOLOR)))) \n 
              (statement 
                (call_statement 
                  (untyped_id Center) 
                  (call_argument_list 
                    (call_argument 
                      (expr 
                        (literal "Use arrow keys to adjust tempo."))) , 
                    (call_argument 
                      (expr 
                        (literal 17)))))) \n 
              (statement 
                (call_statement 
                  (untyped_id Center) 
                  (call_argument_list 
                    (call_argument 
                      (expr 
                        (literal "Press Enter to start song playback."))) , 
                    (call_argument 
                      (expr 
                        (literal 18)))))) \n 
              (statement 
                (call_statement 
                  (untyped_id Center) 
                  (call_argument_list 
                    (call_argument 
                      (expr 
                        (literal "Press Esc to exit playback mode."))) , 
                    (call_argument 
                      (expr 
                        (literal 19)))))) \n 
              (statement 
                (color_statement COLOR 
                  (expr 
                    (literal 0)) , 
                  (expr 
                    (literal 7)))) \n 
              (statement 
                (call_statement 
                  (untyped_id DrawBox) 
                  (call_argument_list 
                    (call_argument 
                      (expr 
                        (literal 21))) , 
                    (call_argument 
                      (expr 
                        (literal 15))) , 
                    (call_argument 
                      (expr 
                        (literal 24))) , 
                    (call_argument 
                      (expr 
                        (literal 65))) , 
                    (call_argument 
                      (expr 
                        (literal "Tempo Control")))))) \n 
              (statement 
                (locate_statement LOCATE 
                  (expr 
                    (literal 22)) , 
                  (expr 
                    (literal 17)))) \n 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (literal "Slow")))) \n 
              (statement 
                (locate_statement LOCATE 
                  (expr 
                    (literal 22)) , 
                  (expr 
                    (literal 60)))) \n 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (literal "Fast")))) \n 
              (statement 
                (locate_statement LOCATE , 
                  (expr 
                    (literal 17)))) \n 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (variable_or_function_call CHR$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 198)) )))) ; 
                  (expr 
                    (variable_or_function_call STRING$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 22)) , 
                          (expr 
                            (literal 205)) )))) ; 
                  (expr 
                    (variable_or_function_call CHR$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 219)) )))) ; 
                  (expr 
                    (variable_or_function_call STRING$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 22)) , 
                          (expr 
                            (literal 205)) )))) ; 
                  (expr 
                    (variable_or_function_call CHR$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 181)) )))))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TEMPO) = 
                  (expr 
                    (literal 23)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TFACTOR) = 
                  (expr 
                    (literal 1)))) \n 
              (statement 
                (color_statement COLOR 
                  (expr 
                    (variable_or_function_call TEXTCOLOR)) , 
                  (expr 
                    (variable_or_function_call BACKGROUNDCOLOR)))) \n \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call EDITOR)))) 
            (block \n 
              (statement 
                (call_statement 
                  (untyped_id ClearMenuScreen) 
                  (call_argument_list 
                    (call_argument 
                      (expr 
                        (expr 
                          (literal "Edit Mode: ")) + 
                        (expr 
                          (variable_or_function_call RTRIM$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call SongName)) ))))))))) \n 
              (statement 
                (locate_statement LOCATE 
                  (expr 
                    (literal 14)) , 
                  (expr 
                    (expr 
                      (literal 58)) - 
                    (expr 
                      (expr 
                        (builtin_function LEN 
                          ( 
                            (expr 
                              (variable_or_function_call RTRIM$ 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call SongDesc)) )))) ))) \ 
                      (expr 
                        (literal 2)))))) \n 
              (statement 
                (color_statement COLOR 
                  (expr 
                    (variable_or_function_call TITLECOLOR)))) \n 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (variable_or_function_call RTRIM$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call SongDesc)) )))))) \n 
              (statement 
                (color_statement COLOR 
                  (expr 
                    (variable_or_function_call TEXTCOLOR)))) \n 
              (statement 
                (locate_statement LOCATE 
                  (expr 
                    (literal 16)) , 
                  (expr 
                    (literal 46)))) \n 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (literal "C - Change current note")))) \n 
              (statement 
                (locate_statement LOCATE , 
                  (expr 
                    (literal 46)))) \n 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (literal "I - Insert new note")))) \n 
              (statement 
                (locate_statement LOCATE , 
                  (expr 
                    (literal 46)))) \n 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (literal "D - Delete current note")))) \n 
              (statement 
                (locate_statement LOCATE , 
                  (expr 
                    (literal 46)))) \n 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (literal "P - Play song")))) \n 
              (statement 
                (locate_statement LOCATE 
                  (expr 
                    (literal 22)) , 
                  (expr 
                    (literal 41)))) \n 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (literal "Press the corresponding letter to")))) \n 
              (statement 
                (locate_statement LOCATE , 
                  (expr 
                    (literal 39)))) \n 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (literal "make a selection from the list above.")))) \n 
              (statement 
                (locate_statement LOCATE , 
                  (expr 
                    (literal 43)))) \n 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (literal "Press Esc to exit the editor.")) ;)) \n 
              (statement 
                (color_statement COLOR 
                  (expr 
                    (literal 0)) , 
                  (expr 
                    (literal 7)))) \n 
              (statement 
                (call_statement 
                  (untyped_id DrawBox) 
                  (call_argument_list 
                    (call_argument 
                      (expr 
                        (literal 14))) , 
                    (call_argument 
                      (expr 
                        (literal 5))) , 
                    (call_argument 
                      (expr 
                        (literal 24))) , 
                    (call_argument 
                      (expr 
                        (literal 35))) , 
                    (call_argument 
                      (expr 
                        (literal "Note List")))))) \n 
              (statement 
                (color_statement COLOR 
                  (expr 
                    (literal 15)))) \n 
              (statement 
                (locate_statement LOCATE 
                  (expr 
                    (literal 15)) , 
                  (expr 
                    (literal 6)))) \n 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (literal "Note        Octave   Duration")))) \n 
              (statement 
                (color_statement COLOR 
                  (expr 
                    (literal 0)))) \n 
              (statement 
                (locate_statement LOCATE 
                  (expr 
                    (literal 22)) , 
                  (expr 
                    (literal 5)))) \n 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (variable_or_function_call CHR$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 195)) )))) ; 
                  (expr 
                    (variable_or_function_call STRING$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 29)) , 
                          (expr 
                            (literal 196)) )))) ; 
                  (expr 
                    (variable_or_function_call CHR$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 180)) )))))) \n \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call GETNAME)))) 
            (block \n 
              (statement 
                (call_statement 
                  (untyped_id ClearMenuScreen) 
                  (call_argument_list 
                    (call_argument 
                      (expr 
                        (literal "RETAIN")))))) \n 
              (statement 
                (color_statement COLOR 
                  (expr 
                    (literal 0)) , 
                  (expr 
                    (literal 7)))) \n 
              (statement 
                (call_statement 
                  (untyped_id DrawBox) 
                  (call_argument_list 
                    (call_argument 
                      (expr 
                        (literal 14))) , 
                    (call_argument 
                      (expr 
                        (literal 10))) , 
                    (call_argument 
                      (expr 
                        (literal 24))) , 
                    (call_argument 
                      (expr 
                        (literal 70))) , 
                    (call_argument 
                      (expr 
                        (literal "Save Recorded Song")))))) \n 
              (statement 
                (call_statement 
                  (untyped_id DrawBox) 
                  (call_argument_list 
                    (call_argument 
                      (expr 
                        (literal 15))) , 
                    (call_argument 
                      (expr 
                        (literal 26))) , 
                    (call_argument 
                      (expr 
                        (literal 17))) , 
                    (call_argument 
                      (expr 
                        (literal 53))) , 
                    (call_argument 
                      (expr 
                        (literal "")))))) \n 
              (statement 
                (call_statement 
                  (untyped_id DrawBox) 
                  (call_argument_list 
                    (call_argument 
                      (expr 
                        (literal 18))) , 
                    (call_argument 
                      (expr 
                        (literal 26))) , 
                    (call_argument 
                      (expr 
                        (literal 20))) , 
                    (call_argument 
                      (expr 
                        (literal 68))) , 
                    (call_argument 
                      (expr 
                        (literal "")))))) \n 
              (statement 
                (locate_statement LOCATE 
                  (expr 
                    (literal 16)) , 
                  (expr 
                    (literal 12)))) \n 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (literal "Song's Name:")))) \n 
              (statement 
                (locate_statement LOCATE 
                  (expr 
                    (literal 19)) , 
                  (expr 
                    (literal 12)))) \n 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (literal "Description:")))) \n 
              (statement 
                (locate_statement LOCATE 
                  (expr 
                    (literal 22)) , 
                  (expr 
                    (literal 15)))) \n 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (literal "Press Tab to change edit fields, and Enter to save.")))) \n 
              (statement 
                (locate_statement LOCATE 
                  (expr 
                    (literal 23)) , 
                  (expr 
                    (literal 12)))) \n 
              (statement 
                (print_statement PRINT 
                  (expr 
                    (literal "Press Esc to return to main menu without saving the song.")))) \n \n)) 
          (end_select_statement END SELECT))) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id DrawBox) 
    ( 
      (parameter_list 
        (parameter r1) , 
        (parameter c1) , 
        (parameter r2) , 
        (parameter c2) , 
        (parameter Title$)) ) STATIC 
    (block \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call InBoxWidth) = 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call c2)) - 
              (expr 
                (variable_or_function_call c1))) - 
            (expr 
              (literal 1))))) \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call r1)) , 
          (expr 
            (variable_or_function_call c1)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call CHR$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 218)) )))) ; 
          (expr 
            (variable_or_function_call STRING$ 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call InBoxWidth)) , 
                  (expr 
                    (literal 196)) )))) ; 
          (expr 
            (variable_or_function_call CHR$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 191)) )))))) \n \n 
      (statement 
        (for_next_statement FOR t = 
          (expr 
            (expr 
              (variable_or_function_call r1)) + 
            (expr 
              (literal 1))) TO 
          (expr 
            (expr 
              (variable_or_function_call r2)) - 
            (expr 
              (literal 1))) 
          (block \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call t)) , 
                (expr 
                  (variable_or_function_call c1)))) \n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 179)) )))) ; 
                (expr 
                  (variable_or_function_call SPACE$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call InBoxWidth)) )))) ; 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 179)) )))) ;)) \n) NEXT t)) \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call r2)) , 
          (expr 
            (variable_or_function_call c1)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call CHR$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 192)) )))) ; 
          (expr 
            (variable_or_function_call STRING$ 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call InBoxWidth)) , 
                  (expr 
                    (literal 196)) )))) ; 
          (expr 
            (variable_or_function_call CHR$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 217)) )))) ;)) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Title$)) <> 
          (expr 
            (literal ""))) THEN \n 
        (then_block 
          (statement 
            (locate_statement LOCATE 
              (expr 
                (variable_or_function_call r1)) , 
              (expr 
                (expr 
                  (expr 
                    (variable_or_function_call c1)) + 
                  (expr 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call InBoxWidth)) \ 
                        (expr 
                          (literal 2))) ))) - 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (builtin_function LEN 
                          ( 
                            (expr 
                              (variable_or_function_call Title$)) ))) \ 
                      (expr 
                        (literal 2))) ))))) \n 
          (statement 
            (print_statement PRINT 
              (expr 
                (literal " ")) ; 
              (expr 
                (variable_or_function_call Title$)) ; 
              (expr 
                (literal " ")) ;)) \n) 
        (end_if_statement END IF)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id DrawKeyboard) STATIC 
    (block \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call TITLECOLOR)) , 
          (expr 
            (variable_or_function_call BACKGROUNDCOLOR)))) \n 
      (statement 
        (width_statement WIDTH 
          (expr 
            (literal 80)) , 
          (expr 
            (literal 25)))) \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 2)) , 
          (expr 
            (literal 29)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Microsoft QSynthesizer")))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)) , 
          (expr 
            (literal 0)))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 5)) , 
          (expr 
            (literal 4)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call SPACE$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 75)) )))))) \n 
      (statement 
        (locate_statement LOCATE , 
          (expr 
            (literal 4)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call SPACE$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 75)) )))))) \n \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 0)) , 
          (expr 
            (literal 7)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call temp$) = 
          (expr 
            (expr 
              (expr 
                (expr 
                  (expr 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 179)) )))) + 
                        (expr 
                          (literal " "))) + 
                      (expr 
                        (variable_or_function_call CHR$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 219)) ))))) + 
                    (expr 
                      (literal " "))) + 
                  (expr 
                    (variable_or_function_call CHR$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 219)) ))))) + 
                (expr 
                  (literal " "))) + 
              (expr 
                (variable_or_function_call CHR$ 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 179)) ))))) + 
            (expr 
              (literal " "))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call temp$) = 
          (expr 
            (expr 
              (expr 
                (expr 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call temp$)) + 
                      (expr 
                        (variable_or_function_call CHR$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 219)) ))))) + 
                    (expr 
                      (literal " "))) + 
                  (expr 
                    (variable_or_function_call CHR$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 219)) ))))) + 
                (expr 
                  (literal " "))) + 
              (expr 
                (variable_or_function_call CHR$ 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 219)) ))))) + 
            (expr 
              (literal " "))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call temp2$) = 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call CHR$ 
                  (args_or_indices 
                    ( 
                      (expr 
                        (literal 179)) )))) + 
              (expr 
                (literal " "))) + 
            (expr 
              (variable_or_function_call CHR$ 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 222)) ))))))) \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 3)) 
          (block \n 
            (statement 
              (locate_statement LOCATE , 
                (expr 
                  (literal 4)))) \n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 219)) )))) ; 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 221)) )))) ; 
                (expr 
                  (builtin_function MID$ 
                    ( 
                      (expr 
                        (variable_or_function_call temp$)) , 
                      (expr 
                        (literal 2)) ))) ; 
                (expr 
                  (variable_or_function_call temp$)) ;)) \n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call temp$)) ; 
                (expr 
                  (variable_or_function_call temp$)) ; 
                (expr 
                  (variable_or_function_call temp$)) ; 
                (expr 
                  (variable_or_function_call temp2$)) ; 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 219)) )))))) \n) NEXT i)) \n \n \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 2)) 
          (block \n 
            (statement 
              (locate_statement LOCATE , 
                (expr 
                  (literal 4)))) \n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 219)) )))) ; 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 221)) )))) ;)) \n 
            (statement 
              (for_next_statement FOR t = 
                (expr 
                  (literal 1)) TO 
                (expr 
                  (literal 35)) 
                (block \n 
                  (statement 
                    (print_statement PRINT 
                      (expr 
                        (literal " ")) ; 
                      (expr 
                        (variable_or_function_call CHR$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 179)) )))) ;)) \n) NEXT t)) \n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (literal " ")) ; 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 222)) )))) ; 
                (expr 
                  (variable_or_function_call CHR$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (literal 219)) )))))) \n) NEXT i)) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)) , 
          (expr 
            (literal 0)))) \n 
      (statement 
        (locate_statement LOCATE , 
          (expr 
            (literal 4)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call SPACE$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 75)) )))))) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id DrawNote) 
    ( 
      (parameter_list 
        (parameter Note) , 
        (parameter Octave) , 
        (parameter Action)) ) STATIC 
    (block \n \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call Note)) = 
            (expr 
              (literal 0))) THEN 
          (if_inline_action 
            (statement 
              (exit_statement EXIT SUB))))) \n \n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call Note)) 
          (before_first_case \n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call A))) , 
              (case_expr 
                (expr 
                  (variable_or_function_call B))) , 
              (case_expr 
                (expr 
                  (variable_or_function_call C))) , 
              (case_expr 
                (expr 
                  (variable_or_function_call D))) , 
              (case_expr 
                (expr 
                  (variable_or_function_call E))) , 
              (case_expr 
                (expr 
                  (variable_or_function_call F))) , 
              (case_expr 
                (expr 
                  (variable_or_function_call G)))) 
            (block \n 
              (statement 
                (select_case_statement SELECT CASE 
                  (expr 
                    (variable_or_function_call Note)) 
                  (before_first_case \n) 
                  (case_block 
                    (case_statement CASE 
                      (case_expr 
                        (expr 
                          (variable_or_function_call A)))) 
                    (block \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Offset) = 
                          (expr 
                            (literal 10)))) \n)) 
                  (case_block 
                    (case_statement CASE 
                      (case_expr 
                        (expr 
                          (variable_or_function_call B)))) 
                    (block \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Offset) = 
                          (expr 
                            (literal 12)))) \n)) 
                  (case_block 
                    (case_statement CASE 
                      (case_expr 
                        (expr 
                          (variable_or_function_call C)))) 
                    (block \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Offset) = 
                          (expr 
                            (literal 0)))) \n)) 
                  (case_block 
                    (case_statement CASE 
                      (case_expr 
                        (expr 
                          (variable_or_function_call D)))) 
                    (block \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Offset) = 
                          (expr 
                            (literal 2)))) \n)) 
                  (case_block 
                    (case_statement CASE 
                      (case_expr 
                        (expr 
                          (variable_or_function_call E)))) 
                    (block \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Offset) = 
                          (expr 
                            (literal 4)))) \n)) 
                  (case_block 
                    (case_statement CASE 
                      (case_expr 
                        (expr 
                          (variable_or_function_call F)))) 
                    (block \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Offset) = 
                          (expr 
                            (literal 6)))) \n)) 
                  (case_block 
                    (case_statement CASE 
                      (case_expr 
                        (expr 
                          (variable_or_function_call G)))) 
                    (block \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Offset) = 
                          (expr 
                            (literal 8)))) \n)) 
                  (end_select_statement END SELECT))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call col) = 
                  (expr 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (literal 34)) + 
                          (expr 
                            (variable_or_function_call Offset))) )) + 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call Octave)) * 
                          (expr 
                            (literal 14))) ))))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call bottom) = 
                  (expr 
                    (literal 11)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call keyColor) = 
                  (expr 
                    (literal 7)))) \n \n)) 
          (case_block 
            (case_statement CASE ELSE) 
            (block \n 
              (statement 
                (select_case_statement SELECT CASE 
                  (expr 
                    (variable_or_function_call Note)) 
                  (before_first_case \n) 
                  (case_block 
                    (case_statement CASE 
                      (case_expr 
                        (expr 
                          (variable_or_function_call DF)))) 
                    (block \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Offset) = 
                          (expr 
                            (literal 1)))) \n)) 
                  (case_block 
                    (case_statement CASE 
                      (case_expr 
                        (expr 
                          (variable_or_function_call EF)))) 
                    (block \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Offset) = 
                          (expr 
                            (literal 3)))) \n)) 
                  (case_block 
                    (case_statement CASE 
                      (case_expr 
                        (expr 
                          (variable_or_function_call GF)))) 
                    (block \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Offset) = 
                          (expr 
                            (literal 7)))) \n)) 
                  (case_block 
                    (case_statement CASE 
                      (case_expr 
                        (expr 
                          (variable_or_function_call AF)))) 
                    (block \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Offset) = 
                          (expr 
                            (literal 9)))) \n)) 
                  (case_block 
                    (case_statement CASE 
                      (case_expr 
                        (expr 
                          (variable_or_function_call BF)))) 
                    (block \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Offset) = 
                          (expr 
                            (literal 11)))) \n)) 
                  (end_select_statement END SELECT))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call col) = 
                  (expr 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (literal 34)) + 
                          (expr 
                            (variable_or_function_call Offset))) )) + 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call Octave)) * 
                          (expr 
                            (literal 14))) ))))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call bottom) = 
                  (expr 
                    (literal 9)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call keyColor) = 
                  (expr 
                    (literal 0)))) \n)) 
          (end_select_statement END SELECT))) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Action)) = 
          (expr 
            (variable_or_function_call DOWN))) THEN \n 
        (then_block 
          (statement 
            (color_statement COLOR 
              (expr 
                (variable_or_function_call PRESSEDKEYCOLOR)))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (color_statement COLOR 
                (expr 
                  (variable_or_function_call keyColor)))) \n)) 
        (end_if_statement END IF)) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (expr 
              (variable_or_function_call col)) > 
            (expr 
              (literal 5))) AND 
          (expr 
            (expr 
              (variable_or_function_call col)) < 
            (expr 
              (literal 77)))) THEN \n 
        (then_block 
          (statement 
            (for_next_statement FOR row = 
              (expr 
                (literal 7)) TO 
              (expr 
                (variable_or_function_call bottom)) 
              (block \n 
                (statement 
                  (locate_statement LOCATE 
                    (expr 
                      (variable_or_function_call row)) , 
                    (expr 
                      (variable_or_function_call col)))) \n 
                (statement 
                  (print_statement PRINT 
                    (expr 
                      (variable_or_function_call CHR$ 
                        (args_or_indices 
                          ( 
                            (expr 
                              (literal 219)) )))))) \n) NEXT row)) \n) 
        (end_if_statement END IF)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id EditSong) 
    ( 
      (parameter_list 
        (parameter SongNo)) ) STATIC 
    (block \n \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id EditNote) AS 
            (type_name 
              (untyped_id SongElement))) , 
          (dim_variable 
            (untyped_id DrawnNote) AS 
            (type_name 
              (untyped_id SongElement))))) \n \n \n 
      (statement 
        (call_statement 
          (untyped_id DisplayMenuText) 
          (call_argument_list 
            (call_argument EDITOR)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Cursor) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call WindowTop) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call DrawnNote.Note) = 
          (expr 
            (literal 0)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Finished) = 
          (expr 
            (variable_or_function_call FALSE)))) \n 
      (statement 
        (gosub_statement GOSUB 
          (target 
            (text_label 
              (untyped_id DisplayNoteTable))))) \n \n \n 
      (statement 
        (while_wend_statement WHILE 
          (expr NOT 
            (expr 
              (variable_or_function_call Finished))) 
          (block \n 
            (statement 
              (do_loop_statement DO 
                (block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call x$) = 
                      (expr 
                        (variable_or_function_call INKEY$)))) \n) LOOP 
                (do_condition UNTIL 
                  (expr 
                    (expr 
                      (variable_or_function_call x$)) <> 
                    (expr 
                      (literal "")))))) \n \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (builtin_function LEN 
                    ( 
                      (expr 
                        (variable_or_function_call x$)) ))) > 
                (expr 
                  (literal 1))) THEN \n 
              (then_block 
                (statement 
                  (color_statement COLOR 
                    (expr 
                      (literal 0)) , 
                    (expr 
                      (literal 7)))) \n 
                (statement 
                  (gosub_statement GOSUB 
                    (target 
                      (text_label 
                        (untyped_id DrawNoteCursor))))) \n 
                (if_block_statement IF 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call RIGHT$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call x$)) , 
                              (expr 
                                (literal 1)) )))) = 
                      (expr 
                        (literal "H"))) AND 
                    (expr 
                      (expr 
                        (variable_or_function_call Cursor)) > 
                      (expr 
                        (literal 1)))) THEN \n 
                  (then_block 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Cursor) = 
                        (expr 
                          (expr 
                            (variable_or_function_call Cursor)) - 
                          (expr 
                            (literal 1))))) \n) 
                  (elseif_block_statement ELSEIF 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call RIGHT$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call x$)) , 
                                (expr 
                                  (literal 1)) )))) = 
                        (expr 
                          (literal "P"))) AND 
                      (expr 
                        (expr 
                          (variable_or_function_call Cursor)) < 
                        (expr 
                          (variable_or_function_call Counter)))) THEN 
                    (else_block \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Cursor) = 
                          (expr 
                            (expr 
                              (variable_or_function_call Cursor)) + 
                            (expr 
                              (literal 1))))) \n)) 
                  (end_if_statement END IF)) \n 
                (statement 
                  (color_statement COLOR 
                    (expr 
                      (literal 7)) , 
                    (expr 
                      (literal 0)))) \n 
                (statement 
                  (gosub_statement GOSUB 
                    (target 
                      (text_label 
                        (untyped_id DrawNoteCursor))))) \n 
                (statement 
                  (gosub_statement GOSUB 
                    (target 
                      (text_label 
                        (untyped_id PrintEditorStatus))))) \n \n) 
              (else_block_statement ELSE 
                (else_block \n 
                  (statement 
                    (select_case_statement SELECT CASE 
                      (expr 
                        (variable_or_function_call UCASE$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call x$)) )))) 
                      (before_first_case \n) 
                      (case_block 
                        (case_statement CASE 
                          (case_expr 
                            (expr 
                              (literal "C")))) 
                        (block \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call EditNote) = 
                              (expr 
                                (variable_or_function_call Song 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call Cursor)) )))))) \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call EditTitle$) = 
                              (expr 
                                (literal "Change a Note")))) \n 
                          (statement 
                            (gosub_statement GOSUB 
                              (target 
                                (text_label 
                                  (untyped_id GetNewNote))))) \n 
                          (if_block_statement IF 
                            (expr NOT 
                              (expr 
                                ( 
                                  (expr 
                                    (variable_or_function_call Cancelled)) ))) THEN \n 
                            (then_block 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call Song 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (variable_or_function_call Cursor)) ))) = 
                                  (expr 
                                    (variable_or_function_call EditNote)))) \n) 
                            (end_if_statement END IF)) \n 
                          (statement 
                            (gosub_statement GOSUB 
                              (target 
                                (text_label 
                                  (untyped_id DisplayNoteTable))))) \n \n)) 
                      (case_block 
                        (case_statement CASE 
                          (case_expr 
                            (expr 
                              (literal "D")))) 
                        (block \n 
                          (statement 
                            (gosub_statement GOSUB 
                              (target 
                                (text_label 
                                  (untyped_id DeleteCurrentNote))))) \n \n)) 
                      (case_block 
                        (case_statement CASE 
                          (case_expr 
                            (expr 
                              (literal "I")))) 
                        (block \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call EditNote.Note) = 
                              (expr 
                                (variable_or_function_call C)))) \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call EditNote.Oct) = 
                              (expr 
                                (literal 0)))) \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call EditNote.Dur) = 
                              (expr 
                                (literal 4)))) \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call EditTitle$) = 
                              (expr 
                                (literal "Insert a Note")))) \n 
                          (statement 
                            (gosub_statement GOSUB 
                              (target 
                                (text_label 
                                  (untyped_id GetNewNote))))) \n 
                          (if_block_statement IF 
                            (expr NOT 
                              (expr 
                                ( 
                                  (expr 
                                    (variable_or_function_call Cancelled)) ))) THEN \n 
                            (then_block 
                              (statement 
                                (gosub_statement GOSUB 
                                  (target 
                                    (text_label 
                                      (untyped_id InsertEditNote))))) \n) 
                            (end_if_statement END IF)) \n 
                          (statement 
                            (gosub_statement GOSUB 
                              (target 
                                (text_label 
                                  (untyped_id DisplayNoteTable))))) \n \n)) 
                      (case_block 
                        (case_statement CASE 
                          (case_expr 
                            (expr 
                              (literal "P")))) 
                        (block \n 
                          (statement 
                            (call_statement 
                              (untyped_id DrawNote) 
                              (call_argument_list 
                                (call_argument DrawnNote.Note) , 
                                (call_argument DrawnNote.Oct) , 
                                (call_argument UP)))) \n 
                          (statement 
                            (call_statement 
                              (untyped_id PlaySong))) \n 
                          (statement 
                            (call_statement 
                              (untyped_id DisplayMenuText) 
                              (call_argument_list 
                                (call_argument EDITOR)))) \n 
                          (statement 
                            (gosub_statement GOSUB 
                              (target 
                                (text_label 
                                  (untyped_id DisplayNoteTable))))) \n \n)) 
                      (case_block 
                        (case_statement CASE 
                          (case_expr 
                            (expr 
                              (variable_or_function_call CHR$ 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (literal 27)) )))))) 
                        (block \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call Finished) = 
                              (expr 
                                (variable_or_function_call TRUE)))) \n \n)) 
                      (end_select_statement END SELECT))) \n)) 
              (end_if_statement END IF)) \n) WEND)) \n \n \n 
      (if_block_statement IF 
        (expr 
          (variable_or_function_call SaveChanges)) THEN \n 
        (then_block 
          (statement 
            (call_statement 
              (untyped_id DeleteSong) 
              (call_argument_list 
                (call_argument SongNo)))) \n 
          (statement 
            (call_statement 
              (untyped_id SaveSong))) \n) 
        (end_if_statement END IF)) \n 
      (statement 
        (call_statement 
          (untyped_id DrawNote) 
          (call_argument_list 
            (call_argument DrawnNote.Note) , 
            (call_argument DrawnNote.Oct) , 
            (call_argument UP)))) \n 
      (statement 
        (exit_statement EXIT SUB)) \n \n \n 
      (label 
        (text_label 
          (untyped_id DisplayNoteTable)) :) \n 
      (statement 
        (gosub_statement GOSUB 
          (target 
            (text_label 
              (untyped_id PrintEditorStatus))))) \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 16)) TO 
          (expr 
            (literal 21)) 
          (block \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call i)) , 
                (expr 
                  (literal 6)))) \n 
            (statement 
              (color_statement COLOR 
                (expr 
                  (literal 0)) , 
                (expr 
                  (literal 7)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call CurNote) = 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call i)) + 
                    (expr 
                      (variable_or_function_call WindowTop))) - 
                  (expr 
                    (literal 16))))) \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call CurNote)) <= 
                (expr 
                  (variable_or_function_call Counter))) THEN \n 
              (then_block 
                (statement 
                  (gosub_statement GOSUB 
                    (target 
                      (text_label 
                        (untyped_id PrintCurNote))))) \n) 
              (else_block_statement ELSE 
                (else_block \n 
                  (statement 
                    (print_statement PRINT 
                      (expr 
                        (variable_or_function_call SPACE$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 29)) )))))) \n)) 
              (end_if_statement END IF)) \n) NEXT i)) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)) , 
          (expr 
            (literal 0)))) \n \n \n 
      (label 
        (text_label 
          (untyped_id DrawNoteCursor)) :) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Cursor)) < 
          (expr 
            (variable_or_function_call WindowTop))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call WindowTop) = 
              (expr 
                (variable_or_function_call Cursor)))) \n 
          (statement 
            (goto_statement GOTO 
              (target 
                (text_label 
                  (untyped_id DisplayNoteTable))))) \n) 
        (elseif_block_statement ELSEIF 
          (expr 
            (expr 
              (variable_or_function_call Cursor)) > 
            (expr 
              (expr 
                (variable_or_function_call WindowTop)) + 
              (expr 
                (literal 5)))) THEN 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call WindowTop) = 
                (expr 
                  (expr 
                    (variable_or_function_call Cursor)) - 
                  (expr 
                    (literal 5))))) \n 
            (statement 
              (goto_statement GOTO 
                (target 
                  (text_label 
                    (untyped_id DisplayNoteTable))))) \n)) 
        (end_if_statement END IF)) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurNote) = 
          (expr 
            (variable_or_function_call Cursor)))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call Cursor)) - 
              (expr 
                (variable_or_function_call WindowTop))) + 
            (expr 
              (literal 16))) , 
          (expr 
            (literal 6)))) \n 
      (statement 
        (gosub_statement GOSUB 
          (target 
            (text_label 
              (untyped_id PrintCurNote))))) \n 
      (statement 
        (call_statement 
          (untyped_id DrawNote) 
          (call_argument_list 
            (call_argument DrawnNote.Note) , 
            (call_argument DrawnNote.Oct) , 
            (call_argument UP)))) \n 
      (statement 
        (call_statement 
          (untyped_id DrawNote) 
          (call_argument_list 
            (call_argument 
              (expr 
                (variable_or_function_call Song 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call CurNote)) )) . Note))) , 
            (call_argument 
              (expr 
                (variable_or_function_call Song 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call CurNote)) )) . Oct))) , 
            (call_argument DOWN)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call DrawnNote) = 
          (expr 
            (variable_or_function_call Song 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call CurNote)) )))))) \n 
      (statement 
        (return_statement RETURN)) \n \n \n 
      (label 
        (text_label 
          (untyped_id PrintCurNote)) :) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Song 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call CurNote)) )) . Note)) = 
          (expr 
            (literal 0))) THEN \n 
        (then_block 
          (statement 
            (print_using_statement PRINT USING 
              (expr 
                (literal " \        \           ###### ")) ; 
              (expr 
                (literal "<rest>")) ; 
              (expr 
                (variable_or_function_call Song 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call CurNote)) )) . Dur)))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (print_using_statement PRINT USING 
                (expr 
                  (literal " \    \       ##      ###### ")) ; 
                (expr 
                  (variable_or_function_call GetNote$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call Song 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call CurNote)) )) . Note)) )))) ; 
                (expr 
                  (variable_or_function_call Song 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call CurNote)) )) . Oct)) ; 
                (expr 
                  (variable_or_function_call Song 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call CurNote)) )) . Dur)))) \n)) 
        (end_if_statement END IF)) \n 
      (statement 
        (return_statement RETURN)) \n \n \n 
      (label 
        (text_label 
          (untyped_id PrintEditorStatus)) :) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)) , 
          (expr 
            (literal 0)))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 23)) , 
          (expr 
            (literal 6)))) \n 
      (statement 
        (print_using_statement PRINT USING 
          (expr 
            (literal " Notes: ####  Current:  #### ")) ; 
          (expr 
            (variable_or_function_call Counter)) ; 
          (expr 
            (variable_or_function_call Cursor)))) \n 
      (statement 
        (return_statement RETURN)) \n \n \n 
      (label 
        (text_label 
          (untyped_id DeleteCurrentNote)) :) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Counter)) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (statement 
            (call_statement 
              (untyped_id ErrorMessage) 
              (call_argument_list 
                (call_argument 
                  (expr 
                    (literal "You cannot delete the last note.")))))) \n 
          (statement 
            (call_statement 
              (untyped_id DisplayMenuText) 
              (call_argument_list 
                (call_argument EDITOR)))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Counter) = 
                (expr 
                  (expr 
                    (variable_or_function_call Counter)) - 
                  (expr 
                    (literal 1))))) \n 
            (statement 
              (for_next_statement FOR i = 
                (expr 
                  (variable_or_function_call Cursor)) TO 
                (expr 
                  (variable_or_function_call Counter)) 
                (block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Song 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call i)) ))) = 
                      (expr 
                        (variable_or_function_call Song 
                          (args_or_indices 
                            ( 
                              (expr 
                                (expr 
                                  (variable_or_function_call i)) + 
                                (expr 
                                  (literal 1))) )))))) \n) NEXT i)) \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call Cursor)) > 
                  (expr 
                    (variable_or_function_call Counter))) THEN 
                (if_inline_action 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Cursor) = 
                      (expr 
                        (variable_or_function_call Counter))))))) \n)) 
        (end_if_statement END IF)) \n 
      (statement 
        (goto_statement GOTO 
          (target 
            (text_label 
              (untyped_id DisplayNoteTable))))) \n \n \n \n \n \n \n \n 
      (label 
        (text_label 
          (untyped_id GetNewNote)) :) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 0)) , 
          (expr 
            (literal 7)))) \n 
      (statement 
        (call_statement 
          (untyped_id DrawBox) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal 16))) , 
            (call_argument 
              (expr 
                (literal 39))) , 
            (call_argument 
              (expr 
                (literal 24))) , 
            (call_argument 
              (expr 
                (literal 76))) , 
            (call_argument EditTitle$)))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 18)) , 
          (expr 
            (literal 42)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Use arrow keys to change values")))) \n 
      (statement 
        (locate_statement LOCATE , 
          (expr 
            (literal 42)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Enter when done, Esc to cancel")))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 21)) , 
          (expr 
            (literal 42)))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)) , 
          (expr 
            (literal 0)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Note")) ;)) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 0)) , 
          (expr 
            (literal 7)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "       Octave      Duration")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call EditField) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call EditDone) = 
          (expr 
            (variable_or_function_call FALSE)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Cancelled) = 
          (expr 
            (variable_or_function_call FALSE)))) \n \n 
      (statement 
        (while_wend_statement WHILE 
          (expr NOT 
            (expr 
              (variable_or_function_call EditDone))) 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Note$) = 
                (expr 
                  (variable_or_function_call GetNote$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call EditNote.Note)) )))))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 22)) , 
                (expr 
                  (literal 42)))) \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call EditNote.Note)) > 
                (expr 
                  (literal 0))) THEN \n 
              (then_block 
                (statement 
                  (print_using_statement PRINT USING 
                    (expr 
                      (literal "\         \  ##         ######")) ; 
                    (expr 
                      (variable_or_function_call Note$)) ; 
                    (expr 
                      (variable_or_function_call EditNote.Oct)) ; 
                    (expr 
                      (variable_or_function_call EditNote.Dur)))) \n) 
              (else_block_statement ELSE 
                (else_block \n 
                  (statement 
                    (print_using_statement PRINT USING 
                      (expr 
                        (literal "\               \       ######")) ; 
                      (expr 
                        (literal "    <rest>")) ; 
                      (expr 
                        (variable_or_function_call EditNote.Dur)))) \n)) 
              (end_if_statement END IF)) \n \n 
            (statement 
              (do_loop_statement DO 
                (block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call k$) = 
                      (expr 
                        (variable_or_function_call INKEY$)))) \n) LOOP 
                (do_condition WHILE 
                  (expr 
                    (expr 
                      (variable_or_function_call k$)) = 
                    (expr 
                      (literal "")))))) \n \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (builtin_function LEN 
                    ( 
                      (expr 
                        (variable_or_function_call k$)) ))) > 
                (expr 
                  (literal 1))) THEN \n 
              (then_block 
                (statement 
                  (select_case_statement SELECT CASE 
                    (expr 
                      (variable_or_function_call RIGHT$ 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call k$)) , 
                            (expr 
                              (literal 1)) )))) 
                    (before_first_case \n) 
                    (case_block 
                      (case_statement CASE 
                        (case_expr 
                          (expr 
                            (literal "H"))) , 
                        (case_expr 
                          (expr 
                            (literal "P")))) 
                      (block \n 
                        (if_block_statement IF 
                          (expr 
                            (expr 
                              (variable_or_function_call RIGHT$ 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call k$)) , 
                                    (expr 
                                      (literal 1)) )))) = 
                            (expr 
                              (literal "H"))) THEN \n 
                          (then_block 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call Increment) = 
                                (expr 
                                  (literal 1)))) \n) 
                          (else_block_statement ELSE 
                            (else_block \n 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call Increment) = 
                                  (expr - 
                                    (expr 
                                      (literal 1))))) \n)) 
                          (end_if_statement END IF)) \n \n 
                        (statement 
                          (select_case_statement SELECT CASE 
                            (expr 
                              (variable_or_function_call EditField)) 
                            (before_first_case \n) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (literal 1)))) 
                              (block \n 
                                (statement 
                                  (assignment_statement 
                                    (variable_or_function_call EditNote.Note) = 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call EditNote.Note)) + 
                                      (expr 
                                        (variable_or_function_call Increment))))) \n 
                                (if_block_statement IF 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call EditNote.Note)) > 
                                    (expr 
                                      (variable_or_function_call B))) THEN \n 
                                  (then_block 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call EditNote.Note) = 
                                        (expr 
                                          (literal 0)))) \n 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call EditNote.Oct) = 
                                        (expr 
                                          (expr 
                                            (variable_or_function_call EditNote.Oct)) + 
                                          (expr 
                                            (literal 1))))) \n) 
                                  (elseif_block_statement ELSEIF 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call EditNote.Note)) < 
                                      (expr 
                                        (literal 0))) THEN 
                                    (else_block \n 
                                      (statement 
                                        (assignment_statement 
                                          (variable_or_function_call EditNote.Note) = 
                                          (expr 
                                            (variable_or_function_call B)))) \n 
                                      (statement 
                                        (assignment_statement 
                                          (variable_or_function_call EditNote.Oct) = 
                                          (expr 
                                            (expr 
                                              (variable_or_function_call EditNote.Oct)) - 
                                            (expr 
                                              (literal 1))))) \n)) 
                                  (end_if_statement END IF)) \n)) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (literal 2)))) 
                              (block \n 
                                (statement 
                                  (assignment_statement 
                                    (variable_or_function_call EditNote.Oct) = 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call EditNote.Oct)) + 
                                      (expr 
                                        (variable_or_function_call Increment))))) \n)) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (literal 3)))) 
                              (block \n 
                                (statement 
                                  (assignment_statement 
                                    (variable_or_function_call EditNote.Dur) = 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call EditNote.Dur)) + 
                                      (expr 
                                        (variable_or_function_call Increment))))) \n 
                                (statement 
                                  (if_inline_statement IF 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call EditNote.Dur)) < 
                                      (expr 
                                        (literal 1))) THEN 
                                    (if_inline_action 
                                      (statement 
                                        (assignment_statement 
                                          (variable_or_function_call EditNote.Dur) = 
                                          (expr 
                                            (literal 0))))))) \n)) 
                            (end_select_statement END SELECT))) \n \n 
                        (if_block_statement IF 
                          (expr 
                            (expr 
                              (variable_or_function_call EditNote.Oct)) = 
                            (expr 
                              (literal 3))) THEN \n 
                          (then_block 
                            (if_block_statement IF 
                              (expr 
                                (expr 
                                  (variable_or_function_call EditNote.Note)) > 
                                (expr 
                                  (variable_or_function_call C))) THEN \n 
                              (then_block 
                                (statement 
                                  (assignment_statement 
                                    (variable_or_function_call EditNote.Oct) = 
                                    (expr 
                                      (literal 2)))) \n) 
                              (end_if_statement END IF)) \n) 
                          (elseif_block_statement ELSEIF 
                            (expr 
                              (expr 
                                (variable_or_function_call EditNote.Oct)) > 
                              (expr 
                                (literal 3))) THEN 
                            (else_block \n 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call EditNote.Oct) = 
                                  (expr 
                                    (literal 3)))) \n)) 
                          (elseif_block_statement ELSEIF 
                            (expr 
                              (expr 
                                (variable_or_function_call EditNote.Oct)) < 
                              (expr - 
                                (expr 
                                  (literal 2)))) THEN 
                            (else_block \n 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call EditNote.Oct) = 
                                  (expr - 
                                    (expr 
                                      (literal 2))))) \n)) 
                          (end_if_statement END IF)) \n \n)) 
                    (case_block 
                      (case_statement CASE 
                        (case_expr 
                          (expr 
                            (literal "K"))) , 
                        (case_expr 
                          (expr 
                            (literal "M")))) 
                      (block \n 
                        (if_block_statement IF 
                          (expr 
                            (expr 
                              (variable_or_function_call RIGHT$ 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call k$)) , 
                                    (expr 
                                      (literal 1)) )))) = 
                            (expr 
                              (literal "K"))) THEN \n 
                          (then_block 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call Increment) = 
                                (expr - 
                                  (expr 
                                    (literal 1))))) \n) 
                          (else_block_statement ELSE 
                            (else_block \n 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call Increment) = 
                                  (expr 
                                    (literal 1)))) \n)) 
                          (end_if_statement END IF)) \n \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call EditField) = 
                            (expr 
                              (expr 
                                (variable_or_function_call EditField)) + 
                              (expr 
                                (variable_or_function_call Increment))))) \n 
                        (statement 
                          (if_inline_statement IF 
                            (expr 
                              (expr 
                                (variable_or_function_call EditField)) > 
                              (expr 
                                (literal 3))) THEN 
                            (if_inline_action 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call EditField) = 
                                  (expr 
                                    (literal 1))))))) \n 
                        (statement 
                          (if_inline_statement IF 
                            (expr 
                              (expr 
                                (variable_or_function_call EditField)) < 
                              (expr 
                                (literal 1))) THEN 
                            (if_inline_action 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call EditField) = 
                                  (expr 
                                    (literal 3))))))) \n \n 
                        (statement 
                          (locate_statement LOCATE 
                            (expr 
                              (literal 21)) , 
                            (expr 
                              (literal 42)))) \n 
                        (statement 
                          (color_statement COLOR 
                            (expr 
                              (literal 0)) , 
                            (expr 
                              (literal 7)))) \n 
                        (statement 
                          (print_statement PRINT 
                            (expr 
                              (literal "Note       Octave      Duration")))) \n 
                        (statement 
                          (color_statement COLOR 
                            (expr 
                              (literal 7)) , 
                            (expr 
                              (literal 0)))) \n 
                        (statement 
                          (select_case_statement SELECT CASE 
                            (expr 
                              (variable_or_function_call EditField)) 
                            (before_first_case \n) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (literal 1)))) 
                              (block \n 
                                (statement 
                                  (locate_statement LOCATE 
                                    (expr 
                                      (literal 21)) , 
                                    (expr 
                                      (literal 42)))) \n 
                                (statement 
                                  (print_statement PRINT 
                                    (expr 
                                      (literal "Note")))) \n)) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (literal 2)))) 
                              (block \n 
                                (statement 
                                  (locate_statement LOCATE 
                                    (expr 
                                      (literal 21)) , 
                                    (expr 
                                      (literal 53)))) \n 
                                (statement 
                                  (print_statement PRINT 
                                    (expr 
                                      (literal "Octave")))) \n)) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (literal 3)))) 
                              (block \n 
                                (statement 
                                  (locate_statement LOCATE 
                                    (expr 
                                      (literal 21)) , 
                                    (expr 
                                      (literal 65)))) \n 
                                (statement 
                                  (print_statement PRINT 
                                    (expr 
                                      (literal "Duration")))) \n)) 
                            (end_select_statement END SELECT))) \n 
                        (statement 
                          (color_statement COLOR 
                            (expr 
                              (literal 0)) , 
                            (expr 
                              (literal 7)))) \n \n)) 
                    (end_select_statement END SELECT))) \n \n) 
              (elseif_block_statement ELSEIF 
                (expr 
                  (expr 
                    (variable_or_function_call k$)) = 
                  (expr 
                    (variable_or_function_call CHR$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 13)) ))))) THEN 
                (else_block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call EditDone) = 
                      (expr 
                        (variable_or_function_call TRUE)))) \n)) 
              (elseif_block_statement ELSEIF 
                (expr 
                  (expr 
                    (variable_or_function_call k$)) = 
                  (expr 
                    (variable_or_function_call CHR$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (literal 27)) ))))) THEN 
                (else_block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Cancelled) = 
                      (expr 
                        (variable_or_function_call TRUE)))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call EditDone) = 
                      (expr 
                        (variable_or_function_call TRUE)))) \n)) 
              (end_if_statement END IF)) \n) WEND)) \n 
      (statement 
        (call_statement 
          (untyped_id DisplayMenuText) 
          (call_argument_list 
            (call_argument EDITOR)))) \n 
      (statement 
        (return_statement RETURN)) \n \n \n 
      (label 
        (text_label 
          (untyped_id InsertEditNote)) :) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Counter) = 
          (expr 
            (expr 
              (variable_or_function_call Counter)) + 
            (expr 
              (literal 1))))) \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (variable_or_function_call Counter)) TO 
          (expr 
            (expr 
              (variable_or_function_call Cursor)) + 
            (expr 
              (literal 1))) STEP 
          (expr - 
            (expr 
              (literal 1))) 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Song 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call i)) ))) = 
                (expr 
                  (variable_or_function_call Song 
                    (args_or_indices 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call i)) - 
                          (expr 
                            (literal 1))) )))))) \n) NEXT i)) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Song 
            (args_or_indices 
              ( 
                (expr 
                  (variable_or_function_call Cursor)) ))) = 
          (expr 
            (variable_or_function_call EditNote)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Cursor) = 
          (expr 
            (expr 
              (variable_or_function_call Cursor)) + 
            (expr 
              (literal 1))))) \n 
      (statement 
        (return_statement RETURN)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id ErrorMessage) 
    ( 
      (parameter_list 
        (parameter msg$)) ) STATIC 
    (block \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 15)) , 
          (expr 
            (literal 4)))) \n 
      (statement 
        (call_statement 
          (untyped_id DrawBox) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal 15))) , 
            (call_argument 
              (expr 
                (literal 15))) , 
            (call_argument 
              (expr 
                (literal 19))) , 
            (call_argument 
              (expr 
                (literal 65))) , 
            (call_argument 
              (expr 
                (literal "")))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 16)) , 
          (expr 
            (expr 
              (literal 40)) - 
            (expr 
              (expr 
                (builtin_function LEN 
                  ( 
                    (expr 
                      (variable_or_function_call msg$)) ))) \ 
              (expr 
                (literal 2)))))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call msg$)))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 18)) , 
          (expr 
            (literal 27)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Press any key to continue")))) \n \n 
      (statement 
        (call_statement 
          (untyped_id SOUND) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal 250))) , 
            (call_argument 
              (expr 
                (literal 1)))))) \n 
      (statement 
        (call_statement 
          (untyped_id SOUND) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal 32767))) , 
            (call_argument 
              (expr 
                (literal 2)))))) \n 
      (statement 
        (call_statement 
          (untyped_id SOUND) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal 200))) , 
            (call_argument 
              (expr 
                (literal 1)))))) \n \n 
      (statement 
        (do_loop_statement DO 
          (do_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call INKEY$)) = 
              (expr 
                (literal "")))) 
          (block :) LOOP)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id GetNameAndSave) STATIC 
    (block \n \n 
      (statement 
        (call_statement 
          (untyped_id DisplayMenuText) 
          (call_argument_list 
            (call_argument GETNAME)))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Finished) = 
          (expr 
            (variable_or_function_call FALSE)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call EditField) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call naym$) = 
          (expr 
            (literal "")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call desc$) = 
          (expr 
            (literal "")))) \n \n 
      (statement 
        (while_wend_statement WHILE 
          (expr 
            (expr 
              (variable_or_function_call Finished)) = 
            (expr 
              (variable_or_function_call FALSE))) 
          (block \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call EditField)) 
                (before_first_case \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal 1)))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call RetVal) = 
                        (expr 
                          (variable_or_function_call SimpleEdit 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 16)) , 
                                (expr 
                                  (literal 27)) , 
                                (expr 
                                  (variable_or_function_call naym$)) , 
                                (expr 
                                  (literal 25)) )))))) \n 
                    (statement 
                      (if_inline_statement IF 
                        (expr 
                          (expr 
                            (variable_or_function_call RetVal)) = 
                          (expr 
                            (variable_or_function_call TABCHAR))) THEN 
                        (if_inline_action 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call EditField) = 
                              (expr 
                                (literal 2))))))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal 2)))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call RetVal) = 
                        (expr 
                          (variable_or_function_call SimpleEdit 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 19)) , 
                                (expr 
                                  (literal 27)) , 
                                (expr 
                                  (variable_or_function_call desc$)) , 
                                (expr 
                                  (literal 40)) )))))) \n 
                    (statement 
                      (if_inline_statement IF 
                        (expr 
                          (expr 
                            (variable_or_function_call RetVal)) = 
                          (expr 
                            (variable_or_function_call TABCHAR))) THEN 
                        (if_inline_action 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call EditField) = 
                              (expr 
                                (literal 1))))))) \n)) 
                (end_select_statement END SELECT))) \n \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (expr 
                    (variable_or_function_call RetVal)) = 
                  (expr 
                    (variable_or_function_call ESC))) OR 
                (expr 
                  (expr 
                    (variable_or_function_call RetVal)) = 
                  (expr 
                    (variable_or_function_call CR)))) THEN \n 
              (then_block 
                (if_block_statement IF 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call naym$)) = 
                      (expr 
                        (literal ""))) AND 
                    (expr 
                      (expr 
                        (variable_or_function_call RetVal)) = 
                      (expr 
                        (variable_or_function_call CR)))) THEN \n 
                  (then_block 
                    (statement 
                      (call_statement 
                        (untyped_id ErrorMessage) 
                        (call_argument_list 
                          (call_argument 
                            (expr 
                              (literal "You must supply a song name.")))))) \n 
                    (statement 
                      (call_statement 
                        (untyped_id DisplayMenuText) 
                        (call_argument_list 
                          (call_argument GETNAME)))) \n 
                    (statement 
                      (locate_statement LOCATE 
                        (expr 
                          (literal 16)) , 
                        (expr 
                          (literal 27)))) \n 
                    (statement 
                      (print_statement PRINT 
                        (expr 
                          (variable_or_function_call naym$)))) \n 
                    (statement 
                      (locate_statement LOCATE 
                        (expr 
                          (literal 19)) , 
                        (expr 
                          (literal 27)))) \n 
                    (statement 
                      (print_statement PRINT 
                        (expr 
                          (variable_or_function_call desc$)))) \n) 
                  (else_block_statement ELSE 
                    (else_block \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Finished) = 
                          (expr 
                            (variable_or_function_call TRUE)))) \n)) 
                  (end_if_statement END IF)) \n) 
              (end_if_statement END IF)) \n) WEND)) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call RetVal)) = 
          (expr 
            (variable_or_function_call CR))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call SongName) = 
              (expr 
                (variable_or_function_call naym$)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call SongDesc) = 
              (expr 
                (variable_or_function_call desc$)))) \n 
          (statement 
            (call_statement 
              (untyped_id SaveSong))) \n) 
        (end_if_statement END IF)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n 
  (function_statement FUNCTION GetNote$ 
    ( 
      (parameter_list 
        (parameter Note)) ) STATIC 
    (block \n \n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call Note)) 
          (before_first_case \n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call C)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call GetNote$) = 
                  (expr 
                    (literal "C")))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call D)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call GetNote$) = 
                  (expr 
                    (literal "D")))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call E)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call GetNote$) = 
                  (expr 
                    (literal "E")))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call F)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call GetNote$) = 
                  (expr 
                    (literal "F")))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call G)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call GetNote$) = 
                  (expr 
                    (literal "G")))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call A)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call GetNote$) = 
                  (expr 
                    (literal "A")))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call B)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call GetNote$) = 
                  (expr 
                    (literal "B")))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call DF)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call GetNote$) = 
                  (expr 
                    (literal "D flat")))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call EF)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call GetNote$) = 
                  (expr 
                    (literal "E flat")))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call GF)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call GetNote$) = 
                  (expr 
                    (literal "G flat")))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call AF)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call GetNote$) = 
                  (expr 
                    (literal "A flat")))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call BF)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call GetNote$) = 
                  (expr 
                    (literal "B flat")))) \n)) 
          (end_select_statement END SELECT))) \n \n) 
    (end_function_statement END FUNCTION)) \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id InitFreq) STATIC 
    (block \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Freq 
            (args_or_indices 
              ( 
                (expr 
                  (literal 1)) ))) = 
          (expr 
            (literal 4186)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Freq 
            (args_or_indices 
              ( 
                (expr 
                  (literal 2)) ))) = 
          (expr 
            (literal 4435)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Freq 
            (args_or_indices 
              ( 
                (expr 
                  (literal 3)) ))) = 
          (expr 
            (literal 4699)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Freq 
            (args_or_indices 
              ( 
                (expr 
                  (literal 4)) ))) = 
          (expr 
            (literal 4978)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Freq 
            (args_or_indices 
              ( 
                (expr 
                  (literal 5)) ))) = 
          (expr 
            (literal 5274)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Freq 
            (args_or_indices 
              ( 
                (expr 
                  (literal 6)) ))) = 
          (expr 
            (literal 5588)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Freq 
            (args_or_indices 
              ( 
                (expr 
                  (literal 7)) ))) = 
          (expr 
            (literal 5920)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Freq 
            (args_or_indices 
              ( 
                (expr 
                  (literal 8)) ))) = 
          (expr 
            (literal 6272)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Freq 
            (args_or_indices 
              ( 
                (expr 
                  (literal 9)) ))) = 
          (expr 
            (literal 6645)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Freq 
            (args_or_indices 
              ( 
                (expr 
                  (literal 10)) ))) = 
          (expr 
            (literal 7040)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Freq 
            (args_or_indices 
              ( 
                (expr 
                  (literal 11)) ))) = 
          (expr 
            (literal 7459)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Freq 
            (args_or_indices 
              ( 
                (expr 
                  (literal 12)) ))) = 
          (expr 
            (literal 7902)))) \n \n \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 127)) 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Kyb 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call i)) )) . Note) = 
                (expr 
                  (literal 0)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Kyb 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call i)) )) . Oct) = 
                (expr 
                  (literal 0)))) \n) NEXT i)) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurNote) = 
          (expr 
            (variable_or_function_call C)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurOct) = 
          (expr - 
            (expr 
              (literal 1))))) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 16)) )) . Note) = 
          (expr 
            (variable_or_function_call A)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 16)) )) . Oct) = 
          (expr - 
            (expr 
              (literal 2))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 17)) )) . Note) = 
          (expr 
            (variable_or_function_call B)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 17)) )) . Oct) = 
          (expr - 
            (expr 
              (literal 2))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 18)) )) . Note) = 
          (expr 
            (variable_or_function_call C)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 18)) )) . Oct) = 
          (expr - 
            (expr 
              (literal 1))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 19)) )) . Note) = 
          (expr 
            (variable_or_function_call D)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 19)) )) . Oct) = 
          (expr - 
            (expr 
              (literal 1))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 20)) )) . Note) = 
          (expr 
            (variable_or_function_call E)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 20)) )) . Oct) = 
          (expr - 
            (expr 
              (literal 1))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 21)) )) . Note) = 
          (expr 
            (variable_or_function_call F)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 21)) )) . Oct) = 
          (expr - 
            (expr 
              (literal 1))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 22)) )) . Note) = 
          (expr 
            (variable_or_function_call G)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 22)) )) . Oct) = 
          (expr - 
            (expr 
              (literal 1))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 23)) )) . Note) = 
          (expr 
            (variable_or_function_call A)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 23)) )) . Oct) = 
          (expr - 
            (expr 
              (literal 1))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 24)) )) . Note) = 
          (expr 
            (variable_or_function_call B)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 24)) )) . Oct) = 
          (expr - 
            (expr 
              (literal 1))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 25)) )) . Note) = 
          (expr 
            (variable_or_function_call C)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 25)) )) . Oct) = 
          (expr 
            (literal 0)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 26)) )) . Note) = 
          (expr 
            (variable_or_function_call D)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 26)) )) . Oct) = 
          (expr 
            (literal 0)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 27)) )) . Note) = 
          (expr 
            (variable_or_function_call E)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 27)) )) . Oct) = 
          (expr 
            (literal 0)))) \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 3)) )) . Note) = 
          (expr 
            (variable_or_function_call BF)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 3)) )) . Oct) = 
          (expr - 
            (expr 
              (literal 2))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 5)) )) . Note) = 
          (expr 
            (variable_or_function_call DF)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 5)) )) . Oct) = 
          (expr - 
            (expr 
              (literal 1))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 6)) )) . Note) = 
          (expr 
            (variable_or_function_call EF)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 6)) )) . Oct) = 
          (expr - 
            (expr 
              (literal 1))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 8)) )) . Note) = 
          (expr 
            (variable_or_function_call GF)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 8)) )) . Oct) = 
          (expr - 
            (expr 
              (literal 1))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 9)) )) . Note) = 
          (expr 
            (variable_or_function_call AF)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 9)) )) . Oct) = 
          (expr - 
            (expr 
              (literal 1))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 10)) )) . Note) = 
          (expr 
            (variable_or_function_call BF)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 10)) )) . Oct) = 
          (expr - 
            (expr 
              (literal 1))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 12)) )) . Note) = 
          (expr 
            (variable_or_function_call DF)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 12)) )) . Oct) = 
          (expr 
            (literal 0)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 13)) )) . Note) = 
          (expr 
            (variable_or_function_call EF)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 13)) )) . Oct) = 
          (expr 
            (literal 0)))) \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 44)) )) . Note) = 
          (expr 
            (variable_or_function_call F)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 44)) )) . Oct) = 
          (expr 
            (literal 0)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 45)) )) . Note) = 
          (expr 
            (variable_or_function_call G)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 45)) )) . Oct) = 
          (expr 
            (literal 0)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 46)) )) . Note) = 
          (expr 
            (variable_or_function_call A)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 46)) )) . Oct) = 
          (expr 
            (literal 0)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 47)) )) . Note) = 
          (expr 
            (variable_or_function_call B)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 47)) )) . Oct) = 
          (expr 
            (literal 0)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 48)) )) . Note) = 
          (expr 
            (variable_or_function_call C)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 48)) )) . Oct) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 49)) )) . Note) = 
          (expr 
            (variable_or_function_call D)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 49)) )) . Oct) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 50)) )) . Note) = 
          (expr 
            (variable_or_function_call E)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 50)) )) . Oct) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 51)) )) . Note) = 
          (expr 
            (variable_or_function_call F)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 51)) )) . Oct) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 52)) )) . Note) = 
          (expr 
            (variable_or_function_call G)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 52)) )) . Oct) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 53)) )) . Note) = 
          (expr 
            (variable_or_function_call A)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 53)) )) . Oct) = 
          (expr 
            (literal 1)))) \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 31)) )) . Note) = 
          (expr 
            (variable_or_function_call GF)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 31)) )) . Oct) = 
          (expr 
            (literal 0)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 32)) )) . Note) = 
          (expr 
            (variable_or_function_call AF)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 32)) )) . Oct) = 
          (expr 
            (literal 0)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 33)) )) . Note) = 
          (expr 
            (variable_or_function_call BF)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 33)) )) . Oct) = 
          (expr 
            (literal 0)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 35)) )) . Note) = 
          (expr 
            (variable_or_function_call DF)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 35)) )) . Oct) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 36)) )) . Note) = 
          (expr 
            (variable_or_function_call EF)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 36)) )) . Oct) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 38)) )) . Note) = 
          (expr 
            (variable_or_function_call GF)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 38)) )) . Oct) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 39)) )) . Note) = 
          (expr 
            (variable_or_function_call AF)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 39)) )) . Oct) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 40)) )) . Note) = 
          (expr 
            (variable_or_function_call BF)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kyb 
            (args_or_indices 
              ( 
                (expr 
                  (literal 40)) )) . Oct) = 
          (expr 
            (literal 1)))) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id LoadDefaultSong) 
    ( 
      (parameter_list 
        (parameter num)) ) STATIC 
    (block \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call num)) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (statement 
            (call_statement 
              (untyped_id RESTORE) 
              (call_argument_list 
                (call_argument SONG1)))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (call_statement 
                (untyped_id RESTORE) 
                (call_argument_list 
                  (call_argument SONG2)))) \n)) 
        (end_if_statement END IF)) \n \n 
      (statement 
        (read_statement READ 
          (variable_or_function_call SongName) , 
          (variable_or_function_call SongDesc) , 
          (variable_or_function_call Counter))) \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call Counter)) 
          (block \n 
            (statement 
              (read_statement READ 
                (variable_or_function_call n) , 
                (variable_or_function_call o) , 
                (variable_or_function_call Dur))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Song 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call i)) )) . Note) = 
                (expr 
                  (variable_or_function_call n)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Song 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call i)) )) . Oct) = 
                (expr 
                  (variable_or_function_call o)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Song 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call i)) )) . Dur) = 
                (expr 
                  (variable_or_function_call Dur)))) \n) NEXT i)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id LoadSong) 
    ( 
      (parameter_list 
        (parameter SongNo)) ) STATIC 
    (block \n \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id HeaderInfo) AS 
            (type_name 
              (untyped_id FileHeader))))) \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id S) AS 
            (type_name 
              (untyped_id SongIndexCard))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call FileError) = 
          (expr 
            (literal 0)))) \n \n 
      (statement 
        (open_statement OPEN 
          (expr 
            (literal "QSYNTH.DAT")) FOR 
          (open_mode BINARY) AS 
          (expr 
            (literal 1)))) \n \n \n 
      (statement 
        (seek_statement SEEK # 
          (expr 
            (literal 1)) , 
          (expr 
            (expr 
              (expr 
                (builtin_function LEN 
                  ( 
                    (expr 
                      (variable_or_function_call HeaderInfo)) ))) + 
              (expr 
                ( 
                  (expr 
                    (expr 
                      (builtin_function LEN 
                        ( 
                          (expr 
                            (variable_or_function_call S)) ))) * 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call SongNo)) - 
                          (expr 
                            (literal 1))) ))) ))) + 
            (expr 
              (literal 1))))) \n 
      (statement 
        (get_io_statement GET # 
          (expr 
            (literal 1)) , , 
          (variable_or_function_call S))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call SongName) = 
          (expr 
            (variable_or_function_call S.naym)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call SongDesc) = 
          (expr 
            (variable_or_function_call S.desc)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Counter) = 
          (expr 
            (variable_or_function_call S.Size)))) \n \n \n \n 
      (statement 
        (seek_statement SEEK # 
          (expr 
            (literal 1)) , 
          (expr 
            (expr 
              (expr 
                (builtin_function LEN 
                  ( 
                    (expr 
                      (variable_or_function_call HeaderInfo)) ))) + 
              (expr 
                ( 
                  (expr 
                    (expr 
                      (builtin_function LEN 
                        ( 
                          (expr 
                            (variable_or_function_call S)) ))) * 
                    (expr 
                      (variable_or_function_call MAXSONG))) ))) + 
            (expr 
              (variable_or_function_call S.Offset))))) \n \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call Counter)) 
          (block \n 
            (statement 
              (get_io_statement GET # 
                (expr 
                  (literal 1)) , , 
                (variable_or_function_call Song 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call i)) ))))) \n) NEXT i)) \n 
      (statement 
        (close_statement CLOSE 
          (expr 
            (literal 1)))) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id MainMenu) STATIC 
    (block \n \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id S) AS 
            (type_name 
              (untyped_id SongIndexCard))))) \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id HeaderInfo) AS 
            (type_name 
              (untyped_id FileHeader))))) \n 
      (statement 
        (dim_statement REDIM 
          (dim_variable i$ 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 1)) TO 
                  (expr 
                    (literal 10))) ))))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Cursor) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call WindowTop) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call SongLoaded) = 
          (expr 
            (literal 0)))) \n 
      (statement 
        (gosub_statement GOSUB 
          (target 
            (text_label 
              (untyped_id LoadSongList))))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Finished) = 
          (expr 
            (variable_or_function_call FALSE)))) \n 
      (statement 
        (while_wend_statement WHILE 
          (expr NOT 
            (expr 
              (variable_or_function_call Finished))) 
          (block \n 
            (statement 
              (call_statement 
                (untyped_id DisplayMenuText) 
                (call_argument_list 
                  (call_argument MAIN)))) \n 
            (statement 
              (gosub_statement GOSUB 
                (target 
                  (text_label 
                    (untyped_id DisplaySongList))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call x$) = 
                (expr 
                  (literal "")))) \n \n 
            (statement 
              (while_wend_statement WHILE 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call INSTR 
                        (args_or_indices 
                          ( 
                            (expr 
                              (expr 
                                (literal "PSERDQ")) + 
                              (expr 
                                (variable_or_function_call CHR$ 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (literal 13)) ))))) , 
                            (expr 
                              (variable_or_function_call x$)) )))) = 
                    (expr 
                      (literal 0))) OR 
                  (expr 
                    (expr 
                      (variable_or_function_call x$)) = 
                    (expr 
                      (literal "")))) 
                (block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call x$) = 
                      (expr 
                        (variable_or_function_call UCASE$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call INKEY$)) )))))) \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (builtin_function LEN 
                          ( 
                            (expr 
                              (variable_or_function_call x$)) ))) > 
                      (expr 
                        (literal 1))) THEN \n 
                    (then_block 
                      (if_block_statement IF 
                        (expr 
                          (expr 
                            (expr 
                              (variable_or_function_call RIGHT$ 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call x$)) , 
                                    (expr 
                                      (literal 1)) )))) = 
                            (expr 
                              (literal "H"))) AND 
                          (expr 
                            (expr 
                              (variable_or_function_call Cursor)) > 
                            (expr 
                              (literal 1)))) THEN \n 
                        (then_block 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call Cursor) = 
                              (expr 
                                (expr 
                                  (variable_or_function_call Cursor)) - 
                                (expr 
                                  (literal 1))))) \n) 
                        (elseif_block_statement ELSEIF 
                          (expr 
                            (expr 
                              (expr 
                                (variable_or_function_call RIGHT$ 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call x$)) , 
                                      (expr 
                                        (literal 1)) )))) = 
                              (expr 
                                (literal "P"))) AND 
                            (expr 
                              (expr 
                                (variable_or_function_call Cursor)) < 
                              (expr 
                                (variable_or_function_call UBOUND 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call i$)) )))))) THEN 
                          (else_block \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call Cursor) = 
                                (expr 
                                  (expr 
                                    (variable_or_function_call Cursor)) + 
                                  (expr 
                                    (literal 1))))) \n)) 
                        (end_if_statement END IF)) \n 
                      (statement 
                        (gosub_statement GOSUB 
                          (target 
                            (text_label 
                              (untyped_id DisplaySongList))))) \n) 
                    (end_if_statement END IF)) \n) WEND)) \n \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call x$)) 
                (before_first_case \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal "S")))) 
                  (block \n 
                    (statement 
                      (call_statement 
                        (untyped_id RecordMenu) 
                        (call_argument_list 
                          (call_argument 
                            (expr 
                              ( 
                                (expr 
                                  (variable_or_function_call TRUE)) )))))) \n \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal "P"))) , 
                    (case_expr 
                      (expr 
                        (variable_or_function_call CHR$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 13)) )))))) 
                  (block \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call Cursor)) > 
                        (expr 
                          (literal 2))) THEN \n 
                      (then_block 
                        (statement 
                          (call_statement 
                            (untyped_id LoadSong) 
                            (call_argument_list 
                              (call_argument 
                                (expr 
                                  (expr 
                                    (variable_or_function_call Cursor)) - 
                                  (expr 
                                    (literal 2))))))) \n) 
                      (else_block_statement ELSE 
                        (else_block \n 
                          (statement 
                            (call_statement 
                              (untyped_id LoadDefaultSong) 
                              (call_argument_list 
                                (call_argument Cursor)))) \n)) 
                      (end_if_statement END IF)) \n 
                    (statement 
                      (call_statement 
                        (untyped_id PlaySong))) \n \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal "E")))) 
                  (block \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call Cursor)) > 
                        (expr 
                          (literal 2))) THEN \n 
                      (then_block 
                        (statement 
                          (call_statement 
                            (untyped_id LoadSong) 
                            (call_argument_list 
                              (call_argument 
                                (expr 
                                  (expr 
                                    (variable_or_function_call Cursor)) - 
                                  (expr 
                                    (literal 2))))))) \n 
                        (statement 
                          (call_statement 
                            (untyped_id EditSong) 
                            (call_argument_list 
                              (call_argument 
                                (expr 
                                  (expr 
                                    (variable_or_function_call Cursor)) - 
                                  (expr 
                                    (literal 2))))))) \n) 
                      (else_block_statement ELSE 
                        (else_block \n 
                          (statement 
                            (call_statement 
                              (untyped_id ErrorMessage) 
                              (call_argument_list 
                                (call_argument 
                                  (expr 
                                    (literal "You cannot edit a system song.")))))) \n)) 
                      (end_if_statement END IF)) \n \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal "R")))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call SongRecorded) = 
                        (expr 
                          (variable_or_function_call FALSE)))) \n 
                    (statement 
                      (call_statement 
                        (untyped_id RecordMenu) 
                        (call_argument_list 
                          (call_argument 
                            (expr 
                              ( 
                                (expr 
                                  (variable_or_function_call FALSE)) )))))) \n 
                    (if_block_statement IF 
                      (expr 
                        (variable_or_function_call SongRecorded)) THEN \n 
                      (then_block 
                        (statement 
                          (call_statement 
                            (untyped_id GetNameAndSave))) \n) 
                      (end_if_statement END IF)) \n 
                    (statement 
                      (gosub_statement GOSUB 
                        (target 
                          (text_label 
                            (untyped_id LoadSongList))))) \n \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal "D")))) 
                  (block \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call Cursor)) > 
                        (expr 
                          (literal 2))) THEN \n 
                      (then_block 
                        (if_block_statement IF 
                          (expr 
                            (variable_or_function_call ConfirmDelete)) THEN \n 
                          (then_block 
                            (statement 
                              (call_statement 
                                (untyped_id DeleteSong) 
                                (call_argument_list 
                                  (call_argument 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call Cursor)) - 
                                      (expr 
                                        (literal 2))))))) \n 
                            (statement 
                              (if_inline_statement IF 
                                (expr 
                                  (expr 
                                    (variable_or_function_call Cursor)) = 
                                  (expr 
                                    (variable_or_function_call UBOUND 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call i$)) ))))) THEN 
                                (if_inline_action 
                                  (statement 
                                    (assignment_statement 
                                      (variable_or_function_call Cursor) = 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call Cursor)) - 
                                        (expr 
                                          (literal 1)))))))) \n 
                            (statement 
                              (gosub_statement GOSUB 
                                (target 
                                  (text_label 
                                    (untyped_id LoadSongList))))) \n) 
                          (end_if_statement END IF)) \n) 
                      (else_block_statement ELSE 
                        (else_block \n 
                          (statement 
                            (call_statement 
                              (untyped_id ErrorMessage) 
                              (call_argument_list 
                                (call_argument 
                                  (expr 
                                    (literal "You cannot delete a system song.")))))) \n)) 
                      (end_if_statement END IF)) \n \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal "Q")))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Finished) = 
                        (expr 
                          (variable_or_function_call TRUE)))) \n)) 
                (end_select_statement END SELECT))) \n) WEND)) \n 
      (statement 
        (exit_statement EXIT SUB)) \n \n \n 
      (label 
        (text_label 
          (untyped_id LoadSongList)) :) \n 
      (statement 
        (open_statement OPEN 
          (expr 
            (literal "QSYNTH.DAT")) FOR 
          (open_mode BINARY) AS 
          (expr 
            (literal 1)))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call LOF 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 1)) )))) = 
          (expr 
            (literal 0))) THEN \n 
        (then_block 
          (statement 
            (call_statement 
              (untyped_id CreateSongFile))) \n) 
        (end_if_statement END IF)) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call HeaderInfo.Count) = 
          (expr 
            (literal 0)))) \n 
      (statement 
        (get_io_statement GET # 
          (expr 
            (literal 1)) , , 
          (variable_or_function_call HeaderInfo))) \n 
      (statement 
        (dim_statement REDIM 
          (dim_variable i$ 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 1)) TO 
                  (expr 
                    (expr 
                      (literal 2)) + 
                    (expr 
                      (variable_or_function_call HeaderInfo.Count)))) ))))) \n 
      (statement 
        (call_statement 
          (untyped_id RESTORE) 
          (call_argument_list 
            (call_argument SONG1)))) \n 
      (statement 
        (read_statement READ 
          (variable_or_function_call i$ 
            (args_or_indices 
              ( 
                (expr 
                  (literal 1)) ))))) \n 
      (statement 
        (call_statement 
          (untyped_id RESTORE) 
          (call_argument_list 
            (call_argument SONG2)))) \n 
      (statement 
        (read_statement READ 
          (variable_or_function_call i$ 
            (args_or_indices 
              ( 
                (expr 
                  (literal 2)) ))))) \n \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 3)) TO 
          (expr 
            (variable_or_function_call UBOUND 
              (args_or_indices 
                ( 
                  (expr 
                    (variable_or_function_call i$)) )))) 
          (block \n 
            (statement 
              (get_io_statement GET # 
                (expr 
                  (literal 1)) , , 
                (variable_or_function_call S))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call i$ 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call i)) ))) = 
                (expr 
                  (variable_or_function_call S.naym)))) \n) NEXT i)) \n 
      (statement 
        (close_statement CLOSE 
          (expr 
            (literal 1)))) \n 
      (statement 
        (return_statement RETURN)) \n \n \n 
      (label 
        (text_label 
          (untyped_id DisplaySongList)) :) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 0)) , 
          (expr 
            (literal 7)))) \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 15)) TO 
          (expr 
            (literal 23)) 
          (block \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call i)) , 
                (expr 
                  (literal 8)))) \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call i)) - 
                    (expr 
                      (literal 15))) + 
                  (expr 
                    (variable_or_function_call WindowTop))) <= 
                (expr 
                  (variable_or_function_call UBOUND 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call i$)) ))))) THEN \n 
              (then_block 
                (statement 
                  (print_statement PRINT 
                    (expr 
                      (literal " ")) ; 
                    (expr 
                      (variable_or_function_call LEFT$ 
                        (args_or_indices 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call i$ 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (expr 
                                          (expr 
                                            (variable_or_function_call i)) - 
                                          (expr 
                                            (literal 15))) + 
                                        (expr 
                                          (variable_or_function_call WindowTop))) )))) + 
                              (expr 
                                (variable_or_function_call SPACE$ 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (literal 27)) ))))) , 
                            (expr 
                              (literal 25)) )))) ; 
                    (expr 
                      (literal " ")))) \n) 
              (else_block_statement ELSE 
                (else_block \n 
                  (statement 
                    (print_statement PRINT 
                      (expr 
                        (variable_or_function_call SPACE$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 27)) )))))) \n)) 
              (end_if_statement END IF)) \n) NEXT i)) \n \n \n 
      (label 
        (text_label 
          (untyped_id DisplaySongCursor)) :) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Cursor)) < 
          (expr 
            (variable_or_function_call WindowTop))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call WindowTop) = 
              (expr 
                (variable_or_function_call Cursor)))) \n 
          (statement 
            (goto_statement GOTO 
              (target 
                (text_label 
                  (untyped_id DisplaySongList))))) \n) 
        (elseif_block_statement ELSEIF 
          (expr 
            (expr 
              (variable_or_function_call Cursor)) > 
            (expr 
              (expr 
                (variable_or_function_call WindowTop)) + 
              (expr 
                (literal 8)))) THEN 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call WindowTop) = 
                (expr 
                  (expr 
                    (variable_or_function_call Cursor)) - 
                  (expr 
                    (literal 8))))) \n 
            (statement 
              (goto_statement GOTO 
                (target 
                  (text_label 
                    (untyped_id DisplaySongList))))) \n)) 
        (end_if_statement END IF)) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)) , 
          (expr 
            (literal 0)))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (expr 
              (expr 
                (literal 15)) + 
              (expr 
                (variable_or_function_call Cursor))) - 
            (expr 
              (variable_or_function_call WindowTop))) , 
          (expr 
            (literal 8)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal " ")) ; 
          (expr 
            (variable_or_function_call LEFT$ 
              (args_or_indices 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call i$ 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call Cursor)) )))) + 
                    (expr 
                      (variable_or_function_call SPACE$ 
                        (args_or_indices 
                          ( 
                            (expr 
                              (literal 27)) ))))) , 
                  (expr 
                    (literal 25)) )))) ; 
          (expr 
            (literal " ")))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call TEXTCOLOR)) , 
          (expr 
            (variable_or_function_call BACKGROUNDCOLOR)))) \n 
      (statement 
        (return_statement RETURN)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id PlayNote) 
    ( 
      (parameter_list 
        (parameter Note) , 
        (parameter Octave) , 
        (parameter Duration#)) ) STATIC 
    (block \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Note)) <> 
          (expr 
            (literal 0))) THEN \n 
        (then_block \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call ThisFreq&) = 
              (expr 
                (expr 
                  (variable_or_function_call Freq 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call Note)) )))) / 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (literal 2)) ^ 
                      (expr 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call PITCH)) - 
                            (expr 
                              (variable_or_function_call Octave))) ))) ))))) \n \n 
          (statement 
            (if_inline_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call ThisFreq&)) > 
                (expr 
                  (literal 32767))) THEN 
              (if_inline_action 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call ThisFreq&) = 
                    (expr 
                      (literal 32767))))))) \n 
          (statement 
            (call_statement 
              (untyped_id SOUND) 
              (call_argument_list 
                (call_argument ThisFreq&) , 
                (call_argument Duration#)))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (call_statement 
                (untyped_id TimeDelay) 
                (call_argument_list 
                  (call_argument Duration#)))) \n)) 
        (end_if_statement END IF)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id PlaySong) STATIC 
    (block \n \n 
      (statement 
        (call_statement 
          (untyped_id DisplayMenuText) 
          (call_argument_list 
            (call_argument PLAYBACK)))) \n \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call i$) = 
                (expr 
                  (variable_or_function_call INKEY$)))) \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call i$)) 
                (before_first_case \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call CHR$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 27)) )))))) 
                  (block \n 
                    (statement 
                      (exit_statement EXIT SUB)) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 0)) )))) + 
                        (expr 
                          (literal "H")))) , 
                    (case_expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 0)) )))) + 
                        (expr 
                          (literal "M"))))) 
                  (block \n 
                    (statement 
                      (call_statement 
                        (untyped_id ChangeTempo) 
                        (call_argument_list 
                          (call_argument UP)))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 0)) )))) + 
                        (expr 
                          (literal "P")))) , 
                    (case_expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 0)) )))) + 
                        (expr 
                          (literal "K"))))) 
                  (block \n 
                    (statement 
                      (call_statement 
                        (untyped_id ChangeTempo) 
                        (call_argument_list 
                          (call_argument DOWN)))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call CHR$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 13)) )))))) 
                  (block \n 
                    (statement 
                      (exit_statement EXIT DO)) \n)) 
                (end_select_statement END SELECT))) \n) LOOP)) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Finished) = 
          (expr 
            (variable_or_function_call FALSE)))) \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call Counter)) 
          (block \n 
            (statement 
              (call_statement 
                (untyped_id DrawNote) 
                (call_argument_list 
                  (call_argument 
                    (expr 
                      (variable_or_function_call Song 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call i)) )) . Note))) , 
                  (call_argument 
                    (expr 
                      (variable_or_function_call Song 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call i)) )) . Oct))) , 
                  (call_argument DOWN)))) \n 
            (statement 
              (for_next_statement FOR j = 
                (expr 
                  (literal 1)) TO 
                (expr 
                  (variable_or_function_call Song 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call i)) )) . Dur)) 
                (block \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (variable_or_function_call Song 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call i)) )) . Note)) > 
                      (expr 
                        (literal 0))) THEN \n 
                    (then_block 
                      (statement 
                        (call_statement 
                          (untyped_id PlayNote) 
                          (call_argument_list 
                            (call_argument 
                              (expr 
                                (variable_or_function_call Song 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call i)) )) . Note))) , 
                            (call_argument 
                              (expr 
                                (variable_or_function_call Song 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call i)) )) . Oct))) , 
                            (call_argument 
                              (expr 
                                (expr 
                                  (variable_or_function_call NOTETICK)) * 
                                (expr 
                                  (variable_or_function_call TFACTOR))))))) \n) 
                    (else_block_statement ELSE 
                      (else_block \n 
                        (statement 
                          (call_statement 
                            (untyped_id PlayNote) 
                            (call_argument_list 
                              (call_argument 
                                (expr 
                                  (literal 0))) , 
                              (call_argument 
                                (expr 
                                  (literal 0))) , 
                              (call_argument 
                                (expr 
                                  (expr 
                                    (variable_or_function_call RESTTICK)) * 
                                  (expr 
                                    (variable_or_function_call TFACTOR))))))) \n)) 
                    (end_if_statement END IF)) \n \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call i$) = 
                      (expr 
                        (variable_or_function_call INKEY$)))) \n 
                  (statement 
                    (select_case_statement SELECT CASE 
                      (expr 
                        (variable_or_function_call UCASE$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call i$)) )))) 
                      (before_first_case \n) 
                      (case_block 
                        (case_statement CASE 
                          (case_expr 
                            (expr 
                              (variable_or_function_call CHR$ 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (literal 27)) )))))) 
                        (block \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call Finished) = 
                              (expr 
                                (variable_or_function_call TRUE)))) \n 
                          (statement 
                            (exit_statement EXIT FOR)) \n)) 
                      (case_block 
                        (case_statement CASE 
                          (case_expr 
                            (expr 
                              (expr 
                                (variable_or_function_call CHR$ 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (literal 0)) )))) + 
                              (expr 
                                (literal "H")))) , 
                          (case_expr 
                            (expr 
                              (expr 
                                (variable_or_function_call CHR$ 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (literal 0)) )))) + 
                              (expr 
                                (literal "M"))))) 
                        (block \n 
                          (statement 
                            (call_statement 
                              (untyped_id ChangeTempo) 
                              (call_argument_list 
                                (call_argument UP)))) \n)) 
                      (case_block 
                        (case_statement CASE 
                          (case_expr 
                            (expr 
                              (expr 
                                (variable_or_function_call CHR$ 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (literal 0)) )))) + 
                              (expr 
                                (literal "P")))) , 
                          (case_expr 
                            (expr 
                              (expr 
                                (variable_or_function_call CHR$ 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (literal 0)) )))) + 
                              (expr 
                                (literal "K"))))) 
                        (block \n 
                          (statement 
                            (call_statement 
                              (untyped_id ChangeTempo) 
                              (call_argument_list 
                                (call_argument DOWN)))) \n)) 
                      (end_select_statement END SELECT))) \n \n) NEXT j)) \n 
            (statement 
              (call_statement 
                (untyped_id DrawNote) 
                (call_argument_list 
                  (call_argument 
                    (expr 
                      (variable_or_function_call Song 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call i)) )) . Note))) , 
                  (call_argument 
                    (expr 
                      (variable_or_function_call Song 
                        (args_or_indices 
                          ( 
                            (expr 
                              (variable_or_function_call i)) )) . Oct))) , 
                  (call_argument UP)))) \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (variable_or_function_call Finished)) THEN 
                (if_inline_action 
                  (statement 
                    (exit_statement EXIT FOR))))) \n) NEXT i)) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id RecordMenu) 
    ( 
      (parameter_list 
        (parameter NoSave)) ) STATIC 
    (block \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call NoSave)) = 
          (expr 
            (variable_or_function_call TRUE))) THEN \n 
        (then_block 
          (statement 
            (call_statement 
              (untyped_id DisplayMenuText) 
              (call_argument_list 
                (call_argument PRACTICE)))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (call_statement 
                (untyped_id DisplayMenuText) 
                (call_argument_list 
                  (call_argument RECORD)))) \n)) 
        (end_if_statement END IF)) \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)) , 
          (expr 
            (literal 0)))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 6)) , 
          (expr 
            (literal 17)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "2   4 5   7 8 9   - =   S D F   H J   L ; '")))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 12)) , 
          (expr 
            (literal 16)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Q W E R T Y U I O P [ ] Z X C V B N M , . /")))) \n \n 
      (statement 
        (call_statement 
          (untyped_id RecordMode) 
          (call_argument_list 
            (call_argument NoSave)))) \n \n 
      (statement 
        (color_statement COLOR , 
          (expr 
            (literal 0)))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 6)) , 
          (expr 
            (literal 4)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call SPACE$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 75)) )))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 12)) , 
          (expr 
            (literal 4)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call SPACE$ 
              (args_or_indices 
                ( 
                  (expr 
                    (literal 75)) )))))) \n 
      (statement 
        (color_statement COLOR , 
          (expr 
            (variable_or_function_call BACKGROUNDCOLOR)))) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id RecordMode) 
    ( 
      (parameter_list 
        (parameter NoSave)) ) STATIC 
    (block \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Hld$) = 
          (expr 
            (literal "")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Counter) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Song 
            (args_or_indices 
              ( 
                (expr 
                  (variable_or_function_call Counter)) )) . Note) = 
          (expr 
            (literal 0)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Song 
            (args_or_indices 
              ( 
                (expr 
                  (variable_or_function_call Counter)) )) . Dur) = 
          (expr 
            (literal 0)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call KeyState) = 
          (expr 
            (variable_or_function_call UP)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call oi$) = 
          (expr 
            (literal "")))) : 
      (statement 
        (assignment_statement 
          (variable_or_function_call n$) = 
          (expr 
            (literal "")))) \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 12)) 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call n$) = 
                (expr 
                  (expr 
                    (variable_or_function_call n$)) + 
                  (expr 
                    (variable_or_function_call CHR$ 
                      (args_or_indices 
                        ( 
                          (expr 
                            (variable_or_function_call i)) ))))))) \n) NEXT i)) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call n$) = 
          (expr 
            (expr 
              (expr 
                (expr 
                  (builtin_function MID$ 
                    ( 
                      (expr 
                        (variable_or_function_call n$)) , 
                      (expr 
                        (literal 10)) ))) + 
                (expr 
                  (variable_or_function_call n$))) + 
              (expr 
                (variable_or_function_call n$))) + 
            (expr 
              (variable_or_function_call n$))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call o$) = 
          (expr 
            (literal "00011111111111122222222222233333333333")))) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call INP 
              (args_or_indices 
                ( 
                  (expr 
                    (literal &H60)) )))) = 
          (expr 
            (literal 0))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call XTKeyboard) = 
              (expr 
                (variable_or_function_call TRUE)))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call XTKeyboard) = 
                (expr 
                  (variable_or_function_call FALSE)))) \n)) 
        (end_if_statement END IF)) \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call i$) = 
                (expr 
                  (variable_or_function_call INKEY$)))) \n) LOOP 
          (do_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call i$)) = 
              (expr 
                (literal "")))))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call i$)) = 
            (expr 
              (variable_or_function_call CHR$ 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 27)) ))))) THEN 
          (if_inline_action 
            (statement 
              (exit_statement EXIT SUB))))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call x) = 
          (expr 
            (literal 0)))) \n 
      (statement 
        (while_wend_statement WHILE 
          (expr 
            (expr 
              (variable_or_function_call i$)) <> 
            (expr 
              (variable_or_function_call CHR$ 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 27)) ))))) 
          (block \n 
            (if_block_statement IF 
              (expr 
                (variable_or_function_call XTKeyboard)) THEN \n 
              (then_block 
                (if_block_statement IF 
                  (expr 
                    (expr 
                      (variable_or_function_call i$)) = 
                    (expr 
                      (variable_or_function_call oi$))) THEN \n 
                  (then_block 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call Song 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call Counter)) )) . Note)) = 
                        (expr 
                          (literal 0))) THEN \n 
                      (then_block 
                        (statement 
                          (call_statement 
                            (untyped_id PlayNote) 
                            (call_argument_list 
                              (call_argument 
                                (expr 
                                  (variable_or_function_call Song 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (variable_or_function_call Counter)) )) . Note))) , 
                              (call_argument 
                                (expr 
                                  (variable_or_function_call Song 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (variable_or_function_call Counter)) )) . Oct))) , 
                              (call_argument RESTTICK)))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Song 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call Counter)) )) . Dur) = 
                            (expr 
                              (expr 
                                (variable_or_function_call Song 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call Counter)) )) . Dur)) + 
                              (expr 
                                (literal 1))))) \n) 
                      (else_block_statement ELSE 
                        (else_block \n 
                          (statement 
                            (call_statement 
                              (untyped_id PlayNote) 
                              (call_argument_list 
                                (call_argument 
                                  (expr 
                                    (variable_or_function_call Song 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call Counter)) )) . Note))) , 
                                (call_argument 
                                  (expr 
                                    (variable_or_function_call Song 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call Counter)) )) . Oct))) , 
                                (call_argument 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call XTNOTELENGTH)) * 
                                    (expr 
                                      (variable_or_function_call NOTETICK))))))) \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call Song 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call Counter)) )) . Dur) = 
                              (expr 
                                (expr 
                                  (variable_or_function_call Song 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (variable_or_function_call Counter)) )) . Dur)) + 
                                (expr 
                                  (variable_or_function_call XTNOTELENGTH))))) \n)) 
                      (end_if_statement END IF)) \n) 
                  (elseif_block_statement ELSEIF 
                    (expr 
                      (expr 
                        (variable_or_function_call i$)) <> 
                      (expr 
                        (literal ""))) THEN 
                    (else_block \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call keyloc) = 
                          (expr 
                            (variable_or_function_call INSTR 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (literal "Q2WE4R5TY7U8I9OP-[=]ZSXDCFVBHNJM,L.;/'")) , 
                                  (expr 
                                    (variable_or_function_call UCASE$ 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call i$)) )))) )))))) \n 
                      (if_block_statement IF 
                        (expr 
                          (expr 
                            (variable_or_function_call keyloc)) = 
                          (expr 
                            (literal 0))) THEN \n 
                        (then_block 
                          (statement 
                            (call_statement 
                              (untyped_id DrawNote) 
                              (call_argument_list 
                                (call_argument 
                                  (expr 
                                    (variable_or_function_call Song 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call Counter)) )) . Note))) , 
                                (call_argument 
                                  (expr 
                                    (variable_or_function_call Song 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call Counter)) )) . Oct))) , 
                                (call_argument UP)))) \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call Counter) = 
                              (expr 
                                (expr 
                                  (variable_or_function_call Counter)) + 
                                (expr 
                                  (literal 1))))) \n 
                          (if_block_statement IF 
                            (expr 
                              (expr 
                                (variable_or_function_call Counter)) > 
                              (expr 
                                (variable_or_function_call MAXNOTE))) THEN \n 
                            (then_block 
                              (statement 
                                (call_statement 
                                  (untyped_id ErrorMessage) 
                                  (call_argument_list 
                                    (call_argument 
                                      (expr 
                                        (literal "Maximum song length reached.")))))) \n 
                              (statement 
                                (goto_statement GOTO 
                                  (target 
                                    (text_label 
                                      (untyped_id GetOut))))) \n) 
                            (end_if_statement END IF)) \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call Song 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call Counter)) )) . Note) = 
                              (expr 
                                (literal 0)))) \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call Song 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call Counter)) )) . Oct) = 
                              (expr 
                                (literal 0)))) \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call Song 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call Counter)) )) . Dur) = 
                              (expr 
                                (literal 0)))) \n 
                          (statement 
                            (call_statement 
                              (untyped_id DrawNote) 
                              (call_argument_list 
                                (call_argument 
                                  (expr 
                                    (variable_or_function_call Song 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call Counter)) )) . Note))) , 
                                (call_argument 
                                  (expr 
                                    (variable_or_function_call Song 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call Counter)) )) . Oct))) , 
                                (call_argument DOWN)))) \n) 
                        (else_block_statement ELSE 
                          (else_block \n 
                            (statement 
                              (call_statement 
                                (untyped_id DrawNote) 
                                (call_argument_list 
                                  (call_argument 
                                    (expr 
                                      (variable_or_function_call Song 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call Counter)) )) . Note))) , 
                                  (call_argument 
                                    (expr 
                                      (variable_or_function_call Song 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call Counter)) )) . Oct))) , 
                                  (call_argument UP)))) \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call Counter) = 
                                (expr 
                                  (expr 
                                    (variable_or_function_call Counter)) + 
                                  (expr 
                                    (literal 1))))) \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call NewNote) = 
                                (expr 
                                  (variable_or_function_call ASC 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (builtin_function MID$ 
                                            ( 
                                              (expr 
                                                (variable_or_function_call n$)) , 
                                              (expr 
                                                (variable_or_function_call keyloc)) , 
                                              (expr 
                                                (literal 1)) ))) )))))) \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call NewOct) = 
                                (expr 
                                  (expr 
                                    (variable_or_function_call VAL 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (builtin_function MID$ 
                                              ( 
                                                (expr 
                                                  (variable_or_function_call o$)) , 
                                                (expr 
                                                  (variable_or_function_call keyloc)) , 
                                                (expr 
                                                  (literal 1)) ))) )))) - 
                                  (expr 
                                    (literal 2))))) \n \n 
                            (if_block_statement IF 
                              (expr 
                                (expr 
                                  (variable_or_function_call Counter)) > 
                                (expr 
                                  (variable_or_function_call MAXNOTE))) THEN \n 
                              (then_block 
                                (statement 
                                  (call_statement 
                                    (untyped_id ErrorMessage) 
                                    (call_argument_list 
                                      (call_argument 
                                        (expr 
                                          (literal "Maximum song length reached.")))))) \n 
                                (statement 
                                  (goto_statement GOTO 
                                    (target 
                                      (text_label 
                                        (untyped_id GetOut))))) \n) 
                              (end_if_statement END IF)) \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call Song 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call Counter)) )) . Note) = 
                                (expr 
                                  (variable_or_function_call NewNote)))) \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call Song 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call Counter)) )) . Oct) = 
                                (expr 
                                  (variable_or_function_call NewOct)))) \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call Song 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call Counter)) )) . Dur) = 
                                (expr 
                                  (variable_or_function_call XTNOTELENGTH)))) \n 
                            (statement 
                              (call_statement 
                                (untyped_id DrawNote) 
                                (call_argument_list 
                                  (call_argument 
                                    (expr 
                                      (variable_or_function_call Song 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call Counter)) )) . Note))) , 
                                  (call_argument 
                                    (expr 
                                      (variable_or_function_call Song 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call Counter)) )) . Oct))) , 
                                  (call_argument DOWN)))) \n 
                            (statement 
                              (call_statement 
                                (untyped_id PlayNote) 
                                (call_argument_list 
                                  (call_argument 
                                    (expr 
                                      (variable_or_function_call Song 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call Counter)) )) . Note))) , 
                                  (call_argument 
                                    (expr 
                                      (variable_or_function_call Song 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call Counter)) )) . Oct))) , 
                                  (call_argument 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call XTNOTELENGTH)) * 
                                      (expr 
                                        (variable_or_function_call NOTETICK))))))) \n 
                            (statement 
                              (call_statement 
                                (untyped_id TimeDelay) 
                                (call_argument_list 
                                  (call_argument 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call XTNOTELENGTH)) * 
                                      (expr 
                                        (variable_or_function_call NOTETICK))))))) \n)) 
                        (end_if_statement END IF)) \n)) 
                  (elseif_block_statement ELSEIF 
                    (expr 
                      (expr 
                        (variable_or_function_call i$)) = 
                      (expr 
                        (literal ""))) THEN 
                    (else_block \n 
                      (statement 
                        (call_statement 
                          (untyped_id DrawNote) 
                          (call_argument_list 
                            (call_argument 
                              (expr 
                                (variable_or_function_call Song 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call Counter)) )) . Note))) , 
                            (call_argument 
                              (expr 
                                (variable_or_function_call Song 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call Counter)) )) . Oct))) , 
                            (call_argument UP)))) \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Counter) = 
                          (expr 
                            (expr 
                              (variable_or_function_call Counter)) + 
                            (expr 
                              (literal 1))))) \n 
                      (if_block_statement IF 
                        (expr 
                          (expr 
                            (variable_or_function_call Counter)) > 
                          (expr 
                            (variable_or_function_call MAXNOTE))) THEN \n 
                        (then_block 
                          (statement 
                            (call_statement 
                              (untyped_id ErrorMessage) 
                              (call_argument_list 
                                (call_argument 
                                  (expr 
                                    (literal "Maximum song length reached.")))))) \n 
                          (statement 
                            (goto_statement GOTO 
                              (target 
                                (text_label 
                                  (untyped_id GetOut))))) \n) 
                        (end_if_statement END IF)) \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Song 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call Counter)) )) . Note) = 
                          (expr 
                            (literal 0)))) \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Song 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call Counter)) )) . Oct) = 
                          (expr 
                            (literal 0)))) \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Song 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call Counter)) )) . Dur) = 
                          (expr 
                            (literal 0)))) \n 
                      (statement 
                        (call_statement 
                          (untyped_id DrawNote) 
                          (call_argument_list 
                            (call_argument 
                              (expr 
                                (variable_or_function_call Song 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call Counter)) )) . Note))) , 
                            (call_argument 
                              (expr 
                                (variable_or_function_call Song 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call Counter)) )) . Oct))) , 
                            (call_argument DOWN)))) \n)) 
                  (end_if_statement END IF)) \n \n) 
              (else_block_statement ELSE 
                (else_block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call ox) = 
                      (expr 
                        (variable_or_function_call x)))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Hld$) = 
                      (expr 
                        (expr 
                          (variable_or_function_call Hld$)) + 
                        (expr 
                          (variable_or_function_call i$))))) \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (builtin_function LEN 
                                  ( 
                                    (expr 
                                      (variable_or_function_call Hld$)) ))) < 
                              (expr 
                                (literal 2))) )) AND 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call Song 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call Counter)) )) . Dur)) > 
                              (expr 
                                (literal 8))) ))) AND 
                      (expr 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call Song 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call Counter)) )) . Note)) <> 
                            (expr 
                              (literal 0))) ))) THEN \n 
                    (then_block 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call x) = 
                          (expr 
                            (literal 1)))) \n) 
                    (else_block_statement ELSE 
                      (else_block \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call x) = 
                            (expr 
                              (variable_or_function_call INP 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (literal &H60)) )))))) \n)) 
                    (end_if_statement END IF)) \n \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (variable_or_function_call ox)) = 
                      (expr 
                        (variable_or_function_call x))) THEN \n 
                    (then_block 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Song 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (variable_or_function_call Counter)) )) . Dur) = 
                          (expr 
                            (expr 
                              (variable_or_function_call Song 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call Counter)) )) . Dur)) + 
                            (expr 
                              (literal 1))))) \n 
                      (if_block_statement IF 
                        (expr 
                          (expr 
                            (variable_or_function_call Song 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call Counter)) )) . Note)) = 
                          (expr 
                            (literal 0))) THEN \n 
                        (then_block 
                          (statement 
                            (call_statement 
                              (untyped_id PlayNote) 
                              (call_argument_list 
                                (call_argument 
                                  (expr 
                                    (variable_or_function_call Song 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call Counter)) )) . Note))) , 
                                (call_argument 
                                  (expr 
                                    (variable_or_function_call Song 
                                      (args_or_indices 
                                        ( 
                                          (expr 
                                            (variable_or_function_call Counter)) )) . Oct))) , 
                                (call_argument RESTTICK)))) \n) 
                        (else_block_statement ELSE 
                          (else_block \n 
                            (statement 
                              (call_statement 
                                (untyped_id PlayNote) 
                                (call_argument_list 
                                  (call_argument 
                                    (expr 
                                      (variable_or_function_call Song 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call Counter)) )) . Note))) , 
                                  (call_argument 
                                    (expr 
                                      (variable_or_function_call Song 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call Counter)) )) . Oct))) , 
                                  (call_argument NOTETICK)))) \n)) 
                        (end_if_statement END IF)) \n 
                      (statement 
                        (if_inline_statement IF 
                          (expr 
                            (expr 
                              (builtin_function LEN 
                                ( 
                                  (expr 
                                    (variable_or_function_call Hld$)) ))) > 
                            (expr 
                              (literal 1))) THEN 
                          (if_inline_action 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call Hld$) = 
                                (expr 
                                  (literal ""))))))) \n \n) 
                    (elseif_block_statement ELSEIF 
                      (expr 
                        (expr 
                          (variable_or_function_call x)) < 
                        (expr 
                          (literal 128))) THEN 
                      (else_block \n 
                        (if_block_statement IF 
                          (expr 
                            (expr 
                              (variable_or_function_call KeyState)) = 
                            (expr 
                              (variable_or_function_call DOWN))) THEN \n 
                          (then_block 
                            (statement 
                              (call_statement 
                                (untyped_id DrawNote) 
                                (call_argument_list 
                                  (call_argument 
                                    (expr 
                                      (variable_or_function_call Song 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call Counter)) )) . Note))) , 
                                  (call_argument 
                                    (expr 
                                      (variable_or_function_call Song 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call Counter)) )) . Oct))) , 
                                  (call_argument UP)))) \n) 
                          (end_if_statement END IF)) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Counter) = 
                            (expr 
                              (expr 
                                (variable_or_function_call Counter)) + 
                              (expr 
                                (literal 1))))) \n 
                        (if_block_statement IF 
                          (expr 
                            (expr 
                              (variable_or_function_call Counter)) > 
                            (expr 
                              (variable_or_function_call MAXNOTE))) THEN \n 
                          (then_block 
                            (statement 
                              (call_statement 
                                (untyped_id ErrorMessage) 
                                (call_argument_list 
                                  (call_argument 
                                    (expr 
                                      (literal "Maximum song length reached.")))))) \n 
                            (statement 
                              (goto_statement GOTO 
                                (target 
                                  (text_label 
                                    (untyped_id GetOut))))) \n) 
                          (end_if_statement END IF)) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Song 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call Counter)) )) . Note) = 
                            (expr 
                              (variable_or_function_call Kyb 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call x)) )) . Note)))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Song 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call Counter)) )) . Oct) = 
                            (expr 
                              (variable_or_function_call Kyb 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call x)) )) . Oct)))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Song 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call Counter)) )) . Dur) = 
                            (expr 
                              (literal 0)))) \n 
                        (statement 
                          (call_statement 
                            (untyped_id DrawNote) 
                            (call_argument_list 
                              (call_argument 
                                (expr 
                                  (variable_or_function_call Song 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (variable_or_function_call Counter)) )) . Note))) , 
                              (call_argument 
                                (expr 
                                  (variable_or_function_call Song 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (variable_or_function_call Counter)) )) . Oct))) , 
                              (call_argument DOWN)))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Hld$) = 
                            (expr 
                              (literal "")))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call KeyState) = 
                            (expr 
                              (variable_or_function_call DOWN)))) \n \n)) 
                    (elseif_block_statement ELSEIF 
                      (expr 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (variable_or_function_call x)) - 
                              (expr 
                                (literal 128))) )) <> 
                        (expr 
                          (variable_or_function_call ox))) THEN 
                      (else_block \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call x) = 
                            (expr 
                              (variable_or_function_call ox)))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Song 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call Counter)) )) . Dur) = 
                            (expr 
                              (expr 
                                (variable_or_function_call Song 
                                  (args_or_indices 
                                    ( 
                                      (expr 
                                        (variable_or_function_call Counter)) )) . Dur)) + 
                              (expr 
                                (literal 1))))) \n 
                        (if_block_statement IF 
                          (expr 
                            (expr 
                              (variable_or_function_call Song 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call Counter)) )) . Note)) = 
                            (expr 
                              (literal 0))) THEN \n 
                          (then_block 
                            (statement 
                              (call_statement 
                                (untyped_id PlayNote) 
                                (call_argument_list 
                                  (call_argument 
                                    (expr 
                                      (variable_or_function_call Song 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call Counter)) )) . Note))) , 
                                  (call_argument 
                                    (expr 
                                      (variable_or_function_call Song 
                                        (args_or_indices 
                                          ( 
                                            (expr 
                                              (variable_or_function_call Counter)) )) . Oct))) , 
                                  (call_argument RESTTICK)))) \n) 
                          (else_block_statement ELSE 
                            (else_block \n 
                              (statement 
                                (call_statement 
                                  (untyped_id PlayNote) 
                                  (call_argument_list 
                                    (call_argument 
                                      (expr 
                                        (variable_or_function_call Song 
                                          (args_or_indices 
                                            ( 
                                              (expr 
                                                (variable_or_function_call Counter)) )) . Note))) , 
                                    (call_argument 
                                      (expr 
                                        (variable_or_function_call Song 
                                          (args_or_indices 
                                            ( 
                                              (expr 
                                                (variable_or_function_call Counter)) )) . Oct))) , 
                                    (call_argument NOTETICK)))) \n)) 
                          (end_if_statement END IF)) \n 
                        (statement 
                          (if_inline_statement IF 
                            (expr 
                              (expr 
                                (builtin_function LEN 
                                  ( 
                                    (expr 
                                      (variable_or_function_call Hld$)) ))) > 
                              (expr 
                                (literal 1))) THEN 
                            (if_inline_action 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call Hld$) = 
                                  (expr 
                                    (literal ""))))))) \n \n)) 
                    (elseif_block_statement ELSEIF 
                      (expr 
                        (expr 
                          (variable_or_function_call KeyState)) = 
                        (expr 
                          (variable_or_function_call DOWN))) THEN 
                      (else_block \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call KeyState) = 
                            (expr 
                              (variable_or_function_call UP)))) \n 
                        (statement 
                          (call_statement 
                            (untyped_id DrawNote) 
                            (call_argument_list 
                              (call_argument 
                                (expr 
                                  (variable_or_function_call Song 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (variable_or_function_call Counter)) )) . Note))) , 
                              (call_argument 
                                (expr 
                                  (variable_or_function_call Song 
                                    (args_or_indices 
                                      ( 
                                        (expr 
                                          (variable_or_function_call Counter)) )) . Oct))) , 
                              (call_argument UP)))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Counter) = 
                            (expr 
                              (expr 
                                (variable_or_function_call Counter)) + 
                              (expr 
                                (literal 1))))) \n 
                        (if_block_statement IF 
                          (expr 
                            (expr 
                              (variable_or_function_call Counter)) > 
                            (expr 
                              (variable_or_function_call MAXNOTE))) THEN \n 
                          (then_block 
                            (statement 
                              (call_statement 
                                (untyped_id ErrorMessage) 
                                (call_argument_list 
                                  (call_argument 
                                    (expr 
                                      (literal "Maximum song length reached.")))))) \n 
                            (statement 
                              (goto_statement GOTO 
                                (target 
                                  (text_label 
                                    (untyped_id GetOut))))) \n) 
                          (end_if_statement END IF)) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Song 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call Counter)) )) . Note) = 
                            (expr 
                              (literal 0)))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Song 
                              (args_or_indices 
                                ( 
                                  (expr 
                                    (variable_or_function_call Counter)) )) . Dur) = 
                            (expr 
                              (literal 0)))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Hld$) = 
                            (expr 
                              (literal "")))) \n)) 
                    (end_if_statement END IF)) \n)) 
              (end_if_statement END IF)) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call oi$) = 
                (expr 
                  (variable_or_function_call i$)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call i$) = 
                (expr 
                  (variable_or_function_call INKEY$)))) \n) WEND)) \n \n 
      (label 
        (text_label 
          (untyped_id GetOut)) :) \n 
      (statement 
        (call_statement 
          (untyped_id DrawNote) 
          (call_argument_list 
            (call_argument 
              (expr 
                (variable_or_function_call Song 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Counter)) )) . Note))) , 
            (call_argument 
              (expr 
                (variable_or_function_call Song 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Counter)) )) . Oct))) , 
            (call_argument UP)))) \n \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call Counter)) = 
              (expr 
                (literal 1))) OR 
            (expr 
              (expr 
                (variable_or_function_call NoSave)) = 
              (expr 
                (variable_or_function_call TRUE)))) THEN 
          (if_inline_action 
            (statement 
              (exit_statement EXIT SUB))))) \n \n 
      (statement 
        (while_wend_statement WHILE 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call Song 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call Counter)) )) . Note)) = 
              (expr 
                (literal 0))) AND 
            (expr 
              (expr 
                (variable_or_function_call Counter)) > 
              (expr 
                (literal 0)))) 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Counter) = 
                (expr 
                  (expr 
                    (variable_or_function_call Counter)) - 
                  (expr 
                    (literal 1))))) \n) WEND)) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call SongRecorded) = 
          (expr 
            (variable_or_function_call TRUE)))) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n 
  (function_statement FUNCTION SaveChanges STATIC 
    (block \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call BACKGROUNDCOLOR)) , 
          (expr 
            (variable_or_function_call BACKGROUNDCOLOR)))) \n 
      (statement 
        (call_statement 
          (untyped_id DrawBox) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal 13))) , 
            (call_argument 
              (expr 
                (literal 38))) , 
            (call_argument 
              (expr 
                (literal 24))) , 
            (call_argument 
              (expr 
                (literal 78))) , 
            (call_argument 
              (expr 
                (literal "")))))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 0)) , 
          (expr 
            (literal 7)))) \n 
      (statement 
        (call_statement 
          (untyped_id DrawBox) 
          (call_argument_list 
            (call_argument 
              (expr 
                (literal 15))) , 
            (call_argument 
              (expr 
                (literal 41))) , 
            (call_argument 
              (expr 
                (literal 20))) , 
            (call_argument 
              (expr 
                (literal 75))) , 
            (call_argument 
              (expr 
                (literal "Save Changes")))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 17)) , 
          (expr 
            (literal 43)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "Do you want to save the changes")))) \n 
      (statement 
        (locate_statement LOCATE , 
          (expr 
            (literal 43)) , 
          (expr 
            (literal 1)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "made to this song? 
              (Y/N) ")) ;)) \n \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call i$) = 
                (expr 
                  (variable_or_function_call UCASE$ 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call INKEY$)) )))))) \n) LOOP 
          (do_condition UNTIL 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call i$)) = 
                (expr 
                  (literal "Y"))) OR 
              (expr 
                (expr 
                  (variable_or_function_call i$)) = 
                (expr 
                  (literal "N"))))))) \n \n 
      (statement 
        (locate_statement LOCATE , , 
          (expr 
            (literal 0)))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call i$)) = 
          (expr 
            (literal "Y"))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call SaveChanges) = 
              (expr 
                (variable_or_function_call TRUE)))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call SaveChanges) = 
                (expr 
                  (variable_or_function_call FALSE)))) \n)) 
        (end_if_statement END IF)) \n \n) 
    (end_function_statement END FUNCTION)) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id SaveSong) STATIC 
    (block \n \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id S) AS 
            (type_name 
              (untyped_id SongIndexCard))))) \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id HeaderInfo) AS 
            (type_name 
              (untyped_id FileHeader))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call FileError) = 
          (expr 
            (literal 0)))) \n \n 
      (statement 
        (open_statement OPEN 
          (expr 
            (literal "QSYNTH.DAT")) FOR 
          (open_mode BINARY) AS 
          (expr 
            (literal 1)))) \n 
      (statement 
        (get_io_statement GET # 
          (expr 
            (literal 1)) , , 
          (variable_or_function_call HeaderInfo))) \n \n \n \n \n 
      (statement 
        (seek_statement SEEK # 
          (expr 
            (literal 1)) , 
          (expr 
            (expr 
              (expr 
                (builtin_function LEN 
                  ( 
                    (expr 
                      (variable_or_function_call HeaderInfo)) ))) + 
              (expr 
                ( 
                  (expr 
                    (expr 
                      (builtin_function LEN 
                        ( 
                          (expr 
                            (variable_or_function_call S)) ))) * 
                    (expr 
                      (variable_or_function_call HeaderInfo.Count))) ))) + 
            (expr 
              (literal 1))))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call S.naym) = 
          (expr 
            (variable_or_function_call SongName)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call S.desc) = 
          (expr 
            (variable_or_function_call SongDesc)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call S.Size) = 
          (expr 
            (variable_or_function_call Counter)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call S.Offset) = 
          (expr 
            (variable_or_function_call HeaderInfo.NextNote)))) \n 
      (statement 
        (put_io_statement PUT # 
          (expr 
            (literal 1)) , , 
          (variable_or_function_call S))) \n \n \n \n \n \n \n 
      (statement 
        (seek_statement SEEK # 
          (expr 
            (literal 1)) , 
          (expr 
            (expr 
              (expr 
                (builtin_function LEN 
                  ( 
                    (expr 
                      (variable_or_function_call HeaderInfo)) ))) + 
              (expr 
                ( 
                  (expr 
                    (expr 
                      (builtin_function LEN 
                        ( 
                          (expr 
                            (variable_or_function_call S)) ))) * 
                    (expr 
                      (variable_or_function_call MAXSONG))) ))) + 
            (expr 
              (variable_or_function_call HeaderInfo.NextNote))))) \n \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call Counter)) 
          (block \n 
            (statement 
              (put_io_statement PUT # 
                (expr 
                  (literal 1)) , , 
                (variable_or_function_call Song 
                  (args_or_indices 
                    ( 
                      (expr 
                        (variable_or_function_call i)) ))))) \n) NEXT i)) \n \n \n \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call HeaderInfo.Count) = 
          (expr 
            (expr 
              (variable_or_function_call HeaderInfo.Count)) + 
            (expr 
              (literal 1))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call HeaderInfo.NextNote) = 
          (expr 
            (expr 
              (variable_or_function_call HeaderInfo.NextNote)) + 
            (expr 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call Counter)) * 
                  (expr 
                    (builtin_function LEN 
                      ( 
                        (expr 
                          (variable_or_function_call Song 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 1)) )))) )))) ))))) \n 
      (statement 
        (seek_statement SEEK # 
          (expr 
            (literal 1)) , 
          (expr 
            (literal 1)))) \n 
      (statement 
        (put_io_statement PUT # 
          (expr 
            (literal 1)) , , 
          (variable_or_function_call HeaderInfo))) \n 
      (statement 
        (close_statement CLOSE 
          (expr 
            (literal 1)))) \n \n) 
    (end_sub_statement END SUB)) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n 
  (function_statement FUNCTION SimpleEdit 
    ( 
      (parameter_list 
        (parameter row) , 
        (parameter col) , 
        (parameter text$) , 
        (parameter MaxLen)) ) STATIC 
    (block \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call row)) , 
          (expr 
            (variable_or_function_call col)) , 
          (expr 
            (literal 1)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call text$)) ;)) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Finished) = 
          (expr 
            (variable_or_function_call FALSE)))) \n 
      (statement 
        (while_wend_statement WHILE 
          (expr NOT 
            (expr 
              (variable_or_function_call Finished))) 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call i$) = 
                (expr 
                  (variable_or_function_call INKEY$)))) \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call i$)) 
                (before_first_case \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call CHR$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 13)) )))))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Finished) = 
                        (expr 
                          (variable_or_function_call TRUE)))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call SimpleEdit) = 
                        (expr 
                          (variable_or_function_call CR)))) \n \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call CHR$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 27)) )))))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Finished) = 
                        (expr 
                          (variable_or_function_call TRUE)))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call SimpleEdit) = 
                        (expr 
                          (variable_or_function_call ESC)))) \n \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call CHR$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 9)) )))))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Finished) = 
                        (expr 
                          (variable_or_function_call TRUE)))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call SimpleEdit) = 
                        (expr 
                          (variable_or_function_call TABCHAR)))) \n \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call CHR$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 8)) )))))) 
                  (block \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (builtin_function LEN 
                            ( 
                              (expr 
                                (variable_or_function_call text$)) ))) > 
                        (expr 
                          (literal 0))) THEN \n 
                      (then_block 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call text$) = 
                            (expr 
                              (variable_or_function_call LEFT$ 
                                (args_or_indices 
                                  ( 
                                    (expr 
                                      (variable_or_function_call text$)) , 
                                    (expr 
                                      (expr 
                                        (builtin_function LEN 
                                          ( 
                                            (expr 
                                              (variable_or_function_call text$)) ))) - 
                                      (expr 
                                        (literal 1))) )))))) \n 
                        (statement 
                          (locate_statement LOCATE 
                            (expr 
                              (variable_or_function_call row)) , 
                            (expr 
                              (variable_or_function_call col)))) \n 
                        (statement 
                          (print_statement PRINT 
                            (expr 
                              (variable_or_function_call text$)) ; 
                            (expr 
                              (literal " ")) ;)) \n 
                        (statement 
                          (locate_statement LOCATE 
                            (expr 
                              (variable_or_function_call row)) , 
                            (expr 
                              (expr 
                                (variable_or_function_call col)) + 
                              (expr 
                                (builtin_function LEN 
                                  ( 
                                    (expr 
                                      (variable_or_function_call text$)) )))))) \n) 
                      (end_if_statement END IF)) \n \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call CHR$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 32)) )))) TO 
                      (expr 
                        (variable_or_function_call CHR$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 126)) )))))) 
                  (block \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (builtin_function LEN 
                            ( 
                              (expr 
                                (variable_or_function_call text$)) ))) < 
                        (expr 
                          (variable_or_function_call MaxLen))) THEN \n 
                      (then_block 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call text$) = 
                            (expr 
                              (expr 
                                (variable_or_function_call text$)) + 
                              (expr 
                                (variable_or_function_call i$))))) \n 
                        (statement 
                          (print_statement PRINT 
                            (expr 
                              (variable_or_function_call i$)) ;)) \n) 
                      (end_if_statement END IF)) \n)) 
                (end_select_statement END SELECT))) \n) WEND)) \n \n 
      (statement 
        (locate_statement LOCATE , , 
          (expr 
            (literal 0)))) \n \n) 
    (end_function_statement END FUNCTION)) \n \n \n \n \n \n \n \n \n 
  (sub_statement SUB 
    (untyped_id TimeDelay) 
    ( 
      (parameter_list 
        (parameter Dur#)) ) STATIC 
    (block \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call x#) = 
          (expr 
            (builtin_function TIMER)))) \n 
      (statement 
        (while_wend_statement WHILE 
          (expr 
            (expr 
              ( 
                (expr 
                  (expr 
                    (builtin_function TIMER)) - 
                  (expr 
                    (variable_or_function_call x#))) )) < 
            (expr 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call Dur#)) / 
                  (expr 
                    (literal 18.2))) ))) 
          (block :) WEND)) \n \n) 
    (end_sub_statement END SUB)) \n <EOF>)
