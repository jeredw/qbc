(program ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n \n \n ' \n 
  (statement 
    (deftype_statement DEFINT 
      (letter_range A - Z))) \n \n ' \n 
  (declare_statement DECLARE SUB 
    (untyped_id TransactionSummary) 
    ( 
      (declare_parameter_list 
        (declare_parameter item%)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id LCenter) 
    ( 
      (declare_parameter_list 
        (declare_parameter text$)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id ScrollUp) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id ScrollDown) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id Initialize) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id Intro) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id SparklePause) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id Center) 
    ( 
      (declare_parameter_list 
        (declare_parameter row%) , 
        (declare_parameter text$)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id FancyCls) 
    ( 
      (declare_parameter_list 
        (declare_parameter dots%) , 
        (declare_parameter Background%)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id LoadState) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id SaveState) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id MenuSystem) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id MakeBackup) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id RestoreBackup) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id Box) 
    ( 
      (declare_parameter_list 
        (declare_parameter Row1%) , 
        (declare_parameter Col1%) , 
        (declare_parameter Row2%) , 
        (declare_parameter Col2%)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id NetWorthReport) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id EditAccounts) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id PrintHelpLine) 
    ( 
      (declare_parameter_list 
        (declare_parameter help$)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id EditTrans) 
    ( 
      (declare_parameter_list 
        (declare_parameter item%)) )) \n 
  (declare_statement DECLARE FUNCTION Cvdt$ 
    ( 
      (declare_parameter_list 
        (declare_parameter X#)) )) \n 
  (declare_statement DECLARE FUNCTION Cvst$ 
    ( 
      (declare_parameter_list 
        (declare_parameter X!)) )) \n 
  (declare_statement DECLARE FUNCTION Cvit$ 
    ( 
      (declare_parameter_list 
        (declare_parameter X%)) )) \n 
  (declare_statement DECLARE FUNCTION Menu% 
    ( 
      (declare_parameter_list 
        (declare_parameter CurrChoiceX%) , 
        (declare_parameter MaxChoice%) , 
        (declare_parameter choice$ 
          (array_declaration 
            ( ))) , 
        (declare_parameter ItemRow% 
          (array_declaration 
            ( ))) , 
        (declare_parameter ItemCol% 
          (array_declaration 
            ( ))) , 
        (declare_parameter help$ 
          (array_declaration 
            ( ))) , 
        (declare_parameter BarMode%)) )) \n 
  (declare_statement DECLARE FUNCTION GetString$ 
    ( 
      (declare_parameter_list 
        (declare_parameter row%) , 
        (declare_parameter col%) , 
        (declare_parameter start$) , 
        (declare_parameter end$) , 
        (declare_parameter Vis%) , 
        (declare_parameter Max%)) )) \n 
  (declare_statement DECLARE FUNCTION Trim$ 
    ( 
      (declare_parameter_list 
        (declare_parameter X$)) )) \n \n ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment TRUE = 
        (const_expr 
          (expr - 
            (expr 
              (literal 1))))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment FALSE = 
        (const_expr 
          (expr NOT 
            (expr 
              (variable_or_function_call TRUE))))))) \n \n ' \n 
  (type_statement TYPE 
    (untyped_id AccountType) \n 
    (type_element 
      (untyped_id Title) AS 
      (type_name_for_type_element 
        (fixed_string STRING * 20)) \n) 
    (type_element 
      (untyped_id AType) AS 
      (type_name_for_type_element 
        (fixed_string STRING * 1)) \n) 
    (type_element 
      (untyped_id Desc) AS 
      (type_name_for_type_element 
        (fixed_string STRING * 50)) \n) END TYPE) \n \n 
  (type_statement TYPE 
    (untyped_id Recordtype) \n 
    (type_element 
      (untyped_id Date) AS 
      (type_name_for_type_element 
        (fixed_string STRING * 8)) \n) 
    (type_element 
      (untyped_id Ref) AS 
      (type_name_for_type_element 
        (fixed_string STRING * 10)) \n) 
    (type_element 
      (untyped_id Desc) AS 
      (type_name_for_type_element 
        (fixed_string STRING * 50)) \n) 
    (type_element 
      (untyped_id Fig1) AS 
      (type_name_for_type_element DOUBLE) \n) 
    (type_element 
      (untyped_id Fig2) AS 
      (type_name_for_type_element DOUBLE) \n) END TYPE) \n \n ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id account) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 19))) )) AS 
        (type_name 
          (untyped_id AccountType))))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable ColorPref))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable colors 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 0)) TO 
              (expr 
                (literal 20))) , 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 4))) ))))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable ScrollUpAsm 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 7))) ))))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable ScrollDownAsm 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 7))) ))))) \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id PrintErr) AS 
        (type_name INTEGER)))) ' \n \n 
  (statement 
    (def_seg_statement DEF SEG = 
      (expr 
        (literal 0)))) ' \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call KeyFlags) = 
      (expr 
        (variable_or_function_call PEEK 
          ( 
            (argument_list 
              (argument 
                (expr 
                  (literal 1047)))) ))))) \n 
  (statement 
    (call_statement 
      (untyped_id POKE) 
      (argument_list 
        (argument 
          (expr 
            (literal 1047))) , 
        (argument 
          (expr 
            (literal &H0)))))) \n 
  (statement 
    (def_seg_statement DEF SEG)) \n \n ' \n ' \n 
  (statement 
    (on_error_statement ON ERROR GOTO 
      (target 
        (text_label 
          (untyped_id ErrorTrap))))) \n 
  (statement 
    (open_statement OPEN 
      (expr 
        (literal "money.dat")) FOR 
      (open_mode INPUT) AS # 
      (expr 
        (literal 1)))) \n 
  (statement 
    (close_statement CLOSE)) \n 
  (statement 
    (on_error_statement ON ERROR GOTO 
      (target 
        (line_number 0)))) ' \n \n 
  (statement 
    (call_statement 
      (untyped_id Initialize))) ' \n 
  (statement 
    (call_statement 
      (untyped_id Intro))) ' \n 
  (statement 
    (call_statement 
      (untyped_id MenuSystem))) ' \n 
  (statement 
    (color_statement COLOR 
      (expr 
        (literal 7)) , 
      (expr 
        (literal 0)))) ' \n 
  (statement 
    (call_statement 
      (untyped_id CLS))) \n \n 
  (statement 
    (def_seg_statement DEF SEG = 
      (expr 
        (literal 0)))) ' \n 
  (statement 
    (call_statement 
      (untyped_id POKE) 
      (argument_list 
        (argument 
          (expr 
            (literal 1047))) , 
        (argument 
          (expr 
            (variable_or_function_call KeyFlags)))))) \n 
  (statement 
    (def_seg_statement DEF SEG)) \n \n 
  (statement 
    (end_statement END)) \n \n ' \n ' \n 
  (label 
    (text_label 
      (untyped_id ErrorTrap)) :) \n 
  (statement 
    (select_case_statement SELECT CASE 
      (expr 
        (variable_or_function_call ERR)) 
      (before_first_case \n ' \n) 
      (case_block 
        (case_statement CASE 
          (case_expr 
            (expr 
              (literal 53)))) 
        (block \n 
          (statement 
            (close_statement CLOSE)) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call ColorPref) = 
              (expr 
                (literal 1)))) \n 
          (statement 
            (for_next_statement FOR a = 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 19)) 
              (block \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call account 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call a)))) ) . Title) = 
                    (expr 
                      (literal "")))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call account 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call a)))) ) . AType) = 
                    (expr 
                      (literal "")))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call account 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call a)))) ) . Desc) = 
                    (expr 
                      (literal "")))) \n) NEXT a)) \n 
          (statement 
            (call_statement 
              (untyped_id SaveState))) \n 
          (statement 
            (resume_statement RESUME)) \n)) 
      (case_block 
        (case_statement CASE 
          (case_expr 
            (expr 
              (literal 24))) , 
          (case_expr 
            (expr 
              (literal 25)))) 
        (block \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call PrintErr) = 
              (expr 
                (variable_or_function_call TRUE)))) \n 
          (statement 
            (call_statement 
              (untyped_id Box) 
              (argument_list 
                (argument 
                  (expr 
                    (literal 8))) , 
                (argument 
                  (expr 
                    (literal 13))) , 
                (argument 
                  (expr 
                    (literal 14))) , 
                (argument 
                  (expr 
                    (literal 69)))))) \n 
          (statement 
            (call_statement 
              (untyped_id Center) 
              (argument_list 
                (argument 
                  (expr 
                    (literal 11))) , 
                (argument 
                  (expr 
                    (literal "Printer not responding ... Press Space to continue")))))) \n 
          (statement 
            (while_wend_statement WHILE 
              (expr 
                (expr 
                  (variable_or_function_call INKEY$)) <> 
                (expr 
                  (literal ""))) 
              (block :) WEND)) \n 
          (statement 
            (while_wend_statement WHILE 
              (expr 
                (expr 
                  (variable_or_function_call INKEY$)) <> 
                (expr 
                  (literal " "))) 
              (block :) WEND)) \n 
          (statement 
            (resume_statement RESUME NEXT)) \n)) 
      (case_block 
        (case_statement CASE ELSE) 
        (block \n)) 
      (end_select_statement END SELECT))) \n 
  (statement 
    (resume_statement RESUME NEXT)) \n \n \n ' \n ' \n ' \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 7) , 
      (data_item 15) , 
      (data_item 7) , 
      (data_item 0) , 
      (data_item 7) , 
      (data_item 0) , 
      (data_item 15) , 
      (data_item 0) , 
      (data_item 0))) \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item 9) , 
      (data_item 12) , 
      (data_item 3) , 
      (data_item 0) , 
      (data_item 1) , 
      (data_item 15) , 
      (data_item 0) , 
      (data_item 7) , 
      (data_item 0))) \n 
  (statement 
    (data_statement DATA 
      (data_item 3) , 
      (data_item 15) , 
      (data_item 13) , 
      (data_item 1) , 
      (data_item 14) , 
      (data_item 3) , 
      (data_item 15) , 
      (data_item 0) , 
      (data_item 7) , 
      (data_item 0))) \n 
  (statement 
    (data_statement DATA 
      (data_item 7) , 
      (data_item 12) , 
      (data_item 15) , 
      (data_item 4) , 
      (data_item 14) , 
      (data_item 0) , 
      (data_item 15) , 
      (data_item 15) , 
      (data_item 1) , 
      (data_item 0))) \n \n ' \n ' \n 
  (statement 
    (data_statement DATA 
      (data_item &HB8) , 
      (data_item &H01) , 
      (data_item &H06) , 
      (data_item &HB9) , 
      (data_item &H01) , 
      (data_item &H04) , 
      (data_item &HBA) , 
      (data_item &H4E) , 
      (data_item &H16) , 
      (data_item &HB7) , 
      (data_item &H00) , 
      (data_item &HCD) , 
      (data_item &H10) , 
      (data_item &HCB))) \n 
  (statement 
    (data_statement DATA 
      (data_item &HB8) , 
      (data_item &H01) , 
      (data_item &H07) , 
      (data_item &HB9) , 
      (data_item &H01) , 
      (data_item &H04) , 
      (data_item &HBA) , 
      (data_item &H4E) , 
      (data_item &H16) , 
      (data_item &HB7) , 
      (data_item &H00) , 
      (data_item &HCD) , 
      (data_item &H10) , 
      (data_item &HCB))) \n \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id Box) 
    ( 
      (parameter_list 
        (parameter Row1) , 
        (parameter Col1) , 
        (parameter Row2) , 
        (parameter Col2)) ) STATIC 
    (block \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call BoxWidth) = 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call Col2)) - 
              (expr 
                (variable_or_function_call Col1))) + 
            (expr 
              (literal 1))))) \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row1)) , 
          (expr 
            (variable_or_function_call Col1)))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "Ú")) ;) 
          (print_argument 
            (expr 
              (variable_or_function_call STRING$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (expr 
                          (variable_or_function_call BoxWidth)) - 
                        (expr 
                          (literal 2)))) , 
                    (argument 
                      (expr 
                        (literal "Ä")))) ))) ;) 
          (print_argument 
            (expr 
              (literal "¿")) ;))) \n \n 
      (statement 
        (for_next_statement FOR a = 
          (expr 
            (expr 
              (variable_or_function_call Row1)) + 
            (expr 
              (literal 1))) TO 
          (expr 
            (expr 
              (variable_or_function_call Row2)) - 
            (expr 
              (literal 1))) 
          (block \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call a)) , 
                (expr 
                  (variable_or_function_call Col1)))) \n 
            (statement 
              (print_statement PRINT 
                (print_argument 
                  (expr 
                    (literal "³")) ;) 
                (print_argument 
                  (expr 
                    (variable_or_function_call SPACE$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (expr 
                                (variable_or_function_call BoxWidth)) - 
                              (expr 
                                (literal 2))))) ))) ;) 
                (print_argument 
                  (expr 
                    (literal "³")) ;))) \n) NEXT a)) \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row2)) , 
          (expr 
            (variable_or_function_call Col1)))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "À")) ;) 
          (print_argument 
            (expr 
              (variable_or_function_call STRING$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (expr 
                          (variable_or_function_call BoxWidth)) - 
                        (expr 
                          (literal 2)))) , 
                    (argument 
                      (expr 
                        (literal "Ä")))) ))) ;) 
          (print_argument 
            (expr 
              (literal "Ù")) ;))) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id Center) 
    ( 
      (parameter_list 
        (parameter row) , 
        (parameter text$)) ) 
    (block \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call row)) , 
          (expr 
            (expr 
              (literal 41)) - 
            (expr 
              (expr 
                (builtin_function LEN 
                  ( 
                    (expr 
                      (variable_or_function_call text$)) ))) / 
              (expr 
                (literal 2)))))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call text$)) ;))) \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n 
  (function_statement FUNCTION Cvdt$ 
    ( 
      (parameter_list 
        (parameter X#)) ) 
    (block \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Cvdt$) = 
          (expr 
            (variable_or_function_call RIGHT$ 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call STR$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call X#)))) )))) , 
                  (argument 
                    (expr 
                      (expr 
                        (builtin_function LEN 
                          ( 
                            (expr 
                              (variable_or_function_call STR$ 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call X#)))) ))) ))) - 
                      (expr 
                        (literal 1))))) ))))) \n \n) 
    (end_function_statement END FUNCTION)) \n \n ' \n ' \n 
  (function_statement FUNCTION Cvit$ 
    ( 
      (parameter_list 
        (parameter X)) ) 
    (block \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Cvit$) = 
          (expr 
            (variable_or_function_call RIGHT$ 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call STR$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call X)))) )))) , 
                  (argument 
                    (expr 
                      (expr 
                        (builtin_function LEN 
                          ( 
                            (expr 
                              (variable_or_function_call STR$ 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call X)))) ))) ))) - 
                      (expr 
                        (literal 1))))) ))))) \n) 
    (end_function_statement END FUNCTION)) \n \n ' \n ' \n 
  (function_statement FUNCTION Cvst$ 
    ( 
      (parameter_list 
        (parameter X!)) ) 
    (block \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Cvst$) = 
          (expr 
            (variable_or_function_call RIGHT$ 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call STR$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call X!)))) )))) , 
                  (argument 
                    (expr 
                      (expr 
                        (builtin_function LEN 
                          ( 
                            (expr 
                              (variable_or_function_call STR$ 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call X!)))) ))) ))) - 
                      (expr 
                        (literal 1))))) ))))) \n) 
    (end_function_statement END FUNCTION)) \n \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id EditAccounts) 
    (block \n \n ' \n 
      (statement 
        (dim_statement REDIM 
          (dim_variable help$ 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 4))) ))) , 
          (dim_variable col 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 4))) ))) , 
          (dim_variable Vis 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 4))) ))) , 
          (dim_variable Max 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 4))) ))) , 
          (dim_variable edit$ 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 19))) , 
                (dim_subscript 
                  (expr 
                    (literal 3))) ))))) \n \n ' \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 7))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))) , 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 4))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))))) \n 
      (statement 
        (call_statement 
          (untyped_id Box) 
          (argument_list 
            (argument 
              (expr 
                (literal 2))) , 
            (argument 
              (expr 
                (literal 1))) , 
            (argument 
              (expr 
                (literal 24))) , 
            (argument 
              (expr 
                (literal 80)))))) \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 5))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))) , 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 4))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 1)) , 
          (expr 
            (literal 1)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call SPACE$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (literal 80)))) )))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 1)) , 
          (expr 
            (literal 4)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "Account Editor")) ;))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 7))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))) , 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 4))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))))) \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 3)) , 
          (expr 
            (literal 2)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "No³ Account Title      ³ Description                                      ³A/L"))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 4)) , 
          (expr 
            (literal 2)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "ÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄ"))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call u$) = 
          (expr 
            (literal "##³\                  \³\                                                \³ ! ")))) \n 
      (statement 
        (for_next_statement FOR a = 
          (expr 
            (literal 5)) TO 
          (expr 
            (literal 23)) 
          (block \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call a)) , 
                (expr 
                  (literal 2)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call X) = 
                (expr 
                  (expr 
                    (variable_or_function_call a)) - 
                  (expr 
                    (literal 4))))) \n 
            (statement 
              (print_using_statement PRINT USING 
                (expr 
                  (variable_or_function_call u$)) ; 
                (print_argument 
                  (expr 
                    (variable_or_function_call X)) ;) 
                (print_argument 
                  (expr 
                    (variable_or_function_call account 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call X)))) ) . Title)) ;) 
                (print_argument 
                  (expr 
                    (variable_or_function_call account 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call X)))) ) . Desc)) ;) 
                (print_argument 
                  (expr 
                    (variable_or_function_call account 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call X)))) ) . AType)) ;))) \n) NEXT a)) \n \n ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call help$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal "  Account name                             | <F2=Save and Exit> <Escape=Abort>")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call help$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 2)))) )) = 
          (expr 
            (literal "  Account description                      | <F2=Save and Exit> <Escape=Abort>")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call help$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 3)))) )) = 
          (expr 
            (literal "  Account type 
              (A = Asset, L = Liability)  | <F2=Save and Exit> <Escape=Abort>")))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call col 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal 5)))) : 
      (statement 
        (assignment_statement 
          (variable_or_function_call col 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 2)))) )) = 
          (expr 
            (literal 26)))) : 
      (statement 
        (assignment_statement 
          (variable_or_function_call col 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 3)))) )) = 
          (expr 
            (literal 78)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Vis 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal 20)))) : 
      (statement 
        (assignment_statement 
          (variable_or_function_call Vis 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 2)))) )) = 
          (expr 
            (literal 50)))) : 
      (statement 
        (assignment_statement 
          (variable_or_function_call Vis 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 3)))) )) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Max 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal 20)))) : 
      (statement 
        (assignment_statement 
          (variable_or_function_call Max 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 2)))) )) = 
          (expr 
            (literal 50)))) : 
      (statement 
        (assignment_statement 
          (variable_or_function_call Max 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 3)))) )) = 
          (expr 
            (literal 1)))) \n \n 
      (statement 
        (for_next_statement FOR a = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 19)) 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call edit$ 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call a))) , 
                      (argument 
                        (expr 
                          (literal 1)))) )) = 
                (expr 
                  (variable_or_function_call account 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call a)))) ) . Title)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call edit$ 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call a))) , 
                      (argument 
                        (expr 
                          (literal 2)))) )) = 
                (expr 
                  (variable_or_function_call account 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call a)))) ) . Desc)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call edit$ 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call a))) , 
                      (argument 
                        (expr 
                          (literal 3)))) )) = 
                (expr 
                  (variable_or_function_call account 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call a)))) ) . AType)))) \n) NEXT a)) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call finished) = 
          (expr 
            (variable_or_function_call FALSE)))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurrRow) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurrCol) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (call_statement 
          (untyped_id PrintHelpLine) 
          (argument_list 
            (argument 
              (expr 
                (variable_or_function_call help$ 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call CurrCol)))) ))))))) \n \n ' \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (gosub_statement GOSUB 
                (target 
                  (text_label 
                    (untyped_id EditAccountsShowCursor))))) ' \n 
            (statement 
              (do_loop_statement DO 
                (block ' \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Kbd$) = 
                      (expr 
                        (variable_or_function_call INKEY$)))) \n) LOOP 
                (loop_condition UNTIL 
                  (expr 
                    (expr 
                      (variable_or_function_call Kbd$)) <> 
                    (expr 
                      (literal "")))))) \n \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (expr 
                    (variable_or_function_call Kbd$)) >= 
                  (expr 
                    (literal " "))) AND 
                (expr 
                  (expr 
                    (variable_or_function_call Kbd$)) < 
                  (expr 
                    (literal "~")))) THEN ' 
              (then_block \n 
                (statement 
                  (gosub_statement GOSUB 
                    (target 
                      (text_label 
                        (untyped_id EditAccountsEditItem))))) \n) 
              (end_if_statement END IF)) \n 
            (statement 
              (gosub_statement GOSUB 
                (target 
                  (text_label 
                    (untyped_id EditAccountsHideCursor))))) ' \n ' \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call Kbd$)) 
                (before_first_case \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 0)))) ))) + 
                        (expr 
                          (literal "H"))))) 
                  (block ' \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call CurrRow) = 
                        (expr 
                          (expr 
                            (expr 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call CurrRow)) + 
                                  (expr 
                                    (literal 17))) )) MOD 
                            (expr 
                              (literal 19))) + 
                          (expr 
                            (literal 1))))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 0)))) ))) + 
                        (expr 
                          (literal "P"))))) 
                  (block ' \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call CurrRow) = 
                        (expr 
                          (expr 
                            (expr 
                              ( 
                                (expr 
                                  (variable_or_function_call CurrRow)) )) MOD 
                            (expr 
                              (literal 19))) + 
                          (expr 
                            (literal 1))))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 0)))) ))) + 
                        (expr 
                          (literal "K")))) , 
                    (case_expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 0)))) ))) + 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 15)))) )))))) 
                  (block ' \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call CurrCol) = 
                        (expr 
                          (expr 
                            (expr 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call CurrCol)) + 
                                  (expr 
                                    (literal 1))) )) MOD 
                            (expr 
                              (literal 3))) + 
                          (expr 
                            (literal 1))))) \n 
                    (statement 
                      (call_statement 
                        (untyped_id PrintHelpLine) 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call help$ 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call CurrCol)))) ))))))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 0)))) ))) + 
                        (expr 
                          (literal "M")))) , 
                    (case_expr 
                      (expr 
                        (variable_or_function_call CHR$ 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (literal 9)))) ))))) 
                  (block ' \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call CurrCol) = 
                        (expr 
                          (expr 
                            (expr 
                              ( 
                                (expr 
                                  (variable_or_function_call CurrCol)) )) MOD 
                            (expr 
                              (literal 3))) + 
                          (expr 
                            (literal 1))))) \n 
                    (statement 
                      (call_statement 
                        (untyped_id PrintHelpLine) 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call help$ 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call CurrCol)))) ))))))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 0)))) ))) + 
                        (expr 
                          (literal "<"))))) 
                  (block ' \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call finished) = 
                        (expr 
                          (variable_or_function_call TRUE)))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Save) = 
                        (expr 
                          (variable_or_function_call TRUE)))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call CHR$ 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (literal 27)))) ))))) 
                  (block ' \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call finished) = 
                        (expr 
                          (variable_or_function_call TRUE)))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Save) = 
                        (expr 
                          (variable_or_function_call FALSE)))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call CHR$ 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (literal 13)))) ))))) 
                  (block ' \n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \n 
                    (statement 
                      (call_statement 
                        (untyped_id BEEP))) \n)) 
                (end_select_statement END SELECT))) \n) LOOP 
          (loop_condition UNTIL 
            (expr 
              (variable_or_function_call finished))))) \n \n 
      (if_block_statement IF 
        (expr 
          (variable_or_function_call Save)) THEN \n 
        (then_block 
          (statement 
            (gosub_statement GOSUB 
              (target 
                (text_label 
                  (untyped_id EditAccountsSaveData))))) \n) 
        (end_if_statement END IF)) \n \n 
      (statement 
        (exit_statement EXIT SUB)) \n \n 
      (label 
        (text_label 
          (untyped_id EditAccountsShowCursor)) :) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 8))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))) , 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 9))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (expr 
              (variable_or_function_call CurrRow)) + 
            (expr 
              (literal 4))) , 
          (expr 
            (variable_or_function_call col 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call CurrCol)))) ))))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call LEFT$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call edit$ 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call CurrRow))) , 
                              (argument 
                                (expr 
                                  (variable_or_function_call CurrCol)))) )))) , 
                    (argument 
                      (expr 
                        (variable_or_function_call Vis 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call CurrCol)))) ))))) ))) ;))) \n 
      (statement 
        (return_statement RETURN)) \n \n 
      (label 
        (text_label 
          (untyped_id EditAccountsEditItem)) :) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 8))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))) , 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 9))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call ok) = 
          (expr 
            (variable_or_function_call FALSE)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call start$) = 
          (expr 
            (variable_or_function_call Kbd$)))) \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Kbd$) = 
                (expr 
                  (variable_or_function_call GetString$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (expr 
                              (variable_or_function_call CurrRow)) + 
                            (expr 
                              (literal 4)))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call col 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call CurrCol)))) )))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call start$))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call end$))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call Vis 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call CurrCol)))) )))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call Max 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call CurrCol)))) ))))) ))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call edit$ 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call CurrRow))) , 
                      (argument 
                        (expr 
                          (variable_or_function_call CurrCol)))) )) = 
                (expr 
                  (variable_or_function_call LEFT$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (expr 
                              (variable_or_function_call end$)) + 
                            (expr 
                              (variable_or_function_call SPACE$ 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call Max 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (variable_or_function_call CurrCol)))) ))))) ))))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call Max 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call CurrCol)))) ))))) ))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call start$) = 
                (expr 
                  (literal "")))) \n \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call CurrCol)) = 
                (expr 
                  (literal 3))) THEN \n 
              (then_block 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call X$) = 
                    (expr 
                      (variable_or_function_call UCASE$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call end$)))) ))))) \n 
                (if_block_statement IF 
                  (expr 
                    (expr 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call X$)) = 
                          (expr 
                            (literal "A"))) OR 
                        (expr 
                          (expr 
                            (variable_or_function_call X$)) = 
                          (expr 
                            (literal "L")))) OR 
                      (expr 
                        (expr 
                          (variable_or_function_call X$)) = 
                        (expr 
                          (literal "")))) OR 
                    (expr 
                      (expr 
                        (variable_or_function_call X$)) = 
                      (expr 
                        (literal " ")))) THEN \n 
                  (then_block 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call ok) = 
                        (expr 
                          (variable_or_function_call TRUE)))) \n 
                    (statement 
                      (if_inline_statement IF 
                        (expr 
                          (expr 
                            (variable_or_function_call X$)) = 
                          (expr 
                            (literal ""))) THEN 
                        (if_inline_action 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call X$) = 
                              (expr 
                                (literal " "))))))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call edit$ 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call CurrRow))) , 
                              (argument 
                                (expr 
                                  (variable_or_function_call CurrCol)))) )) = 
                        (expr 
                          (variable_or_function_call X$)))) \n) 
                  (else_block_statement ELSE 
                    (else_block \n 
                      (statement 
                        (call_statement 
                          (untyped_id BEEP))) \n)) 
                  (end_if_statement END IF)) \n) 
              (else_block_statement ELSE 
                (else_block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call ok) = 
                      (expr 
                        (variable_or_function_call TRUE)))) \n)) 
              (end_if_statement END IF)) \n \n) LOOP 
          (loop_condition UNTIL 
            (expr 
              (variable_or_function_call ok))))) \n 
      (statement 
        (return_statement RETURN)) \n \n 
      (label 
        (text_label 
          (untyped_id EditAccountsHideCursor)) :) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 7))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))) , 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 4))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (expr 
              (variable_or_function_call CurrRow)) + 
            (expr 
              (literal 4))) , 
          (expr 
            (variable_or_function_call col 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call CurrCol)))) ))))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call LEFT$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call edit$ 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call CurrRow))) , 
                              (argument 
                                (expr 
                                  (variable_or_function_call CurrCol)))) )))) , 
                    (argument 
                      (expr 
                        (variable_or_function_call Vis 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call CurrCol)))) ))))) ))) ;))) \n 
      (statement 
        (return_statement RETURN)) \n \n \n 
      (label 
        (text_label 
          (untyped_id EditAccountsSaveData)) :) \n 
      (statement 
        (for_next_statement FOR a = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 19)) 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call account 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call a)))) ) . Title) = 
                (expr 
                  (variable_or_function_call edit$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call a))) , 
                        (argument 
                          (expr 
                            (literal 1)))) ))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call account 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call a)))) ) . Desc) = 
                (expr 
                  (variable_or_function_call edit$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call a))) , 
                        (argument 
                          (expr 
                            (literal 2)))) ))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call account 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call a)))) ) . AType) = 
                (expr 
                  (variable_or_function_call edit$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call a))) , 
                        (argument 
                          (expr 
                            (literal 3)))) ))))) \n) NEXT a)) \n 
      (statement 
        (call_statement 
          (untyped_id SaveState))) \n 
      (statement 
        (return_statement RETURN)) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id EditTrans) 
    ( 
      (parameter_list 
        (parameter item)) ) 
    (block \n \n ' \n 
      (statement 
        (dim_statement REDIM 
          (dim_variable help$ 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 6))) ))) , 
          (dim_variable col 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 6))) ))) , 
          (dim_variable Vis 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 6))) ))) , 
          (dim_variable Max 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 6))) ))) , 
          (dim_variable CurrString$ 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 3))) ))) , 
          (dim_variable CurrFig# 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 5))) ))))) \n ' \n 
      (statement 
        (dim_statement REDIM 
          (dim_variable Balance# 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 1000))) ))))) \n \n ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call file$) = 
          (expr 
            (expr 
              (literal "money.")) + 
            (expr 
              (variable_or_function_call Cvit$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call item)))) )))))) \n 
      (statement 
        (open_statement OPEN 
          (expr 
            (variable_or_function_call file$)) FOR 
          (open_mode RANDOM) AS # 
          (expr 
            (literal 1)) LEN = 
          (expr 
            (literal 84)))) \n 
      (statement 
        (field_statement FIELD # 
          (expr 
            (literal 1)) , 
          (field_assignment 
            (expr 
              (literal 8)) AS 
            (variable_or_function_call IoDate$)) , 
          (field_assignment 
            (expr 
              (literal 10)) AS 
            (variable_or_function_call IoRef$)) , 
          (field_assignment 
            (expr 
              (literal 50)) AS 
            (variable_or_function_call IoDesc$)) , 
          (field_assignment 
            (expr 
              (literal 8)) AS 
            (variable_or_function_call IoFig1$)) , 
          (field_assignment 
            (expr 
              (literal 8)) AS 
            (variable_or_function_call IoFig2$)))) \n 
      (statement 
        (field_statement FIELD # 
          (expr 
            (literal 1)) , 
          (field_assignment 
            (expr 
              (literal 11)) AS 
            (variable_or_function_call valid$)) , 
          (field_assignment 
            (expr 
              (literal 5)) AS 
            (variable_or_function_call IoMaxRecord$)) , 
          (field_assignment 
            (expr 
              (literal 8)) AS 
            (variable_or_function_call IoBalance$)))) \n \n ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurrString$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal "")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurrString$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 2)))) )) = 
          (expr 
            (literal "")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurrString$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 3)))) )) = 
          (expr 
            (literal "")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurrFig# 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 4)))) )) = 
          (expr 
            (literal 0)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurrFig# 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 5)))) )) = 
          (expr 
            (literal 0)))) \n \n 
      (statement 
        (get_io_statement GET # 
          (expr 
            (literal 1)) , 
          (expr 
            (literal 1)))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call valid$)) <> 
          (expr 
            (literal "THISISVALID"))) THEN \n 
        (then_block 
          (statement 
            (lset_statement LSET 
              (variable_or_function_call IoDate$) = 
              (expr 
                (literal "")))) \n 
          (statement 
            (lset_statement LSET 
              (variable_or_function_call IoRef$) = 
              (expr 
                (literal "")))) \n 
          (statement 
            (lset_statement LSET 
              (variable_or_function_call IoDesc$) = 
              (expr 
                (literal "")))) \n 
          (statement 
            (lset_statement LSET 
              (variable_or_function_call IoFig1$) = 
              (expr 
                (variable_or_function_call MKD$ 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (literal 0)))) ))))) \n 
          (statement 
            (lset_statement LSET 
              (variable_or_function_call IoFig2$) = 
              (expr 
                (variable_or_function_call MKD$ 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (literal 0)))) ))))) \n 
          (statement 
            (put_io_statement PUT # 
              (expr 
                (literal 1)) , 
              (expr 
                (literal 2)))) \n 
          (statement 
            (lset_statement LSET 
              (variable_or_function_call valid$) = 
              (expr 
                (literal "THISISVALID")))) \n 
          (statement 
            (lset_statement LSET 
              (variable_or_function_call IoMaxRecord$) = 
              (expr 
                (literal "1")))) \n 
          (statement 
            (lset_statement LSET 
              (variable_or_function_call IoBalance$) = 
              (expr 
                (variable_or_function_call MKD$ 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (literal 0)))) ))))) \n 
          (statement 
            (put_io_statement PUT # 
              (expr 
                (literal 1)) , 
              (expr 
                (literal 1)))) \n) 
        (end_if_statement END IF)) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call MaxRecord) = 
          (expr 
            (variable_or_function_call VAL 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call IoMaxRecord$)))) ))))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Balance# 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 0)))) )) = 
          (expr 
            (literal 0)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call a) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (while_wend_statement WHILE 
          (expr 
            (expr 
              (variable_or_function_call a)) <= 
            (expr 
              (variable_or_function_call MaxRecord))) 
          (block \n 
            (statement 
              (get_io_statement GET # 
                (expr 
                  (literal 1)) , 
                (expr 
                  (expr 
                    (variable_or_function_call a)) + 
                  (expr 
                    (literal 1))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Balance# 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call a)))) )) = 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call Balance# 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (expr 
                                  (variable_or_function_call a)) - 
                                (expr 
                                  (literal 1))))) ))) + 
                    (expr 
                      (variable_or_function_call CVD 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call IoFig1$)))) )))) - 
                  (expr 
                    (variable_or_function_call CVD 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call IoFig2$)))) )))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call a) = 
                (expr 
                  (expr 
                    (variable_or_function_call a)) + 
                  (expr 
                    (literal 1))))) \n) WEND)) \n 
      (statement 
        (gosub_statement GOSUB 
          (target 
            (text_label 
              (untyped_id EditTransWriteBalance))))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call help$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal "Date of transaction 
              (mm/dd/yy) ")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call help$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 2)))) )) = 
          (expr 
            (literal "Transaction reference number   ")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call help$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 3)))) )) = 
          (expr 
            (literal "Transaction description        ")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call help$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 4)))) )) = 
          (expr 
            (literal "Increase asset or debt value   ")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call help$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 5)))) )) = 
          (expr 
            (literal "Decrease asset or debt value   ")))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call col 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal 2)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call col 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 2)))) )) = 
          (expr 
            (literal 11)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call col 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 3)))) )) = 
          (expr 
            (literal 18)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call col 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 4)))) )) = 
          (expr 
            (literal 44)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call col 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 5)))) )) = 
          (expr 
            (literal 55)))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Vis 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal 8)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Vis 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 2)))) )) = 
          (expr 
            (literal 6)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Vis 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 3)))) )) = 
          (expr 
            (literal 25)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Vis 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 4)))) )) = 
          (expr 
            (literal 10)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Vis 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 5)))) )) = 
          (expr 
            (literal 10)))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Max 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal 8)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Max 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 2)))) )) = 
          (expr 
            (literal 6)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Max 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 3)))) )) = 
          (expr 
            (literal 25)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Max 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 4)))) )) = 
          (expr 
            (literal 10)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Max 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 5)))) )) = 
          (expr 
            (literal 10)))) \n \n \n ' \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 7))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))) , 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 4))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))))) \n 
      (statement 
        (call_statement 
          (untyped_id Box) 
          (argument_list 
            (argument 
              (expr 
                (literal 2))) , 
            (argument 
              (expr 
                (literal 1))) , 
            (argument 
              (expr 
                (literal 24))) , 
            (argument 
              (expr 
                (literal 80)))))) \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 5))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))) , 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 4))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 1)) , 
          (expr 
            (literal 1)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call SPACE$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (literal 80)))) ))) ;))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 1)) , 
          (expr 
            (literal 4)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (expr 
                (literal "Transaction Editor: ")) + 
              (expr 
                (variable_or_function_call Trim$ 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call account 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (variable_or_function_call item)))) ) . Title)))) )))) ;))) \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 7))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))) , 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 4))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 3)) , 
          (expr 
            (literal 2)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "  Date  ³ Ref# ³ Description             ³ Increase ³ Decrease ³   Balance    "))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 4)) , 
          (expr 
            (literal 2)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "ÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄ"))))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call u$) = 
          (expr 
            (literal "\      \³\    \³\                       \³")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call u1$) = 
          (expr 
            (literal "        ³      ³                         ³          ³          ³              ")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call u1x$) = 
          (expr 
            (literal "ßßßßßßßß³ßßßßßß³ßßßßßßßßßßßßßßßßßßßßßßßßß³ßßßßßßßßßß³ßßßßßßßßßß³ßßßßßßßßßßßßßß")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call u2$) = 
          (expr 
            (literal "###,###.##")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call u3$) = 
          (expr 
            (literal "###,###,###.##")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call u4$) = 
          (expr 
            (literal "          ")))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurrTopline) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (gosub_statement GOSUB 
          (target 
            (text_label 
              (untyped_id EditTransPrintWholeScreen))))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurrRow) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurrCol) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (call_statement 
          (untyped_id PrintHelpLine) 
          (argument_list 
            (argument 
              (expr 
                (expr 
                  (variable_or_function_call help$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call CurrCol)))) ))) + 
                (expr 
                  (literal "|  <F2=Save and Exit> <F9=Insert> <F10=Delete>"))))))) \n \n 
      (statement 
        (gosub_statement GOSUB 
          (target 
            (text_label 
              (untyped_id EditTransGetLine))))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call finished) = 
          (expr 
            (variable_or_function_call FALSE)))) \n \n \n ' \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (gosub_statement GOSUB 
                (target 
                  (text_label 
                    (untyped_id EditTransShowCursor))))) ' \n 
            (statement 
              (do_loop_statement DO 
                (block : 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Kbd$) = 
                      (expr 
                        (variable_or_function_call INKEY$)))) :) LOOP 
                (loop_condition UNTIL 
                  (expr 
                    (expr 
                      (variable_or_function_call Kbd$)) <> 
                    (expr 
                      (literal "")))))) \n 
            (statement 
              (gosub_statement GOSUB 
                (target 
                  (text_label 
                    (untyped_id EditTransHideCursor))))) \n \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call Kbd$)) >= 
                    (expr 
                      (literal " "))) AND 
                  (expr 
                    (expr 
                      (variable_or_function_call Kbd$)) < 
                    (expr 
                      (literal "~")))) OR 
                (expr 
                  (expr 
                    (variable_or_function_call Kbd$)) = 
                  (expr 
                    (variable_or_function_call CHR$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (literal 8)))) ))))) THEN ' 
              (then_block \n 
                (statement 
                  (gosub_statement GOSUB 
                    (target 
                      (text_label 
                        (untyped_id EditTransEditItem))))) \n) 
              (end_if_statement END IF)) \n \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call Kbd$)) 
                (before_first_case ' \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 0)))) ))) + 
                        (expr 
                          (literal "H"))))) 
                  (block ' \n 
                    (statement 
                      (gosub_statement GOSUB 
                        (target 
                          (text_label 
                            (untyped_id EditTransMoveUp))))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 0)))) ))) + 
                        (expr 
                          (literal "P"))))) 
                  (block ' \n 
                    (statement 
                      (gosub_statement GOSUB 
                        (target 
                          (text_label 
                            (untyped_id EditTransMoveDown))))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 0)))) ))) + 
                        (expr 
                          (literal "K")))) , 
                    (case_expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 0)))) ))) + 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 15)))) )))))) 
                  (block ' \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call CurrCol) = 
                        (expr 
                          (expr 
                            (expr 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call CurrCol)) + 
                                  (expr 
                                    (literal 3))) )) MOD 
                            (expr 
                              (literal 5))) + 
                          (expr 
                            (literal 1))))) \n 
                    (statement 
                      (call_statement 
                        (untyped_id PrintHelpLine) 
                        (argument_list 
                          (argument 
                            (expr 
                              (expr 
                                (variable_or_function_call help$ 
                                  ( 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call CurrCol)))) ))) + 
                              (expr 
                                (literal "|  <F2=Save and Exit> <F9=Insert> <F10=Delete>"))))))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 0)))) ))) + 
                        (expr 
                          (literal "M")))) , 
                    (case_expr 
                      (expr 
                        (variable_or_function_call CHR$ 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (literal 9)))) ))))) 
                  (block ' \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call CurrCol) = 
                        (expr 
                          (expr 
                            (expr 
                              ( 
                                (expr 
                                  (variable_or_function_call CurrCol)) )) MOD 
                            (expr 
                              (literal 5))) + 
                          (expr 
                            (literal 1))))) \n 
                    (statement 
                      (call_statement 
                        (untyped_id PrintHelpLine) 
                        (argument_list 
                          (argument 
                            (expr 
                              (expr 
                                (variable_or_function_call help$ 
                                  ( 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call CurrCol)))) ))) + 
                              (expr 
                                (literal "|  <F2=Save and Exit> <F9=Insert> <F10=Delete>"))))))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 0)))) ))) + 
                        (expr 
                          (literal "G"))))) 
                  (block ' \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call CurrCol) = 
                        (expr 
                          (literal 1)))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 0)))) ))) + 
                        (expr 
                          (literal "O"))))) 
                  (block ' \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call CurrCol) = 
                        (expr 
                          (literal 5)))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 0)))) ))) + 
                        (expr 
                          (literal "I"))))) 
                  (block ' \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call CurrRow) = 
                        (expr 
                          (literal 1)))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call CurrTopline) = 
                        (expr 
                          (expr 
                            (variable_or_function_call CurrTopline)) - 
                          (expr 
                            (literal 19))))) \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call CurrTopline)) < 
                        (expr 
                          (literal 1))) THEN \n 
                      (then_block 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call CurrTopline) = 
                            (expr 
                              (literal 1)))) \n) 
                      (end_if_statement END IF)) \n 
                    (statement 
                      (gosub_statement GOSUB 
                        (target 
                          (text_label 
                            (untyped_id EditTransPrintWholeScreen))))) \n 
                    (statement 
                      (gosub_statement GOSUB 
                        (target 
                          (text_label 
                            (untyped_id EditTransGetLine))))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 0)))) ))) + 
                        (expr 
                          (literal "Q"))))) 
                  (block ' \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call CurrRow) = 
                        (expr 
                          (literal 1)))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call CurrTopline) = 
                        (expr 
                          (expr 
                            (variable_or_function_call CurrTopline)) + 
                          (expr 
                            (literal 19))))) \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call CurrTopline)) > 
                        (expr 
                          (variable_or_function_call MaxRecord))) THEN \n 
                      (then_block 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call CurrTopline) = 
                            (expr 
                              (variable_or_function_call MaxRecord)))) \n) 
                      (end_if_statement END IF)) \n 
                    (statement 
                      (gosub_statement GOSUB 
                        (target 
                          (text_label 
                            (untyped_id EditTransPrintWholeScreen))))) \n 
                    (statement 
                      (gosub_statement GOSUB 
                        (target 
                          (text_label 
                            (untyped_id EditTransGetLine))))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 0)))) ))) + 
                        (expr 
                          (literal "<"))))) 
                  (block ' \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call finished) = 
                        (expr 
                          (variable_or_function_call TRUE)))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 0)))) ))) + 
                        (expr 
                          (literal "C"))))) 
                  (block ' \n 
                    (statement 
                      (gosub_statement GOSUB 
                        (target 
                          (text_label 
                            (untyped_id EditTransAddRecord))))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 0)))) ))) + 
                        (expr 
                          (literal "D"))))) 
                  (block ' \n 
                    (statement 
                      (gosub_statement GOSUB 
                        (target 
                          (text_label 
                            (untyped_id EditTransDeleteRecord))))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call CHR$ 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (literal 13)))) ))))) 
                  (block ' \n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \n 
                    (statement 
                      (call_statement 
                        (untyped_id BEEP))) \n)) 
                (end_select_statement END SELECT))) \n) LOOP 
          (loop_condition UNTIL 
            (expr 
              (variable_or_function_call finished))))) \n \n 
      (statement 
        (close_statement CLOSE)) \n \n 
      (statement 
        (exit_statement EXIT SUB)) \n \n \n 
      (label 
        (text_label 
          (untyped_id EditTransShowCursor)) :) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 8))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))) , 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 9))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (expr 
              (variable_or_function_call CurrRow)) + 
            (expr 
              (literal 4))) , 
          (expr 
            (variable_or_function_call col 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call CurrCol)))) ))))) \n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call CurrCol)) 
          (before_first_case \n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 1))) , 
              (case_expr 
                (expr 
                  (literal 2))) , 
              (case_expr 
                (expr 
                  (literal 3)))) 
            (block \n 
              (statement 
                (print_statement PRINT 
                  (print_argument 
                    (expr 
                      (variable_or_function_call LEFT$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call CurrString$ 
                                  ( 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call CurrCol)))) )))) , 
                            (argument 
                              (expr 
                                (variable_or_function_call Vis 
                                  ( 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call CurrCol)))) ))))) ))) ;))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 4)))) 
            (block \n 
              (if_block_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call CurrFig# 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (literal 4)))) ))) <> 
                  (expr 
                    (literal 0))) THEN \n 
                (then_block 
                  (statement 
                    (print_using_statement PRINT USING 
                      (expr 
                        (variable_or_function_call u2$)) ; 
                      (print_argument 
                        (expr 
                          (variable_or_function_call CurrFig# 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 4)))) ))) ;))) \n) 
                (else_block_statement ELSE 
                  (else_block \n 
                    (statement 
                      (print_statement PRINT 
                        (print_argument 
                          (expr 
                            (variable_or_function_call SPACE$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call Vis 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (variable_or_function_call CurrCol)))) ))))) ))) ;))) \n)) 
                (end_if_statement END IF)) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 5)))) 
            (block \n 
              (if_block_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call CurrFig# 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (literal 5)))) ))) <> 
                  (expr 
                    (literal 0))) THEN \n 
                (then_block 
                  (statement 
                    (print_using_statement PRINT USING 
                      (expr 
                        (variable_or_function_call u2$)) ; 
                      (print_argument 
                        (expr 
                          (variable_or_function_call CurrFig# 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 5)))) ))) ;))) \n) 
                (else_block_statement ELSE 
                  (else_block \n 
                    (statement 
                      (print_statement PRINT 
                        (print_argument 
                          (expr 
                            (variable_or_function_call SPACE$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call Vis 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (variable_or_function_call CurrCol)))) ))))) ))) ;))) \n)) 
                (end_if_statement END IF)) \n)) 
          (end_select_statement END SELECT))) \n 
      (statement 
        (return_statement RETURN)) \n \n \n 
      (label 
        (text_label 
          (untyped_id EditTransHideCursor)) :) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 7))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))) , 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 4))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (expr 
              (variable_or_function_call CurrRow)) + 
            (expr 
              (literal 4))) , 
          (expr 
            (variable_or_function_call col 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call CurrCol)))) ))))) \n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call CurrCol)) 
          (before_first_case \n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 1))) , 
              (case_expr 
                (expr 
                  (literal 2))) , 
              (case_expr 
                (expr 
                  (literal 3)))) 
            (block \n 
              (statement 
                (print_statement PRINT 
                  (print_argument 
                    (expr 
                      (variable_or_function_call LEFT$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call CurrString$ 
                                  ( 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call CurrCol)))) )))) , 
                            (argument 
                              (expr 
                                (variable_or_function_call Vis 
                                  ( 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call CurrCol)))) ))))) ))) ;))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 4)))) 
            (block \n 
              (if_block_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call CurrFig# 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (literal 4)))) ))) <> 
                  (expr 
                    (literal 0))) THEN \n 
                (then_block 
                  (statement 
                    (print_using_statement PRINT USING 
                      (expr 
                        (variable_or_function_call u2$)) ; 
                      (print_argument 
                        (expr 
                          (variable_or_function_call CurrFig# 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 4)))) ))) ;))) \n) 
                (else_block_statement ELSE 
                  (else_block \n 
                    (statement 
                      (print_statement PRINT 
                        (print_argument 
                          (expr 
                            (variable_or_function_call SPACE$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call Vis 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (variable_or_function_call CurrCol)))) ))))) ))) ;))) \n)) 
                (end_if_statement END IF)) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 5)))) 
            (block \n 
              (if_block_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call CurrFig# 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (literal 5)))) ))) <> 
                  (expr 
                    (literal 0))) THEN \n 
                (then_block 
                  (statement 
                    (print_using_statement PRINT USING 
                      (expr 
                        (variable_or_function_call u2$)) ; 
                      (print_argument 
                        (expr 
                          (variable_or_function_call CurrFig# 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 5)))) ))) ;))) \n) 
                (else_block_statement ELSE 
                  (else_block \n 
                    (statement 
                      (print_statement PRINT 
                        (print_argument 
                          (expr 
                            (variable_or_function_call SPACE$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call Vis 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (variable_or_function_call CurrCol)))) ))))) ))) ;))) \n)) 
                (end_if_statement END IF)) \n)) 
          (end_select_statement END SELECT))) \n 
      (statement 
        (return_statement RETURN)) \n \n \n 
      (label 
        (text_label 
          (untyped_id EditTransEditItem)) :) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurrRecord) = 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call CurrTopline)) + 
              (expr 
                (variable_or_function_call CurrRow))) - 
            (expr 
              (literal 1))))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 8))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))) , 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 9))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))))) \n \n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call CurrCol)) 
          (before_first_case \n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 1))) , 
              (case_expr 
                (expr 
                  (literal 2))) , 
              (case_expr 
                (expr 
                  (literal 3)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Kbd$) = 
                  (expr 
                    (variable_or_function_call GetString$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (expr 
                                (variable_or_function_call CurrRow)) + 
                              (expr 
                                (literal 4)))) , 
                          (argument 
                            (expr 
                              (variable_or_function_call col 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call CurrCol)))) )))) , 
                          (argument 
                            (expr 
                              (variable_or_function_call Kbd$))) , 
                          (argument 
                            (expr 
                              (variable_or_function_call new$))) , 
                          (argument 
                            (expr 
                              (variable_or_function_call Vis 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call CurrCol)))) )))) , 
                          (argument 
                            (expr 
                              (variable_or_function_call Max 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call CurrCol)))) ))))) ))))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call CurrString$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call CurrCol)))) )) = 
                  (expr 
                    (variable_or_function_call new$)))) \n 
              (statement 
                (gosub_statement GOSUB 
                  (target 
                    (text_label 
                      (untyped_id EditTransPutLine))))) \n 
              (statement 
                (gosub_statement GOSUB 
                  (target 
                    (text_label 
                      (untyped_id EditTransGetLine))))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 4)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call start$) = 
                  (expr 
                    (variable_or_function_call Kbd$)))) \n 
              (statement 
                (do_loop_statement DO 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Kbd$) = 
                        (expr 
                          (variable_or_function_call GetString$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call CurrRow)) + 
                                    (expr 
                                      (literal 4)))) , 
                                (argument 
                                  (expr 
                                    (variable_or_function_call col 
                                      ( 
                                        (argument_list 
                                          (argument 
                                            (expr 
                                              (literal 4)))) )))) , 
                                (argument 
                                  (expr 
                                    (variable_or_function_call start$))) , 
                                (argument 
                                  (expr 
                                    (variable_or_function_call new$))) , 
                                (argument 
                                  (expr 
                                    (variable_or_function_call Vis 
                                      ( 
                                        (argument_list 
                                          (argument 
                                            (expr 
                                              (literal 4)))) )))) , 
                                (argument 
                                  (expr 
                                    (variable_or_function_call Max 
                                      ( 
                                        (argument_list 
                                          (argument 
                                            (expr 
                                              (literal 4)))) ))))) ))))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call new4#) = 
                        (expr 
                          (variable_or_function_call VAL 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (variable_or_function_call new$)))) ))))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call start$) = 
                        (expr 
                          (literal "")))) \n) LOOP 
                  (loop_condition WHILE 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call new4#)) >= 
                        (expr 
                          (literal 999999.99#))) OR 
                      (expr 
                        (expr 
                          (variable_or_function_call new4#)) < 
                        (expr 
                          (literal 0))))))) \n \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call a) = 
                  (expr 
                    (variable_or_function_call CurrRecord)))) \n 
              (statement 
                (while_wend_statement WHILE 
                  (expr 
                    (expr 
                      (variable_or_function_call a)) <= 
                    (expr 
                      (variable_or_function_call MaxRecord))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Balance# 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call a)))) )) = 
                        (expr 
                          (expr 
                            (expr 
                              (expr 
                                (variable_or_function_call Balance# 
                                  ( 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call a)))) ))) + 
                              (expr 
                                (variable_or_function_call new4#))) - 
                            (expr 
                              (variable_or_function_call CurrFig# 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (literal 4)))) )))) + 
                          (expr 
                            (variable_or_function_call CurrFig# 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (literal 5)))) )))))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call a) = 
                        (expr 
                          (expr 
                            (variable_or_function_call a)) + 
                          (expr 
                            (literal 1))))) \n) WEND)) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call CurrFig# 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (literal 4)))) )) = 
                  (expr 
                    (variable_or_function_call new4#)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call CurrFig# 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (literal 5)))) )) = 
                  (expr 
                    (literal 0)))) \n 
              (statement 
                (gosub_statement GOSUB 
                  (target 
                    (text_label 
                      (untyped_id EditTransPutLine))))) \n 
              (statement 
                (gosub_statement GOSUB 
                  (target 
                    (text_label 
                      (untyped_id EditTransGetLine))))) \n 
              (statement 
                (gosub_statement GOSUB 
                  (target 
                    (text_label 
                      (untyped_id EditTransPrintBalances))))) \n 
              (statement 
                (gosub_statement GOSUB 
                  (target 
                    (text_label 
                      (untyped_id EditTransWriteBalance))))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 5)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call start$) = 
                  (expr 
                    (variable_or_function_call Kbd$)))) \n 
              (statement 
                (do_loop_statement DO 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Kbd$) = 
                        (expr 
                          (variable_or_function_call GetString$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call CurrRow)) + 
                                    (expr 
                                      (literal 4)))) , 
                                (argument 
                                  (expr 
                                    (variable_or_function_call col 
                                      ( 
                                        (argument_list 
                                          (argument 
                                            (expr 
                                              (literal 5)))) )))) , 
                                (argument 
                                  (expr 
                                    (variable_or_function_call start$))) , 
                                (argument 
                                  (expr 
                                    (variable_or_function_call new$))) , 
                                (argument 
                                  (expr 
                                    (variable_or_function_call Vis 
                                      ( 
                                        (argument_list 
                                          (argument 
                                            (expr 
                                              (literal 5)))) )))) , 
                                (argument 
                                  (expr 
                                    (variable_or_function_call Max 
                                      ( 
                                        (argument_list 
                                          (argument 
                                            (expr 
                                              (literal 5)))) ))))) ))))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call new5#) = 
                        (expr 
                          (variable_or_function_call VAL 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (variable_or_function_call new$)))) ))))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call start$) = 
                        (expr 
                          (literal "")))) \n) LOOP 
                  (loop_condition WHILE 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call new5#)) >= 
                        (expr 
                          (literal 999999.99#))) OR 
                      (expr 
                        (expr 
                          (variable_or_function_call new5#)) < 
                        (expr 
                          (literal 0))))))) \n \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call a) = 
                  (expr 
                    (variable_or_function_call CurrRecord)))) \n 
              (statement 
                (while_wend_statement WHILE 
                  (expr 
                    (expr 
                      (variable_or_function_call a)) <= 
                    (expr 
                      (variable_or_function_call MaxRecord))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Balance# 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call a)))) )) = 
                        (expr 
                          (expr 
                            (expr 
                              (expr 
                                (variable_or_function_call Balance# 
                                  ( 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call a)))) ))) - 
                              (expr 
                                (variable_or_function_call new5#))) + 
                            (expr 
                              (variable_or_function_call CurrFig# 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (literal 5)))) )))) - 
                          (expr 
                            (variable_or_function_call CurrFig# 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (literal 4)))) )))))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call a) = 
                        (expr 
                          (expr 
                            (variable_or_function_call a)) + 
                          (expr 
                            (literal 1))))) \n) WEND)) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call CurrFig# 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (literal 4)))) )) = 
                  (expr 
                    (literal 0)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call CurrFig# 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (literal 5)))) )) = 
                  (expr 
                    (variable_or_function_call new5#)))) \n 
              (statement 
                (gosub_statement GOSUB 
                  (target 
                    (text_label 
                      (untyped_id EditTransPutLine))))) \n 
              (statement 
                (gosub_statement GOSUB 
                  (target 
                    (text_label 
                      (untyped_id EditTransGetLine))))) \n 
              (statement 
                (gosub_statement GOSUB 
                  (target 
                    (text_label 
                      (untyped_id EditTransPrintBalances))))) \n 
              (statement 
                (gosub_statement GOSUB 
                  (target 
                    (text_label 
                      (untyped_id EditTransWriteBalance))))) \n)) 
          (case_block 
            (case_statement CASE ELSE) 
            (block \n)) 
          (end_select_statement END SELECT))) \n 
      (statement 
        (gosub_statement GOSUB 
          (target 
            (text_label 
              (untyped_id EditTransPrintLine))))) \n 
      (statement 
        (return_statement RETURN)) \n \n 
      (label 
        (text_label 
          (untyped_id EditTransMoveUp)) :) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call CurrRow)) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (if_block_statement IF 
            (expr 
              (expr 
                (variable_or_function_call CurrTopline)) = 
              (expr 
                (literal 1))) THEN \n 
            (then_block 
              (statement 
                (call_statement 
                  (untyped_id BEEP))) \n) 
            (else_block_statement ELSE 
              (else_block \n 
                (statement 
                  (call_statement 
                    (untyped_id ScrollDown))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call CurrTopline) = 
                    (expr 
                      (expr 
                        (variable_or_function_call CurrTopline)) - 
                      (expr 
                        (literal 1))))) \n 
                (statement 
                  (gosub_statement GOSUB 
                    (target 
                      (text_label 
                        (untyped_id EditTransGetLine))))) \n 
                (statement 
                  (gosub_statement GOSUB 
                    (target 
                      (text_label 
                        (untyped_id EditTransPrintLine))))) \n)) 
            (end_if_statement END IF)) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call CurrRow) = 
                (expr 
                  (expr 
                    (variable_or_function_call CurrRow)) - 
                  (expr 
                    (literal 1))))) \n 
            (statement 
              (gosub_statement GOSUB 
                (target 
                  (text_label 
                    (untyped_id EditTransGetLine))))) \n)) 
        (end_if_statement END IF)) \n 
      (statement 
        (return_statement RETURN)) \n \n 
      (label 
        (text_label 
          (untyped_id EditTransMoveDown)) :) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            ( 
              (expr 
                (expr 
                  (expr 
                    (variable_or_function_call CurrRow)) + 
                  (expr 
                    (variable_or_function_call CurrTopline))) - 
                (expr 
                  (literal 1))) )) >= 
          (expr 
            (variable_or_function_call MaxRecord))) THEN \n 
        (then_block 
          (statement 
            (call_statement 
              (untyped_id BEEP))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call CurrRow)) = 
                (expr 
                  (literal 19))) THEN \n 
              (then_block 
                (statement 
                  (call_statement 
                    (untyped_id ScrollUp))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call CurrTopline) = 
                    (expr 
                      (expr 
                        (variable_or_function_call CurrTopline)) + 
                      (expr 
                        (literal 1))))) \n 
                (statement 
                  (gosub_statement GOSUB 
                    (target 
                      (text_label 
                        (untyped_id EditTransGetLine))))) \n 
                (statement 
                  (gosub_statement GOSUB 
                    (target 
                      (text_label 
                        (untyped_id EditTransPrintLine))))) \n) 
              (else_block_statement ELSE 
                (else_block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call CurrRow) = 
                      (expr 
                        (expr 
                          (variable_or_function_call CurrRow)) + 
                        (expr 
                          (literal 1))))) \n 
                  (statement 
                    (gosub_statement GOSUB 
                      (target 
                        (text_label 
                          (untyped_id EditTransGetLine))))) \n)) 
              (end_if_statement END IF)) \n)) 
        (end_if_statement END IF)) \n 
      (statement 
        (return_statement RETURN)) \n \n 
      (label 
        (text_label 
          (untyped_id EditTransPrintLine)) :) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 7))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))) , 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 4))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurrRecord) = 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call CurrTopline)) + 
              (expr 
                (variable_or_function_call CurrRow))) - 
            (expr 
              (literal 1))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (expr 
              (variable_or_function_call CurrRow)) + 
            (expr 
              (literal 4))) , 
          (expr 
            (literal 2)))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call CurrRecord)) = 
          (expr 
            (expr 
              (variable_or_function_call MaxRecord)) + 
            (expr 
              (literal 1)))) THEN \n 
        (then_block 
          (statement 
            (print_statement PRINT 
              (print_argument 
                (expr 
                  (variable_or_function_call u1x$)) ;))) \n) 
        (elseif_block_statement ELSEIF 
          (expr 
            (expr 
              (variable_or_function_call CurrRecord)) > 
            (expr 
              (variable_or_function_call MaxRecord))) THEN 
          (else_block \n 
            (statement 
              (print_statement PRINT 
                (print_argument 
                  (expr 
                    (variable_or_function_call u1$)) ;))) \n)) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (print_using_statement PRINT USING 
                (expr 
                  (variable_or_function_call u$)) ; 
                (print_argument 
                  (expr 
                    (variable_or_function_call CurrString$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (literal 1)))) ))) ;) 
                (print_argument 
                  (expr 
                    (variable_or_function_call CurrString$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (literal 2)))) ))) ;) 
                (print_argument 
                  (expr 
                    (variable_or_function_call CurrString$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (literal 3)))) ))) ;))) \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (expr 
                    (variable_or_function_call CurrFig# 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (literal 4)))) ))) = 
                  (expr 
                    (literal 0))) AND 
                (expr 
                  (expr 
                    (variable_or_function_call CurrFig# 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (literal 5)))) ))) = 
                  (expr 
                    (literal 0)))) THEN \n 
              (then_block 
                (statement 
                  (print_using_statement PRINT USING 
                    (expr 
                      (expr 
                        (expr 
                          (expr 
                            (expr 
                              (variable_or_function_call u4$)) + 
                            (expr 
                              (literal "³"))) + 
                          (expr 
                            (variable_or_function_call u4$))) + 
                        (expr 
                          (literal "³"))) + 
                      (expr 
                        (variable_or_function_call u3$))) ; 
                    (print_argument 
                      (expr 
                        (variable_or_function_call Balance# 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call CurrRecord)))) )))))) \n) 
              (elseif_block_statement ELSEIF 
                (expr 
                  (expr 
                    (variable_or_function_call CurrFig# 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (literal 5)))) ))) = 
                  (expr 
                    (literal 0))) THEN 
                (else_block \n 
                  (statement 
                    (print_using_statement PRINT USING 
                      (expr 
                        (expr 
                          (expr 
                            (expr 
                              (expr 
                                (variable_or_function_call u2$)) + 
                              (expr 
                                (literal "³"))) + 
                            (expr 
                              (variable_or_function_call u4$))) + 
                          (expr 
                            (literal "³"))) + 
                        (expr 
                          (variable_or_function_call u3$))) ; 
                      (print_argument 
                        (expr 
                          (variable_or_function_call CurrFig# 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 4)))) ))) ;) 
                      (print_argument 
                        (expr 
                          (variable_or_function_call Balance# 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (variable_or_function_call CurrRecord)))) )))))) \n)) 
              (else_block_statement ELSE 
                (else_block \n 
                  (statement 
                    (print_using_statement PRINT USING 
                      (expr 
                        (expr 
                          (expr 
                            (expr 
                              (expr 
                                (variable_or_function_call u4$)) + 
                              (expr 
                                (literal "³"))) + 
                            (expr 
                              (variable_or_function_call u2$))) + 
                          (expr 
                            (literal "³"))) + 
                        (expr 
                          (variable_or_function_call u3$))) ; 
                      (print_argument 
                        (expr 
                          (variable_or_function_call CurrFig# 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 5)))) ))) ;) 
                      (print_argument 
                        (expr 
                          (variable_or_function_call Balance# 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (variable_or_function_call CurrRecord)))) )))))) \n)) 
              (end_if_statement END IF)) \n)) 
        (end_if_statement END IF)) \n 
      (statement 
        (return_statement RETURN)) \n \n 
      (label 
        (text_label 
          (untyped_id EditTransPrintBalances)) :) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 7))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))) , 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 4))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))))) \n 
      (statement 
        (for_next_statement FOR a = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 19)) 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call CurrRecord) = 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call CurrTopline)) + 
                    (expr 
                      (variable_or_function_call a))) - 
                  (expr 
                    (literal 1))))) \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call CurrRecord)) <= 
                (expr 
                  (variable_or_function_call MaxRecord))) THEN \n 
              (then_block 
                (statement 
                  (locate_statement LOCATE 
                    (expr 
                      (expr 
                        (literal 4)) + 
                      (expr 
                        (variable_or_function_call a))) , 
                    (expr 
                      (literal 66)))) \n 
                (statement 
                  (print_using_statement PRINT USING 
                    (expr 
                      (variable_or_function_call u3$)) ; 
                    (print_argument 
                      (expr 
                        (variable_or_function_call Balance# 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call CurrTopline)) + 
                                    (expr 
                                      (variable_or_function_call a))) - 
                                  (expr 
                                    (literal 1))))) ))) ;))) \n) 
              (end_if_statement END IF)) \n) NEXT a)) \n 
      (statement 
        (return_statement RETURN)) \n \n 
      (label 
        (text_label 
          (untyped_id EditTransDeleteRecord)) :) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call MaxRecord)) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (statement 
            (call_statement 
              (untyped_id BEEP))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call CurrRecord) = 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call CurrTopline)) + 
                    (expr 
                      (variable_or_function_call CurrRow))) - 
                  (expr 
                    (literal 1))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call MaxRecord) = 
                (expr 
                  (expr 
                    (variable_or_function_call MaxRecord)) - 
                  (expr 
                    (literal 1))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call a) = 
                (expr 
                  (variable_or_function_call CurrRecord)))) \n 
            (statement 
              (while_wend_statement WHILE 
                (expr 
                  (expr 
                    (variable_or_function_call a)) <= 
                  (expr 
                    (variable_or_function_call MaxRecord))) 
                (block \n 
                  (statement 
                    (get_io_statement GET # 
                      (expr 
                        (literal 1)) , 
                      (expr 
                        (expr 
                          (variable_or_function_call a)) + 
                        (expr 
                          (literal 2))))) \n 
                  (statement 
                    (put_io_statement PUT # 
                      (expr 
                        (literal 1)) , 
                      (expr 
                        (expr 
                          (variable_or_function_call a)) + 
                        (expr 
                          (literal 1))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Balance# 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call a)))) )) = 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call Balance# 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call a)) + 
                                      (expr 
                                        (literal 1))))) ))) - 
                          (expr 
                            (variable_or_function_call CurrFig# 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (literal 4)))) )))) + 
                        (expr 
                          (variable_or_function_call CurrFig# 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 5)))) )))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call a) = 
                      (expr 
                        (expr 
                          (variable_or_function_call a)) + 
                        (expr 
                          (literal 1))))) \n) WEND)) \n \n 
            (statement 
              (lset_statement LSET 
                (variable_or_function_call valid$) = 
                (expr 
                  (literal "THISISVALID")))) \n 
            (statement 
              (lset_statement LSET 
                (variable_or_function_call IoMaxRecord$) = 
                (expr 
                  (variable_or_function_call Cvit$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call MaxRecord)))) ))))) \n 
            (statement 
              (put_io_statement PUT # 
                (expr 
                  (literal 1)) , 
                (expr 
                  (literal 1)))) \n 
            (statement 
              (gosub_statement GOSUB 
                (target 
                  (text_label 
                    (untyped_id EditTransPrintWholeScreen))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call CurrRecord) = 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call CurrTopline)) + 
                    (expr 
                      (variable_or_function_call CurrRow))) - 
                  (expr 
                    (literal 1))))) \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call CurrRecord)) > 
                (expr 
                  (variable_or_function_call MaxRecord))) THEN \n 
              (then_block 
                (statement 
                  (gosub_statement GOSUB 
                    (target 
                      (text_label 
                        (untyped_id EditTransMoveUp))))) \n) 
              (end_if_statement END IF)) \n 
            (statement 
              (gosub_statement GOSUB 
                (target 
                  (text_label 
                    (untyped_id EditTransGetLine))))) \n 
            (statement 
              (gosub_statement GOSUB 
                (target 
                  (text_label 
                    (untyped_id EditTransWriteBalance))))) \n)) 
        (end_if_statement END IF)) \n 
      (statement 
        (return_statement RETURN)) \n \n 
      (label 
        (text_label 
          (untyped_id EditTransAddRecord)) :) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurrRecord) = 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call CurrTopline)) + 
              (expr 
                (variable_or_function_call CurrRow))) - 
            (expr 
              (literal 1))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call a) = 
          (expr 
            (variable_or_function_call MaxRecord)))) \n 
      (statement 
        (while_wend_statement WHILE 
          (expr 
            (expr 
              (variable_or_function_call a)) > 
            (expr 
              (variable_or_function_call CurrRecord))) 
          (block \n 
            (statement 
              (get_io_statement GET # 
                (expr 
                  (literal 1)) , 
                (expr 
                  (expr 
                    (variable_or_function_call a)) + 
                  (expr 
                    (literal 1))))) \n 
            (statement 
              (put_io_statement PUT # 
                (expr 
                  (literal 1)) , 
                (expr 
                  (expr 
                    (variable_or_function_call a)) + 
                  (expr 
                    (literal 2))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Balance# 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (expr 
                            (variable_or_function_call a)) + 
                          (expr 
                            (literal 1))))) )) = 
                (expr 
                  (variable_or_function_call Balance# 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call a)))) ))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call a) = 
                (expr 
                  (expr 
                    (variable_or_function_call a)) - 
                  (expr 
                    (literal 1))))) \n) WEND)) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Balance# 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (expr 
                      (variable_or_function_call CurrRecord)) + 
                    (expr 
                      (literal 1))))) )) = 
          (expr 
            (variable_or_function_call Balance# 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call CurrRecord)))) ))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call MaxRecord) = 
          (expr 
            (expr 
              (variable_or_function_call MaxRecord)) + 
            (expr 
              (literal 1))))) \n 
      (statement 
        (lset_statement LSET 
          (variable_or_function_call IoDate$) = 
          (expr 
            (literal "")))) \n 
      (statement 
        (lset_statement LSET 
          (variable_or_function_call IoRef$) = 
          (expr 
            (literal "")))) \n 
      (statement 
        (lset_statement LSET 
          (variable_or_function_call IoDesc$) = 
          (expr 
            (literal "")))) \n 
      (statement 
        (lset_statement LSET 
          (variable_or_function_call IoFig1$) = 
          (expr 
            (variable_or_function_call MKD$ 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 0)))) ))))) \n 
      (statement 
        (lset_statement LSET 
          (variable_or_function_call IoFig2$) = 
          (expr 
            (variable_or_function_call MKD$ 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 0)))) ))))) \n 
      (statement 
        (put_io_statement PUT # 
          (expr 
            (literal 1)) , 
          (expr 
            (expr 
              (variable_or_function_call CurrRecord)) + 
            (expr 
              (literal 2))))) \n \n 
      (statement 
        (lset_statement LSET 
          (variable_or_function_call valid$) = 
          (expr 
            (literal "THISISVALID")))) \n 
      (statement 
        (lset_statement LSET 
          (variable_or_function_call IoMaxRecord$) = 
          (expr 
            (variable_or_function_call Cvit$ 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call MaxRecord)))) ))))) \n 
      (statement 
        (put_io_statement PUT # 
          (expr 
            (literal 1)) , 
          (expr 
            (literal 1)))) \n 
      (statement 
        (gosub_statement GOSUB 
          (target 
            (text_label 
              (untyped_id EditTransPrintWholeScreen))))) \n 
      (statement 
        (gosub_statement GOSUB 
          (target 
            (text_label 
              (untyped_id EditTransGetLine))))) \n 
      (statement 
        (return_statement RETURN)) \n \n 
      (label 
        (text_label 
          (untyped_id EditTransPrintWholeScreen)) :) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call temp) = 
          (expr 
            (variable_or_function_call CurrRow)))) \n 
      (statement 
        (for_next_statement FOR CurrRow = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 19)) 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call CurrRecord) = 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call CurrTopline)) + 
                    (expr 
                      (variable_or_function_call CurrRow))) - 
                  (expr 
                    (literal 1))))) \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call CurrRecord)) <= 
                (expr 
                  (variable_or_function_call MaxRecord))) THEN \n 
              (then_block 
                (statement 
                  (gosub_statement GOSUB 
                    (target 
                      (text_label 
                        (untyped_id EditTransGetLine))))) \n) 
              (end_if_statement END IF)) \n 
            (statement 
              (gosub_statement GOSUB 
                (target 
                  (text_label 
                    (untyped_id EditTransPrintLine))))) \n) NEXT CurrRow)) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurrRow) = 
          (expr 
            (variable_or_function_call temp)))) \n 
      (statement 
        (return_statement RETURN)) \n \n 
      (label 
        (text_label 
          (untyped_id EditTransWriteBalance)) :) \n 
      (statement 
        (get_io_statement GET # 
          (expr 
            (literal 1)) , 
          (expr 
            (literal 1)))) \n 
      (statement 
        (lset_statement LSET 
          (variable_or_function_call IoBalance$) = 
          (expr 
            (variable_or_function_call MKD$ 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call Balance# 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call MaxRecord)))) ))))) ))))) \n 
      (statement 
        (put_io_statement PUT # 
          (expr 
            (literal 1)) , 
          (expr 
            (literal 1)))) \n 
      (statement 
        (return_statement RETURN)) \n \n 
      (label 
        (text_label 
          (untyped_id EditTransPutLine)) :) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurrRecord) = 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call CurrTopline)) + 
              (expr 
                (variable_or_function_call CurrRow))) - 
            (expr 
              (literal 1))))) \n 
      (statement 
        (lset_statement LSET 
          (variable_or_function_call IoDate$) = 
          (expr 
            (variable_or_function_call CurrString$ 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 1)))) ))))) \n 
      (statement 
        (lset_statement LSET 
          (variable_or_function_call IoRef$) = 
          (expr 
            (variable_or_function_call CurrString$ 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 2)))) ))))) \n 
      (statement 
        (lset_statement LSET 
          (variable_or_function_call IoDesc$) = 
          (expr 
            (variable_or_function_call CurrString$ 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 3)))) ))))) \n 
      (statement 
        (lset_statement LSET 
          (variable_or_function_call IoFig1$) = 
          (expr 
            (variable_or_function_call MKD$ 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call CurrFig# 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (literal 4)))) ))))) ))))) \n 
      (statement 
        (lset_statement LSET 
          (variable_or_function_call IoFig2$) = 
          (expr 
            (variable_or_function_call MKD$ 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call CurrFig# 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (literal 5)))) ))))) ))))) \n 
      (statement 
        (put_io_statement PUT # 
          (expr 
            (literal 1)) , 
          (expr 
            (expr 
              (variable_or_function_call CurrRecord)) + 
            (expr 
              (literal 1))))) \n 
      (statement 
        (return_statement RETURN)) \n \n 
      (label 
        (text_label 
          (untyped_id EditTransGetLine)) :) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurrRecord) = 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call CurrTopline)) + 
              (expr 
                (variable_or_function_call CurrRow))) - 
            (expr 
              (literal 1))))) \n 
      (statement 
        (get_io_statement GET # 
          (expr 
            (literal 1)) , 
          (expr 
            (expr 
              (variable_or_function_call CurrRecord)) + 
            (expr 
              (literal 1))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurrString$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (variable_or_function_call IoDate$)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurrString$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 2)))) )) = 
          (expr 
            (variable_or_function_call IoRef$)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurrString$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 3)))) )) = 
          (expr 
            (variable_or_function_call IoDesc$)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurrFig# 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 4)))) )) = 
          (expr 
            (variable_or_function_call CVD 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call IoFig1$)))) ))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurrFig# 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 5)))) )) = 
          (expr 
            (variable_or_function_call CVD 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call IoFig2$)))) ))))) \n 
      (statement 
        (return_statement RETURN)) \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id FancyCls) 
    ( 
      (parameter_list 
        (parameter dots) , 
        (parameter Background)) ) 
    (block \n \n 
      (statement 
        (view_print_statement VIEW PRINT 
          (expr 
            (literal 2)) TO 
          (expr 
            (literal 24)))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call dots)) , 
          (expr 
            (variable_or_function_call Background)))) \n 
      (statement 
        (call_statement 
          (untyped_id CLS) 
          (argument_list 
            (argument 
              (expr 
                (literal 2)))))) \n \n 
      (statement 
        (for_next_statement FOR a = 
          (expr 
            (literal 95)) TO 
          (expr 
            (literal 1820)) STEP 
          (expr 
            (literal 45)) 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call row) = 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call a)) / 
                    (expr 
                      (literal 80))) + 
                  (expr 
                    (literal 1))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call col) = 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call a)) MOD 
                    (expr 
                      (literal 80))) + 
                  (expr 
                    (literal 1))))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call row)) , 
                (expr 
                  (variable_or_function_call col)))) \n 
            (statement 
              (print_statement PRINT 
                (print_argument 
                  (expr 
                    (variable_or_function_call CHR$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (literal 250)))) ))) ;))) \n) NEXT a)) \n \n 
      (statement 
        (view_print_statement VIEW PRINT)) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n 
  (function_statement FUNCTION GetString$ 
    ( 
      (parameter_list 
        (parameter row) , 
        (parameter col) , 
        (parameter start$) , 
        (parameter end$) , 
        (parameter Vis) , 
        (parameter Max)) ) 
    (block \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call curr$) = 
          (expr 
            (variable_or_function_call Trim$ 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call LEFT$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call start$))) , 
                            (argument 
                              (expr 
                                (variable_or_function_call Max)))) ))))) ))))) \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call curr$)) = 
            (expr 
              (variable_or_function_call CHR$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (literal 8)))) )))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call curr$) = 
                (expr 
                  (literal ""))))))) \n \n 
      (statement 
        (locate_statement LOCATE , , 
          (expr 
            (literal 1)))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call finished) = 
          (expr 
            (variable_or_function_call FALSE)))) \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (gosub_statement GOSUB 
                (target 
                  (text_label 
                    (untyped_id GetStringShowText))))) \n 
            (statement 
              (gosub_statement GOSUB 
                (target 
                  (text_label 
                    (untyped_id GetStringGetKey))))) \n \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (builtin_function LEN 
                    ( 
                      (expr 
                        (variable_or_function_call Kbd$)) ))) > 
                (expr 
                  (literal 1))) THEN \n 
              (then_block 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call finished) = 
                    (expr 
                      (variable_or_function_call TRUE)))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call GetString$) = 
                    (expr 
                      (variable_or_function_call Kbd$)))) \n) 
              (else_block_statement ELSE 
                (else_block \n 
                  (statement 
                    (select_case_statement SELECT CASE 
                      (expr 
                        (variable_or_function_call Kbd$)) 
                      (before_first_case \n) 
                      (case_block 
                        (case_statement CASE 
                          (case_expr 
                            (expr 
                              (variable_or_function_call CHR$ 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (literal 13)))) )))) , 
                          (case_expr 
                            (expr 
                              (variable_or_function_call CHR$ 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (literal 27)))) )))) , 
                          (case_expr 
                            (expr 
                              (variable_or_function_call CHR$ 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (literal 9)))) ))))) 
                        (block \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call finished) = 
                              (expr 
                                (variable_or_function_call TRUE)))) \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call GetString$) = 
                              (expr 
                                (variable_or_function_call Kbd$)))) \n \n)) 
                      (case_block 
                        (case_statement CASE 
                          (case_expr 
                            (expr 
                              (variable_or_function_call CHR$ 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (literal 8)))) ))))) 
                        (block \n 
                          (if_block_statement IF 
                            (expr 
                              (expr 
                                (variable_or_function_call curr$)) <> 
                              (expr 
                                (literal ""))) THEN \n 
                            (then_block 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call curr$) = 
                                  (expr 
                                    (variable_or_function_call LEFT$ 
                                      ( 
                                        (argument_list 
                                          (argument 
                                            (expr 
                                              (variable_or_function_call curr$))) , 
                                          (argument 
                                            (expr 
                                              (expr 
                                                (builtin_function LEN 
                                                  ( 
                                                    (expr 
                                                      (variable_or_function_call curr$)) ))) - 
                                              (expr 
                                                (literal 1))))) ))))) \n) 
                            (end_if_statement END IF)) \n \n)) 
                      (case_block 
                        (case_statement CASE 
                          (case_expr 
                            (expr 
                              (literal " ")) TO 
                            (expr 
                              (literal "}")))) 
                        (block \n 
                          (if_block_statement IF 
                            (expr 
                              (expr 
                                (builtin_function LEN 
                                  ( 
                                    (expr 
                                      (variable_or_function_call curr$)) ))) < 
                              (expr 
                                (variable_or_function_call Max))) THEN \n 
                            (then_block 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call curr$) = 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call curr$)) + 
                                    (expr 
                                      (variable_or_function_call Kbd$))))) \n) 
                            (else_block_statement ELSE 
                              (else_block \n 
                                (statement 
                                  (call_statement 
                                    (untyped_id BEEP))) \n)) 
                            (end_if_statement END IF)) \n \n)) 
                      (case_block 
                        (case_statement CASE ELSE) 
                        (block \n 
                          (statement 
                            (call_statement 
                              (untyped_id BEEP))) \n)) 
                      (end_select_statement END SELECT))) \n)) 
              (end_if_statement END IF)) \n \n) LOOP 
          (loop_condition UNTIL 
            (expr 
              (variable_or_function_call finished))))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call end$) = 
          (expr 
            (variable_or_function_call curr$)))) \n 
      (statement 
        (locate_statement LOCATE , , 
          (expr 
            (literal 0)))) \n 
      (statement 
        (exit_statement EXIT FUNCTION)) \n \n \n 
      (label 
        (text_label 
          (untyped_id GetStringShowText)) :) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call row)) , 
          (expr 
            (variable_or_function_call col)))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (builtin_function LEN 
              ( 
                (expr 
                  (variable_or_function_call curr$)) ))) > 
          (expr 
            (variable_or_function_call Vis))) THEN \n 
        (then_block 
          (statement 
            (print_statement PRINT 
              (print_argument 
                (expr 
                  (variable_or_function_call RIGHT$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call curr$))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call Vis)))) ))) ;))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (print_statement PRINT 
                (print_argument 
                  (expr 
                    (variable_or_function_call curr$)) ;) 
                (print_argument 
                  (expr 
                    (variable_or_function_call SPACE$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (expr 
                                (variable_or_function_call Vis)) - 
                              (expr 
                                (builtin_function LEN 
                                  ( 
                                    (expr 
                                      (variable_or_function_call curr$)) )))))) ))) ;))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call row)) , 
                (expr 
                  (expr 
                    (variable_or_function_call col)) + 
                  (expr 
                    (builtin_function LEN 
                      ( 
                        (expr 
                          (variable_or_function_call curr$)) )))))) \n)) 
        (end_if_statement END IF)) \n 
      (statement 
        (return_statement RETURN)) \n \n 
      (label 
        (text_label 
          (untyped_id GetStringGetKey)) :) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kbd$) = 
          (expr 
            (literal "")))) \n 
      (statement 
        (while_wend_statement WHILE 
          (expr 
            (expr 
              (variable_or_function_call Kbd$)) = 
            (expr 
              (literal ""))) 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Kbd$) = 
                (expr 
                  (variable_or_function_call INKEY$)))) \n) WEND)) \n 
      (statement 
        (return_statement RETURN)) \n) 
    (end_function_statement END FUNCTION)) \n \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id Initialize) 
    (block \n \n 
      (statement 
        (width_statement WIDTH , 
          (expr 
            (literal 25)))) \n 
      (statement 
        (view_print_statement VIEW PRINT)) \n \n 
      (statement 
        (for_next_statement FOR ColorSet = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 4)) 
          (block \n 
            (statement 
              (for_next_statement FOR X = 
                (expr 
                  (literal 1)) TO 
                (expr 
                  (literal 10)) 
                (block \n 
                  (statement 
                    (read_statement READ 
                      (variable_or_function_call colors 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call X))) , 
                            (argument 
                              (expr 
                                (variable_or_function_call ColorSet)))) )))) \n) NEXT X)) \n) NEXT ColorSet)) \n \n 
      (statement 
        (call_statement 
          (untyped_id LoadState))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call P) = 
          (expr 
            (variable_or_function_call VARPTR 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call ScrollUpAsm 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (literal 1)))) ))))) ))))) \n 
      (statement 
        (def_seg_statement DEF SEG = 
          (expr 
            (variable_or_function_call VARSEG 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call ScrollUpAsm 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (literal 1)))) ))))) ))))) \n 
      (statement 
        (for_next_statement FOR I = 
          (expr 
            (literal 0)) TO 
          (expr 
            (literal 13)) 
          (block \n 
            (statement 
              (read_statement READ 
                (variable_or_function_call J))) \n 
            (statement 
              (call_statement 
                (untyped_id POKE) 
                (argument_list 
                  (argument 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call P)) + 
                          (expr 
                            (variable_or_function_call I))) ))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call J)))))) \n) NEXT I)) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call P) = 
          (expr 
            (variable_or_function_call VARPTR 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call ScrollDownAsm 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (literal 1)))) ))))) ))))) \n 
      (statement 
        (def_seg_statement DEF SEG = 
          (expr 
            (variable_or_function_call VARSEG 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call ScrollDownAsm 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (literal 1)))) ))))) ))))) \n 
      (statement 
        (for_next_statement FOR I = 
          (expr 
            (literal 0)) TO 
          (expr 
            (literal 13)) 
          (block \n 
            (statement 
              (read_statement READ 
                (variable_or_function_call J))) \n 
            (statement 
              (call_statement 
                (untyped_id POKE) 
                (argument_list 
                  (argument 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call P)) + 
                          (expr 
                            (variable_or_function_call I))) ))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call J)))))) \n) NEXT I)) \n \n 
      (statement 
        (def_seg_statement DEF SEG)) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id Intro) 
    (block \n 
      (statement 
        (screen_statement SCREEN 
          (expr 
            (literal 0)))) \n 
      (statement 
        (width_statement WIDTH 
          (expr 
            (literal 80)) , 
          (expr 
            (literal 25)))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)) , 
          (expr 
            (literal 0)))) \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal 4))) , 
            (argument 
              (expr 
                (literal "Q B a s i c")))))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 15)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal 5))) , 
            (argument 
              (expr 
                (literal "Ü     Ü ÜÜÜÜ Ü   Ü ÜÜÜÜ Ü   Ü      Ü     Ü ÜÜÜÜ Ü   Ü ÜÜÜÜ ÜÜÜÜÜ ÜÜÜÜ ÜÜÜÜÜ")))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal 6))) , 
            (argument 
              (expr 
                (literal "ÛßÜ ÜßÛ Û  Û ÛÜ  Û Û    ÛÜÜÜÛ      ÛßÜ ÜßÛ Û  Û ÛÜ  Û Û  Û Û     Û    Û   Û")))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal 7))) , 
            (argument 
              (expr 
                (literal "Û  ß  Û Û  Û Û ßÜÛ Ûßßß   Û        Û  ß  Û ÛßßÛ Û ßÜÛ ÛßßÛ Û ßßÛ Ûßßß ÛßÛßß")))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal 8))) , 
            (argument 
              (expr 
                (literal "Û     Û ÛÜÜÛ Û   Û ÛÜÜÜ   Û        Û     Û Û  Û Û   Û Û  Û ÛÜÜÜÛ ÛÜÜÜ Û  ßÜ")))))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal 11))) , 
            (argument 
              (expr 
                (literal "A Personal Finance Manager written in")))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal 12))) , 
            (argument 
              (expr 
                (literal "MS-DOS QBasic")))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal 24))) , 
            (argument 
              (expr 
                (literal "Press any key to continue")))))) \n \n 
      (statement 
        (call_statement 
          (untyped_id SparklePause))) \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id LCenter) 
    ( 
      (parameter_list 
        (parameter text$)) ) 
    (block \n 
      (statement 
        (lprint_statement LPRINT 
          (print_argument TAB 
            ( 
              (expr 
                (expr 
                  (literal 41)) - 
                (expr 
                  (expr 
                    (builtin_function LEN 
                      ( 
                        (expr 
                          (variable_or_function_call text$)) ))) / 
                  (expr 
                    (literal 2)))) ) ;) 
          (print_argument 
            (expr 
              (variable_or_function_call text$))))) \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id LoadState) 
    (block \n \n 
      (statement 
        (open_statement OPEN 
          (expr 
            (literal "money.dat")) FOR 
          (open_mode INPUT) AS # 
          (expr 
            (literal 1)))) \n 
      (statement 
        (input_statement INPUT 
          (file_number # 
            (expr 
              (literal 1))) , 
          (variable_or_function_call ColorPref))) \n \n 
      (statement 
        (for_next_statement FOR a = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 19)) 
          (block \n 
            (statement 
              (line_input_statement LINE INPUT 
                (file_number # 
                  (expr 
                    (literal 1))) , 
                (variable_or_function_call account 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call a)))) ) . Title))) \n 
            (statement 
              (line_input_statement LINE INPUT 
                (file_number # 
                  (expr 
                    (literal 1))) , 
                (variable_or_function_call account 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call a)))) ) . AType))) \n 
            (statement 
              (line_input_statement LINE INPUT 
                (file_number # 
                  (expr 
                    (literal 1))) , 
                (variable_or_function_call account 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call a)))) ) . Desc))) \n) NEXT a)) \n \n 
      (statement 
        (close_statement CLOSE)) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (function_statement FUNCTION Menu 
    ( 
      (parameter_list 
        (parameter CurrChoiceX) , 
        (parameter MaxChoice) , 
        (parameter choice$ 
          (array_declaration 
            ( ))) , 
        (parameter ItemRow 
          (array_declaration 
            ( ))) , 
        (parameter ItemCol 
          (array_declaration 
            ( ))) , 
        (parameter help$ 
          (array_declaration 
            ( ))) , 
        (parameter BarMode)) ) 
    (block \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call currChoice) = 
          (expr 
            (variable_or_function_call CurrChoiceX)))) \n \n ' \n ' \n 
      (if_block_statement IF 
        (expr 
          (variable_or_function_call BarMode)) THEN \n 
        (then_block 
          (statement 
            (color_statement COLOR 
              (expr 
                (variable_or_function_call colors 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (literal 7))) , 
                      (argument 
                        (expr 
                          (variable_or_function_call ColorPref)))) ))) , 
              (expr 
                (variable_or_function_call colors 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (literal 4))) , 
                      (argument 
                        (expr 
                          (variable_or_function_call ColorPref)))) ))))) \n 
          (statement 
            (locate_statement LOCATE 
              (expr 
                (literal 1)) , 
              (expr 
                (literal 1)))) \n 
          (statement 
            (print_statement PRINT 
              (print_argument 
                (expr 
                  (variable_or_function_call SPACE$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (literal 80)))) ))) ;))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (call_statement 
                (untyped_id FancyCls) 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call colors 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (literal 2))) , 
                            (argument 
                              (expr 
                                (variable_or_function_call ColorPref)))) )))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call colors 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (literal 1))) , 
                            (argument 
                              (expr 
                                (variable_or_function_call ColorPref)))) ))))))) \n 
            (statement 
              (color_statement COLOR 
                (expr 
                  (variable_or_function_call colors 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (literal 7))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call ColorPref)))) ))) , 
                (expr 
                  (variable_or_function_call colors 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (literal 4))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call ColorPref)))) ))))) \n 
            (statement 
              (call_statement 
                (untyped_id Box) 
                (argument_list 
                  (argument 
                    (expr 
                      (expr 
                        (variable_or_function_call ItemRow 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (literal 1)))) ))) - 
                      (expr 
                        (literal 1)))) , 
                  (argument 
                    (expr 
                      (expr 
                        (variable_or_function_call ItemCol 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (literal 1)))) ))) - 
                      (expr 
                        (literal 1)))) , 
                  (argument 
                    (expr 
                      (expr 
                        (variable_or_function_call ItemRow 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call MaxChoice)))) ))) + 
                      (expr 
                        (literal 1)))) , 
                  (argument 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call ItemCol 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 1)))) ))) + 
                        (expr 
                          (builtin_function LEN 
                            ( 
                              (expr 
                                (variable_or_function_call choice$ 
                                  ( 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (literal 1)))) ))) )))) + 
                      (expr 
                        (literal 1))))))) \n \n 
            (statement 
              (color_statement COLOR 
                (expr 
                  (variable_or_function_call colors 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (literal 10))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call ColorPref)))) ))) , 
                (expr 
                  (variable_or_function_call colors 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (literal 6))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call ColorPref)))) ))))) \n 
            (statement 
              (for_next_statement FOR a = 
                (expr 
                  (literal 1)) TO 
                (expr 
                  (expr 
                    (variable_or_function_call MaxChoice)) + 
                  (expr 
                    (literal 1))) 
                (block \n 
                  (statement 
                    (locate_statement LOCATE 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call ItemRow 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (literal 1)))) ))) + 
                          (expr 
                            (variable_or_function_call a))) - 
                        (expr 
                          (literal 1))) , 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call ItemCol 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (literal 1)))) ))) + 
                          (expr 
                            (builtin_function LEN 
                              ( 
                                (expr 
                                  (variable_or_function_call choice$ 
                                    ( 
                                      (argument_list 
                                        (argument 
                                          (expr 
                                            (literal 1)))) ))) )))) + 
                        (expr 
                          (literal 2))))) \n 
                  (statement 
                    (print_statement PRINT 
                      (print_argument 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 178)))) ))) ;) 
                      (print_argument 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 178)))) ))) ;))) \n) NEXT a)) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (expr 
                    (variable_or_function_call ItemRow 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call MaxChoice)))) ))) + 
                  (expr 
                    (literal 2))) , 
                (expr 
                  (expr 
                    (variable_or_function_call ItemCol 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call MaxChoice)))) ))) + 
                  (expr 
                    (literal 2))))) \n 
            (statement 
              (print_statement PRINT 
                (print_argument 
                  (expr 
                    (variable_or_function_call STRING$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (expr 
                                (builtin_function LEN 
                                  ( 
                                    (expr 
                                      (variable_or_function_call choice$ 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (variable_or_function_call MaxChoice)))) ))) ))) + 
                              (expr 
                                (literal 2)))) , 
                          (argument 
                            (expr 
                              (literal 178)))) ))) ;))) \n)) 
        (end_if_statement END IF)) \n \n ' \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 7))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))) , 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 4))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))))) \n 
      (statement 
        (for_next_statement FOR a = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call MaxChoice)) 
          (block \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call ItemRow 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call a)))) ))) , 
                (expr 
                  (variable_or_function_call ItemCol 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call a)))) ))))) \n 
            (statement 
              (print_statement PRINT 
                (print_argument 
                  (expr 
                    (variable_or_function_call choice$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call a)))) ))) ;))) \n) NEXT a)) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call finished) = 
          (expr 
            (variable_or_function_call FALSE)))) \n \n 
      (statement 
        (while_wend_statement WHILE 
          (expr NOT 
            (expr 
              (variable_or_function_call finished))) 
          (block \n \n 
            (statement 
              (gosub_statement GOSUB 
                (target 
                  (text_label 
                    (untyped_id MenuShowCursor))))) \n 
            (statement 
              (gosub_statement GOSUB 
                (target 
                  (text_label 
                    (untyped_id MenuGetKey))))) \n 
            (statement 
              (gosub_statement GOSUB 
                (target 
                  (text_label 
                    (untyped_id MenuHideCursor))))) \n \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call Kbd$)) 
                (before_first_case \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 0)))) ))) + 
                        (expr 
                          (literal "H"))))) 
                  (block : 
                    (statement 
                      (gosub_statement GOSUB 
                        (target 
                          (text_label 
                            (untyped_id MenuUp))))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 0)))) ))) + 
                        (expr 
                          (literal "P"))))) 
                  (block : 
                    (statement 
                      (gosub_statement GOSUB 
                        (target 
                          (text_label 
                            (untyped_id MenuDown))))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 0)))) ))) + 
                        (expr 
                          (literal "K"))))) 
                  (block : 
                    (statement 
                      (gosub_statement GOSUB 
                        (target 
                          (text_label 
                            (untyped_id MenuLeft))))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 0)))) ))) + 
                        (expr 
                          (literal "M"))))) 
                  (block : 
                    (statement 
                      (gosub_statement GOSUB 
                        (target 
                          (text_label 
                            (untyped_id MenuRight))))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call CHR$ 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (literal 13)))) ))))) 
                  (block : 
                    (statement 
                      (gosub_statement GOSUB 
                        (target 
                          (text_label 
                            (untyped_id MenuEnter))))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call CHR$ 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (literal 27)))) ))))) 
                  (block : 
                    (statement 
                      (gosub_statement GOSUB 
                        (target 
                          (text_label 
                            (untyped_id MenuEscape))))) \n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block : 
                    (statement 
                      (call_statement 
                        (untyped_id BEEP))) \n)) 
                (end_select_statement END SELECT))) \n) WEND)) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Menu) = 
          (expr 
            (variable_or_function_call currChoice)))) \n \n 
      (statement 
        (exit_statement EXIT FUNCTION)) \n \n \n 
      (label 
        (text_label 
          (untyped_id MenuEnter)) :) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call finished) = 
          (expr 
            (variable_or_function_call TRUE)))) \n 
      (statement 
        (return_statement RETURN)) \n \n 
      (label 
        (text_label 
          (untyped_id MenuEscape)) :) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call currChoice) = 
          (expr 
            (literal 0)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call finished) = 
          (expr 
            (variable_or_function_call TRUE)))) \n 
      (statement 
        (return_statement RETURN)) \n \n 
      (label 
        (text_label 
          (untyped_id MenuUp)) :) \n 
      (if_block_statement IF 
        (expr 
          (variable_or_function_call BarMode)) THEN \n 
        (then_block 
          (statement 
            (call_statement 
              (untyped_id BEEP))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call currChoice) = 
                (expr 
                  (expr 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (expr 
                              (variable_or_function_call currChoice)) + 
                            (expr 
                              (variable_or_function_call MaxChoice))) - 
                          (expr 
                            (literal 2))) )) MOD 
                    (expr 
                      (variable_or_function_call MaxChoice))) + 
                  (expr 
                    (literal 1))))) \n)) 
        (end_if_statement END IF)) \n 
      (statement 
        (return_statement RETURN)) \n \n 
      (label 
        (text_label 
          (untyped_id MenuLeft)) :) \n 
      (if_block_statement IF 
        (expr 
          (variable_or_function_call BarMode)) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call currChoice) = 
              (expr 
                (expr 
                  (expr 
                    ( 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call currChoice)) + 
                          (expr 
                            (variable_or_function_call MaxChoice))) - 
                        (expr 
                          (literal 2))) )) MOD 
                  (expr 
                    (variable_or_function_call MaxChoice))) + 
                (expr 
                  (literal 1))))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call currChoice) = 
                (expr - 
                  (expr 
                    (literal 2))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call finished) = 
                (expr 
                  (variable_or_function_call TRUE)))) \n)) 
        (end_if_statement END IF)) \n 
      (statement 
        (return_statement RETURN)) \n \n 
      (label 
        (text_label 
          (untyped_id MenuRight)) :) \n 
      (if_block_statement IF 
        (expr 
          (variable_or_function_call BarMode)) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call currChoice) = 
              (expr 
                (expr 
                  (expr 
                    ( 
                      (expr 
                        (variable_or_function_call currChoice)) )) MOD 
                  (expr 
                    (variable_or_function_call MaxChoice))) + 
                (expr 
                  (literal 1))))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call currChoice) = 
                (expr - 
                  (expr 
                    (literal 3))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call finished) = 
                (expr 
                  (variable_or_function_call TRUE)))) \n)) 
        (end_if_statement END IF)) \n 
      (statement 
        (return_statement RETURN)) \n \n 
      (label 
        (text_label 
          (untyped_id MenuDown)) :) \n 
      (if_block_statement IF 
        (expr 
          (variable_or_function_call BarMode)) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call finished) = 
              (expr 
                (variable_or_function_call TRUE)))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call currChoice) = 
                (expr 
                  (expr 
                    (expr 
                      ( 
                        (expr 
                          (variable_or_function_call currChoice)) )) MOD 
                    (expr 
                      (variable_or_function_call MaxChoice))) + 
                  (expr 
                    (literal 1))))) \n)) 
        (end_if_statement END IF)) \n 
      (statement 
        (return_statement RETURN)) \n \n 
      (label 
        (text_label 
          (untyped_id MenuShowCursor)) :) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 8))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))) , 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 9))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call ItemRow 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call currChoice)))) ))) , 
          (expr 
            (variable_or_function_call ItemCol 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call currChoice)))) ))))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call choice$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call currChoice)))) ))) ;))) \n 
      (statement 
        (call_statement 
          (untyped_id PrintHelpLine) 
          (argument_list 
            (argument 
              (expr 
                (variable_or_function_call help$ 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call currChoice)))) ))))))) \n 
      (statement 
        (return_statement RETURN)) \n \n 
      (label 
        (text_label 
          (untyped_id MenuGetKey)) :) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Kbd$) = 
          (expr 
            (literal "")))) \n 
      (statement 
        (while_wend_statement WHILE 
          (expr 
            (expr 
              (variable_or_function_call Kbd$)) = 
            (expr 
              (literal ""))) 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Kbd$) = 
                (expr 
                  (variable_or_function_call INKEY$)))) \n) WEND)) \n 
      (statement 
        (return_statement RETURN)) \n \n 
      (label 
        (text_label 
          (untyped_id MenuHideCursor)) :) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 7))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))) , 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 4))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call ItemRow 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call currChoice)))) ))) , 
          (expr 
            (variable_or_function_call ItemCol 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call currChoice)))) ))))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call choice$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call currChoice)))) ))) ;))) \n 
      (statement 
        (return_statement RETURN)) \n \n \n) 
    (end_function_statement END FUNCTION)) \n \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id MenuSystem) 
    (block \n \n 
      (statement 
        (dim_statement DIM 
          (dim_variable choice$ 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 20))) ))) , 
          (dim_variable menuRow 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 20))) ))) , 
          (dim_variable menuCol 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 20))) ))) , 
          (dim_variable help$ 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 20))) ))))) \n 
      (statement 
        (locate_statement LOCATE , , 
          (expr 
            (literal 0)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call choice) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call finished) = 
          (expr 
            (variable_or_function_call FALSE)))) \n \n 
      (statement 
        (while_wend_statement WHILE 
          (expr NOT 
            (expr 
              (variable_or_function_call finished))) 
          (block \n 
            (statement 
              (gosub_statement GOSUB 
                (target 
                  (text_label 
                    (untyped_id MenuSystemMain))))) \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call subchoice) = 
                (expr - 
                  (expr 
                    (literal 1))))) \n 
            (statement 
              (while_wend_statement WHILE 
                (expr 
                  (expr 
                    (variable_or_function_call subchoice)) < 
                  (expr 
                    (literal 0))) 
                (block \n 
                  (statement 
                    (select_case_statement SELECT CASE 
                      (expr 
                        (variable_or_function_call choice)) 
                      (before_first_case \n) 
                      (case_block 
                        (case_statement CASE 
                          (case_expr 
                            (expr 
                              (literal 1)))) 
                        (block : 
                          (statement 
                            (gosub_statement GOSUB 
                              (target 
                                (text_label 
                                  (untyped_id MenuSystemFile))))) \n)) 
                      (case_block 
                        (case_statement CASE 
                          (case_expr 
                            (expr 
                              (literal 2)))) 
                        (block : 
                          (statement 
                            (gosub_statement GOSUB 
                              (target 
                                (text_label 
                                  (untyped_id MenuSystemEdit))))) \n)) 
                      (case_block 
                        (case_statement CASE 
                          (case_expr 
                            (expr 
                              (literal 3)))) 
                        (block : 
                          (statement 
                            (gosub_statement GOSUB 
                              (target 
                                (text_label 
                                  (untyped_id MenuSystemAccount))))) \n)) 
                      (case_block 
                        (case_statement CASE 
                          (case_expr 
                            (expr 
                              (literal 4)))) 
                        (block : 
                          (statement 
                            (gosub_statement GOSUB 
                              (target 
                                (text_label 
                                  (untyped_id MenuSystemReport))))) \n)) 
                      (case_block 
                        (case_statement CASE 
                          (case_expr 
                            (expr 
                              (literal 5)))) 
                        (block : 
                          (statement 
                            (gosub_statement GOSUB 
                              (target 
                                (text_label 
                                  (untyped_id MenuSystemColors))))) \n)) 
                      (end_select_statement END SELECT))) \n 
                  (statement 
                    (call_statement 
                      (untyped_id FancyCls) 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call colors 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (literal 2))) , 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call ColorPref)))) )))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call colors 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (literal 1))) , 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call ColorPref)))) ))))))) \n \n 
                  (statement 
                    (select_case_statement SELECT CASE 
                      (expr 
                        (variable_or_function_call subchoice)) 
                      (before_first_case \n) 
                      (case_block 
                        (case_statement CASE 
                          (case_expr 
                            (expr - 
                              (expr 
                                (literal 2))))) 
                        (block : 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call choice) = 
                              (expr 
                                (expr 
                                  (expr 
                                    ( 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call choice)) + 
                                        (expr 
                                          (literal 3))) )) MOD 
                                  (expr 
                                    (literal 5))) + 
                                (expr 
                                  (literal 1))))) \n)) 
                      (case_block 
                        (case_statement CASE 
                          (case_expr 
                            (expr - 
                              (expr 
                                (literal 3))))) 
                        (block : 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call choice) = 
                              (expr 
                                (expr 
                                  (expr 
                                    ( 
                                      (expr 
                                        (variable_or_function_call choice)) )) MOD 
                                  (expr 
                                    (literal 5))) + 
                                (expr 
                                  (literal 1))))) \n)) 
                      (end_select_statement END SELECT))) \n) WEND)) \n) WEND)) \n 
      (statement 
        (exit_statement EXIT SUB)) \n \n \n 
      (label 
        (text_label 
          (untyped_id MenuSystemMain)) :) \n 
      (statement 
        (call_statement 
          (untyped_id FancyCls) 
          (argument_list 
            (argument 
              (expr 
                (variable_or_function_call colors 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (literal 2))) , 
                      (argument 
                        (expr 
                          (variable_or_function_call ColorPref)))) )))) , 
            (argument 
              (expr 
                (variable_or_function_call colors 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (literal 1))) , 
                      (argument 
                        (expr 
                          (variable_or_function_call ColorPref)))) ))))))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 7))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))) , 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 4))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))))) \n 
      (statement 
        (call_statement 
          (untyped_id Box) 
          (argument_list 
            (argument 
              (expr 
                (literal 9))) , 
            (argument 
              (expr 
                (literal 19))) , 
            (argument 
              (expr 
                (literal 14))) , 
            (argument 
              (expr 
                (literal 61)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal 11))) , 
            (argument 
              (expr 
                (literal "Use arrow keys to navigate menu system")))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal 12))) , 
            (argument 
              (expr 
                (literal "Press Enter to select a menu item")))))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call choice$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal " File ")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call choice$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 2)))) )) = 
          (expr 
            (literal " Accounts ")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call choice$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 3)))) )) = 
          (expr 
            (literal " Transactions ")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call choice$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 4)))) )) = 
          (expr 
            (literal " Reports ")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call choice$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 5)))) )) = 
          (expr 
            (literal " Colors ")))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call menuRow 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal 1)))) : 
      (statement 
        (assignment_statement 
          (variable_or_function_call menuCol 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal 2)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call menuRow 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 2)))) )) = 
          (expr 
            (literal 1)))) : 
      (statement 
        (assignment_statement 
          (variable_or_function_call menuCol 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 2)))) )) = 
          (expr 
            (literal 8)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call menuRow 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 3)))) )) = 
          (expr 
            (literal 1)))) : 
      (statement 
        (assignment_statement 
          (variable_or_function_call menuCol 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 3)))) )) = 
          (expr 
            (literal 18)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call menuRow 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 4)))) )) = 
          (expr 
            (literal 1)))) : 
      (statement 
        (assignment_statement 
          (variable_or_function_call menuCol 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 4)))) )) = 
          (expr 
            (literal 32)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call menuRow 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 5)))) )) = 
          (expr 
            (literal 1)))) : 
      (statement 
        (assignment_statement 
          (variable_or_function_call menuCol 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 5)))) )) = 
          (expr 
            (literal 41)))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call help$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal "Exit the Money Manager")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call help$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 2)))) )) = 
          (expr 
            (literal "Add/edit/delete accounts")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call help$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 3)))) )) = 
          (expr 
            (literal "Add/edit/delete account transactions")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call help$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 4)))) )) = 
          (expr 
            (literal "View and print reports")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call help$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 5)))) )) = 
          (expr 
            (literal "Set screen colors")))) \n \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call NewChoice) = 
                (expr 
                  (variable_or_function_call Menu 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            ( 
                              (expr 
                                (variable_or_function_call choice)) ))) , 
                        (argument 
                          (expr 
                            (literal 5))) , 
                        (argument choice$ 
                          ( )) , 
                        (argument menuRow 
                          ( )) , 
                        (argument menuCol 
                          ( )) , 
                        (argument help$ 
                          ( )) , 
                        (argument 
                          (expr 
                            (variable_or_function_call TRUE)))) ))))) \n) LOOP 
          (loop_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call NewChoice)) = 
              (expr 
                (literal 0)))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call choice) = 
          (expr 
            (variable_or_function_call NewChoice)))) \n 
      (statement 
        (return_statement RETURN)) \n \n 
      (label 
        (text_label 
          (untyped_id MenuSystemFile)) :) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call choice$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal " Exit           ")))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call menuRow 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal 3)))) : 
      (statement 
        (assignment_statement 
          (variable_or_function_call menuCol 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal 2)))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call help$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal "Exit the Money Manager")))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call subchoice) = 
          (expr 
            (variable_or_function_call Menu 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 1))) , 
                  (argument 
                    (expr 
                      (literal 1))) , 
                  (argument choice$ 
                    ( )) , 
                  (argument menuRow 
                    ( )) , 
                  (argument menuCol 
                    ( )) , 
                  (argument help$ 
                    ( )) , 
                  (argument 
                    (expr 
                      (variable_or_function_call FALSE)))) ))))) \n \n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call subchoice)) 
          (before_first_case \n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 1)))) 
            (block : 
              (statement 
                (assignment_statement 
                  (variable_or_function_call finished) = 
                  (expr 
                    (variable_or_function_call TRUE)))) \n)) 
          (case_block 
            (case_statement CASE ELSE) 
            (block \n)) 
          (end_select_statement END SELECT))) \n 
      (statement 
        (return_statement RETURN)) \n \n \n 
      (label 
        (text_label 
          (untyped_id MenuSystemEdit)) :) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call choice$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal " Edit Account Titles ")))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call menuRow 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal 3)))) : 
      (statement 
        (assignment_statement 
          (variable_or_function_call menuCol 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal 8)))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call help$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal "Add/edit/delete accounts")))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call subchoice) = 
          (expr 
            (variable_or_function_call Menu 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 1))) , 
                  (argument 
                    (expr 
                      (literal 1))) , 
                  (argument choice$ 
                    ( )) , 
                  (argument menuRow 
                    ( )) , 
                  (argument menuCol 
                    ( )) , 
                  (argument help$ 
                    ( )) , 
                  (argument 
                    (expr 
                      (variable_or_function_call FALSE)))) ))))) \n \n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call subchoice)) 
          (before_first_case \n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 1)))) 
            (block : 
              (statement 
                (call_statement 
                  (untyped_id EditAccounts))) \n)) 
          (case_block 
            (case_statement CASE ELSE) 
            (block \n)) 
          (end_select_statement END SELECT))) \n 
      (statement 
        (return_statement RETURN)) \n \n \n 
      (label 
        (text_label 
          (untyped_id MenuSystemAccount)) :) \n \n 
      (statement 
        (for_next_statement FOR a = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 19)) 
          (block \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call Trim$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call account 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call a)))) ) . Title)))) ))) = 
                (expr 
                  (literal ""))) THEN \n 
              (then_block 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call choice$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call a)))) )) = 
                    (expr 
                      (expr 
                        (variable_or_function_call RIGHT$ 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call STR$ 
                                    ( 
                                      (argument_list 
                                        (argument 
                                          (expr 
                                            (variable_or_function_call a)))) )))) , 
                              (argument 
                                (expr 
                                  (literal 2)))) ))) + 
                      (expr 
                        (literal ". ------------------- "))))) \n) 
              (else_block_statement ELSE 
                (else_block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call choice$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call a)))) )) = 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call RIGHT$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call STR$ 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (variable_or_function_call a)))) )))) , 
                                  (argument 
                                    (expr 
                                      (literal 2)))) ))) + 
                          (expr 
                            (literal ". "))) + 
                        (expr 
                          (variable_or_function_call account 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (variable_or_function_call a)))) ) . Title))))) \n)) 
              (end_if_statement END IF)) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call menuRow 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call a)))) )) = 
                (expr 
                  (expr 
                    (variable_or_function_call a)) + 
                  (expr 
                    (literal 2))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call menuCol 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call a)))) )) = 
                (expr 
                  (literal 19)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call help$ 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call a)))) )) = 
                (expr 
                  (variable_or_function_call RTRIM$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call account 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call a)))) ) . Desc)))) ))))) \n) NEXT a)) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call subchoice) = 
          (expr 
            (variable_or_function_call Menu 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 1))) , 
                  (argument 
                    (expr 
                      (literal 19))) , 
                  (argument choice$ 
                    ( )) , 
                  (argument menuRow 
                    ( )) , 
                  (argument menuCol 
                    ( )) , 
                  (argument help$ 
                    ( )) , 
                  (argument 
                    (expr 
                      (variable_or_function_call FALSE)))) ))))) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call subchoice)) > 
          (expr 
            (literal 0))) THEN \n 
        (then_block 
          (statement 
            (call_statement 
              (untyped_id EditTrans) 
              (argument_list 
                (argument 
                  (expr 
                    ( 
                      (expr 
                        (variable_or_function_call subchoice)) )))))) \n) 
        (end_if_statement END IF)) \n 
      (statement 
        (return_statement RETURN)) \n \n \n 
      (label 
        (text_label 
          (untyped_id MenuSystemReport)) :) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call choice$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal " Net Worth Report       ")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call menuRow 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal 3)))) : 
      (statement 
        (assignment_statement 
          (variable_or_function_call menuCol 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal 32)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call help$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal "View and print net worth report")))) \n \n 
      (statement 
        (for_next_statement FOR a = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 19)) 
          (block \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call Trim$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call account 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call a)))) ) . Title)))) ))) = 
                (expr 
                  (literal ""))) THEN \n 
              (then_block 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call choice$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (expr 
                                (variable_or_function_call a)) + 
                              (expr 
                                (literal 1))))) )) = 
                    (expr 
                      (expr 
                        (variable_or_function_call RIGHT$ 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call STR$ 
                                    ( 
                                      (argument_list 
                                        (argument 
                                          (expr 
                                            (variable_or_function_call a)))) )))) , 
                              (argument 
                                (expr 
                                  (literal 2)))) ))) + 
                      (expr 
                        (literal ". ------------------- "))))) \n) 
              (else_block_statement ELSE 
                (else_block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call choice$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (expr 
                                  (variable_or_function_call a)) + 
                                (expr 
                                  (literal 1))))) )) = 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call RIGHT$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call STR$ 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (variable_or_function_call a)))) )))) , 
                                  (argument 
                                    (expr 
                                      (literal 2)))) ))) + 
                          (expr 
                            (literal ". "))) + 
                        (expr 
                          (variable_or_function_call account 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (variable_or_function_call a)))) ) . Title))))) \n)) 
              (end_if_statement END IF)) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call menuRow 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (expr 
                            (variable_or_function_call a)) + 
                          (expr 
                            (literal 1))))) )) = 
                (expr 
                  (expr 
                    (variable_or_function_call a)) + 
                  (expr 
                    (literal 3))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call menuCol 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (expr 
                            (variable_or_function_call a)) + 
                          (expr 
                            (literal 1))))) )) = 
                (expr 
                  (literal 32)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call help$ 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (expr 
                            (variable_or_function_call a)) + 
                          (expr 
                            (literal 1))))) )) = 
                (expr 
                  (expr 
                    (expr 
                      (literal "Print ")) + 
                    (expr 
                      (variable_or_function_call RTRIM$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call account 
                                  ( 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call a)))) ) . Title)))) )))) + 
                  (expr 
                    (literal " transaction summary"))))) \n) NEXT a)) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call subchoice) = 
          (expr 
            (variable_or_function_call Menu 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 1))) , 
                  (argument 
                    (expr 
                      (literal 20))) , 
                  (argument choice$ 
                    ( )) , 
                  (argument menuRow 
                    ( )) , 
                  (argument menuCol 
                    ( )) , 
                  (argument help$ 
                    ( )) , 
                  (argument 
                    (expr 
                      (variable_or_function_call FALSE)))) ))))) \n \n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call subchoice)) 
          (before_first_case \n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 1)))) 
            (block \n 
              (statement 
                (call_statement 
                  (untyped_id NetWorthReport))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 2)) TO 
                (expr 
                  (literal 20)))) 
            (block \n 
              (statement 
                (call_statement 
                  (untyped_id TransactionSummary) 
                  (argument_list 
                    (argument 
                      (expr 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call subchoice)) - 
                            (expr 
                              (literal 1))) )))))) \n)) 
          (case_block 
            (case_statement CASE ELSE) 
            (block \n)) 
          (end_select_statement END SELECT))) \n 
      (statement 
        (return_statement RETURN)) \n \n 
      (label 
        (text_label 
          (untyped_id MenuSystemColors)) :) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call choice$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal " Monochrome Scheme ")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call choice$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 2)))) )) = 
          (expr 
            (literal " Cyan/Blue Scheme  ")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call choice$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 3)))) )) = 
          (expr 
            (literal " Blue/Cyan Scheme  ")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call choice$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 4)))) )) = 
          (expr 
            (literal " Red/Grey Scheme   ")))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call menuRow 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal 3)))) : 
      (statement 
        (assignment_statement 
          (variable_or_function_call menuCol 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal 41)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call menuRow 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 2)))) )) = 
          (expr 
            (literal 4)))) : 
      (statement 
        (assignment_statement 
          (variable_or_function_call menuCol 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 2)))) )) = 
          (expr 
            (literal 41)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call menuRow 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 3)))) )) = 
          (expr 
            (literal 5)))) : 
      (statement 
        (assignment_statement 
          (variable_or_function_call menuCol 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 3)))) )) = 
          (expr 
            (literal 41)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call menuRow 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 4)))) )) = 
          (expr 
            (literal 6)))) : 
      (statement 
        (assignment_statement 
          (variable_or_function_call menuCol 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 4)))) )) = 
          (expr 
            (literal 41)))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call help$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) )) = 
          (expr 
            (literal "Color scheme for monochrome and LCD displays")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call help$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 2)))) )) = 
          (expr 
            (literal "Color scheme featuring cyan")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call help$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 3)))) )) = 
          (expr 
            (literal "Color scheme featuring blue")))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call help$ 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 4)))) )) = 
          (expr 
            (literal "Color scheme featuring red")))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call subchoice) = 
          (expr 
            (variable_or_function_call Menu 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 1))) , 
                  (argument 
                    (expr 
                      (literal 4))) , 
                  (argument choice$ 
                    ( )) , 
                  (argument menuRow 
                    ( )) , 
                  (argument menuCol 
                    ( )) , 
                  (argument help$ 
                    ( )) , 
                  (argument 
                    (expr 
                      (variable_or_function_call FALSE)))) ))))) \n \n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call subchoice)) 
          (before_first_case \n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 1)) TO 
                (expr 
                  (literal 4)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call ColorPref) = 
                  (expr 
                    (variable_or_function_call subchoice)))) \n 
              (statement 
                (call_statement 
                  (untyped_id SaveState))) \n)) 
          (case_block 
            (case_statement CASE ELSE) 
            (block \n)) 
          (end_select_statement END SELECT))) \n 
      (statement 
        (return_statement RETURN)) \n \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id NetWorthReport) 
    (block \n 
      (statement 
        (dim_statement DIM 
          (dim_variable assetIndex 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 19))) ))) , 
          (dim_variable liabilityIndex 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 19))) ))))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call maxAsset) = 
          (expr 
            (literal 0)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call maxLiability) = 
          (expr 
            (literal 0)))) \n \n 
      (statement 
        (for_next_statement FOR a = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 19)) 
          (block \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call account 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call a)))) ) . AType)) = 
                (expr 
                  (literal "A"))) THEN \n 
              (then_block 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call maxAsset) = 
                    (expr 
                      (expr 
                        (variable_or_function_call maxAsset)) + 
                      (expr 
                        (literal 1))))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call assetIndex 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call maxAsset)))) )) = 
                    (expr 
                      (variable_or_function_call a)))) \n) 
              (elseif_block_statement ELSEIF 
                (expr 
                  (expr 
                    (variable_or_function_call account 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call a)))) ) . AType)) = 
                  (expr 
                    (literal "L"))) THEN 
                (else_block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call maxLiability) = 
                      (expr 
                        (expr 
                          (variable_or_function_call maxLiability)) + 
                        (expr 
                          (literal 1))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call liabilityIndex 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call maxLiability)))) )) = 
                      (expr 
                        (variable_or_function_call a)))) \n)) 
              (end_if_statement END IF)) \n) NEXT a)) \n \n ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call finished) = 
          (expr 
            (variable_or_function_call FALSE)))) \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call u1$) = 
                (expr 
                  (literal "\                  \$$###,###,###.##")))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call u2$) = 
                (expr 
                  (literal "\               \+$$#,###,###,###.##")))) \n \n 
            (statement 
              (color_statement COLOR 
                (expr 
                  (variable_or_function_call colors 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (literal 5))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call ColorPref)))) ))) , 
                (expr 
                  (variable_or_function_call colors 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (literal 4))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call ColorPref)))) ))))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 1)) , 
                (expr 
                  (literal 1)))) : 
            (statement 
              (print_statement PRINT 
                (print_argument 
                  (expr 
                    (variable_or_function_call SPACE$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (literal 80)))) ))) ;))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 1)) , 
                (expr 
                  (literal 4)))) : 
            (statement 
              (print_statement PRINT 
                (print_argument 
                  (expr 
                    (expr 
                      (literal "Net Worth Report: ")) + 
                    (expr 
                      (variable_or_function_call DATE$))) ;))) \n 
            (statement 
              (call_statement 
                (untyped_id PrintHelpLine) 
                (argument_list 
                  (argument 
                    (expr 
                      (literal "<F2=Exit>    <F3=Print Report>")))))) \n \n 
            (statement 
              (color_statement COLOR 
                (expr 
                  (variable_or_function_call colors 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (literal 7))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call ColorPref)))) ))) , 
                (expr 
                  (variable_or_function_call colors 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (literal 4))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call ColorPref)))) ))))) \n 
            (statement 
              (call_statement 
                (untyped_id Box) 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 2))) , 
                  (argument 
                    (expr 
                      (literal 1))) , 
                  (argument 
                    (expr 
                      (literal 24))) , 
                  (argument 
                    (expr 
                      (literal 40)))))) \n 
            (statement 
              (call_statement 
                (untyped_id Box) 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 2))) , 
                  (argument 
                    (expr 
                      (literal 41))) , 
                  (argument 
                    (expr 
                      (literal 24))) , 
                  (argument 
                    (expr 
                      (literal 80)))))) \n \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 2)) , 
                (expr 
                  (literal 16)))) : 
            (statement 
              (print_statement PRINT 
                (print_argument 
                  (expr 
                    (literal " ASSETS "))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call assetTotal#) = 
                (expr 
                  (literal 0)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call a) = 
                (expr 
                  (literal 1)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call count1) = 
                (expr 
                  (literal 1)))) \n 
            (statement 
              (while_wend_statement WHILE 
                (expr 
                  (expr 
                    (variable_or_function_call a)) <= 
                  (expr 
                    (variable_or_function_call maxAsset))) 
                (block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call file$) = 
                      (expr 
                        (expr 
                          (literal "money.")) + 
                        (expr 
                          (variable_or_function_call Cvit$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (variable_or_function_call assetIndex 
                                      ( 
                                        (argument_list 
                                          (argument 
                                            (expr 
                                              (variable_or_function_call a)))) ))))) )))))) \n 
                  (statement 
                    (open_statement OPEN 
                      (expr 
                        (variable_or_function_call file$)) FOR 
                      (open_mode RANDOM) AS # 
                      (expr 
                        (literal 1)) LEN = 
                      (expr 
                        (literal 84)))) \n 
                  (statement 
                    (field_statement FIELD # 
                      (expr 
                        (literal 1)) , 
                      (field_assignment 
                        (expr 
                          (literal 11)) AS 
                        (variable_or_function_call valid$)) , 
                      (field_assignment 
                        (expr 
                          (literal 5)) AS 
                        (variable_or_function_call IoMaxRecord$)) , 
                      (field_assignment 
                        (expr 
                          (literal 8)) AS 
                        (variable_or_function_call IoBalance$)))) \n 
                  (statement 
                    (get_io_statement GET # 
                      (expr 
                        (literal 1)) , 
                      (expr 
                        (literal 1)))) \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (variable_or_function_call valid$)) = 
                      (expr 
                        (literal "THISISVALID"))) THEN \n 
                    (then_block 
                      (statement 
                        (locate_statement LOCATE 
                          (expr 
                            (expr 
                              (literal 2)) + 
                            (expr 
                              (variable_or_function_call count1))) , 
                          (expr 
                            (literal 3)))) : 
                      (statement 
                        (print_using_statement PRINT USING 
                          (expr 
                            (variable_or_function_call u1$)) ; 
                          (print_argument 
                            (expr 
                              (variable_or_function_call account 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call assetIndex 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (variable_or_function_call a)))) ))))) ) . Title)) ;) 
                          (print_argument 
                            (expr 
                              (variable_or_function_call CVD 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call IoBalance$)))) )))))) \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call assetTotal#) = 
                          (expr 
                            (expr 
                              (variable_or_function_call assetTotal#)) + 
                            (expr 
                              (variable_or_function_call CVD 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call IoBalance$)))) )))))) \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call count1) = 
                          (expr 
                            (expr 
                              (variable_or_function_call count1)) + 
                            (expr 
                              (literal 1))))) \n) 
                    (end_if_statement END IF)) \n 
                  (statement 
                    (close_statement CLOSE)) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call a) = 
                      (expr 
                        (expr 
                          (variable_or_function_call a)) + 
                        (expr 
                          (literal 1))))) \n) WEND)) \n \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 2)) , 
                (expr 
                  (literal 55)))) : 
            (statement 
              (print_statement PRINT 
                (print_argument 
                  (expr 
                    (literal " LIABILITIES "))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call liabilityTotal#) = 
                (expr 
                  (literal 0)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call a) = 
                (expr 
                  (literal 1)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call count2) = 
                (expr 
                  (literal 1)))) \n 
            (statement 
              (while_wend_statement WHILE 
                (expr 
                  (expr 
                    (variable_or_function_call a)) <= 
                  (expr 
                    (variable_or_function_call maxLiability))) 
                (block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call file$) = 
                      (expr 
                        (expr 
                          (literal "money.")) + 
                        (expr 
                          (variable_or_function_call Cvit$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (variable_or_function_call liabilityIndex 
                                      ( 
                                        (argument_list 
                                          (argument 
                                            (expr 
                                              (variable_or_function_call a)))) ))))) )))))) \n 
                  (statement 
                    (open_statement OPEN 
                      (expr 
                        (variable_or_function_call file$)) FOR 
                      (open_mode RANDOM) AS # 
                      (expr 
                        (literal 1)) LEN = 
                      (expr 
                        (literal 84)))) \n 
                  (statement 
                    (field_statement FIELD # 
                      (expr 
                        (literal 1)) , 
                      (field_assignment 
                        (expr 
                          (literal 11)) AS 
                        (variable_or_function_call valid$)) , 
                      (field_assignment 
                        (expr 
                          (literal 5)) AS 
                        (variable_or_function_call IoMaxRecord$)) , 
                      (field_assignment 
                        (expr 
                          (literal 8)) AS 
                        (variable_or_function_call IoBalance$)))) \n 
                  (statement 
                    (get_io_statement GET # 
                      (expr 
                        (literal 1)) , 
                      (expr 
                        (literal 1)))) \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (variable_or_function_call valid$)) = 
                      (expr 
                        (literal "THISISVALID"))) THEN \n 
                    (then_block 
                      (statement 
                        (locate_statement LOCATE 
                          (expr 
                            (expr 
                              (literal 2)) + 
                            (expr 
                              (variable_or_function_call count2))) , 
                          (expr 
                            (literal 43)))) : 
                      (statement 
                        (print_using_statement PRINT USING 
                          (expr 
                            (variable_or_function_call u1$)) ; 
                          (print_argument 
                            (expr 
                              (variable_or_function_call account 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call liabilityIndex 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (variable_or_function_call a)))) ))))) ) . Title)) ;) 
                          (print_argument 
                            (expr 
                              (variable_or_function_call CVD 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call IoBalance$)))) )))))) \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call liabilityTotal#) = 
                          (expr 
                            (expr 
                              (variable_or_function_call liabilityTotal#)) + 
                            (expr 
                              (variable_or_function_call CVD 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call IoBalance$)))) )))))) \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call count2) = 
                          (expr 
                            (expr 
                              (variable_or_function_call count2)) + 
                            (expr 
                              (literal 1))))) \n) 
                    (end_if_statement END IF)) \n 
                  (statement 
                    (close_statement CLOSE)) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call a) = 
                      (expr 
                        (expr 
                          (variable_or_function_call a)) + 
                        (expr 
                          (literal 1))))) \n) WEND)) \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call count2)) > 
                  (expr 
                    (variable_or_function_call count1))) THEN 
                (if_inline_action 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call count1) = 
                      (expr 
                        (variable_or_function_call count2))))))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (expr 
                    (literal 2)) + 
                  (expr 
                    (variable_or_function_call count1))) , 
                (expr 
                  (literal 25)))) : 
            (statement 
              (print_statement PRINT 
                (print_argument 
                  (expr 
                    (literal "--------------"))))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (expr 
                    (literal 2)) + 
                  (expr 
                    (variable_or_function_call count1))) , 
                (expr 
                  (literal 65)))) : 
            (statement 
              (print_statement PRINT 
                (print_argument 
                  (expr 
                    (literal "--------------"))))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (expr 
                    (literal 3)) + 
                  (expr 
                    (variable_or_function_call count1))) , 
                (expr 
                  (literal 3)))) : 
            (statement 
              (print_using_statement PRINT USING 
                (expr 
                  (variable_or_function_call u2$)) ; 
                (print_argument 
                  (expr 
                    (literal "Total assets")) ;) 
                (print_argument 
                  (expr 
                    (variable_or_function_call assetTotal#)) ;))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (expr 
                    (literal 3)) + 
                  (expr 
                    (variable_or_function_call count1))) , 
                (expr 
                  (literal 43)))) : 
            (statement 
              (print_using_statement PRINT USING 
                (expr 
                  (variable_or_function_call u2$)) ; 
                (print_argument 
                  (expr 
                    (literal "Total liabilities")) ;) 
                (print_argument 
                  (expr 
                    (variable_or_function_call liabilityTotal#))))) \n \n 
            (statement 
              (color_statement COLOR 
                (expr 
                  (variable_or_function_call colors 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (literal 5))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call ColorPref)))) ))) , 
                (expr 
                  (variable_or_function_call colors 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (literal 4))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call ColorPref)))) ))))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (literal 1)) , 
                (expr 
                  (literal 43)))) : 
            (statement 
              (print_using_statement PRINT USING 
                (expr 
                  (variable_or_function_call u2$)) ; 
                (print_argument 
                  (expr 
                    (literal "    NET WORTH:")) ;) 
                (print_argument 
                  (expr 
                    (expr 
                      (variable_or_function_call assetTotal#)) - 
                    (expr 
                      (variable_or_function_call liabilityTotal#)))))) \n \n 
            (statement 
              (do_loop_statement DO 
                (block : 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Kbd$) = 
                      (expr 
                        (variable_or_function_call INKEY$)))) :) LOOP 
                (loop_condition UNTIL 
                  (expr 
                    (expr 
                      (variable_or_function_call Kbd$)) <> 
                    (expr 
                      (literal "")))))) \n \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call Kbd$)) 
                (before_first_case ' \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 0)))) ))) + 
                        (expr 
                          (literal "<"))))) 
                  (block ' \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call finished) = 
                        (expr 
                          (variable_or_function_call TRUE)))) \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 0)))) ))) + 
                        (expr 
                          (literal "="))))) 
                  (block ' \n 
                    (statement 
                      (gosub_statement GOSUB 
                        (target 
                          (text_label 
                            (untyped_id NetWorthReportPrint))))) \n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \n 
                    (statement 
                      (call_statement 
                        (untyped_id BEEP))) \n)) 
                (end_select_statement END SELECT))) \n) LOOP 
          (loop_condition UNTIL 
            (expr 
              (variable_or_function_call finished))))) \n 
      (statement 
        (exit_statement EXIT SUB)) \n \n 
      (label 
        (text_label 
          (untyped_id NetWorthReportPrint)) :) \n 
      (statement 
        (call_statement 
          (untyped_id PrintHelpLine) 
          (argument_list 
            (argument 
              (expr 
                (literal "")))))) \n \n 
      (statement 
        (call_statement 
          (untyped_id Box) 
          (argument_list 
            (argument 
              (expr 
                (literal 8))) , 
            (argument 
              (expr 
                (literal 20))) , 
            (argument 
              (expr 
                (literal 14))) , 
            (argument 
              (expr 
                (literal 62)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal 10))) , 
            (argument 
              (expr 
                (literal "Prepare printer on LPT1 for report")))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal 12))) , 
            (argument 
              (expr 
                (literal "Hit <Enter> to print, or <Esc> to abort")))))) \n \n 
      (statement 
        (do_loop_statement DO 
          (block : 
            (statement 
              (assignment_statement 
                (variable_or_function_call Kbd$) = 
                (expr 
                  (variable_or_function_call INKEY$)))) :) LOOP 
          (loop_condition WHILE 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call Kbd$)) <> 
                (expr 
                  (variable_or_function_call CHR$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (literal 13)))) )))) AND 
              (expr 
                (expr 
                  (variable_or_function_call Kbd$)) <> 
                (expr 
                  (variable_or_function_call CHR$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (literal 27)))) )))))))) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Kbd$)) = 
          (expr 
            (variable_or_function_call CHR$ 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 13)))) )))) THEN \n 
        (then_block 
          (statement 
            (call_statement 
              (untyped_id Box) 
              (argument_list 
                (argument 
                  (expr 
                    (literal 8))) , 
                (argument 
                  (expr 
                    (literal 20))) , 
                (argument 
                  (expr 
                    (literal 14))) , 
                (argument 
                  (expr 
                    (literal 62)))))) \n 
          (statement 
            (call_statement 
              (untyped_id Center) 
              (argument_list 
                (argument 
                  (expr 
                    (literal 11))) , 
                (argument 
                  (expr 
                    (literal "Printing report...")))))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call u0$) = 
              (expr 
                (literal "                     \                  \ ")))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call u1$) = 
              (expr 
                (literal "                        \                 \ $$###,###,###.##")))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call u2$) = 
              (expr 
                (literal "                                              --------------")))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call u3$) = 
              (expr 
                (literal "                                               =============")))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call u4$) = 
              (expr 
                (literal "                        \               \+$$#,###,###,###.##")))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call PrintErr) = 
              (expr 
                (variable_or_function_call FALSE)))) \n 
          (statement 
            (on_error_statement ON ERROR GOTO 
              (target 
                (text_label 
                  (untyped_id ErrorTrap))))) ' \n 
          (statement 
            (lprint_statement LPRINT)) \n 
          (if_block_statement IF 
            (expr 
              (expr 
                (variable_or_function_call PrintErr)) = 
              (expr 
                (variable_or_function_call FALSE))) THEN \n 
            (then_block 
              (statement 
                (lprint_statement LPRINT)) : 
              (statement 
                (lprint_statement LPRINT)) : 
              (statement 
                (lprint_statement LPRINT)) : 
              (statement 
                (lprint_statement LPRINT)) : 
              (statement 
                (lprint_statement LPRINT)) \n 
              (statement 
                (call_statement 
                  (untyped_id LCenter) 
                  (argument_list 
                    (argument 
                      (expr 
                        (literal "Q B a s i c")))))) \n 
              (statement 
                (call_statement 
                  (untyped_id LCenter) 
                  (argument_list 
                    (argument 
                      (expr 
                        (literal "M O N E Y   M A N A G E R")))))) \n 
              (statement 
                (lprint_statement LPRINT)) : 
              (statement 
                (lprint_statement LPRINT)) \n 
              (statement 
                (call_statement 
                  (untyped_id LCenter) 
                  (argument_list 
                    (argument 
                      (expr 
                        (expr 
                          (literal "NET WORTH REPORT:  ")) + 
                        (expr 
                          (variable_or_function_call DATE$))))))) \n 
              (statement 
                (call_statement 
                  (untyped_id LCenter) 
                  (argument_list 
                    (argument 
                      (expr 
                        (literal "-------------------------------------------")))))) \n 
              (statement 
                (lprint_using_statement LPRINT USING 
                  (expr 
                    (variable_or_function_call u0$)) ; 
                  (print_argument 
                    (expr 
                      (literal "ASSETS:"))))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call assetTotal#) = 
                  (expr 
                    (literal 0)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call a) = 
                  (expr 
                    (literal 1)))) \n 
              (statement 
                (while_wend_statement WHILE 
                  (expr 
                    (expr 
                      (variable_or_function_call a)) <= 
                    (expr 
                      (variable_or_function_call maxAsset))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call file$) = 
                        (expr 
                          (expr 
                            (literal "money.")) + 
                          (expr 
                            (variable_or_function_call Cvit$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call assetIndex 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (variable_or_function_call a)))) ))))) )))))) \n 
                    (statement 
                      (open_statement OPEN 
                        (expr 
                          (variable_or_function_call file$)) FOR 
                        (open_mode RANDOM) AS # 
                        (expr 
                          (literal 1)) LEN = 
                        (expr 
                          (literal 84)))) \n 
                    (statement 
                      (field_statement FIELD # 
                        (expr 
                          (literal 1)) , 
                        (field_assignment 
                          (expr 
                            (literal 11)) AS 
                          (variable_or_function_call valid$)) , 
                        (field_assignment 
                          (expr 
                            (literal 5)) AS 
                          (variable_or_function_call IoMaxRecord$)) , 
                        (field_assignment 
                          (expr 
                            (literal 8)) AS 
                          (variable_or_function_call IoBalance$)))) \n 
                    (statement 
                      (get_io_statement GET # 
                        (expr 
                          (literal 1)) , 
                        (expr 
                          (literal 1)))) \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call valid$)) = 
                        (expr 
                          (literal "THISISVALID"))) THEN \n 
                      (then_block 
                        (statement 
                          (lprint_using_statement LPRINT USING 
                            (expr 
                              (variable_or_function_call u1$)) ; 
                            (print_argument 
                              (expr 
                                (variable_or_function_call account 
                                  ( 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call assetIndex 
                                            ( 
                                              (argument_list 
                                                (argument 
                                                  (expr 
                                                    (variable_or_function_call a)))) ))))) ) . Title)) ;) 
                            (print_argument 
                              (expr 
                                (variable_or_function_call CVD 
                                  ( 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call IoBalance$)))) )))))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call assetTotal#) = 
                            (expr 
                              (expr 
                                (variable_or_function_call assetTotal#)) + 
                              (expr 
                                (variable_or_function_call CVD 
                                  ( 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call IoBalance$)))) )))))) \n) 
                      (end_if_statement END IF)) \n 
                    (statement 
                      (close_statement CLOSE # 
                        (expr 
                          (literal 1)))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call a) = 
                        (expr 
                          (expr 
                            (variable_or_function_call a)) + 
                          (expr 
                            (literal 1))))) \n) WEND)) \n 
              (statement 
                (lprint_statement LPRINT 
                  (print_argument 
                    (expr 
                      (variable_or_function_call u2$))))) \n 
              (statement 
                (lprint_using_statement LPRINT USING 
                  (expr 
                    (variable_or_function_call u4$)) ; 
                  (print_argument 
                    (expr 
                      (literal "Total assets")) ;) 
                  (print_argument 
                    (expr 
                      (variable_or_function_call assetTotal#))))) \n 
              (statement 
                (lprint_statement LPRINT)) \n 
              (statement 
                (lprint_statement LPRINT)) \n 
              (statement 
                (lprint_using_statement LPRINT USING 
                  (expr 
                    (variable_or_function_call u0$)) ; 
                  (print_argument 
                    (expr 
                      (literal "LIABILITIES:"))))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call liabilityTotal#) = 
                  (expr 
                    (literal 0)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call a) = 
                  (expr 
                    (literal 1)))) \n 
              (statement 
                (while_wend_statement WHILE 
                  (expr 
                    (expr 
                      (variable_or_function_call a)) <= 
                    (expr 
                      (variable_or_function_call maxLiability))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call file$) = 
                        (expr 
                          (expr 
                            (literal "money.")) + 
                          (expr 
                            (variable_or_function_call Cvit$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call liabilityIndex 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (variable_or_function_call a)))) ))))) )))))) \n 
                    (statement 
                      (open_statement OPEN 
                        (expr 
                          (variable_or_function_call file$)) FOR 
                        (open_mode RANDOM) AS # 
                        (expr 
                          (literal 1)) LEN = 
                        (expr 
                          (literal 84)))) \n 
                    (statement 
                      (field_statement FIELD # 
                        (expr 
                          (literal 1)) , 
                        (field_assignment 
                          (expr 
                            (literal 11)) AS 
                          (variable_or_function_call valid$)) , 
                        (field_assignment 
                          (expr 
                            (literal 5)) AS 
                          (variable_or_function_call IoMaxRecord$)) , 
                        (field_assignment 
                          (expr 
                            (literal 8)) AS 
                          (variable_or_function_call IoBalance$)))) \n 
                    (statement 
                      (get_io_statement GET # 
                        (expr 
                          (literal 1)) , 
                        (expr 
                          (literal 1)))) \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call valid$)) = 
                        (expr 
                          (literal "THISISVALID"))) THEN \n 
                      (then_block 
                        (statement 
                          (lprint_using_statement LPRINT USING 
                            (expr 
                              (variable_or_function_call u1$)) ; 
                            (print_argument 
                              (expr 
                                (variable_or_function_call account 
                                  ( 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call liabilityIndex 
                                            ( 
                                              (argument_list 
                                                (argument 
                                                  (expr 
                                                    (variable_or_function_call a)))) ))))) ) . Title)) ;) 
                            (print_argument 
                              (expr 
                                (variable_or_function_call CVD 
                                  ( 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call IoBalance$)))) )))))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call liabilityTotal#) = 
                            (expr 
                              (expr 
                                (variable_or_function_call liabilityTotal#)) + 
                              (expr 
                                (variable_or_function_call CVD 
                                  ( 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call IoBalance$)))) )))))) \n) 
                      (end_if_statement END IF)) \n 
                    (statement 
                      (close_statement CLOSE # 
                        (expr 
                          (literal 1)))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call a) = 
                        (expr 
                          (expr 
                            (variable_or_function_call a)) + 
                          (expr 
                            (literal 1))))) \n) WEND)) \n 
              (statement 
                (lprint_statement LPRINT 
                  (print_argument 
                    (expr 
                      (variable_or_function_call u2$))))) \n 
              (statement 
                (lprint_using_statement LPRINT USING 
                  (expr 
                    (variable_or_function_call u4$)) ; 
                  (print_argument 
                    (expr 
                      (literal "Total liabilities")) ;) 
                  (print_argument 
                    (expr 
                      (variable_or_function_call liabilityTotal#))))) \n 
              (statement 
                (lprint_statement LPRINT)) \n \n 
              (statement 
                (lprint_statement LPRINT)) \n 
              (statement 
                (lprint_statement LPRINT 
                  (print_argument 
                    (expr 
                      (variable_or_function_call u3$))))) \n 
              (statement 
                (lprint_using_statement LPRINT USING 
                  (expr 
                    (variable_or_function_call u4$)) ; 
                  (print_argument 
                    (expr 
                      (literal "NET WORTH")) ;) 
                  (print_argument 
                    (expr 
                      (expr 
                        (variable_or_function_call assetTotal#)) - 
                      (expr 
                        (variable_or_function_call liabilityTotal#)))))) \n 
              (statement 
                (call_statement 
                  (untyped_id LCenter) 
                  (argument_list 
                    (argument 
                      (expr 
                        (literal "-------------------------------------------")))))) \n 
              (statement 
                (lprint_statement LPRINT)) : 
              (statement 
                (lprint_statement LPRINT)) : 
              (statement 
                (lprint_statement LPRINT)) \n) 
            (end_if_statement END IF)) \n 
          (statement 
            (on_error_statement ON ERROR GOTO 
              (target 
                (line_number 0)))) \n) 
        (end_if_statement END IF)) \n 
      (statement 
        (return_statement RETURN)) \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id PrintHelpLine) 
    ( 
      (parameter_list 
        (parameter help$)) ) 
    (block \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 5))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))) , 
          (expr 
            (variable_or_function_call colors 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 4))) , 
                  (argument 
                    (expr 
                      (variable_or_function_call ColorPref)))) ))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 25)) , 
          (expr 
            (literal 1)))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call SPACE$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (literal 80)))) ))) ;))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal 25))) , 
            (argument 
              (expr 
                (variable_or_function_call help$)))))) \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id SaveState) 
    (block \n 
      (statement 
        (open_statement OPEN 
          (expr 
            (literal "money.dat")) FOR 
          (open_mode OUTPUT) AS # 
          (expr 
            (literal 2)))) \n 
      (statement 
        (print_statement PRINT 
          (file_number # 
            (expr 
              (literal 2))) , 
          (print_argument 
            (expr 
              (variable_or_function_call ColorPref))))) \n \n 
      (statement 
        (for_next_statement FOR a = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 19)) 
          (block \n 
            (statement 
              (print_statement PRINT 
                (file_number # 
                  (expr 
                    (literal 2))) , 
                (print_argument 
                  (expr 
                    (variable_or_function_call account 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call a)))) ) . Title))))) \n 
            (statement 
              (print_statement PRINT 
                (file_number # 
                  (expr 
                    (literal 2))) , 
                (print_argument 
                  (expr 
                    (variable_or_function_call account 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call a)))) ) . AType))))) \n 
            (statement 
              (print_statement PRINT 
                (file_number # 
                  (expr 
                    (literal 2))) , 
                (print_argument 
                  (expr 
                    (variable_or_function_call account 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call a)))) ) . Desc))))) \n) NEXT a)) \n \n 
      (statement 
        (close_statement CLOSE # 
          (expr 
            (literal 2)))) \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id ScrollDown) 
    (block \n 
      (statement 
        (def_seg_statement DEF SEG = 
          (expr 
            (variable_or_function_call VARSEG 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call ScrollDownAsm 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (literal 1)))) ))))) ))))) \n 
      (statement 
        (call_absolute_statement CALL Absolute 
          ( 
            (expr 
              (variable_or_function_call VARPTR 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call ScrollDownAsm 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (literal 1)))) ))))) ))) ))) \n 
      (statement 
        (def_seg_statement DEF SEG)) \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id ScrollUp) 
    (block \n 
      (statement 
        (def_seg_statement DEF SEG = 
          (expr 
            (variable_or_function_call VARSEG 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call ScrollUpAsm 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (literal 1)))) ))))) ))))) \n 
      (statement 
        (call_absolute_statement CALL Absolute 
          ( 
            (expr 
              (variable_or_function_call VARPTR 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call ScrollUpAsm 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (literal 1)))) ))))) ))) ))) \n 
      (statement 
        (def_seg_statement DEF SEG)) \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id SparklePause) 
    (block \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 4)) , 
          (expr 
            (literal 0)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call a$) = 
          (expr 
            (literal "*    *    *    *    *    *    *    *    *    *    *    *    *    *    *    *    *    ")))) \n 
      (statement 
        (while_wend_statement WHILE 
          (expr 
            (expr 
              (variable_or_function_call INKEY$)) <> 
            (expr 
              (literal ""))) 
          (block :) WEND)) ' \n \n 
      (statement 
        (while_wend_statement WHILE 
          (expr 
            (expr 
              (variable_or_function_call INKEY$)) = 
            (expr 
              (literal ""))) 
          (block \n 
            (statement 
              (for_next_statement FOR a = 
                (expr 
                  (literal 1)) TO 
                (expr 
                  (literal 5)) 
                (block \n 
                  (statement 
                    (locate_statement LOCATE 
                      (expr 
                        (literal 1)) , 
                      (expr 
                        (literal 1)))) ' \n 
                  (statement 
                    (print_statement PRINT 
                      (print_argument 
                        (expr 
                          (builtin_function 
                            (mid_function MID$ 
                              ( 
                                (expr 
                                  (variable_or_function_call a$)) , 
                                (expr 
                                  (variable_or_function_call a)) , 
                                (expr 
                                  (literal 80)) )))) ;))) \n 
                  (statement 
                    (locate_statement LOCATE 
                      (expr 
                        (literal 22)) , 
                      (expr 
                        (literal 1)))) \n 
                  (statement 
                    (print_statement PRINT 
                      (print_argument 
                        (expr 
                          (builtin_function 
                            (mid_function MID$ 
                              ( 
                                (expr 
                                  (variable_or_function_call a$)) , 
                                (expr 
                                  (expr 
                                    (literal 6)) - 
                                  (expr 
                                    (variable_or_function_call a))) , 
                                (expr 
                                  (literal 80)) )))) ;))) \n \n 
                  (statement 
                    (for_next_statement FOR b = 
                      (expr 
                        (literal 2)) TO 
                      (expr 
                        (literal 21)) 
                      (block ' \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call c) = 
                            (expr 
                              (expr 
                                ( 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call a)) + 
                                    (expr 
                                      (variable_or_function_call b))) )) MOD 
                              (expr 
                                (literal 5))))) \n 
                        (if_block_statement IF 
                          (expr 
                            (expr 
                              (variable_or_function_call c)) = 
                            (expr 
                              (literal 1))) THEN \n 
                          (then_block 
                            (statement 
                              (locate_statement LOCATE 
                                (expr 
                                  (variable_or_function_call b)) , 
                                (expr 
                                  (literal 80)))) \n 
                            (statement 
                              (print_statement PRINT 
                                (print_argument 
                                  (expr 
                                    (literal "*")) ;))) \n 
                            (statement 
                              (locate_statement LOCATE 
                                (expr 
                                  (expr 
                                    (literal 23)) - 
                                  (expr 
                                    (variable_or_function_call b))) , 
                                (expr 
                                  (literal 1)))) \n 
                            (statement 
                              (print_statement PRINT 
                                (print_argument 
                                  (expr 
                                    (literal "*")) ;))) \n) 
                          (else_block_statement ELSE 
                            (else_block \n 
                              (statement 
                                (locate_statement LOCATE 
                                  (expr 
                                    (variable_or_function_call b)) , 
                                  (expr 
                                    (literal 80)))) \n 
                              (statement 
                                (print_statement PRINT 
                                  (print_argument 
                                    (expr 
                                      (literal " ")) ;))) \n 
                              (statement 
                                (locate_statement LOCATE 
                                  (expr 
                                    (expr 
                                      (literal 23)) - 
                                    (expr 
                                      (variable_or_function_call b))) , 
                                  (expr 
                                    (literal 1)))) \n 
                              (statement 
                                (print_statement PRINT 
                                  (print_argument 
                                    (expr 
                                      (literal " ")) ;))) \n)) 
                          (end_if_statement END IF)) \n) NEXT b)) \n) NEXT a)) \n) WEND)) \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id TransactionSummary) 
    ( 
      (parameter_list 
        (parameter item)) ) 
    (block \n 
      (statement 
        (call_statement 
          (untyped_id FancyCls) 
          (argument_list 
            (argument 
              (expr 
                (variable_or_function_call colors 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (literal 2))) , 
                      (argument 
                        (expr 
                          (variable_or_function_call ColorPref)))) )))) , 
            (argument 
              (expr 
                (variable_or_function_call colors 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (literal 1))) , 
                      (argument 
                        (expr 
                          (variable_or_function_call ColorPref)))) ))))))) \n 
      (statement 
        (call_statement 
          (untyped_id PrintHelpLine) 
          (argument_list 
            (argument 
              (expr 
                (literal "")))))) \n 
      (statement 
        (call_statement 
          (untyped_id Box) 
          (argument_list 
            (argument 
              (expr 
                (literal 8))) , 
            (argument 
              (expr 
                (literal 20))) , 
            (argument 
              (expr 
                (literal 14))) , 
            (argument 
              (expr 
                (literal 62)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal 10))) , 
            (argument 
              (expr 
                (literal "Prepare printer on LPT1 for report")))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal 12))) , 
            (argument 
              (expr 
                (literal "Hit <Enter> to print, or <Esc> to abort")))))) \n \n 
      (statement 
        (do_loop_statement DO 
          (block : 
            (statement 
              (assignment_statement 
                (variable_or_function_call Kbd$) = 
                (expr 
                  (variable_or_function_call INKEY$)))) :) LOOP 
          (loop_condition WHILE 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call Kbd$)) <> 
                (expr 
                  (variable_or_function_call CHR$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (literal 13)))) )))) AND 
              (expr 
                (expr 
                  (variable_or_function_call Kbd$)) <> 
                (expr 
                  (variable_or_function_call CHR$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (literal 27)))) )))))))) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call Kbd$)) = 
          (expr 
            (variable_or_function_call CHR$ 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 13)))) )))) THEN \n 
        (then_block 
          (statement 
            (call_statement 
              (untyped_id Box) 
              (argument_list 
                (argument 
                  (expr 
                    (literal 8))) , 
                (argument 
                  (expr 
                    (literal 20))) , 
                (argument 
                  (expr 
                    (literal 14))) , 
                (argument 
                  (expr 
                    (literal 62)))))) \n 
          (statement 
            (call_statement 
              (untyped_id Center) 
              (argument_list 
                (argument 
                  (expr 
                    (literal 11))) , 
                (argument 
                  (expr 
                    (literal "Printing report...")))))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call PrintErr) = 
              (expr 
                (variable_or_function_call FALSE)))) \n 
          (statement 
            (on_error_statement ON ERROR GOTO 
              (target 
                (text_label 
                  (untyped_id ErrorTrap))))) ' \n 
          (statement 
            (lprint_statement LPRINT)) \n 
          (if_block_statement IF 
            (expr 
              (expr 
                (variable_or_function_call PrintErr)) = 
              (expr 
                (variable_or_function_call FALSE))) THEN \n 
            (then_block 
              (statement 
                (print_statement PRINT)) \n 
              (statement 
                (lprint_statement LPRINT)) : 
              (statement 
                (lprint_statement LPRINT)) : 
              (statement 
                (lprint_statement LPRINT)) : 
              (statement 
                (lprint_statement LPRINT)) : 
              (statement 
                (lprint_statement LPRINT)) \n 
              (statement 
                (call_statement 
                  (untyped_id LCenter) 
                  (argument_list 
                    (argument 
                      (expr 
                        (literal "Q B a s i c")))))) \n 
              (statement 
                (call_statement 
                  (untyped_id LCenter) 
                  (argument_list 
                    (argument 
                      (expr 
                        (literal "M O N E Y   M A N A G E R")))))) \n 
              (statement 
                (lprint_statement LPRINT)) : 
              (statement 
                (lprint_statement LPRINT)) \n 
              (statement 
                (call_statement 
                  (untyped_id LCenter) 
                  (argument_list 
                    (argument 
                      (expr 
                        (expr 
                          (literal "Transaction summary: ")) + 
                        (expr 
                          (variable_or_function_call Trim$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (variable_or_function_call account 
                                      ( 
                                        (argument_list 
                                          (argument 
                                            (expr 
                                              (variable_or_function_call item)))) ) . Title)))) )))))))) \n 
              (statement 
                (call_statement 
                  (untyped_id LCenter) 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call DATE$)))))) \n 
              (statement 
                (lprint_statement LPRINT)) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call u5$) = 
                  (expr 
                    (literal "--------|------|------------------------|----------|----------|--------------")))) \n 
              (statement 
                (lprint_statement LPRINT 
                  (print_argument 
                    (expr 
                      (variable_or_function_call u5$))))) \n 
              (statement 
                (lprint_statement LPRINT 
                  (print_argument 
                    (expr 
                      (literal "  Date  | Ref# | Description            | Increase | Decrease |  Balance   "))))) \n 
              (statement 
                (lprint_statement LPRINT 
                  (print_argument 
                    (expr 
                      (variable_or_function_call u5$))))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call u0$) = 
                  (expr 
                    (literal "\      \|\    \|\                      \|")))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call u2$) = 
                  (expr 
                    (literal "###,###.##")))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call u3$) = 
                  (expr 
                    (literal "###,###,###.##")))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call u4$) = 
                  (expr 
                    (literal "          ")))) \n \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call file$) = 
                  (expr 
                    (expr 
                      (literal "money.")) + 
                    (expr 
                      (variable_or_function_call Cvit$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call item)))) )))))) \n 
              (statement 
                (open_statement OPEN 
                  (expr 
                    (variable_or_function_call file$)) FOR 
                  (open_mode RANDOM) AS # 
                  (expr 
                    (literal 1)) LEN = 
                  (expr 
                    (literal 84)))) \n 
              (statement 
                (field_statement FIELD # 
                  (expr 
                    (literal 1)) , 
                  (field_assignment 
                    (expr 
                      (literal 8)) AS 
                    (variable_or_function_call IoDate$)) , 
                  (field_assignment 
                    (expr 
                      (literal 10)) AS 
                    (variable_or_function_call IoRef$)) , 
                  (field_assignment 
                    (expr 
                      (literal 50)) AS 
                    (variable_or_function_call IoDesc$)) , 
                  (field_assignment 
                    (expr 
                      (literal 8)) AS 
                    (variable_or_function_call IoFig1$)) , 
                  (field_assignment 
                    (expr 
                      (literal 8)) AS 
                    (variable_or_function_call IoFig2$)))) \n 
              (statement 
                (field_statement FIELD # 
                  (expr 
                    (literal 1)) , 
                  (field_assignment 
                    (expr 
                      (literal 11)) AS 
                    (variable_or_function_call valid$)) , 
                  (field_assignment 
                    (expr 
                      (literal 5)) AS 
                    (variable_or_function_call IoMaxRecord$)) , 
                  (field_assignment 
                    (expr 
                      (literal 8)) AS 
                    (variable_or_function_call IoBalance$)))) \n 
              (statement 
                (get_io_statement GET # 
                  (expr 
                    (literal 1)) , 
                  (expr 
                    (literal 1)))) \n 
              (if_block_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call valid$)) = 
                  (expr 
                    (literal "THISISVALID"))) THEN \n 
                (then_block 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Balance#) = 
                      (expr 
                        (literal 0)))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call MaxRecord) = 
                      (expr 
                        (variable_or_function_call VAL 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call IoMaxRecord$)))) ))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call CurrRecord) = 
                      (expr 
                        (literal 1)))) \n 
                  (statement 
                    (while_wend_statement WHILE 
                      (expr 
                        (expr 
                          (variable_or_function_call CurrRecord)) <= 
                        (expr 
                          (variable_or_function_call MaxRecord))) 
                      (block \n \n 
                        (statement 
                          (get_io_statement GET # 
                            (expr 
                              (literal 1)) , 
                            (expr 
                              (expr 
                                (variable_or_function_call CurrRecord)) + 
                              (expr 
                                (literal 1))))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Fig1#) = 
                            (expr 
                              (variable_or_function_call CVD 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call IoFig1$)))) ))))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Fig2#) = 
                            (expr 
                              (variable_or_function_call CVD 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call IoFig2$)))) ))))) \n \n 
                        (statement 
                          (lprint_using_statement LPRINT USING 
                            (expr 
                              (variable_or_function_call u0$)) ; 
                            (print_argument 
                              (expr 
                                (variable_or_function_call IoDate$)) ;) 
                            (print_argument 
                              (expr 
                                (variable_or_function_call IoRef$)) ;) 
                            (print_argument 
                              (expr 
                                (variable_or_function_call IoDesc$)) ;))) \n 
                        (if_block_statement IF 
                          (expr 
                            (expr 
                              (expr 
                                (variable_or_function_call Fig2#)) = 
                              (expr 
                                (literal 0))) AND 
                            (expr 
                              (expr 
                                (variable_or_function_call Fig1#)) = 
                              (expr 
                                (literal 0)))) THEN \n 
                          (then_block 
                            (statement 
                              (lprint_using_statement LPRINT USING 
                                (expr 
                                  (expr 
                                    (expr 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call u4$)) + 
                                        (expr 
                                          (literal "|"))) + 
                                      (expr 
                                        (variable_or_function_call u4$))) + 
                                    (expr 
                                      (literal "|"))) + 
                                  (expr 
                                    (variable_or_function_call u3$))) ; 
                                (print_argument 
                                  (expr 
                                    (variable_or_function_call Balance#))))) \n) 
                          (elseif_block_statement ELSEIF 
                            (expr 
                              (expr 
                                (variable_or_function_call Fig2#)) = 
                              (expr 
                                (literal 0))) THEN 
                            (else_block \n 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call Balance#) = 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call Balance#)) + 
                                    (expr 
                                      (variable_or_function_call Fig1#))))) \n 
                              (statement 
                                (lprint_using_statement LPRINT USING 
                                  (expr 
                                    (expr 
                                      (expr 
                                        (expr 
                                          (expr 
                                            (variable_or_function_call u2$)) + 
                                          (expr 
                                            (literal "|"))) + 
                                        (expr 
                                          (variable_or_function_call u4$))) + 
                                      (expr 
                                        (literal "|"))) + 
                                    (expr 
                                      (variable_or_function_call u3$))) ; 
                                  (print_argument 
                                    (expr 
                                      (variable_or_function_call Fig1#)) ;) 
                                  (print_argument 
                                    (expr 
                                      (variable_or_function_call Balance#))))) \n)) 
                          (else_block_statement ELSE 
                            (else_block \n 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call Balance#) = 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call Balance#)) - 
                                    (expr 
                                      (variable_or_function_call Fig2#))))) \n 
                              (statement 
                                (lprint_using_statement LPRINT USING 
                                  (expr 
                                    (expr 
                                      (expr 
                                        (expr 
                                          (expr 
                                            (variable_or_function_call u4$)) + 
                                          (expr 
                                            (literal "|"))) + 
                                        (expr 
                                          (variable_or_function_call u2$))) + 
                                      (expr 
                                        (literal "|"))) + 
                                    (expr 
                                      (variable_or_function_call u3$))) ; 
                                  (print_argument 
                                    (expr 
                                      (variable_or_function_call Fig2#)) ;) 
                                  (print_argument 
                                    (expr 
                                      (variable_or_function_call Balance#))))) \n)) 
                          (end_if_statement END IF)) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call CurrRecord) = 
                            (expr 
                              (expr 
                                (variable_or_function_call CurrRecord)) + 
                              (expr 
                                (literal 1))))) \n) WEND)) \n 
                  (statement 
                    (lprint_statement LPRINT 
                      (print_argument 
                        (expr 
                          (variable_or_function_call u5$))))) \n 
                  (statement 
                    (lprint_statement LPRINT)) : 
                  (statement 
                    (lprint_statement LPRINT)) \n) 
                (end_if_statement END IF)) \n 
              (statement 
                (on_error_statement ON ERROR GOTO 
                  (target 
                    (line_number 0)))) \n) 
            (end_if_statement END IF)) \n 
          (statement 
            (close_statement CLOSE)) \n) 
        (end_if_statement END IF)) \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n 
  (function_statement FUNCTION Trim$ 
    ( 
      (parameter_list 
        (parameter X$)) ) 
    (block \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call X$)) = 
          (expr 
            (literal ""))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call Trim$) = 
              (expr 
                (literal "")))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call lastChar) = 
                (expr 
                  (literal 0)))) \n 
            (statement 
              (for_next_statement FOR a = 
                (expr 
                  (literal 1)) TO 
                (expr 
                  (builtin_function LEN 
                    ( 
                      (expr 
                        (variable_or_function_call X$)) ))) 
                (block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call y$) = 
                      (expr 
                        (builtin_function 
                          (mid_function MID$ 
                            ( 
                              (expr 
                                (variable_or_function_call X$)) , 
                              (expr 
                                (variable_or_function_call a)) , 
                              (expr 
                                (literal 1)) )))))) \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call y$)) <> 
                        (expr 
                          (variable_or_function_call CHR$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 0)))) )))) AND 
                      (expr 
                        (expr 
                          (variable_or_function_call y$)) <> 
                        (expr 
                          (literal " ")))) THEN \n 
                    (then_block 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call lastChar) = 
                          (expr 
                            (variable_or_function_call a)))) \n) 
                    (end_if_statement END IF)) \n) NEXT a)) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Trim$) = 
                (expr 
                  (variable_or_function_call LEFT$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call X$))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call lastChar)))) ))))) \n)) 
        (end_if_statement END IF)) \n \n) 
    (end_function_statement END FUNCTION)) \n <EOF>)
