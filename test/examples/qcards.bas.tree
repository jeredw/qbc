(program 
  (declare_sub_statement DECLARE SUB 
    (untyped_id DirectionKey) 
    ( 
      (declare_parameter_list 
        (declare_parameter Choice$) , 
        (declare_parameter TopCard%) , 
        (declare_parameter LastCard%)) )) \n 
  (declare_sub_statement DECLARE SUB 
    (untyped_id Alarm) 
    ( )) \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n \n ' \n \n ' \n \n 
  (statement 
    (deftype_statement DEFINT 
      (letter_range A - Z))) ' \n \n ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment SPACE = 
        (const_expr 
          (expr 
            (literal 32)))) , 
      (const_assignment ESC = 
        (const_expr 
          (expr 
            (literal 27)))) , 
      (const_assignment ENTER = 
        (const_expr 
          (expr 
            (literal 13)))) , 
      (const_assignment TABKEY = 
        (const_expr 
          (expr 
            (literal 9)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment DOWN = 
        (const_expr 
          (expr 
            (literal 80)))) , 
      (const_assignment UP = 
        (const_expr 
          (expr 
            (literal 72)))) , 
      (const_assignment LEFT = 
        (const_expr 
          (expr 
            (literal 75)))) , 
      (const_assignment RIGHT = 
        (const_expr 
          (expr 
            (literal 77)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment HOME = 
        (const_expr 
          (expr 
            (literal 71)))) , 
      (const_assignment ENDK = 
        (const_expr 
          (expr 
            (literal 79)))) , 
      (const_assignment PGDN = 
        (const_expr 
          (expr 
            (literal 81)))) , 
      (const_assignment PGUP = 
        (const_expr 
          (expr 
            (literal 73)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment INS = 
        (const_expr 
          (expr 
            (literal 82)))) , 
      (const_assignment DEL = 
        (const_expr 
          (expr 
            (literal 83)))) , 
      (const_assignment NULL = 
        (const_expr 
          (expr 
            (literal 0)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment CTRLD = 
        (const_expr 
          (expr 
            (literal 4)))) , 
      (const_assignment CTRLG = 
        (const_expr 
          (expr 
            (literal 7)))) , 
      (const_assignment CTRLH = 
        (const_expr 
          (expr 
            (literal 8)))) , 
      (const_assignment CTRLS = 
        (const_expr 
          (expr 
            (literal 19)))) , 
      (const_assignment CTRLV = 
        (const_expr 
          (expr 
            (literal 22)))))) \n \n ' \n ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment BLACK = 
        (const_expr 
          (expr 
            (literal 0)))) , 
      (const_assignment BLUE = 
        (const_expr 
          (expr 
            (literal 1)))) , 
      (const_assignment GREEN = 
        (const_expr 
          (expr 
            (literal 2)))) , 
      (const_assignment CYAN = 
        (const_expr 
          (expr 
            (literal 3)))) , 
      (const_assignment RED = 
        (const_expr 
          (expr 
            (literal 4)))) , 
      (const_assignment MAGENTA = 
        (const_expr 
          (expr 
            (literal 5)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment YELLOW = 
        (const_expr 
          (expr 
            (literal 6)))) , 
      (const_assignment WHITE = 
        (const_expr 
          (expr 
            (literal 7)))) , 
      (const_assignment BRIGHT = 
        (const_expr 
          (expr 
            (literal 8)))))) \n \n ' \n ' \n ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment BACKGROUND = 
        (const_expr 
          (expr 
            (variable_or_function_call BLACK)))) , 
      (const_assignment NORMAL = 
        (const_expr 
          (expr 
            (variable_or_function_call WHITE)))) , 
      (const_assignment HILITE = 
        (const_expr 
          (expr 
            (expr 
              (variable_or_function_call WHITE)) + 
            (expr 
              (variable_or_function_call BRIGHT))))))) \n ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment CNORMAL = 
        (const_expr 
          (expr 
            (literal 0)))) , 
      (const_assignment CHILITE = 
        (const_expr 
          (expr 
            (literal 1)))))) \n \n ' \n ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment HELPTOP = 
        (const_expr 
          (expr 
            (literal 15)))) , 
      (const_assignment HELPBOT = 
        (const_expr 
          (expr 
            (literal 23)))) , 
      (const_assignment HELPLEFT = 
        (const_expr 
          (expr 
            (literal 60)))) , 
      (const_assignment HELPWID = 
        (const_expr 
          (expr 
            (literal 20)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment CARDSPERSCREEN = 
        (const_expr 
          (expr 
            (literal 7)))) , 
      (const_assignment LASTROW = 
        (const_expr 
          (expr 
            (literal 25)))))) \n \n ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment FALSE = 
        (const_expr 
          (expr 
            (literal 0)))) , 
      (const_assignment TRUE = 
        (const_expr 
          (expr NOT 
            (expr 
              (variable_or_function_call FALSE))))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment CURSORON = 
        (const_expr 
          (expr 
            (literal 1)))) , 
      (const_assignment CURSOROFF = 
        (const_expr 
          (expr 
            (literal 0)))))) \n \n ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment TMPFILE$ = 
        (const_expr 
          (expr 
            (literal "$$$87y$.$5$")))))) ' \n \n ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment NPERSON = 
        (const_expr 
          (expr 
            (literal 0)))) , 
      (const_assignment NNOTE = 
        (const_expr 
          (expr 
            (literal 1)))) , 
      (const_assignment NMONTH = 
        (const_expr 
          (expr 
            (literal 2)))) , 
      (const_assignment NDAY = 
        (const_expr 
          (expr 
            (literal 3)))) , 
      (const_assignment NYEAR = 
        (const_expr 
          (expr 
            (literal 4)))) , 
      (const_assignment NPHONE = 
        (const_expr 
          (expr 
            (literal 5)))))) \n 
  (statement 
    (const_statement CONST 
      (const_assignment NSTREET = 
        (const_expr 
          (expr 
            (literal 6)))) , 
      (const_assignment NCITY = 
        (const_expr 
          (expr 
            (literal 7)))) , 
      (const_assignment NSTATE = 
        (const_expr 
          (expr 
            (literal 8)))) , 
      (const_assignment NZIP = 
        (const_expr 
          (expr 
            (literal 9)))) , 
      (const_assignment NFIELDS = 
        (const_expr 
          (expr 
            (expr 
              (variable_or_function_call NZIP)) + 
            (expr 
              (literal 1))))))) \n \n ' \n 
  (type_statement TYPE 
    (untyped_id Person) \n 
    (type_element 
      (untyped_id CardNum) AS 
      (type_name_for_type_element INTEGER) ' \n) 
    (type_element 
      (untyped_id Names) AS 
      (type_name_for_type_element 
        (fixed_string STRING * 37)) ' \n) 
    (type_element 
      (untyped_id Note) AS 
      (type_name_for_type_element 
        (fixed_string STRING * 31)) ' \n) 
    (type_element 
      (untyped_id Month) AS 
      (type_name_for_type_element INTEGER) ' \n) 
    (type_element 
      (untyped_id Day) AS 
      (type_name_for_type_element INTEGER) ' \n) 
    (type_element 
      (untyped_id Year) AS 
      (type_name_for_type_element INTEGER) ' \n) 
    (type_element 
      (untyped_id Phone) AS 
      (type_name_for_type_element 
        (fixed_string STRING * 12)) ' \n) 
    (type_element 
      (untyped_id Street) AS 
      (type_name_for_type_element 
        (fixed_string STRING * 29)) ' \n) 
    (type_element 
      (untyped_id City) AS 
      (type_name_for_type_element 
        (fixed_string STRING * 13)) ' \n) 
    (type_element 
      (untyped_id State) AS 
      (type_name_for_type_element 
        (fixed_string STRING * 2)) ' \n) 
    (type_element 
      (untyped_id Zip) AS 
      (type_name_for_type_element 
        (fixed_string STRING * 5)) ' \n) END TYPE) \n \n ' \n \n ' \n \n 
  (declare_sub_statement DECLARE SUB 
    (untyped_id AsciiKey) 
    ( 
      (declare_parameter_list 
        (declare_parameter Choice$) , 
        (declare_parameter TopCard%) , 
        (declare_parameter LastCard%)) )) \n 
  (declare_sub_statement DECLARE SUB 
    (untyped_id CleanUp) 
    ( 
      (declare_parameter_list 
        (declare_parameter LastCard%)) )) \n 
  (declare_sub_statement DECLARE SUB 
    (untyped_id ClearHelp) 
    ( )) \n 
  (declare_sub_statement DECLARE SUB 
    (untyped_id DrawCards) 
    ( )) \n 
  (declare_sub_statement DECLARE SUB 
    (untyped_id EditCard) 
    ( 
      (declare_parameter_list 
        (declare_parameter 
          (untyped_id Card) AS 
          (type_name_for_declare_parameter 
            (untyped_id Person)))) )) \n 
  (declare_sub_statement DECLARE SUB 
    (untyped_id InitIndex) 
    ( 
      (declare_parameter_list 
        (declare_parameter LastCard%)) )) \n 
  (declare_sub_statement DECLARE SUB 
    (untyped_id PrintLabel) 
    ( 
      (declare_parameter_list 
        (declare_parameter 
          (untyped_id Card) AS 
          (type_name_for_declare_parameter 
            (untyped_id Person)))) )) \n 
  (declare_sub_statement DECLARE SUB 
    (untyped_id SortIndex) 
    ( 
      (declare_parameter_list 
        (declare_parameter SortField%) , 
        (declare_parameter LastCard%)) )) \n 
  (declare_sub_statement DECLARE SUB 
    (untyped_id ShowViewHelp) 
    ( )) \n 
  (declare_sub_statement DECLARE SUB 
    (untyped_id ShowTopCard) 
    ( 
      (declare_parameter_list 
        (declare_parameter 
          (untyped_id WorkCard) AS 
          (type_name_for_declare_parameter 
            (untyped_id Person)))) )) \n 
  (declare_sub_statement DECLARE SUB 
    (untyped_id ShowEditHelp) 
    ( )) \n 
  (declare_sub_statement DECLARE SUB 
    (untyped_id ShowCmdLine) 
    ( )) \n 
  (declare_sub_statement DECLARE SUB 
    (untyped_id ShowCards) 
    ( 
      (declare_parameter_list 
        (declare_parameter TopCard%) , 
        (declare_parameter LastCard%)) )) \n \n ' \n 
  (declare_function_statement DECLARE FUNCTION EditString$ 
    ( 
      (declare_parameter_list 
        (declare_parameter InString$) , 
        (declare_parameter Length%) , 
        (declare_parameter NextField%)) )) \n 
  (declare_function_statement DECLARE FUNCTION FindCard% 
    ( 
      (declare_parameter_list 
        (declare_parameter TopCard%) , 
        (declare_parameter LastCard%)) )) \n 
  (declare_function_statement DECLARE FUNCTION Prompt$ 
    ( 
      (declare_parameter_list 
        (declare_parameter Msg$) , 
        (declare_parameter Row%) , 
        (declare_parameter Column%) , 
        (declare_parameter Length%)) )) \n 
  (declare_function_statement DECLARE FUNCTION SelectField% 
    ( )) \n \n ' \n \n ' \n 
  (statement 
    (dim_statement REDIM SHARED 
      (dim_variable 
        (untyped_id Index) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1))) )) AS 
        (type_name 
          (untyped_id Person))))) \n \n ' \n 
  (statement 
    (dim_statement DIM 
      (dim_variable 
        (untyped_id Card) AS 
        (type_name 
          (untyped_id Person))))) \n \n ' \n \n ' \n \n ' \n 
  (statement 
    (open_statement OPEN 
      (expr 
        (literal "QCARDS.DAT")) FOR 
      (open_mode RANDOM) AS # 
      (expr 
        (literal 1)) LEN = 
      (expr 
        (builtin_function 
          (len_function LEN 
            ( 
              (expr 
                (variable_or_function_call Card)) )))))) \n \n \n ' \n ' \n ' \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call LastCard) = 
      (expr 
        (expr 
          (variable_or_function_call LOF 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (literal 1)))) ))) \ 
        (expr 
          (builtin_function 
            (len_function LEN 
              ( 
                (expr 
                  (variable_or_function_call Card)) ))))))) \n \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (statement 
    (on_error_statement ON ERROR GOTO 
      (target 
        (text_label 
          (untyped_id MemoryErr))))) \n 
  (statement 
    (dim_statement REDIM SHARED 
      (dim_variable 
        (untyped_id Index) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (expr 
                  (variable_or_function_call LastCard)) + 
                (expr 
                  (literal 20)))) )) AS 
        (type_name 
          (untyped_id Person))))) \n 
  (statement 
    (on_error_statement ON ERROR GOTO 
      (target 
        (line_number 0)))) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (if_block_statement IF 
    (expr 
      (expr 
        (variable_or_function_call LastCard)) <> 
      (expr 
        (literal 0))) THEN \n 
    (then_block 
      (statement 
        (call_statement CALL 
          (untyped_id InitIndex) 
          ( 
            (argument_list 
              (argument 
                (expr 
                  (variable_or_function_call LastCard)))) ))) \n) 
    (else_block_statement ELSE 
      (else_block \n 
        (statement 
          (assignment_statement 
            (variable_or_function_call Card.CardNum) = 
            (expr 
              (literal 1)))) \n 
        (statement 
          (assignment_statement 
            (variable_or_function_call Index 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 1)))) )) = 
            (expr 
              (variable_or_function_call Card)))) \n 
        (statement 
          (put_io_statement PUT # 
            (expr 
              (literal 1)) , 
            (expr 
              (literal 1)) , 
            (variable_or_function_call Card))) \n)) 
    (end_if_statement END IF)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (statement 
    (call_statement CALL 
      (untyped_id DrawCards))) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call TopCard) = 
      (expr 
        (literal 1)))) \n 
  (statement 
    (call_statement CALL 
      (untyped_id ShowCards) 
      ( 
        (argument_list 
          (argument 
            (expr 
              (variable_or_function_call TopCard))) , 
          (argument 
            (expr 
              (variable_or_function_call LastCard)))) ))) \n \n \n ' \n ' \n ' \n ' \n ' \n 
  (statement 
    (do_loop_statement DO 
      (block \n \n \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
        (statement 
          (do_loop_statement DO 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Choice$) = 
                  (expr 
                    (variable_or_function_call INKEY$)))) \n) LOOP 
            (loop_condition WHILE 
              (expr 
                (expr 
                  (variable_or_function_call Choice$)) = 
                (expr 
                  (literal "")))))) \n \n \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
        (if_block_statement IF 
          (expr 
            (expr 
              (builtin_function 
                (len_function LEN 
                  ( 
                    (expr 
                      (variable_or_function_call Choice$)) )))) = 
            (expr 
              (literal 1))) THEN \n 
          (then_block 
            (statement 
              (call_statement CALL 
                (untyped_id AsciiKey) 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call Choice$))) , 
                    (argument 
                      (expr 
                        (variable_or_function_call TopCard))) , 
                    (argument 
                      (expr 
                        (variable_or_function_call LastCard)))) ))) \n) 
          (else_block_statement ELSE 
            (else_block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Choice$) = 
                  (expr 
                    (variable_or_function_call RIGHT$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call Choice$))) , 
                          (argument 
                            (expr 
                              (literal 1)))) ))))) \n 
              (statement 
                (call_statement CALL 
                  (untyped_id DirectionKey) 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Choice$))) , 
                      (argument 
                        (expr 
                          (variable_or_function_call TopCard))) , 
                      (argument 
                        (expr 
                          (variable_or_function_call LastCard)))) ))) \n)) 
          (end_if_statement END IF)) \n \n \n ' \n ' \n 
        (statement 
          (if_inline_statement IF 
            (expr 
              (expr 
                (variable_or_function_call TopCard)) < 
              (expr 
                (literal 1))) THEN 
            (if_inline_action 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TopCard) = 
                  (expr 
                    (expr 
                      (variable_or_function_call LastCard)) + 
                    (expr 
                      (variable_or_function_call TopCard)))))))) \n 
        (statement 
          (if_inline_statement IF 
            (expr 
              (expr 
                (variable_or_function_call TopCard)) > 
              (expr 
                (variable_or_function_call LastCard))) THEN 
            (if_inline_action 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TopCard) = 
                  (expr 
                    (expr 
                      (variable_or_function_call TopCard)) - 
                    (expr 
                      (variable_or_function_call LastCard)))))))) \n 
        (statement 
          (if_inline_statement IF 
            (expr 
              (expr 
                (variable_or_function_call TopCard)) <= 
              (expr 
                (literal 0))) THEN 
            (if_inline_action 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TopCard) = 
                  (expr 
                    (literal 1))))))) \n 
        (statement 
          (call_statement CALL 
            (untyped_id ShowCards) 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (variable_or_function_call TopCard))) , 
                (argument 
                  (expr 
                    (variable_or_function_call LastCard)))) ))) \n \n \n ' \n) LOOP)) \n \n 
  (statement 
    (end_statement END)) \n \n ' \n ' \n ' \n ' \n ' \n \n ' \n \n 
  (label 
    (text_label 
      (untyped_id MemoryErr)) :) \n 
  (statement 
    (print_statement PRINT 
      (print_argument 
        (expr 
          (literal "Not enough memory. Can't read file."))))) \n 
  (statement 
    (end_statement END)) \n \n ' \n ' \n \n 
  (label 
    (text_label 
      (untyped_id CardScreen)) :) \n 
  (statement 
    (data_statement DATA 
      (data_item "                  ┌───────────────────────────────────────┐"))) \n 
  (statement 
    (data_statement DATA 
      (data_item "                  │                                       │"))) \n 
  (statement 
    (data_statement DATA 
      (data_item "               ┌──┴────────────────────────────────────┬══╡"))) \n 
  (statement 
    (data_statement DATA 
      (data_item "               │                                       │  │"))) \n 
  (statement 
    (data_statement DATA 
      (data_item "            ┌──┴────────────────────────────────────┬══╡  │"))) \n 
  (statement 
    (data_statement DATA 
      (data_item "            │                                       │  │  │"))) \n 
  (statement 
    (data_statement DATA 
      (data_item "         ┌──┴────────────────────────────────────┬══╡  │  │"))) \n 
  (statement 
    (data_statement DATA 
      (data_item "         │                                       │  │  │  │"))) \n 
  (statement 
    (data_statement DATA 
      (data_item "      ┌──┴────────────────────────────────────┬══╡  │  │  │"))) \n 
  (statement 
    (data_statement DATA 
      (data_item "      │                                       │  │  │  │  │"))) \n 
  (statement 
    (data_statement DATA 
      (data_item "   ┌──┴────────────────────────────────────┬══╡  │  │  ├──┘"))) \n 
  (statement 
    (data_statement DATA 
      (data_item "   │                                       │  │  │  │  │"))) \n 
  (statement 
    (data_statement DATA 
      (data_item "┌──┴────────────────────────────────────┬══╡  │  │  ├──┘"))) \n 
  (statement 
    (data_statement DATA 
      (data_item "│ _____________________________________ │  │  │  │  │"))) \n 
  (statement 
    (data_statement DATA 
      (data_item "╞═══════════════════════════════════════╡  │  │  ├──┘"))) \n 
  (statement 
    (data_statement DATA 
      (data_item "│ Note: _______________________________ │  │  │  │"))) \n 
  (statement 
    (data_statement DATA 
      (data_item "│                                       │  │  ├──┘"))) \n 
  (statement 
    (data_statement DATA 
      (data_item "│ Birth: __/__/__   Phone: ___-___-____ │  │  │"))) \n 
  (statement 
    (data_statement DATA 
      (data_item "│                                       │  ├──┘"))) \n 
  (statement 
    (data_statement DATA 
      (data_item "│ Street: _____________________________ │  │"))) \n 
  (statement 
    (data_statement DATA 
      (data_item "│                                       ├──┘"))) \n 
  (statement 
    (data_statement DATA 
      (data_item "│ City: ____________ ST: __  Zip: _____ │"))) \n 
  (statement 
    (data_statement DATA 
      (data_item "└───────────────────────────────────────┘"))) \n \n ' \n \n 
  (label 
    (text_label 
      (untyped_id ViewHelp)) :) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item "Select card with:"))) \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item "      UP"))) \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item "      DOWN"))) \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item "      PGUP"))) \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item "      PGDN"))) \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item "      HOME"))) \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item "      END"))) \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item ""))) \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item ""))) \n \n ' \n \n 
  (label 
    (text_label 
      (untyped_id EditHelp)) :) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item "Next field:"))) \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item "      TAB"))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item "Accept card:"))) \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item "      ENTER"))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item "Edit field:"))) \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item "      DEL     BKSP"))) \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item "      RIGHT   LEFT"))) \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item "      HOME    END"))) \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item "      INS     ESC"))) \n \n ' \n \n 
  (label 
    (text_label 
      (untyped_id FieldPositions)) :) \n 
  (statement 
    (data_statement DATA 
      (data_item 14) , 
      (data_item 6) , 
      (data_item 37))) : ' \n 
  (statement 
    (data_statement DATA 
      (data_item 16) , 
      (data_item 12) , 
      (data_item 31))) : ' \n 
  (statement 
    (data_statement DATA 
      (data_item 18) , 
      (data_item 13) , 
      (data_item 2))) : ' \n 
  (statement 
    (data_statement DATA 
      (data_item 18) , 
      (data_item 16) , 
      (data_item 2))) : ' \n 
  (statement 
    (data_statement DATA 
      (data_item 18) , 
      (data_item 19) , 
      (data_item 2))) : ' \n 
  (statement 
    (data_statement DATA 
      (data_item 18) , 
      (data_item 31) , 
      (data_item 12))) : ' \n 
  (statement 
    (data_statement DATA 
      (data_item 20) , 
      (data_item 14) , 
      (data_item 29))) : ' \n 
  (statement 
    (data_statement DATA 
      (data_item 22) , 
      (data_item 12) , 
      (data_item 13))) : ' \n 
  (statement 
    (data_statement DATA 
      (data_item 22) , 
      (data_item 29) , 
      (data_item 2))) : ' \n 
  (statement 
    (data_statement DATA 
      (data_item 22) , 
      (data_item 38) , 
      (data_item 5))) : ' \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0))) \n \n 
  (sub_statement SUB 
    (untyped_id Alarm) 
    (block \n 
      (statement 
        (for_next_statement FOR Tone = 
          (expr 
            (literal 600)) TO 
          (expr 
            (literal 2000)) STEP 
          (expr 
            (literal 40)) 
          (block \n 
            (statement 
              (call_statement 
                (untyped_id SOUND) 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call Tone))) , 
                  (argument 
                    (expr 
                      (expr 
                        (variable_or_function_call Tone)) / 
                      (expr 
                        (literal 7000))))))) \n) NEXT Tone)) \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id AsciiKey) 
    ( 
      (parameter_list 
        (parameter UserChoice$) , 
        (parameter TopCard%) , 
        (parameter LastCard%)) ) 
    (block \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id WorkCard) AS 
            (type_name 
              (untyped_id Person))))) \n \n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call UserChoice$)) 
          (before_first_case \n ' \n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal "e")))) 
            (block \n 
              (statement 
                (call_statement CALL 
                  (untyped_id ShowEditHelp))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Tmp$) = 
                  (expr 
                    (variable_or_function_call Prompt$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (literal "Editing Card..."))) , 
                          (argument 
                            (expr 
                              (variable_or_function_call LASTROW))) , 
                          (argument 
                            (expr 
                              (literal 1))) , 
                          (argument 
                            (expr 
                              (literal 0)))) ))))) \n 
              (statement 
                (call_statement CALL 
                  (untyped_id EditCard) 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Index 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (variable_or_function_call TopCard)))) ))))) ))) \n 
              (statement 
                (put_io_statement PUT # 
                  (expr 
                    (literal 1)) , 
                  (expr 
                    (variable_or_function_call Index 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call TopCard)))) ) . CardNum)) , 
                  (variable_or_function_call Index 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call TopCard)))) )))) \n 
              (statement 
                (locate_statement LOCATE , , 
                  (expr 
                    (variable_or_function_call CURSOROFF)))) \n 
              (statement 
                (call_statement CALL 
                  (untyped_id ShowViewHelp))) \n \n ' \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal "a"))) , 
              (case_expr 
                (expr 
                  (literal "c")))) 
            (block \n 
              (if_block_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call UserChoice$)) = 
                  (expr 
                    (literal "c"))) THEN \n 
                (then_block 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call WorkCard) = 
                      (expr 
                        (variable_or_function_call Index 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call TopCard)))) ))))) ' \n) 
                (else_block_statement ELSE 
                  (else_block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call WorkCard.CardNum) = 
                        (expr 
                          (literal 0)))) ' \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call WorkCard.Names) = 
                        (expr 
                          (literal "")))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call WorkCard.Note) = 
                        (expr 
                          (literal "")))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call WorkCard.Month) = 
                        (expr 
                          (literal 0)))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call WorkCard.Day) = 
                        (expr 
                          (literal 0)))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call WorkCard.Year) = 
                        (expr 
                          (literal 0)))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call WorkCard.Phone) = 
                        (expr 
                          (literal "")))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call WorkCard.Street) = 
                        (expr 
                          (literal "")))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call WorkCard.City) = 
                        (expr 
                          (literal "")))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call WorkCard.State) = 
                        (expr 
                          (literal "")))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call WorkCard.Zip) = 
                        (expr 
                          (literal "")))) \n)) 
                (end_if_statement END IF)) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TopCard) = 
                  (expr 
                    (expr 
                      (variable_or_function_call LastCard)) + 
                    (expr 
                      (literal 1))))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call LastCard) = 
                  (expr 
                    (variable_or_function_call TopCard)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Index 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call TopCard)))) )) = 
                  (expr 
                    (variable_or_function_call WorkCard)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Index 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call TopCard)))) ) . CardNum) = 
                  (expr 
                    (variable_or_function_call TopCard)))) \n 
              (statement 
                (call_statement CALL 
                  (untyped_id ShowCards) 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call TopCard))) , 
                      (argument 
                        (expr 
                          (variable_or_function_call LastCard)))) ))) \n 
              (statement 
                (call_statement CALL 
                  (untyped_id ShowEditHelp))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Tmp$) = 
                  (expr 
                    (variable_or_function_call Prompt$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (literal "Editing Card..."))) , 
                          (argument 
                            (expr 
                              (variable_or_function_call LASTROW))) , 
                          (argument 
                            (expr 
                              (literal 1))) , 
                          (argument 
                            (expr 
                              (literal 0)))) ))))) \n 
              (statement 
                (call_statement CALL 
                  (untyped_id EditCard) 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Index 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (variable_or_function_call TopCard)))) ))))) ))) \n 
              (statement 
                (put_io_statement PUT # 
                  (expr 
                    (literal 1)) , 
                  (expr 
                    (variable_or_function_call Index 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call TopCard)))) ) . CardNum)) , 
                  (variable_or_function_call Index 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call TopCard)))) )))) \n 
              (statement 
                (locate_statement LOCATE , , 
                  (expr 
                    (variable_or_function_call CURSOROFF)))) \n 
              (statement 
                (call_statement CALL 
                  (untyped_id ShowViewHelp))) \n \n ' \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal "d")))) 
            (block \n 
              (statement 
                (for_next_statement FOR Card = 
                  (expr 
                    (variable_or_function_call TopCard)) TO 
                  (expr 
                    (expr 
                      (variable_or_function_call LastCard)) - 
                    (expr 
                      (literal 1))) 
                  (block \n 
                    (statement 
                      (swap_statement SWAP 
                        (variable_or_function_call Index 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (expr 
                                    (variable_or_function_call Card)) + 
                                  (expr 
                                    (literal 1))))) )) , 
                        (variable_or_function_call Index 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call Card)))) )))) \n) NEXT Card)) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call LastCard) = 
                  (expr 
                    (expr 
                      (variable_or_function_call LastCard)) - 
                    (expr 
                      (literal 1))))) \n \n ' \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal "f")))) 
            (block \n 
              (statement 
                (call_statement CALL 
                  (untyped_id ShowEditHelp))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Tmp$) = 
                  (expr 
                    (literal "Enter fields for search 
                      (blank fields are ignored)")))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Tmp$) = 
                  (expr 
                    (variable_or_function_call Prompt$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call Tmp$))) , 
                          (argument 
                            (expr 
                              (variable_or_function_call LASTROW))) , 
                          (argument 
                            (expr 
                              (literal 1))) , 
                          (argument 
                            (expr 
                              (literal 0)))) ))))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Card) = 
                  (expr 
                    (variable_or_function_call FindCard 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call TopCard))) , 
                          (argument 
                            (expr 
                              (variable_or_function_call LastCard)))) ))))) \n 
              (if_block_statement IF 
                (expr 
                  (variable_or_function_call Card)) THEN \n 
                (then_block 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call TopCard) = 
                      (expr 
                        (variable_or_function_call Card)))) \n) 
                (else_block_statement ELSE 
                  (else_block \n 
                    (statement 
                      (call_statement 
                        (untyped_id BEEP))) \n 
                    (statement 
                      (call_statement CALL 
                        (untyped_id ClearHelp))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Tmp$) = 
                        (expr 
                          (literal "Can't find card. Press any key...")))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Tmp$) = 
                        (expr 
                          (variable_or_function_call Prompt$ 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (variable_or_function_call Tmp$))) , 
                                (argument 
                                  (expr 
                                    (variable_or_function_call LASTROW))) , 
                                (argument 
                                  (expr 
                                    (literal 1))) , 
                                (argument 
                                  (expr 
                                    (literal 1)))) ))))) \n)) 
                (end_if_statement END IF)) \n 
              (statement 
                (locate_statement LOCATE , , 
                  (expr 
                    (variable_or_function_call CURSOROFF)))) \n 
              (statement 
                (call_statement CALL 
                  (untyped_id ShowViewHelp))) \n \n ' \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal "s")))) 
            (block \n 
              (statement 
                (call_statement CALL 
                  (untyped_id ClearHelp))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Tmp$) = 
                  (expr 
                    (literal "TAB to desired sort field, then press ENTER")))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Tmp$) = 
                  (expr 
                    (variable_or_function_call Prompt$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call Tmp$))) , 
                          (argument 
                            (expr 
                              (variable_or_function_call LASTROW))) , 
                          (argument 
                            (expr 
                              (literal 1))) , 
                          (argument 
                            (expr 
                              (literal 0)))) ))))) \n 
              (statement 
                (call_statement CALL 
                  (untyped_id SortIndex) 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call SelectField))) , 
                      (argument 
                        (expr 
                          (variable_or_function_call LastCard)))) ))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TopCard) = 
                  (expr 
                    (literal 1)))) \n 
              (statement 
                (call_statement CALL 
                  (untyped_id ShowViewHelp))) \n \n ' \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal "p")))) 
            (block \n 
              (statement 
                (call_statement CALL 
                  (untyped_id PrintLabel) 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Index 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (variable_or_function_call TopCard)))) ))))) ))) \n \n ' \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal "q"))) , 
              (case_expr 
                (expr 
                  (variable_or_function_call CHR$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call ESC)))) ))))) 
            (block \n 
              (statement 
                (call_statement CALL 
                  (untyped_id CleanUp) 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call LastCard)))) ))) \n 
              (statement 
                (locate_statement LOCATE , , 
                  (expr 
                    (variable_or_function_call CURSORON)))) \n 
              (statement 
                (call_statement 
                  (untyped_id CLS))) \n 
              (statement 
                (end_statement END)) \n)) 
          (case_block 
            (case_statement CASE ELSE) 
            (block \n 
              (statement 
                (call_statement 
                  (untyped_id BEEP))) \n)) 
          (end_select_statement END SELECT))) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id CleanUp) 
    ( 
      (parameter_list 
        (parameter LastCard)) ) 
    (block \n \n ' \n 
      (statement 
        (open_statement OPEN 
          (expr 
            (variable_or_function_call TMPFILE$)) FOR 
          (open_mode RANDOM) AS # 
          (expr 
            (literal 2)) LEN = 
          (expr 
            (builtin_function 
              (len_function LEN 
                ( 
                  (expr 
                    (variable_or_function_call Index 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (literal 1)))) ))) )))))) \n 
      (statement 
        (for_next_statement FOR Card = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call LastCard)) 
          (block \n 
            (statement 
              (put_io_statement PUT # 
                (expr 
                  (literal 2)) , 
                (expr 
                  (variable_or_function_call Card)) , 
                (variable_or_function_call Index 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Card)))) )))) \n) NEXT)) \n \n ' \n 
      (statement 
        (close_statement CLOSE)) \n 
      (statement 
        (call_statement 
          (untyped_id KILL) 
          (argument_list 
            (argument 
              (expr 
                (literal "QCARDS.DAT")))))) \n 
      (statement 
        (name_statement NAME 
          (expr 
            (variable_or_function_call TMPFILE$)) AS 
          (expr 
            (literal "QCARDS.DAT")))) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id ClearHelp) 
    (block \n \n ' \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call NORMAL)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) \n 
      (statement 
        (for_next_statement FOR Row = 
          (expr 
            (variable_or_function_call HELPTOP)) TO 
          (expr 
            (variable_or_function_call HELPBOT)) 
          (block \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call HELPLEFT)))) \n 
            (statement 
              (print_statement PRINT 
                (print_argument 
                  (expr 
                    (variable_or_function_call SPACE$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call HELPWID)))) )))))) \n) NEXT)) \n \n ' \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call LASTROW)) , 
          (expr 
            (literal 1)))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call SPACE$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (literal 80)))) ))) ;))) \n \n) 
    (end_sub_statement END SUB)) \n \n 
  (sub_statement SUB 
    (untyped_id DirectionKey) 
    ( 
      (parameter_list 
        (parameter Choice$) , 
        (parameter TopCard%) , 
        (parameter LastCard%)) ) 
    (block \n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call Choice$)) 
          (before_first_case \n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call CHR$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call DOWN)))) ))))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TopCard) = 
                  (expr 
                    (expr 
                      (variable_or_function_call TopCard)) - 
                    (expr 
                      (literal 1))))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call CHR$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call UP)))) ))))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TopCard) = 
                  (expr 
                    (expr 
                      (variable_or_function_call TopCard)) + 
                    (expr 
                      (literal 1))))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call CHR$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call PGDN)))) ))))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TopCard) = 
                  (expr 
                    (expr 
                      (variable_or_function_call TopCard)) - 
                    (expr 
                      (variable_or_function_call CARDSPERSCREEN))))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call CHR$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call PGUP)))) ))))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TopCard) = 
                  (expr 
                    (expr 
                      (variable_or_function_call TopCard)) + 
                    (expr 
                      (variable_or_function_call CARDSPERSCREEN))))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call CHR$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call HOME)))) ))))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TopCard) = 
                  (expr 
                    (variable_or_function_call LastCard)))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (variable_or_function_call CHR$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call ENDK)))) ))))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TopCard) = 
                  (expr 
                    (literal 1)))) \n)) 
          (case_block 
            (case_statement CASE ELSE) 
            (block \n 
              (statement 
                (call_statement CALL 
                  (untyped_id Alarm))) \n)) 
          (end_select_statement END SELECT))) \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id DrawCards) 
    (block \n \n ' \n 
      (statement 
        (width_statement WIDTH 
          (expr 
            (literal 80)) , 
          (expr 
            (variable_or_function_call LASTROW)))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call NORMAL)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n 
      (statement 
        (locate_statement LOCATE , , 
          (expr 
            (variable_or_function_call CURSOROFF)) , 
          (expr 
            (literal 0)) , 
          (expr 
            (literal 7)))) \n \n ' \n 
      (statement 
        (restore_statement RESTORE 
          (target 
            (text_label 
              (untyped_id CardScreen))))) \n 
      (statement 
        (for_next_statement FOR Row = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 23)) 
          (block \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (literal 4)))) \n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Tmp$))) \n 
            (statement 
              (print_statement PRINT 
                (print_argument 
                  (expr 
                    (variable_or_function_call Tmp$)) ;))) \n) NEXT)) \n \n ' \n 
      (statement 
        (call_statement CALL 
          (untyped_id ShowViewHelp))) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id EditCard) 
    ( 
      (parameter_list 
        (parameter 
          (untyped_id Card) AS 
          (type_name_for_parameter 
            (untyped_id Person)))) ) 
    (block \n \n ' \n ' \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call NextFlag) = 
          (expr 
            (variable_or_function_call TRUE)))) \n 
      (statement 
        (do_loop_statement DO 
          (block \n \n 
            (statement 
              (restore_statement RESTORE 
                (target 
                  (text_label 
                    (untyped_id FieldPositions))))) \n \n ' \n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Row) , 
                (variable_or_function_call Column) , 
                (variable_or_function_call Length))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \n ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Card.Names) = 
                (expr 
                  (variable_or_function_call EditString 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call RTRIM$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call Card.Names)))) )))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call Length))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call NextFlag)))) ))))) \n ' \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call NextFlag)) = 
                  (expr 
                    (variable_or_function_call FALSE))) THEN 
                (if_inline_action 
                  (statement 
                    (exit_statement EXIT SUB))))) \n \n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Row) , 
                (variable_or_function_call Column) , 
                (variable_or_function_call Length))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Card.Note) = 
                (expr 
                  (variable_or_function_call EditString 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call RTRIM$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call Card.Note)))) )))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call Length))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call NextFlag)))) ))))) \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call NextFlag)) = 
                  (expr 
                    (variable_or_function_call FALSE))) THEN 
                (if_inline_action 
                  (statement 
                    (exit_statement EXIT SUB))))) \n \n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Row) , 
                (variable_or_function_call Column) , 
                (variable_or_function_call Length))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \n ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Tmp$) = 
                (expr 
                  (variable_or_function_call LTRIM$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call STR$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call Card.Month)))) ))))) ))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Tmp$) = 
                (expr 
                  (variable_or_function_call EditString 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call Tmp$))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call Length))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call NextFlag)))) ))))) \n ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Card.Month) = 
                (expr 
                  (variable_or_function_call VAL 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call Tmp$)))) ))))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \n 
            (statement 
              (print_using_statement PRINT USING 
                (expr 
                  (literal "##_/")) ; 
                (print_argument 
                  (expr 
                    (variable_or_function_call Card.Month)) ;))) \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call NextFlag)) = 
                  (expr 
                    (variable_or_function_call FALSE))) THEN 
                (if_inline_action 
                  (statement 
                    (exit_statement EXIT SUB))))) \n \n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Row) , 
                (variable_or_function_call Column) , 
                (variable_or_function_call Length))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Tmp$) = 
                (expr 
                  (variable_or_function_call LTRIM$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call STR$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call Card.Day)))) ))))) ))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Tmp$) = 
                (expr 
                  (variable_or_function_call EditString 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call Tmp$))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call Length))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call NextFlag)))) ))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Card.Day) = 
                (expr 
                  (variable_or_function_call VAL 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call Tmp$)))) ))))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \n 
            (statement 
              (print_using_statement PRINT USING 
                (expr 
                  (literal "##_/")) ; 
                (print_argument 
                  (expr 
                    (variable_or_function_call Card.Day)) ;))) \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call NextFlag)) = 
                  (expr 
                    (variable_or_function_call FALSE))) THEN 
                (if_inline_action 
                  (statement 
                    (exit_statement EXIT SUB))))) \n \n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Row) , 
                (variable_or_function_call Column) , 
                (variable_or_function_call Length))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Tmp$) = 
                (expr 
                  (variable_or_function_call LTRIM$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call STR$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call Card.Year)))) ))))) ))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Tmp$) = 
                (expr 
                  (variable_or_function_call EditString 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call Tmp$))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call Length))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call NextFlag)))) ))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Card.Year) = 
                (expr 
                  (variable_or_function_call VAL 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call Tmp$)))) ))))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \n 
            (statement 
              (print_using_statement PRINT USING 
                (expr 
                  (literal "##")) ; 
                (print_argument 
                  (expr 
                    (variable_or_function_call Card.Year)) ;))) \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call NextFlag)) = 
                  (expr 
                    (variable_or_function_call FALSE))) THEN 
                (if_inline_action 
                  (statement 
                    (exit_statement EXIT SUB))))) \n \n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Row) , 
                (variable_or_function_call Column) , 
                (variable_or_function_call Length))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Card.Phone) = 
                (expr 
                  (variable_or_function_call EditString 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call RTRIM$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call Card.Phone)))) )))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call Length))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call NextFlag)))) ))))) \n 
            (statement 
              (rset_statement RSET 
                (variable_or_function_call Card.Phone) = 
                (expr 
                  (variable_or_function_call Card.Phone)))) \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call NextFlag)) = 
                  (expr 
                    (variable_or_function_call FALSE))) THEN 
                (if_inline_action 
                  (statement 
                    (exit_statement EXIT SUB))))) \n \n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Row) , 
                (variable_or_function_call Column) , 
                (variable_or_function_call Length))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Card.Street) = 
                (expr 
                  (variable_or_function_call EditString 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call RTRIM$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call Card.Street)))) )))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call Length))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call NextFlag)))) ))))) \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call NextFlag)) = 
                  (expr 
                    (variable_or_function_call FALSE))) THEN 
                (if_inline_action 
                  (statement 
                    (exit_statement EXIT SUB))))) \n \n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Row) , 
                (variable_or_function_call Column) , 
                (variable_or_function_call Length))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Card.City) = 
                (expr 
                  (variable_or_function_call EditString 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call RTRIM$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call Card.City)))) )))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call Length))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call NextFlag)))) ))))) \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call NextFlag)) = 
                  (expr 
                    (variable_or_function_call FALSE))) THEN 
                (if_inline_action 
                  (statement 
                    (exit_statement EXIT SUB))))) \n \n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Row) , 
                (variable_or_function_call Column) , 
                (variable_or_function_call Length))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Card.State) = 
                (expr 
                  (variable_or_function_call EditString 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call RTRIM$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call Card.State)))) )))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call Length))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call NextFlag)))) ))))) \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call NextFlag)) = 
                  (expr 
                    (variable_or_function_call FALSE))) THEN 
                (if_inline_action 
                  (statement 
                    (exit_statement EXIT SUB))))) \n \n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Row) , 
                (variable_or_function_call Column) , 
                (variable_or_function_call Length))) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Card.Zip) = 
                (expr 
                  (variable_or_function_call EditString 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call RTRIM$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call Card.Zip)))) )))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call Length))) , 
                        (argument 
                          (expr 
                            (variable_or_function_call NextFlag)))) ))))) \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call NextFlag)) = 
                  (expr 
                    (variable_or_function_call FALSE))) THEN 
                (if_inline_action 
                  (statement 
                    (exit_statement EXIT SUB))))) \n \n) LOOP)) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (function_statement FUNCTION EditString$ 
    ( 
      (parameter_list 
        (parameter InString$) , 
        (parameter Length) , 
        (parameter NextField)) ) 
    (block \n 
      (statement 
        (static_statement STATIC 
          (scope_variable Insert))) \n \n ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Work$) = 
          (expr 
            (variable_or_function_call InString$)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Row) = 
          (expr 
            (variable_or_function_call CSRLIN)))) : 
      (statement 
        (assignment_statement 
          (variable_or_function_call Column) = 
          (expr 
            (variable_or_function_call POS 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 0)))) ))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call FirstTime) = 
          (expr 
            (variable_or_function_call TRUE)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call P) = 
          (expr 
            (builtin_function 
              (len_function LEN 
                ( 
                  (expr 
                    (variable_or_function_call Work$)) )))))) : 
      (statement 
        (assignment_statement 
          (variable_or_function_call MaxP) = 
          (expr 
            (variable_or_function_call P)))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call SPACE$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call Length)))) ))) ;))) \n \n ' \n ' \n ' \n 
      (if_block_statement IF 
        (expr 
          (variable_or_function_call Insert)) THEN \n 
        (then_block 
          (statement 
            (locate_statement LOCATE 
              (expr 
                (variable_or_function_call Row)) , 
              (expr 
                (variable_or_function_call Column)) , 
              (expr 
                (variable_or_function_call CURSORON)) , 
              (expr 
                (literal 6)) , 
              (expr 
                (literal 7)))) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)) , 
                (expr 
                  (variable_or_function_call CURSORON)) , 
                (expr 
                  (literal 0)) , 
                (expr 
                  (literal 7)))) \n)) 
        (end_if_statement END IF)) \n \n ' \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call BACKGROUND)) , 
          (expr 
            (variable_or_function_call NORMAL)))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call Work$)) ;))) \n \n ' \n 
      (statement 
        (do_loop_statement DO 
          (block \n \n ' \n ' \n 
            (statement 
              (do_loop_statement DO 
                (block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Choice$) = 
                      (expr 
                        (variable_or_function_call INKEY$)))) \n) LOOP 
                (loop_condition WHILE 
                  (expr 
                    (expr 
                      (variable_or_function_call Choice$)) = 
                    (expr 
                      (literal "")))))) \n \n ' \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (builtin_function 
                    (len_function LEN 
                      ( 
                        (expr 
                          (variable_or_function_call Choice$)) )))) = 
                (expr 
                  (literal 2))) THEN \n 
              (then_block 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Choice$) = 
                    (expr 
                      (variable_or_function_call RIGHT$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call Choice$))) , 
                            (argument 
                              (expr 
                                (literal 1)))) ))))) \n 
                (statement 
                  (select_case_statement SELECT CASE 
                    (expr 
                      (variable_or_function_call Choice$)) 
                    (before_first_case \n \n ' \n) 
                    (case_block 
                      (case_statement CASE 
                        (case_expr 
                          (expr 
                            (variable_or_function_call CHR$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call LEFT)))) ))))) 
                      (block \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Choice$) = 
                            (expr 
                              (variable_or_function_call CHR$ 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call CTRLS)))) ))))) \n)) 
                    (case_block 
                      (case_statement CASE 
                        (case_expr 
                          (expr 
                            (variable_or_function_call CHR$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call RIGHT)))) ))))) 
                      (block \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Choice$) = 
                            (expr 
                              (variable_or_function_call CHR$ 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call CTRLD)))) ))))) \n)) 
                    (case_block 
                      (case_statement CASE 
                        (case_expr 
                          (expr 
                            (variable_or_function_call CHR$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call INS)))) ))))) 
                      (block \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Choice$) = 
                            (expr 
                              (variable_or_function_call CHR$ 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call CTRLV)))) ))))) \n)) 
                    (case_block 
                      (case_statement CASE 
                        (case_expr 
                          (expr 
                            (variable_or_function_call CHR$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call DEL)))) ))))) 
                      (block \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Choice$) = 
                            (expr 
                              (variable_or_function_call CHR$ 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call CTRLG)))) ))))) \n \n ' \n ' \n)) 
                    (case_block 
                      (case_statement CASE 
                        (case_expr 
                          (expr 
                            (variable_or_function_call CHR$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call HOME)))) ))))) 
                      (block \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call P) = 
                            (expr 
                              (literal 0)))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Choice$) = 
                            (expr 
                              (variable_or_function_call CHR$ 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call NULL)))) ))))) \n)) 
                    (case_block 
                      (case_statement CASE 
                        (case_expr 
                          (expr 
                            (variable_or_function_call CHR$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call ENDK)))) ))))) 
                      (block \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call P) = 
                            (expr 
                              (variable_or_function_call MaxP)))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Choice$) = 
                            (expr 
                              (variable_or_function_call CHR$ 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call NULL)))) ))))) \n \n ' \n)) 
                    (case_block 
                      (case_statement CASE ELSE) 
                      (block \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Choice$) = 
                            (expr 
                              (variable_or_function_call CHR$ 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (literal 1)))) ))))) \n)) 
                    (end_select_statement END SELECT))) \n) 
              (end_if_statement END IF)) \n \n ' \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call ASC 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call Choice$)))) ))) 
                (before_first_case \n \n ' \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call NULL)))) 
                  (block \n \n ' \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call ENTER)))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call NextField) = 
                        (expr 
                          (variable_or_function_call FALSE)))) \n 
                    (statement 
                      (exit_statement EXIT DO)) \n \n ' \n ' \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call TABKEY)))) 
                  (block \n 
                    (if_block_statement IF 
                      (expr 
                        (variable_or_function_call NextField)) THEN \n 
                      (then_block 
                        (statement 
                          (exit_statement EXIT DO)) \n) 
                      (else_block_statement ELSE 
                        (else_block \n 
                          (statement 
                            (call_statement 
                              (untyped_id BEEP))) \n)) 
                      (end_if_statement END IF)) \n \n ' \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call ESC)))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Work$) = 
                        (expr 
                          (variable_or_function_call InString$)))) \n 
                    (statement 
                      (locate_statement LOCATE 
                        (expr 
                          (variable_or_function_call Row)) , 
                        (expr 
                          (variable_or_function_call Column)) , 
                        (expr 
                          (variable_or_function_call CURSOROFF)))) \n 
                    (statement 
                      (print_statement PRINT 
                        (print_argument 
                          (expr 
                            (variable_or_function_call SPACE$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call MaxP)))) )))))) \n 
                    (statement 
                      (exit_statement EXIT DO)) \n \n ' \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call CTRLS)))) 
                  (block \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call P)) > 
                        (expr 
                          (literal 0))) THEN \n 
                      (then_block 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call P) = 
                            (expr 
                              (expr 
                                (variable_or_function_call P)) - 
                              (expr 
                                (literal 1))))) \n 
                        (statement 
                          (locate_statement LOCATE , 
                            (expr 
                              (expr 
                                (variable_or_function_call P)) + 
                              (expr 
                                (variable_or_function_call Column))))) \n) 
                      (else_block_statement ELSE 
                        (else_block \n 
                          (statement 
                            (call_statement 
                              (untyped_id BEEP))) \n)) 
                      (end_if_statement END IF)) \n \n ' \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call CTRLD)))) 
                  (block \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call P)) < 
                        (expr 
                          (variable_or_function_call MaxP))) THEN \n 
                      (then_block 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call P) = 
                            (expr 
                              (expr 
                                (variable_or_function_call P)) + 
                              (expr 
                                (literal 1))))) \n 
                        (statement 
                          (locate_statement LOCATE , 
                            (expr 
                              (expr 
                                (variable_or_function_call P)) + 
                              (expr 
                                (variable_or_function_call Column))))) \n) 
                      (else_block_statement ELSE 
                        (else_block \n 
                          (statement 
                            (call_statement 
                              (untyped_id BEEP))) \n)) 
                      (end_if_statement END IF)) \n \n ' \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call CTRLG)))) 
                  (block \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call P)) < 
                        (expr 
                          (variable_or_function_call MaxP))) THEN \n 
                      (then_block 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Work$) = 
                            (expr 
                              (expr 
                                (variable_or_function_call LEFT$ 
                                  ( 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call Work$))) , 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call P)))) ))) + 
                              (expr 
                                (variable_or_function_call RIGHT$ 
                                  ( 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call Work$))) , 
                                      (argument 
                                        (expr 
                                          (expr 
                                            (expr 
                                              (variable_or_function_call MaxP)) - 
                                            (expr 
                                              (variable_or_function_call P))) - 
                                          (expr 
                                            (literal 1))))) )))))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call MaxP) = 
                            (expr 
                              (expr 
                                (variable_or_function_call MaxP)) - 
                              (expr 
                                (literal 1))))) \n) 
                      (else_block_statement ELSE 
                        (else_block \n 
                          (statement 
                            (call_statement 
                              (untyped_id BEEP))) \n)) 
                      (end_if_statement END IF)) \n \n ' \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call CTRLH))) , 
                    (case_expr 
                      (expr 
                        (literal 127)))) 
                  (block \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call P)) > 
                        (expr 
                          (literal 0))) THEN \n 
                      (then_block 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Work$) = 
                            (expr 
                              (expr 
                                (variable_or_function_call LEFT$ 
                                  ( 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call Work$))) , 
                                      (argument 
                                        (expr 
                                          (expr 
                                            (variable_or_function_call P)) - 
                                          (expr 
                                            (literal 1))))) ))) + 
                              (expr 
                                (variable_or_function_call RIGHT$ 
                                  ( 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call Work$))) , 
                                      (argument 
                                        (expr 
                                          (expr 
                                            (variable_or_function_call MaxP)) - 
                                          (expr 
                                            (variable_or_function_call P))))) )))))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call P) = 
                            (expr 
                              (expr 
                                (variable_or_function_call P)) - 
                              (expr 
                                (literal 1))))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call MaxP) = 
                            (expr 
                              (expr 
                                (variable_or_function_call MaxP)) - 
                              (expr 
                                (literal 1))))) \n) 
                      (end_if_statement END IF)) \n \n ' \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (variable_or_function_call CTRLV)))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Insert) = 
                        (expr NOT 
                          (expr 
                            (variable_or_function_call Insert))))) \n 
                    (if_block_statement IF 
                      (expr 
                        (variable_or_function_call Insert)) THEN \n 
                      (then_block 
                        (statement 
                          (locate_statement LOCATE , , , 
                            (expr 
                              (literal 6)) , 
                            (expr 
                              (literal 7)))) \n) 
                      (else_block_statement ELSE 
                        (else_block \n 
                          (statement 
                            (locate_statement LOCATE , , , 
                              (expr 
                                (literal 0)) , 
                              (expr 
                                (literal 7)))) \n)) 
                      (end_if_statement END IF)) \n \n ' \n)) 
                (case_block 
                  (case_statement CASE 
                    (case_expr IS >= 
                      (expr 
                        (variable_or_function_call SPACE)))) 
                  (block \n \n ' \n ' \n 
                    (if_block_statement IF 
                      (expr 
                        (variable_or_function_call FirstTime)) THEN \n 
                      (then_block 
                        (statement 
                          (locate_statement LOCATE , 
                            (expr 
                              (variable_or_function_call Column)))) \n 
                        (statement 
                          (color_statement COLOR 
                            (expr 
                              (variable_or_function_call NORMAL)) , 
                            (expr 
                              (variable_or_function_call BACKGROUND)))) \n 
                        (statement 
                          (print_statement PRINT 
                            (print_argument 
                              (expr 
                                (variable_or_function_call SPACE$ 
                                  ( 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call MaxP)))) ))) ;))) \n 
                        (statement 
                          (locate_statement LOCATE , 
                            (expr 
                              (variable_or_function_call Column)))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call P) = 
                            (expr 
                              (literal 0)))) : 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call MaxP) = 
                            (expr 
                              (variable_or_function_call P)))) \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call Work$) = 
                            (expr 
                              (literal "")))) \n) 
                      (end_if_statement END IF)) \n \n ' \n 
                    (if_block_statement IF 
                      (expr 
                        (variable_or_function_call Insert)) THEN \n 
                      (then_block 
                        (if_block_statement IF 
                          (expr 
                            (expr 
                              (variable_or_function_call MaxP)) < 
                            (expr 
                              (variable_or_function_call Length))) THEN \n 
                          (then_block 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call Work$) = 
                                (expr 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call LEFT$ 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (variable_or_function_call Work$))) , 
                                            (argument 
                                              (expr 
                                                (variable_or_function_call P)))) ))) + 
                                    (expr 
                                      (variable_or_function_call Choice$))) + 
                                  (expr 
                                    (variable_or_function_call RIGHT$ 
                                      ( 
                                        (argument_list 
                                          (argument 
                                            (expr 
                                              (variable_or_function_call Work$))) , 
                                          (argument 
                                            (expr 
                                              (expr 
                                                (variable_or_function_call MaxP)) - 
                                              (expr 
                                                (variable_or_function_call P))))) )))))) \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call MaxP) = 
                                (expr 
                                  (expr 
                                    (variable_or_function_call MaxP)) + 
                                  (expr 
                                    (literal 1))))) \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call P) = 
                                (expr 
                                  (expr 
                                    (variable_or_function_call P)) + 
                                  (expr 
                                    (literal 1))))) \n) 
                          (else_block_statement ELSE 
                            (else_block \n 
                              (statement 
                                (call_statement 
                                  (untyped_id BEEP))) \n)) 
                          (end_if_statement END IF)) \n \n) 
                      (else_block_statement ELSE 
                        (else_block \n ' \n ' \n 
                          (if_block_statement IF 
                            (expr 
                              (expr 
                                (variable_or_function_call P)) = 
                              (expr 
                                (variable_or_function_call MaxP))) THEN \n 
                            (then_block 
                              (if_block_statement IF 
                                (expr 
                                  (expr 
                                    (variable_or_function_call MaxP)) < 
                                  (expr 
                                    (variable_or_function_call Length))) THEN \n 
                                (then_block 
                                  (statement 
                                    (assignment_statement 
                                      (variable_or_function_call Work$) = 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call Work$)) + 
                                        (expr 
                                          (variable_or_function_call Choice$))))) \n 
                                  (statement 
                                    (assignment_statement 
                                      (variable_or_function_call MaxP) = 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call MaxP)) + 
                                        (expr 
                                          (literal 1))))) \n 
                                  (statement 
                                    (assignment_statement 
                                      (variable_or_function_call P) = 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call P)) + 
                                        (expr 
                                          (literal 1))))) \n) 
                                (else_block_statement ELSE 
                                  (else_block \n 
                                    (statement 
                                      (call_statement 
                                        (untyped_id BEEP))) \n)) 
                                (end_if_statement END IF)) \n \n ' \n) 
                            (else_block_statement ELSE 
                              (else_block \n 
                                (statement 
                                  (mid_statement MID$ 
                                    ( 
                                      (variable_or_function_call Work$) , 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call P)) + 
                                        (expr 
                                          (literal 1))) , 
                                      (expr 
                                        (literal 1)) ) = 
                                    (expr 
                                      (variable_or_function_call Choice$)))) \n 
                                (statement 
                                  (assignment_statement 
                                    (variable_or_function_call P) = 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call P)) + 
                                      (expr 
                                        (literal 1))))) \n)) 
                            (end_if_statement END IF)) \n)) 
                      (end_if_statement END IF)) \n \n ' \n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \n 
                    (statement 
                      (call_statement 
                        (untyped_id BEEP))) \n)) 
                (end_select_statement END SELECT))) \n \n ' \n 
            (statement 
              (color_statement COLOR 
                (expr 
                  (variable_or_function_call NORMAL)) , 
                (expr 
                  (variable_or_function_call BACKGROUND)))) \n 
            (statement 
              (locate_statement LOCATE , 
                (expr 
                  (variable_or_function_call Column)) , 
                (expr 
                  (variable_or_function_call CURSOROFF)))) \n 
            (statement 
              (print_statement PRINT 
                (print_argument 
                  (expr 
                    (expr 
                      (variable_or_function_call Work$)) + 
                    (expr 
                      (literal " "))) ;))) \n 
            (statement 
              (locate_statement LOCATE , 
                (expr 
                  (expr 
                    (variable_or_function_call Column)) + 
                  (expr 
                    (variable_or_function_call P))) , 
                (expr 
                  (variable_or_function_call CURSORON)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call FirstTime) = 
                (expr 
                  (variable_or_function_call FALSE)))) \n \n) LOOP)) \n \n ' \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call NORMAL)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)) , 
          (expr 
            (variable_or_function_call CURSOROFF)))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call Work$)) ;))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call EditString$) = 
          (expr 
            (variable_or_function_call Work$)))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \n \n) 
    (end_function_statement END FUNCTION)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (function_statement FUNCTION FindCard% 
    ( 
      (parameter_list 
        (parameter TopCard%) , 
        (parameter LastCard%)) ) 
    (block \n \n 
      (statement 
        (static_statement STATIC 
          (scope_variable 
            (untyped_id TmpCard) AS 
            (type_name 
              (untyped_id Person))) , 
          (scope_variable NotFirst))) \n \n ' \n ' \n ' \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call NotFirst)) = 
          (expr 
            (variable_or_function_call FALSE))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call TmpCard.Names) = 
              (expr 
                (literal "")))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call TmpCard.Note) = 
              (expr 
                (literal "")))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call TmpCard.Phone) = 
              (expr 
                (literal "")))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call TmpCard.Street) = 
              (expr 
                (literal "")))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call TmpCard.City) = 
              (expr 
                (literal "")))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call TmpCard.State) = 
              (expr 
                (literal "")))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call TmpCard.Zip) = 
              (expr 
                (literal "")))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call NotFirst) = 
              (expr 
                (variable_or_function_call TRUE)))) \n) 
        (end_if_statement END IF)) \n \n ' \n ' \n 
      (statement 
        (call_statement CALL 
          (untyped_id ShowTopCard) 
          ( 
            (argument_list 
              (argument 
                (expr 
                  (variable_or_function_call TmpCard)))) ))) \n 
      (statement 
        (call_statement CALL 
          (untyped_id EditCard) 
          ( 
            (argument_list 
              (argument 
                (expr 
                  (variable_or_function_call TmpCard)))) ))) \n \n ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Card) = 
          (expr 
            (variable_or_function_call TopCard)))) \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Card) = 
                (expr 
                  (expr 
                    (variable_or_function_call Card)) + 
                  (expr 
                    (literal 1))))) \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call Card)) > 
                  (expr 
                    (variable_or_function_call LastCard))) THEN 
                (if_inline_action 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Card) = 
                      (expr 
                        (literal 1))))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Found) = 
                (expr 
                  (literal 0)))) \n \n ' \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call RTRIM$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call UCASE$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call TmpCard.Names)))) ))))) ))) 
                (before_first_case \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal ""))) , 
                    (case_expr 
                      (expr 
                        (variable_or_function_call RTRIM$ 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call UCASE$ 
                                    ( 
                                      (argument_list 
                                        (argument 
                                          (expr 
                                            (variable_or_function_call Index 
                                              ( 
                                                (argument_list 
                                                  (argument 
                                                    (expr 
                                                      (variable_or_function_call Card)))) ) . Names)))) ))))) ))))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Found) = 
                        (expr 
                          (expr 
                            (variable_or_function_call Found)) + 
                          (expr 
                            (literal 1))))) \n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \n)) 
                (end_select_statement END SELECT))) \n \n ' \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call RTRIM$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call UCASE$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call TmpCard.Note)))) ))))) ))) 
                (before_first_case \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal ""))) , 
                    (case_expr 
                      (expr 
                        (variable_or_function_call RTRIM$ 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call UCASE$ 
                                    ( 
                                      (argument_list 
                                        (argument 
                                          (expr 
                                            (variable_or_function_call Index 
                                              ( 
                                                (argument_list 
                                                  (argument 
                                                    (expr 
                                                      (variable_or_function_call Card)))) ) . Note)))) ))))) ))))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Found) = 
                        (expr 
                          (expr 
                            (variable_or_function_call Found)) + 
                          (expr 
                            (literal 1))))) \n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \n)) 
                (end_select_statement END SELECT))) \n \n ' \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call TmpCard.Month)) 
                (before_first_case \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal 0))) , 
                    (case_expr 
                      (expr 
                        (variable_or_function_call Index 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call Card)))) ) . Month)))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Found) = 
                        (expr 
                          (expr 
                            (variable_or_function_call Found)) + 
                          (expr 
                            (literal 1))))) \n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \n)) 
                (end_select_statement END SELECT))) \n \n ' \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call TmpCard.Day)) 
                (before_first_case \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal 0))) , 
                    (case_expr 
                      (expr 
                        (variable_or_function_call Index 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call Card)))) ) . Day)))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Found) = 
                        (expr 
                          (expr 
                            (variable_or_function_call Found)) + 
                          (expr 
                            (literal 1))))) \n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \n)) 
                (end_select_statement END SELECT))) \n \n ' \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call TmpCard.Year)) 
                (before_first_case \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal 0))) , 
                    (case_expr 
                      (expr 
                        (variable_or_function_call Index 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call Card)))) ) . Year)))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Found) = 
                        (expr 
                          (expr 
                            (variable_or_function_call Found)) + 
                          (expr 
                            (literal 1))))) \n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \n)) 
                (end_select_statement END SELECT))) \n \n ' \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call RTRIM$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call UCASE$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call TmpCard.Phone)))) ))))) ))) 
                (before_first_case \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal ""))) , 
                    (case_expr 
                      (expr 
                        (variable_or_function_call RTRIM$ 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call UCASE$ 
                                    ( 
                                      (argument_list 
                                        (argument 
                                          (expr 
                                            (variable_or_function_call Index 
                                              ( 
                                                (argument_list 
                                                  (argument 
                                                    (expr 
                                                      (variable_or_function_call Card)))) ) . Phone)))) ))))) ))))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Found) = 
                        (expr 
                          (expr 
                            (variable_or_function_call Found)) + 
                          (expr 
                            (literal 1))))) \n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \n)) 
                (end_select_statement END SELECT))) \n \n ' \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call RTRIM$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call UCASE$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call TmpCard.Street)))) ))))) ))) 
                (before_first_case \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal ""))) , 
                    (case_expr 
                      (expr 
                        (variable_or_function_call RTRIM$ 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call UCASE$ 
                                    ( 
                                      (argument_list 
                                        (argument 
                                          (expr 
                                            (variable_or_function_call Index 
                                              ( 
                                                (argument_list 
                                                  (argument 
                                                    (expr 
                                                      (variable_or_function_call Card)))) ) . Street)))) ))))) ))))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Found) = 
                        (expr 
                          (expr 
                            (variable_or_function_call Found)) + 
                          (expr 
                            (literal 1))))) \n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \n)) 
                (end_select_statement END SELECT))) \n \n ' \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call RTRIM$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call UCASE$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call TmpCard.City)))) ))))) ))) 
                (before_first_case \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal ""))) , 
                    (case_expr 
                      (expr 
                        (variable_or_function_call RTRIM$ 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call UCASE$ 
                                    ( 
                                      (argument_list 
                                        (argument 
                                          (expr 
                                            (variable_or_function_call Index 
                                              ( 
                                                (argument_list 
                                                  (argument 
                                                    (expr 
                                                      (variable_or_function_call Card)))) ) . City)))) ))))) ))))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Found) = 
                        (expr 
                          (expr 
                            (variable_or_function_call Found)) + 
                          (expr 
                            (literal 1))))) \n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \n)) 
                (end_select_statement END SELECT))) \n \n ' \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call RTRIM$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call UCASE$ 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call TmpCard.State)))) ))))) ))) 
                (before_first_case \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal ""))) , 
                    (case_expr 
                      (expr 
                        (variable_or_function_call RTRIM$ 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call UCASE$ 
                                    ( 
                                      (argument_list 
                                        (argument 
                                          (expr 
                                            (variable_or_function_call Index 
                                              ( 
                                                (argument_list 
                                                  (argument 
                                                    (expr 
                                                      (variable_or_function_call Card)))) ) . State)))) ))))) ))))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Found) = 
                        (expr 
                          (expr 
                            (variable_or_function_call Found)) + 
                          (expr 
                            (literal 1))))) \n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \n)) 
                (end_select_statement END SELECT))) \n \n ' \n 
            (statement 
              (select_case_statement SELECT CASE 
                (expr 
                  (variable_or_function_call TmpCard.Zip)) 
                (before_first_case \n) 
                (case_block 
                  (case_statement CASE 
                    (case_expr 
                      (expr 
                        (literal ""))) , 
                    (case_expr 
                      (expr 
                        (variable_or_function_call RTRIM$ 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call UCASE$ 
                                    ( 
                                      (argument_list 
                                        (argument 
                                          (expr 
                                            (variable_or_function_call Index 
                                              ( 
                                                (argument_list 
                                                  (argument 
                                                    (expr 
                                                      (variable_or_function_call Card)))) ) . Zip)))) ))))) ))))) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Found) = 
                        (expr 
                          (expr 
                            (variable_or_function_call Found)) + 
                          (expr 
                            (literal 1))))) \n)) 
                (case_block 
                  (case_statement CASE ELSE) 
                  (block \n)) 
                (end_select_statement END SELECT))) \n \n ' \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call Found)) = 
                (expr 
                  (expr 
                    (variable_or_function_call NFIELDS)) - 
                  (expr 
                    (literal 1)))) THEN \n 
              (then_block 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call FindCard%) = 
                    (expr 
                      (variable_or_function_call Card)))) \n 
                (statement 
                  (exit_statement EXIT FUNCTION)) \n) 
              (end_if_statement END IF)) \n \n) LOOP 
          (loop_condition UNTIL 
            (expr 
              (expr 
                (variable_or_function_call Card)) = 
              (expr 
                (variable_or_function_call TopCard)))))) \n \n ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call FindCard%) = 
          (expr 
            (variable_or_function_call FALSE)))) \n \n) 
    (end_function_statement END FUNCTION)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id InitIndex) 
    ( 
      (parameter_list 
        (parameter LastCard)) ) STATIC 
    (block \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id Card) AS 
            (type_name 
              (untyped_id Person))))) \n \n 
      (statement 
        (for_next_statement FOR Record = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call LastCard)) 
          (block \n \n ' \n 
            (statement 
              (get_io_statement GET # 
                (expr 
                  (literal 1)) , 
                (expr 
                  (variable_or_function_call Record)) , 
                (variable_or_function_call Card))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Index 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Record)))) ) . CardNum) = 
                (expr 
                  (variable_or_function_call Record)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Index 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Record)))) ) . Names) = 
                (expr 
                  (variable_or_function_call Card.Names)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Index 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Record)))) ) . Note) = 
                (expr 
                  (variable_or_function_call Card.Note)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Index 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Record)))) ) . Month) = 
                (expr 
                  (variable_or_function_call Card.Month)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Index 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Record)))) ) . Day) = 
                (expr 
                  (variable_or_function_call Card.Day)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Index 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Record)))) ) . Year) = 
                (expr 
                  (variable_or_function_call Card.Year)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Index 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Record)))) ) . Phone) = 
                (expr 
                  (variable_or_function_call Card.Phone)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Index 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Record)))) ) . Street) = 
                (expr 
                  (variable_or_function_call Card.Street)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Index 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Record)))) ) . City) = 
                (expr 
                  (variable_or_function_call Card.City)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Index 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Record)))) ) . State) = 
                (expr 
                  (variable_or_function_call Card.State)))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Index 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Record)))) ) . Zip) = 
                (expr 
                  (variable_or_function_call Card.Zip)))) \n \n) NEXT Record)) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id PrintLabel) 
    ( 
      (parameter_list 
        (parameter 
          (untyped_id Card) AS 
          (type_name_for_parameter 
            (untyped_id Person)))) ) 
    (block \n \n 
      (statement 
        (lprint_statement LPRINT 
          (print_argument 
            (expr 
              (variable_or_function_call Card.Names))))) \n 
      (statement 
        (lprint_statement LPRINT 
          (print_argument 
            (expr 
              (variable_or_function_call Card.Street))))) \n 
      (statement 
        (lprint_statement LPRINT 
          (print_argument 
            (expr 
              (variable_or_function_call Card.City)) ;) 
          (print_argument 
            (expr 
              (literal ", ")) ;) 
          (print_argument 
            (expr 
              (variable_or_function_call Card.State)) ;) 
          (print_argument 
            (expr 
              (variable_or_function_call Card.Zip))))) \n 
      (statement 
        (lprint_statement LPRINT)) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (function_statement FUNCTION Prompt$ 
    ( 
      (parameter_list 
        (parameter Msg$) , 
        (parameter Row) , 
        (parameter Column) , 
        (parameter Length)) ) 
    (block \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call Msg$)) ;))) \n \n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call Length)) 
          (before_first_case \n) 
          (case_block 
            (case_statement CASE 
              (case_expr IS <= 
                (expr 
                  (literal 0)))) 
            (block ' \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Prompt$) = 
                  (expr 
                    (literal "")))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 1)))) 
            (block ' \n 
              (statement 
                (locate_statement LOCATE , , 
                  (expr 
                    (variable_or_function_call CURSORON)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Prompt$) = 
                  (expr 
                    (builtin_function 
                      (input_function INPUT$ 
                        ( 
                          (expr 
                            (literal 1)) )))))) \n)) 
          (case_block 
            (case_statement CASE ELSE) 
            (block ' \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Prompt$) = 
                  (expr 
                    (variable_or_function_call EditString 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (literal ""))) , 
                          (argument 
                            (expr 
                              (variable_or_function_call Length))) , 
                          (argument 
                            (expr 
                              (variable_or_function_call FALSE)))) ))))) \n)) 
          (end_select_statement END SELECT))) \n \n) 
    (end_function_statement END FUNCTION)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (function_statement FUNCTION SelectField% 
    (block \n \n ' \n 
      (statement 
        (restore_statement RESTORE 
          (target 
            (text_label 
              (untyped_id FieldPositions))))) \n 
      (statement 
        (read_statement READ 
          (variable_or_function_call Row) , 
          (variable_or_function_call Column) , 
          (variable_or_function_call Length))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call FieldNum) = 
          (expr 
            (literal 0)))) \n \n ' \n 
      (statement 
        (do_loop_statement DO 
          (block \n \n ' \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)) , 
                (expr 
                  (variable_or_function_call CURSORON)))) \n \n ' \n 
            (statement 
              (do_loop_statement DO 
                (block \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Ky) = 
                      (expr 
                        (variable_or_function_call ASC 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (builtin_function 
                                    (input_function INPUT$ 
                                      ( 
                                        (expr 
                                          (literal 1)) )))))) ))))) \n) LOOP 
                (loop_condition UNTIL 
                  (expr 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call Ky)) = 
                          (expr 
                            (variable_or_function_call ENTER))) )) OR 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call Ky)) = 
                          (expr 
                            (variable_or_function_call TABKEY))) )))))) \n \n ' \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call Ky)) = 
                (expr 
                  (variable_or_function_call ENTER))) THEN \n 
              (then_block \n 
                (statement 
                  (locate_statement LOCATE , , 
                    (expr 
                      (variable_or_function_call CURSOROFF)))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call SelectField%) = 
                    (expr 
                      (variable_or_function_call FieldNum)))) \n 
                (statement 
                  (exit_statement EXIT FUNCTION)) \n \n ' \n) 
              (else_block_statement ELSE 
                (else_block \n \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call FieldNum) = 
                      (expr 
                        (expr 
                          (variable_or_function_call FieldNum)) + 
                        (expr 
                          (literal 1))))) \n 
                  (statement 
                    (read_statement READ 
                      (variable_or_function_call Row) , 
                      (variable_or_function_call Column) , 
                      (variable_or_function_call Length))) \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (variable_or_function_call Row)) = 
                      (expr 
                        (literal 0))) THEN \n 
                    (then_block 
                      (statement 
                        (restore_statement RESTORE 
                          (target 
                            (text_label 
                              (untyped_id FieldPositions))))) \n 
                      (statement 
                        (read_statement READ 
                          (variable_or_function_call Row) , 
                          (variable_or_function_call Column) , 
                          (variable_or_function_call Length))) \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call FieldNum) = 
                          (expr 
                            (literal 0)))) \n) 
                    (end_if_statement END IF)) \n \n)) 
              (end_if_statement END IF)) \n \n) LOOP)) \n \n) 
    (end_function_statement END FUNCTION)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id ShowCards) 
    ( 
      (parameter_list 
        (parameter TopCard) , 
        (parameter LastCard)) ) 
    (block \n \n ' \n 
      (statement 
        (call_statement CALL 
          (untyped_id ShowTopCard) 
          ( 
            (argument_list 
              (argument 
                (expr 
                  (variable_or_function_call Index 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call TopCard)))) ))))) ))) \n \n ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Card) = 
          (expr 
            (variable_or_function_call TopCard)))) \n 
      (statement 
        (restore_statement RESTORE 
          (target 
            (text_label 
              (untyped_id FieldPositions))))) \n 
      (statement 
        (read_statement READ 
          (variable_or_function_call Row) , 
          (variable_or_function_call Column) , 
          (variable_or_function_call Length))) \n 
      (statement 
        (for_next_statement FOR Count = 
          (expr 
            (literal 2)) TO 
          (expr 
            (variable_or_function_call CARDSPERSCREEN)) 
          (block \n \n ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Row) = 
                (expr 
                  (expr 
                    (variable_or_function_call Row)) - 
                  (expr 
                    (literal 2))))) : 
            (statement 
              (assignment_statement 
                (variable_or_function_call Column) = 
                (expr 
                  (expr 
                    (variable_or_function_call Column)) + 
                  (expr 
                    (literal 3))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Card) = 
                (expr 
                  (expr 
                    (variable_or_function_call Card)) + 
                  (expr 
                    (literal 1))))) \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call Card)) > 
                  (expr 
                    (variable_or_function_call LastCard))) THEN 
                (if_inline_action 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Card) = 
                      (expr 
                        (literal 1))))))) \n \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \n 
            (statement 
              (print_statement PRINT 
                (print_argument 
                  (expr 
                    (variable_or_function_call SPACE$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call Length)))) )))))) \n \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call Column)))) \n 
            (statement 
              (print_statement PRINT 
                (print_argument 
                  (expr 
                    (variable_or_function_call Index 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call Card)))) ) . Names))))) \n \n) NEXT Count)) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id ShowCmdLine) 
    (block \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call LASTROW)) , 
          (expr 
            (literal 1)))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call HILITE)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal " E")) ;))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call NORMAL)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "dit Top   ")) ;))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call HILITE)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "A")) ;))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call NORMAL)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "dd New   ")) ;))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call HILITE)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "C")) ;))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call NORMAL)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "opy to New   ")) ;))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call HILITE)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "D")) ;))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call NORMAL)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "elete   ")) ;))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call HILITE)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "F")) ;))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call NORMAL)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "ind   ")) ;))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call HILITE)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "S")) ;))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call NORMAL)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "ort   ")) ;))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call HILITE)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "P")) ;))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call NORMAL)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "rint   ")) ;))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call HILITE)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "Q")) ;))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call NORMAL)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "uit ")) ;))) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id ShowEditHelp) 
    (block \n \n ' \n 
      (statement 
        (call_statement 
          (untyped_id ClearHelp))) \n 
      (statement 
        (restore_statement RESTORE 
          (target 
            (text_label 
              (untyped_id EditHelp))))) \n 
      (statement 
        (for_next_statement FOR Row = 
          (expr 
            (variable_or_function_call HELPTOP)) TO 
          (expr 
            (variable_or_function_call HELPBOT)) 
          (block \n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Clr))) \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call Clr)) = 
                (expr 
                  (variable_or_function_call CNORMAL))) THEN \n 
              (then_block 
                (statement 
                  (color_statement COLOR 
                    (expr 
                      (variable_or_function_call NORMAL)) , 
                    (expr 
                      (variable_or_function_call BACKGROUND)))) \n) 
              (else_block_statement ELSE 
                (else_block \n 
                  (statement 
                    (color_statement COLOR 
                      (expr 
                        (variable_or_function_call HILITE)) , 
                      (expr 
                        (variable_or_function_call BACKGROUND)))) \n)) 
              (end_if_statement END IF)) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call HELPLEFT)))) \n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Tmp$))) \n 
            (statement 
              (print_statement PRINT 
                (print_argument 
                  (expr 
                    (variable_or_function_call Tmp$)) ;))) \n) NEXT)) \n \n ' \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call NORMAL)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id ShowTopCard) 
    ( 
      (parameter_list 
        (parameter 
          (untyped_id WorkCard) AS 
          (type_name_for_parameter 
            (untyped_id Person)))) ) 
    (block \n \n ' \n 
      (statement 
        (restore_statement RESTORE 
          (target 
            (text_label 
              (untyped_id FieldPositions))))) \n 
      (statement 
        (read_statement READ 
          (variable_or_function_call Row) , 
          (variable_or_function_call Column) , 
          (variable_or_function_call Length))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call SPACE$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call Length)))) ))) ;))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call WorkCard.Names)) ;))) \n \n 
      (statement 
        (read_statement READ 
          (variable_or_function_call Row) , 
          (variable_or_function_call Column) , 
          (variable_or_function_call Length))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call SPACE$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call Length)))) ))) ;))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call WorkCard.Note)) ;))) \n \n 
      (statement 
        (read_statement READ 
          (variable_or_function_call Row) , 
          (variable_or_function_call Column) , 
          (variable_or_function_call Length))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call SPACE$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call Length)))) ))) ;))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \n 
      (statement 
        (print_using_statement PRINT USING 
          (expr 
            (literal "##_/")) ; 
          (print_argument 
            (expr 
              (variable_or_function_call WorkCard.Month)) ;) 
          (print_argument 
            (expr 
              (variable_or_function_call WorkCard.Day)) ;))) \n 
      (statement 
        (print_using_statement PRINT USING 
          (expr 
            (literal "##")) ; 
          (print_argument 
            (expr 
              (variable_or_function_call WorkCard.Year)) ;))) \n 
      (statement 
        (read_statement READ 
          (variable_or_function_call Row) , 
          (variable_or_function_call Column) , 
          (variable_or_function_call Length) , 
          (variable_or_function_call Row) , 
          (variable_or_function_call Column) , 
          (variable_or_function_call Length))) \n \n 
      (statement 
        (read_statement READ 
          (variable_or_function_call Row) , 
          (variable_or_function_call Column) , 
          (variable_or_function_call Length))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call SPACE$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call Length)))) ))) ;))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call WorkCard.Phone)) ;))) \n \n 
      (statement 
        (read_statement READ 
          (variable_or_function_call Row) , 
          (variable_or_function_call Column) , 
          (variable_or_function_call Length))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call SPACE$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call Length)))) ))) ;))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call WorkCard.Street)) ;))) \n \n 
      (statement 
        (read_statement READ 
          (variable_or_function_call Row) , 
          (variable_or_function_call Column) , 
          (variable_or_function_call Length))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call SPACE$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call Length)))) ))) ;))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call WorkCard.City)) ;))) \n \n 
      (statement 
        (read_statement READ 
          (variable_or_function_call Row) , 
          (variable_or_function_call Column) , 
          (variable_or_function_call Length))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call SPACE$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call Length)))) ))) ;))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call WorkCard.State)) ;))) \n \n 
      (statement 
        (read_statement READ 
          (variable_or_function_call Row) , 
          (variable_or_function_call Column) , 
          (variable_or_function_call Length))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call SPACE$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call Length)))) )))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (variable_or_function_call Column)))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call WorkCard.Zip)) ;))) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id ShowViewHelp) 
    (block \n \n ' \n 
      (statement 
        (call_statement 
          (untyped_id ClearHelp))) \n 
      (statement 
        (restore_statement RESTORE 
          (target 
            (text_label 
              (untyped_id ViewHelp))))) \n 
      (statement 
        (for_next_statement FOR Row = 
          (expr 
            (variable_or_function_call HELPTOP)) TO 
          (expr 
            (variable_or_function_call HELPBOT)) 
          (block \n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Clr))) \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call Clr)) = 
                (expr 
                  (variable_or_function_call CNORMAL))) THEN \n 
              (then_block 
                (statement 
                  (color_statement COLOR 
                    (expr 
                      (variable_or_function_call NORMAL)) , 
                    (expr 
                      (variable_or_function_call BACKGROUND)))) \n) 
              (else_block_statement ELSE 
                (else_block \n 
                  (statement 
                    (color_statement COLOR 
                      (expr 
                        (variable_or_function_call HILITE)) , 
                      (expr 
                        (variable_or_function_call BACKGROUND)))) \n)) 
              (end_if_statement END IF)) \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (variable_or_function_call HELPLEFT)))) \n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Tmp$))) \n 
            (statement 
              (print_statement PRINT 
                (print_argument 
                  (expr 
                    (variable_or_function_call Tmp$)) ;))) \n) NEXT)) \n \n ' \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call NORMAL)) , 
          (expr 
            (variable_or_function_call BACKGROUND)))) \n 
      (statement 
        (call_statement 
          (untyped_id ShowCmdLine))) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id SortIndex) 
    ( 
      (parameter_list 
        (parameter SortField) , 
        (parameter LastCard)) ) 
    (block \n \n ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Offset) = 
          (expr 
            (expr 
              (variable_or_function_call LastCard)) \ 
            (expr 
              (literal 2))))) \n \n ' \n 
      (statement 
        (do_loop_statement DO 
          (do_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call Offset)) > 
              (expr 
                (literal 0)))) 
          (block \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Limit) = 
                (expr 
                  (expr 
                    (variable_or_function_call LastCard)) - 
                  (expr 
                    (variable_or_function_call Offset))))) \n \n 
            (statement 
              (do_loop_statement DO 
                (block \n \n ' \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Switch) = 
                      (expr 
                        (variable_or_function_call FALSE)))) \n \n ' \n ' \n 
                  (statement 
                    (for_next_statement FOR i = 
                      (expr 
                        (literal 1)) TO 
                      (expr 
                        (variable_or_function_call Limit)) 
                      (block \n 
                        (statement 
                          (select_case_statement SELECT CASE 
                            (expr 
                              (variable_or_function_call SortField)) 
                            (before_first_case \n) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (variable_or_function_call NPERSON)))) 
                              (block \n 
                                (if_block_statement IF 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call Index 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (variable_or_function_call i)))) ) . Names)) > 
                                    (expr 
                                      (variable_or_function_call Index 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (expr 
                                                  (variable_or_function_call i)) + 
                                                (expr 
                                                  (variable_or_function_call Offset))))) ) . Names))) THEN \n 
                                  (then_block 
                                    (statement 
                                      (swap_statement SWAP 
                                        (variable_or_function_call Index 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (variable_or_function_call i)))) )) , 
                                        (variable_or_function_call Index 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call i)) + 
                                                  (expr 
                                                    (variable_or_function_call Offset))))) )))) \n 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call Switch) = 
                                        (expr 
                                          (variable_or_function_call i)))) \n) 
                                  (end_if_statement END IF)) \n)) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (variable_or_function_call NNOTE)))) 
                              (block \n 
                                (if_block_statement IF 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call Index 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (variable_or_function_call i)))) ) . Note)) > 
                                    (expr 
                                      (variable_or_function_call Index 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (expr 
                                                  (variable_or_function_call i)) + 
                                                (expr 
                                                  (variable_or_function_call Offset))))) ) . Note))) THEN \n 
                                  (then_block 
                                    (statement 
                                      (swap_statement SWAP 
                                        (variable_or_function_call Index 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (variable_or_function_call i)))) )) , 
                                        (variable_or_function_call Index 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call i)) + 
                                                  (expr 
                                                    (variable_or_function_call Offset))))) )))) \n 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call Switch) = 
                                        (expr 
                                          (variable_or_function_call i)))) \n) 
                                  (end_if_statement END IF)) \n)) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (variable_or_function_call NMONTH)))) 
                              (block \n 
                                (if_block_statement IF 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call Index 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (variable_or_function_call i)))) ) . Month)) > 
                                    (expr 
                                      (variable_or_function_call Index 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (expr 
                                                  (variable_or_function_call i)) + 
                                                (expr 
                                                  (variable_or_function_call Offset))))) ) . Month))) THEN \n 
                                  (then_block 
                                    (statement 
                                      (swap_statement SWAP 
                                        (variable_or_function_call Index 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (variable_or_function_call i)))) )) , 
                                        (variable_or_function_call Index 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call i)) + 
                                                  (expr 
                                                    (variable_or_function_call Offset))))) )))) \n 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call Switch) = 
                                        (expr 
                                          (variable_or_function_call i)))) \n) 
                                  (end_if_statement END IF)) \n)) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (variable_or_function_call NDAY)))) 
                              (block \n 
                                (if_block_statement IF 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call Index 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (variable_or_function_call i)))) ) . Day)) > 
                                    (expr 
                                      (variable_or_function_call Index 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (expr 
                                                  (variable_or_function_call i)) + 
                                                (expr 
                                                  (variable_or_function_call Offset))))) ) . Day))) THEN \n 
                                  (then_block 
                                    (statement 
                                      (swap_statement SWAP 
                                        (variable_or_function_call Index 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (variable_or_function_call i)))) )) , 
                                        (variable_or_function_call Index 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call i)) + 
                                                  (expr 
                                                    (variable_or_function_call Offset))))) )))) \n 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call Switch) = 
                                        (expr 
                                          (variable_or_function_call i)))) \n) 
                                  (end_if_statement END IF)) \n)) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (variable_or_function_call NYEAR)))) 
                              (block \n 
                                (if_block_statement IF 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call Index 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (variable_or_function_call i)))) ) . Year)) > 
                                    (expr 
                                      (variable_or_function_call Index 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (expr 
                                                  (variable_or_function_call i)) + 
                                                (expr 
                                                  (variable_or_function_call Offset))))) ) . Year))) THEN \n 
                                  (then_block 
                                    (statement 
                                      (swap_statement SWAP 
                                        (variable_or_function_call Index 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (variable_or_function_call i)))) )) , 
                                        (variable_or_function_call Index 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call i)) + 
                                                  (expr 
                                                    (variable_or_function_call Offset))))) )))) \n 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call Switch) = 
                                        (expr 
                                          (variable_or_function_call i)))) \n) 
                                  (end_if_statement END IF)) \n)) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (variable_or_function_call NPHONE)))) 
                              (block \n 
                                (if_block_statement IF 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call Index 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (variable_or_function_call i)))) ) . Phone)) > 
                                    (expr 
                                      (variable_or_function_call Index 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (expr 
                                                  (variable_or_function_call i)) + 
                                                (expr 
                                                  (variable_or_function_call Offset))))) ) . Phone))) THEN \n 
                                  (then_block 
                                    (statement 
                                      (swap_statement SWAP 
                                        (variable_or_function_call Index 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (variable_or_function_call i)))) )) , 
                                        (variable_or_function_call Index 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call i)) + 
                                                  (expr 
                                                    (variable_or_function_call Offset))))) )))) \n 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call Switch) = 
                                        (expr 
                                          (variable_or_function_call i)))) \n) 
                                  (end_if_statement END IF)) \n)) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (variable_or_function_call NSTREET)))) 
                              (block \n 
                                (if_block_statement IF 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call Index 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (variable_or_function_call i)))) ) . Street)) > 
                                    (expr 
                                      (variable_or_function_call Index 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (expr 
                                                  (variable_or_function_call i)) + 
                                                (expr 
                                                  (variable_or_function_call Offset))))) ) . Street))) THEN \n 
                                  (then_block 
                                    (statement 
                                      (swap_statement SWAP 
                                        (variable_or_function_call Index 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (variable_or_function_call i)))) )) , 
                                        (variable_or_function_call Index 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call i)) + 
                                                  (expr 
                                                    (variable_or_function_call Offset))))) )))) \n 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call Switch) = 
                                        (expr 
                                          (variable_or_function_call i)))) \n) 
                                  (end_if_statement END IF)) \n)) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (variable_or_function_call NCITY)))) 
                              (block \n 
                                (if_block_statement IF 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call Index 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (variable_or_function_call i)))) ) . City)) > 
                                    (expr 
                                      (variable_or_function_call Index 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (expr 
                                                  (variable_or_function_call i)) + 
                                                (expr 
                                                  (variable_or_function_call Offset))))) ) . City))) THEN \n 
                                  (then_block 
                                    (statement 
                                      (swap_statement SWAP 
                                        (variable_or_function_call Index 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (variable_or_function_call i)))) )) , 
                                        (variable_or_function_call Index 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call i)) + 
                                                  (expr 
                                                    (variable_or_function_call Offset))))) )))) \n 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call Switch) = 
                                        (expr 
                                          (variable_or_function_call i)))) \n) 
                                  (end_if_statement END IF)) \n)) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (variable_or_function_call NSTATE)))) 
                              (block \n 
                                (if_block_statement IF 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call Index 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (variable_or_function_call i)))) ) . State)) > 
                                    (expr 
                                      (variable_or_function_call Index 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (expr 
                                                  (variable_or_function_call i)) + 
                                                (expr 
                                                  (variable_or_function_call Offset))))) ) . State))) THEN \n 
                                  (then_block 
                                    (statement 
                                      (swap_statement SWAP 
                                        (variable_or_function_call Index 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (variable_or_function_call i)))) )) , 
                                        (variable_or_function_call Index 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call i)) + 
                                                  (expr 
                                                    (variable_or_function_call Offset))))) )))) \n 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call Switch) = 
                                        (expr 
                                          (variable_or_function_call i)))) \n) 
                                  (end_if_statement END IF)) \n)) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (variable_or_function_call NZIP)))) 
                              (block \n 
                                (if_block_statement IF 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call Index 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (variable_or_function_call i)))) ) . Zip)) > 
                                    (expr 
                                      (variable_or_function_call Index 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (expr 
                                                  (variable_or_function_call i)) + 
                                                (expr 
                                                  (variable_or_function_call Offset))))) ) . Zip))) THEN \n 
                                  (then_block 
                                    (statement 
                                      (swap_statement SWAP 
                                        (variable_or_function_call Index 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (variable_or_function_call i)))) )) , 
                                        (variable_or_function_call Index 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call i)) + 
                                                  (expr 
                                                    (variable_or_function_call Offset))))) )))) \n 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call Switch) = 
                                        (expr 
                                          (variable_or_function_call i)))) \n) 
                                  (end_if_statement END IF)) \n)) 
                            (end_select_statement END SELECT))) \n \n) NEXT i)) \n \n ' \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Limit) = 
                      (expr 
                        (variable_or_function_call Switch)))) \n \n) LOOP 
                (loop_condition WHILE 
                  (expr 
                    (variable_or_function_call Switch))))) \n \n ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Offset) = 
                (expr 
                  (expr 
                    (variable_or_function_call Offset)) \ 
                  (expr 
                    (literal 2))))) \n) LOOP)) \n \n) 
    (end_sub_statement END SUB)) \n <EOF>)
