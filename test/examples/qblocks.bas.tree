(program ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (statement 
    (deftype_statement DEFINT 
      (letter_range A - Z))) \n \n ' \n ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment WELLWIDTH = 
        (const_expr 
          (expr 
            (literal 10)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment WELLHEIGHT = 
        (const_expr 
          (expr 
            (literal 21)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment NUMSTYLES = 
        (const_expr 
          (expr 
            (literal 7)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment WINGAME = 
        (const_expr 
          (expr 
            (literal 1000000)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment NEXTLEVEL = 
        (const_expr 
          (expr 
            (literal 300)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment BASESCORE = 
        (const_expr 
          (expr 
            (literal 1000)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment ROTATEDIR = 
        (const_expr 
          (expr 
            (literal 1)))))) ' \n ' \n ' \n ' \n ' \n ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment PLAYCLEARROW = 
        (const_expr 
          (expr 
            (literal "MBT255L16O4CDEGO6C")))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment PLAYINTRO = 
        (const_expr 
          (expr 
            (literal "MBT170O1L8CO2CO1CDCA-A-FGFA-F")))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment PLAYGAMEOVER = 
        (const_expr 
          (expr 
            (literal "MBT255L16O6CO4GEDC")))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment PLAYNEWBLOCK = 
        (const_expr 
          (expr 
            (literal "MBT160L28N20L24N5")))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment PLAYWINGAME = 
        (const_expr 
          (expr 
            (literal "T255L16O6CO4GEDCCDEFGO6CEG")))))) ' \n \n ' \n ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment FALSE = 
        (const_expr 
          (expr 
            (literal 0)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment TRUE = 
        (const_expr 
          (expr NOT 
            (expr 
              (variable_or_function_call FALSE))))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment SPACEBAR = 
        (const_expr 
          (expr 
            (literal 32)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment DOWNARROW = 
        (const_expr 
          (expr 
            (literal 80)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment RIGHTARROW = 
        (const_expr 
          (expr 
            (literal 77)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment UPARROW = 
        (const_expr 
          (expr 
            (literal 72)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment LEFTARROW = 
        (const_expr 
          (expr 
            (literal 75)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment DOWNARROW2 = 
        (const_expr 
          (expr 
            (literal 50)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment RIGHTARROW2 = 
        (const_expr 
          (expr 
            (literal 54)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment UPARROW2 = 
        (const_expr 
          (expr 
            (literal 56)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment LEFTARROW2 = 
        (const_expr 
          (expr 
            (literal 52)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment UPARROW3 = 
        (const_expr 
          (expr 
            (literal 53)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment QUIT = 
        (const_expr 
          (expr 
            (literal "Q")))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment PAUSE = 
        (const_expr 
          (expr 
            (literal "P")))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment XMATRIX = 
        (const_expr 
          (expr 
            (literal 3)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment YMATRIX = 
        (const_expr 
          (expr 
            (literal 1)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment BYTESPERBLOCK = 
        (const_expr 
          (expr 
            (literal 76)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment BLOCKVOLUME = 
        (const_expr 
          (expr 
            (expr 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call XMATRIX)) + 
                  (expr 
                    (literal 1))) )) * 
            (expr 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call YMATRIX)) + 
                  (expr 
                    (literal 1))) ))))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment ELEMENTSPERBLOCK = 
        (const_expr 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call BLOCKVOLUME)) * 
              (expr 
                (variable_or_function_call BYTESPERBLOCK))) \ 
            (expr 
              (literal 2))))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment XSIZE = 
        (const_expr 
          (expr 
            (literal 13)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment YSIZE = 
        (const_expr 
          (expr 
            (literal 8)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment XOFFSET = 
        (const_expr 
          (expr 
            (literal 10)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment YOFFSET = 
        (const_expr 
          (expr 
            (literal 2)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment WELLX = 
        (const_expr 
          (expr 
            (expr 
              (variable_or_function_call XSIZE)) * 
            (expr 
              (variable_or_function_call XOFFSET))))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment WELLY = 
        (const_expr 
          (expr 
            (expr 
              (variable_or_function_call YSIZE)) * 
            (expr 
              (variable_or_function_call YOFFSET))))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment TILTVALUE = 
        (const_expr 
          (expr 
            (literal 9999000)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment WELLCOLOR7 = 
        (const_expr 
          (expr 
            (literal 0)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment WELLCOLOR1 = 
        (const_expr 
          (expr 
            (literal 0)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment BORDERCOLOR1 = 
        (const_expr 
          (expr 
            (literal 8)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment BORDERCOLOR7 = 
        (const_expr 
          (expr 
            (literal 15)))))) ' \n \n 
  (type_statement TYPE 
    (untyped_id BlockType) ' \n 
    (type_element 
      (untyped_id X) AS 
      (type_name_for_type_element INTEGER) ' \n) 
    (type_element 
      (untyped_id Y) AS 
      (type_name_for_type_element INTEGER) ' \n) 
    (type_element 
      (untyped_id Style) AS 
      (type_name_for_type_element INTEGER) ' \n) 
    (type_element 
      (untyped_id Rotation) AS 
      (type_name_for_type_element INTEGER) ' \n) END TYPE) \n \n ' \n 
  (declare_statement DECLARE FUNCTION CheckFit 
    ( )) \n 
  (declare_statement DECLARE FUNCTION GameOver 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id AddBlockToWell) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id CheckForFullRows) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id Center) 
    ( 
      (declare_parameter_list 
        (declare_parameter M$) , 
        (declare_parameter Row)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DeleteChunk) 
    ( 
      (declare_parameter_list 
        (declare_parameter Highest%) , 
        (declare_parameter Lowest%)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DisplayIntro) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DisplayGameTitle) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DisplayChanges) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DrawBlock) 
    ( 
      (declare_parameter_list 
        (declare_parameter X) , 
        (declare_parameter Y) , 
        (declare_parameter FillColor)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id InitScreen) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id MakeInfoBox) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id NewBlock) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id PerformGame) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id RedrawControls) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id Show) 
    ( 
      (declare_parameter_list 
        (declare_parameter 
          (untyped_id b) AS 
          (type_name_for_declare_parameter 
            (untyped_id BlockType)))) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id UpdateScoring) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id PutBlock) 
    ( 
      (declare_parameter_list 
        (declare_parameter 
          (untyped_id b) AS 
          (type_name_for_declare_parameter 
            (untyped_id BlockType)))) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DrawAllShapes) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DrawPattern) 
    ( 
      (declare_parameter_list 
        (declare_parameter Patttern)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DrawPlayingField) 
    ( )) \n \n ' \n ' \n ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id Level) AS 
        (type_name INTEGER)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id WellBlocks) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (variable_or_function_call WELLWIDTH))) , 
            (dim_subscript 
              (expr 
                (variable_or_function_call WELLHEIGHT))) )) AS 
        (type_name INTEGER)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id CurBlock) AS 
        (type_name 
          (untyped_id BlockType))))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable BlockShape 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 0)) TO 
              (expr 
                (variable_or_function_call XMATRIX))) , 
            (dim_subscript 
              (expr 
                (literal 0)) TO 
              (expr 
                (variable_or_function_call YMATRIX))) , 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (variable_or_function_call NUMSTYLES))) ))))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id PrevScore) AS 
        (type_name LONG)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id Score) AS 
        (type_name LONG)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id ScreenWidth) AS 
        (type_name INTEGER)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id ScreenMode) AS 
        (type_name INTEGER)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id WellColor) AS 
        (type_name INTEGER)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id BorderColor) AS 
        (type_name INTEGER)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id OldBlock) AS 
        (type_name 
          (untyped_id BlockType))))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id TargetTime) AS 
        (type_name SINGLE)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id GameTiltScore) AS 
        (type_name LONG)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id Temp) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 11175))) )) AS 
        (type_name INTEGER)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id BlockColor) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (variable_or_function_call NUMSTYLES))) )) AS 
        (type_name INTEGER)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id BlockImage) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call NUMSTYLES)) * 
                        (expr 
                          (literal 4))) + 
                      (expr 
                        (literal 3))) )) * 
                (expr 
                  (variable_or_function_call ELEMENTSPERBLOCK)))) )) AS 
        (type_name INTEGER)))) ' \n 
  (statement 
    (dim_statement DIM 
      (dim_variable 
        (untyped_id KeyFlags) AS 
        (type_name INTEGER)))) ' \n 
  (statement 
    (dim_statement DIM 
      (dim_variable 
        (untyped_id BadMode) AS 
        (type_name INTEGER)))) ' \n \n \n 
  (statement 
    (on_error_statement ON ERROR GOTO 
      (target 
        (text_label 
          (untyped_id ScreenError))))) ' \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call BadMode) = 
      (expr 
        (variable_or_function_call FALSE)))) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call ScreenMode) = 
      (expr 
        (literal 8)))) \n 
  (statement 
    (screen_statement SCREEN 
      (expr 
        (variable_or_function_call ScreenMode)))) ' \n 
  (if_block_statement IF 
    (expr 
      (expr 
        (variable_or_function_call BadMode)) = 
      (expr 
        (variable_or_function_call TRUE))) THEN ' 
    (then_block \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call ScreenMode) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call BadMode) = 
          (expr 
            (variable_or_function_call FALSE)))) \n 
      (statement 
        (screen_statement SCREEN 
          (expr 
            (variable_or_function_call ScreenMode)))) ' \n) 
    (end_if_statement END IF)) \n 
  (statement 
    (on_error_statement ON ERROR GOTO 
      (target 
        (line_number 0)))) ' \n \n 
  (if_block_statement IF 
    (expr 
      (expr 
        (variable_or_function_call BadMode)) = 
      (expr 
        (variable_or_function_call TRUE))) THEN ' 
    (then_block \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 10)) , 
          (expr 
            (literal 12)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "CGA, EGA Color, or VGA graphics required to run QBLOCKS.BAS"))))) \n) 
    (else_block_statement ELSE 
      (else_block \n 
        (statement 
          (call_statement 
            (untyped_id RANDOMIZE) 
            (argument_list 
              (argument 
                (expr 
                  (builtin_function 
                    (timer_function TIMER))))))) ' \n 
        (statement 
          (call_statement 
            (untyped_id DisplayIntro))) ' \n \n 
        (statement 
          (def_seg_statement DEF SEG = 
            (expr 
              (literal 0)))) ' \n 
        (statement 
          (assignment_statement 
            (variable_or_function_call KeyFlags) = 
            (expr 
              (variable_or_function_call PEEK 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (literal 1047)))) ))))) ' \n 
        (if_block_statement IF 
          (expr 
            (expr 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call KeyFlags)) AND 
                  (expr 
                    (literal 32))) )) = 
            (expr 
              (literal 0))) THEN ' 
          (then_block \n 
            (statement 
              (call_statement 
                (untyped_id POKE) 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 1047))) , 
                  (argument 
                    (expr 
                      (expr 
                        (variable_or_function_call KeyFlays)) OR 
                      (expr 
                        (literal 32))))))) ' \n) 
          (end_if_statement END IF)) \n 
        (statement 
          (def_seg_statement DEF SEG)) ' \n \n ' \n 
        (statement 
          (for_next_statement FOR i = 
            (expr 
              (literal 1)) TO 
            (expr 
              (variable_or_function_call NUMSTYLES)) 
            (block ' \n 
              (statement 
                (for_next_statement FOR j = 
                  (expr 
                    (literal 0)) TO 
                  (expr 
                    (variable_or_function_call YMATRIX)) 
                  (block ' \n 
                    (statement 
                      (for_next_statement FOR k = 
                        (expr 
                          (literal 0)) TO 
                        (expr 
                          (variable_or_function_call XMATRIX)) 
                        (block ' \n 
                          (statement 
                            (read_statement READ 
                              (variable_or_function_call BlockShape 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call k))) , 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call j))) , 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call i)))) )))) ' \n) NEXT k)) \n) NEXT j)) \n) NEXT i)) \n 
        (statement 
          (call_statement 
            (untyped_id DrawAllShapes))) ' \n 
        (statement 
          (call_statement 
            (untyped_id PerformGame))) ' \n 
        (statement 
          (call_statement 
            (untyped_id DisplayChanges))) ' \n \n 
        (statement 
          (def_seg_statement DEF SEG = 
            (expr 
              (literal 0)))) ' \n 
        (statement 
          (call_statement 
            (untyped_id POKE) 
            (argument_list 
              (argument 
                (expr 
                  (literal 1047))) , 
              (argument 
                (expr 
                  (expr 
                    (variable_or_function_call KeyFlags)) AND 
                  (expr 
                    (literal 233))))))) ' \n 
        (statement 
          (def_seg_statement DEF SEG)) ' \n \n 
        (statement 
          (if_inline_statement IF 
            (expr 
              (expr 
                (variable_or_function_call ScreenMode)) = 
              (expr 
                (literal 7))) THEN 
            (if_inline_action 
              (statement 
                (palette_statement PALETTE))))) ' \n \n)) 
    (end_if_statement END IF)) \n \n 
  (statement 
    (end_statement END)) ' \n \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n \n ' \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 1))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 0))) \n \n ' \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 0))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 0) , 
      (data_item 1) , 
      (data_item 0))) \n \n ' \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 1))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 0))) \n \n ' \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 0))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 0))) \n \n ' \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 0))) \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 0))) \n \n ' \n 
  (statement 
    (data_statement DATA 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 0))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 1) , 
      (data_item 0) , 
      (data_item 0))) \n \n ' \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 0))) \n 
  (statement 
    (data_statement DATA 
      (data_item 0) , 
      (data_item 1) , 
      (data_item 1) , 
      (data_item 0))) \n \n \n 
  (label 
    (text_label 
      (untyped_id ScreenError)) :) ' \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call BadMode) = 
      (expr 
        (variable_or_function_call TRUE)))) \n 
  (statement 
    (resume_statement RESUME NEXT)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id AddBlockToWell) 
    (block \n \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 0)) TO 
          (expr 
            (variable_or_function_call XMATRIX)) 
          (block ' \n 
            (statement 
              (for_next_statement FOR j = 
                (expr 
                  (literal 0)) TO 
                (expr 
                  (variable_or_function_call YMATRIX)) 
                (block \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (variable_or_function_call BlockShape 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call i))) , 
                              (argument 
                                (expr 
                                  (variable_or_function_call j))) , 
                              (argument 
                                (expr 
                                  (variable_or_function_call CurBlock.Style)))) ))) = 
                      (expr 
                        (literal 1))) THEN ' 
                    (then_block \n 
                      (statement 
                        (select_case_statement SELECT CASE 
                          (expr 
                            (variable_or_function_call CurBlock.Rotation)) 
                          (before_first_case ' \n) 
                          (case_block 
                            (case_statement CASE 
                              (case_expr 
                                (expr 
                                  (literal 0)))) 
                            (block ' \n 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call WellBlocks 
                                    ( 
                                      (argument_list 
                                        (argument 
                                          (expr 
                                            (expr 
                                              (variable_or_function_call CurBlock.X)) + 
                                            (expr 
                                              (variable_or_function_call i)))) , 
                                        (argument 
                                          (expr 
                                            (expr 
                                              (variable_or_function_call CurBlock.Y)) + 
                                            (expr 
                                              (variable_or_function_call j))))) )) = 
                                  (expr 
                                    (variable_or_function_call CurBlock.Style)))) \n)) 
                          (case_block 
                            (case_statement CASE 
                              (case_expr 
                                (expr 
                                  (literal 1)))) 
                            (block ' \n 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call WellBlocks 
                                    ( 
                                      (argument_list 
                                        (argument 
                                          (expr 
                                            (expr 
                                              (expr 
                                                (variable_or_function_call CurBlock.X)) - 
                                              (expr 
                                                (variable_or_function_call j))) + 
                                            (expr 
                                              (literal 2)))) , 
                                        (argument 
                                          (expr 
                                            (expr 
                                              (expr 
                                                (variable_or_function_call CurBlock.Y)) + 
                                              (expr 
                                                (variable_or_function_call i))) - 
                                            (expr 
                                              (literal 1))))) )) = 
                                  (expr 
                                    (variable_or_function_call CurBlock.Style)))) \n)) 
                          (case_block 
                            (case_statement CASE 
                              (case_expr 
                                (expr 
                                  (literal 2)))) 
                            (block ' \n 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call WellBlocks 
                                    ( 
                                      (argument_list 
                                        (argument 
                                          (expr 
                                            (expr 
                                              (expr 
                                                (variable_or_function_call CurBlock.X)) - 
                                              (expr 
                                                (variable_or_function_call i))) + 
                                            (expr 
                                              (literal 3)))) , 
                                        (argument 
                                          (expr 
                                            (expr 
                                              (expr 
                                                (variable_or_function_call CurBlock.Y)) - 
                                              (expr 
                                                (variable_or_function_call j))) + 
                                            (expr 
                                              (literal 1))))) )) = 
                                  (expr 
                                    (variable_or_function_call CurBlock.Style)))) \n)) 
                          (case_block 
                            (case_statement CASE 
                              (case_expr 
                                (expr 
                                  (literal 3)))) 
                            (block ' \n 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call WellBlocks 
                                    ( 
                                      (argument_list 
                                        (argument 
                                          (expr 
                                            (expr 
                                              (expr 
                                                (variable_or_function_call CurBlock.X)) + 
                                              (expr 
                                                (variable_or_function_call j))) + 
                                            (expr 
                                              (literal 1)))) , 
                                        (argument 
                                          (expr 
                                            (expr 
                                              (expr 
                                                (variable_or_function_call CurBlock.Y)) - 
                                              (expr 
                                                (variable_or_function_call i))) + 
                                            (expr 
                                              (literal 2))))) )) = 
                                  (expr 
                                    (variable_or_function_call CurBlock.Style)))) \n)) 
                          (end_select_statement END SELECT))) \n) 
                    (end_if_statement END IF)) \n) NEXT j)) \n) NEXT i)) \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id Center) 
    ( 
      (parameter_list 
        (parameter text$) , 
        (parameter Row)) ) 
    (block \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (expr 
              (expr 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call ScreenWidth)) - 
                    (expr 
                      (builtin_function LEN 
                        ( 
                          (expr 
                            (variable_or_function_call text$)) )))) )) \ 
              (expr 
                (literal 2))) + 
            (expr 
              (literal 1))))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call text$)) ;))) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (function_statement FUNCTION CheckFit 
    (block \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CheckFit) = 
          (expr 
            (variable_or_function_call TRUE)))) ' \n \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 0)) TO 
          (expr 
            (variable_or_function_call XMATRIX)) 
          (block ' \n 
            (statement 
              (for_next_statement FOR j = 
                (expr 
                  (literal 0)) TO 
                (expr 
                  (variable_or_function_call YMATRIX)) 
                (block ' \n ' \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (variable_or_function_call BlockShape 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call i))) , 
                              (argument 
                                (expr 
                                  (variable_or_function_call j))) , 
                              (argument 
                                (expr 
                                  (variable_or_function_call CurBlock.Style)))) ))) = 
                      (expr 
                        (literal 1))) THEN ' 
                    (then_block \n 
                      (statement 
                        (select_case_statement SELECT CASE 
                          (expr 
                            (variable_or_function_call CurBlock.Rotation)) 
                          (before_first_case ' \n) 
                          (case_block 
                            (case_statement CASE 
                              (case_expr 
                                (expr 
                                  (literal 0)))) 
                            (block ' \n 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call NewX) = 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call CurBlock.X)) + 
                                    (expr 
                                      (variable_or_function_call i))))) \n 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call NewY) = 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call CurBlock.Y)) + 
                                    (expr 
                                      (variable_or_function_call j))))) \n)) 
                          (case_block 
                            (case_statement CASE 
                              (case_expr 
                                (expr 
                                  (literal 1)))) 
                            (block ' \n 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call NewX) = 
                                  (expr 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call CurBlock.X)) - 
                                      (expr 
                                        (variable_or_function_call j))) + 
                                    (expr 
                                      (literal 2))))) \n 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call NewY) = 
                                  (expr 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call CurBlock.Y)) + 
                                      (expr 
                                        (variable_or_function_call i))) - 
                                    (expr 
                                      (literal 1))))) \n)) 
                          (case_block 
                            (case_statement CASE 
                              (case_expr 
                                (expr 
                                  (literal 2)))) 
                            (block ' \n 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call NewX) = 
                                  (expr 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call CurBlock.X)) - 
                                      (expr 
                                        (variable_or_function_call i))) + 
                                    (expr 
                                      (literal 3))))) \n 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call NewY) = 
                                  (expr 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call CurBlock.Y)) - 
                                      (expr 
                                        (variable_or_function_call j))) + 
                                    (expr 
                                      (literal 1))))) \n)) 
                          (case_block 
                            (case_statement CASE 
                              (case_expr 
                                (expr 
                                  (literal 3)))) 
                            (block ' \n 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call NewX) = 
                                  (expr 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call CurBlock.X)) + 
                                      (expr 
                                        (variable_or_function_call j))) + 
                                    (expr 
                                      (literal 1))))) \n 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call NewY) = 
                                  (expr 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call CurBlock.Y)) - 
                                      (expr 
                                        (variable_or_function_call i))) + 
                                    (expr 
                                      (literal 2))))) \n)) 
                          (end_select_statement END SELECT))) \n \n ' \n 
                      (if_block_statement IF 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                (expr 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call NewX)) > 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call WELLWIDTH)) - 
                                      (expr 
                                        (literal 1)))) OR 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call NewX)) < 
                                    (expr 
                                      (literal 0)))) OR 
                                (expr 
                                  (expr 
                                    (variable_or_function_call NewY)) > 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call WELLHEIGHT)) - 
                                    (expr 
                                      (literal 1))))) OR 
                              (expr 
                                (expr 
                                  (variable_or_function_call NewY)) < 
                                (expr 
                                  (literal 0)))) )) THEN \n 
                        (then_block 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call CheckFit) = 
                              (expr 
                                (variable_or_function_call FALSE)))) \n 
                          (statement 
                            (exit_statement EXIT FUNCTION)) \n \n ' \n ' \n) 
                        (elseif_block_statement ELSEIF 
                          (expr 
                            (variable_or_function_call WellBlocks 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call NewX))) , 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call NewY)))) ))) THEN 
                          (else_block \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call CheckFit) = 
                                (expr 
                                  (variable_or_function_call FALSE)))) \n 
                            (statement 
                              (exit_statement EXIT FUNCTION)) \n)) 
                        (end_if_statement END IF)) \n \n) 
                    (end_if_statement END IF)) \n) NEXT j)) \n) NEXT i)) \n \n) 
    (end_function_statement END FUNCTION)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id CheckForFullRows) 
    (block \n \n 
      (statement 
        (dim_statement DIM 
          (dim_variable RowsToDelete 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (variable_or_function_call WELLHEIGHT))) ))))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call NumRowsToDelete) = 
          (expr 
            (literal 0)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call i) = 
          (expr 
            (variable_or_function_call WELLHEIGHT)))) ' \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call DeleteRow) = 
                (expr 
                  (variable_or_function_call TRUE)))) ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call j) = 
                (expr 
                  (literal 0)))) \n 
            (statement 
              (do_loop_statement DO 
                (block ' \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call DeleteRow) = 
                      (expr 
                        (expr 
                          (variable_or_function_call DeleteRow)) * 
                        (expr 
                          (variable_or_function_call SGN 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (variable_or_function_call WellBlocks 
                                      ( 
                                        (argument_list 
                                          (argument 
                                            (expr 
                                              (variable_or_function_call j))) , 
                                          (argument 
                                            (expr 
                                              (variable_or_function_call i)))) ))))) )))))) ' \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call j) = 
                      (expr 
                        (expr 
                          (variable_or_function_call j)) + 
                        (expr 
                          (literal 1))))) \n) LOOP 
                (loop_condition WHILE 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call DeleteRow)) = 
                      (expr 
                        (variable_or_function_call TRUE))) AND 
                    (expr 
                      (expr 
                        (variable_or_function_call j)) < 
                      (expr 
                        (variable_or_function_call WELLWIDTH))))))) \n \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call DeleteRow)) = 
                (expr 
                  (variable_or_function_call TRUE))) THEN \n 
              (then_block ' \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call NumRowsToDelete) = 
                    (expr 
                      (expr 
                        (variable_or_function_call NumRowsToDelete)) + 
                      (expr 
                        (literal 1))))) ' \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call RowsToDelete 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (expr 
                                (variable_or_function_call i)) - 
                              (expr 
                                (variable_or_function_call NumDeleted))))) )) = 
                    (expr 
                      (variable_or_function_call TRUE)))) ' \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call NumDeleted) = 
                    (expr 
                      (expr 
                        (variable_or_function_call NumDeleted)) + 
                      (expr 
                        (literal 1))))) ' \n \n ' \n 
                (statement 
                  (for_next_statement FOR Row = 
                    (expr 
                      (variable_or_function_call i)) TO 
                    (expr 
                      (literal 1)) STEP 
                    (expr - 
                      (expr 
                        (literal 1))) 
                    (block \n 
                      (statement 
                        (for_next_statement FOR Col = 
                          (expr 
                            (literal 0)) TO 
                          (expr 
                            (variable_or_function_call WELLWIDTH)) 
                          (block \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call WellBlocks 
                                  ( 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call Col))) , 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call Row)))) )) = 
                                (expr 
                                  (variable_or_function_call WellBlocks 
                                    ( 
                                      (argument_list 
                                        (argument 
                                          (expr 
                                            (variable_or_function_call Col))) , 
                                        (argument 
                                          (expr 
                                            (expr 
                                              (variable_or_function_call Row)) - 
                                            (expr 
                                              (literal 1))))) ))))) \n) NEXT Col)) \n) NEXT Row)) \n) 
              (else_block_statement ELSE 
                (else_block ' \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call i) = 
                      (expr 
                        (expr 
                          (variable_or_function_call i)) - 
                        (expr 
                          (literal 1))))) \n)) 
              (end_if_statement END IF)) \n) LOOP 
          (loop_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call i)) >= 
              (expr 
                (literal 1)))))) ' \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call NumRowsToDelete)) > 
          (expr 
            (literal 0))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call Score) = 
              (expr 
                (expr 
                  (variable_or_function_call Score)) + 
                (expr 
                  (expr 
                    (literal 100)) * 
                  (expr 
                    (variable_or_function_call NumRowsToDelete)))))) ' \n \n ' \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Highest) = 
              (expr - 
                (expr 
                  (literal 1))))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Lowest) = 
              (expr 
                (literal 100)))) \n \n ' \n 
          (statement 
            (for_next_statement FOR i = 
              (expr 
                (variable_or_function_call WELLHEIGHT)) TO 
              (expr 
                (literal 1)) STEP 
              (expr - 
                (expr 
                  (literal 1))) 
              (block \n 
                (if_block_statement IF 
                  (expr 
                    (expr 
                      (variable_or_function_call RowsToDelete 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call i)))) ))) = 
                    (expr 
                      (variable_or_function_call TRUE))) THEN \n 
                  (then_block 
                    (statement 
                      (if_inline_statement IF 
                        (expr 
                          (expr 
                            (variable_or_function_call i)) > 
                          (expr 
                            (variable_or_function_call Highest))) THEN 
                        (if_inline_action 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call Highest) = 
                              (expr 
                                (variable_or_function_call i))))))) \n 
                    (statement 
                      (if_inline_statement IF 
                        (expr 
                          (expr 
                            (variable_or_function_call i)) < 
                          (expr 
                            (variable_or_function_call Lowest))) THEN 
                        (if_inline_action 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call Lowest) = 
                              (expr 
                                (variable_or_function_call i))))))) \n) 
                  (end_if_statement END IF)) \n) NEXT i)) \n \n 
          (if_block_statement IF 
            (expr 
              (expr 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call Highest)) - 
                      (expr 
                        (variable_or_function_call Lowest))) )) + 
                (expr 
                  (literal 1))) = 
              (expr 
                (variable_or_function_call NumRowsToDelete))) THEN ' 
            (then_block \n 
              (statement 
                (call_statement 
                  (untyped_id DeleteChunk) 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call Highest))) , 
                    (argument 
                      (expr 
                        (variable_or_function_call Lowest)))))) \n) 
            (else_block_statement ELSE 
              (else_block ' \n ' \n ' \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call i) = 
                    (expr 
                      (variable_or_function_call Lowest)))) \n 
                (statement 
                  (do_loop_statement DO 
                    (do_condition WHILE 
                      (expr 
                        (expr 
                          (variable_or_function_call i)) <= 
                        (expr 
                          (variable_or_function_call Highest)))) 
                    (block \n 
                      (if_block_statement IF 
                        (expr 
                          (expr 
                            (variable_or_function_call RowsToDelete 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call i)))) ))) = 
                          (expr 
                            (variable_or_function_call FALSE))) THEN \n 
                        (then_block 
                          (statement 
                            (call_statement 
                              (untyped_id DeleteChunk) 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call i)) - 
                                    (expr 
                                      (literal 1)))) , 
                                (argument 
                                  (expr 
                                    (variable_or_function_call Lowest)))))) \n 
                          (statement 
                            (exit_statement EXIT DO)) \n) 
                        (else_block_statement ELSE 
                          (else_block \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call i) = 
                                (expr 
                                  (expr 
                                    (variable_or_function_call i)) + 
                                  (expr 
                                    (literal 1))))) \n)) 
                        (end_if_statement END IF)) \n) LOOP)) \n \n ' \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Lowest) = 
                    (expr 
                      (variable_or_function_call i)))) \n 
                (statement 
                  (do_loop_statement DO 
                    (do_condition WHILE 
                      (expr 
                        (expr 
                          (variable_or_function_call RowsToDelete 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (variable_or_function_call Lowest)))) ))) = 
                        (expr 
                          (variable_or_function_call FALSE)))) 
                    (block \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Lowest) = 
                          (expr 
                            (expr 
                              (variable_or_function_call Lowest)) + 
                            (expr 
                              (literal 1))))) \n) LOOP)) \n 
                (statement 
                  (call_statement 
                    (untyped_id DeleteChunk) 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Highest))) , 
                      (argument 
                        (expr 
                          (variable_or_function_call Lowest)))))) \n \n)) 
            (end_if_statement END IF)) \n) 
        (end_if_statement END IF)) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id DeleteChunk) 
    ( 
      (parameter_list 
        (parameter Highest) , 
        (parameter Lowest)) ) 
    (block \n \n ' \n 
      (statement 
        (get_graphics_statement GET 
          ( 
            (expr 
              (variable_or_function_call WELLX)) , 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call Lowest)) * 
                (expr 
                  (variable_or_function_call YSIZE))) + 
              (expr 
                (variable_or_function_call WELLY))) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call WELLX)) + 
              (expr 
                (expr 
                  (variable_or_function_call WELLWIDTH)) * 
                (expr 
                  (variable_or_function_call XSIZE)))) , 
            (expr 
              (expr 
                (expr 
                  (expr 
                    ( 
                      (expr 
                        (expr 
                          (variable_or_function_call Highest)) + 
                        (expr 
                          (literal 1))) )) * 
                  (expr 
                    (variable_or_function_call YSIZE))) + 
                (expr 
                  (variable_or_function_call WELLY))) - 
              (expr 
                (literal 1))) ) , 
          (variable_or_function_call Temp))) \n 
      (statement 
        (play_statement PLAY 
          (expr 
            (variable_or_function_call PLAYCLEARROW)))) \n \n ' \n 
      (statement 
        (for_next_statement FOR Flash = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 3)) 
          (block \n 
            (statement 
              (put_graphics_statement PUT 
                ( 
                  (expr 
                    (variable_or_function_call WELLX)) , 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call Lowest)) * 
                      (expr 
                        (variable_or_function_call YSIZE))) + 
                    (expr 
                      (variable_or_function_call WELLY))) ) , 
                (variable_or_function_call Temp) , PRESET)) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call DelayTime!) = 
                (expr 
                  (expr 
                    (builtin_function 
                      (timer_function TIMER))) + 
                  (expr 
                    (literal .02))))) \n 
            (statement 
              (do_loop_statement DO 
                (do_condition WHILE 
                  (expr 
                    (expr 
                      (builtin_function 
                        (timer_function TIMER))) < 
                    (expr 
                      (variable_or_function_call DelayTime!)))) 
                (block :) LOOP)) \n 
            (statement 
              (put_graphics_statement PUT 
                ( 
                  (expr 
                    (variable_or_function_call WELLX)) , 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call Lowest)) * 
                      (expr 
                        (variable_or_function_call YSIZE))) + 
                    (expr 
                      (variable_or_function_call WELLY))) ) , 
                (variable_or_function_call Temp) , PSET)) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call DelayTime!) = 
                (expr 
                  (expr 
                    (builtin_function 
                      (timer_function TIMER))) + 
                  (expr 
                    (literal .02))))) \n 
            (statement 
              (do_loop_statement DO 
                (do_condition WHILE 
                  (expr 
                    (expr 
                      (builtin_function 
                        (timer_function TIMER))) < 
                    (expr 
                      (variable_or_function_call DelayTime!)))) 
                (block :) LOOP)) \n) NEXT Flash)) \n \n ' \n 
      (statement 
        (get_graphics_statement GET 
          ( 
            (expr 
              (variable_or_function_call WELLX)) , 
            (expr 
              (variable_or_function_call WELLY)) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call WELLX)) + 
              (expr 
                (expr 
                  (variable_or_function_call WELLWIDTH)) * 
                (expr 
                  (variable_or_function_call XSIZE)))) , 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call Lowest)) * 
                (expr 
                  (variable_or_function_call YSIZE))) + 
              (expr 
                (variable_or_function_call WELLY))) ) , 
          (variable_or_function_call Temp))) \n 
      (statement 
        (put_graphics_statement PUT 
          ( 
            (expr 
              (variable_or_function_call WELLX)) , 
            (expr 
              (expr 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call Highest)) - 
                        (expr 
                          (variable_or_function_call Lowest))) + 
                      (expr 
                        (literal 1))) )) * 
                (expr 
                  (variable_or_function_call YSIZE))) + 
              (expr 
                (variable_or_function_call WELLY))) ) , 
          (variable_or_function_call Temp) , PSET)) \n ' \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (variable_or_function_call WELLX)) , 
            (expr 
              (variable_or_function_call WELLY)) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call WELLX)) + 
              (expr 
                (expr 
                  (variable_or_function_call WELLWIDTH)) * 
                (expr 
                  (variable_or_function_call XSIZE)))) , 
            (expr 
              (expr 
                (variable_or_function_call WELLY)) + 
              (expr 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (expr 
                          (variable_or_function_call Highest)) - 
                        (expr 
                          (variable_or_function_call Lowest))) + 
                      (expr 
                        (literal 1))) )) * 
                (expr 
                  (variable_or_function_call YSIZE)))) ) , 
          (expr 
            (variable_or_function_call WellColor)) , 
          (box_style BF))) \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id DisplayChanges) 
    (block \n \n 
      (statement 
        (call_statement 
          (untyped_id DisplayGameTitle))) ' \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "The following game characteristics can be easily changed from"))) , 
            (argument 
              (expr 
                (literal 5)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "within the QuickBASIC Interpreter.  To change the values of  "))) , 
            (argument 
              (expr 
                (literal 6)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "these characteristics, locate the corresponding CONST or DATA"))) , 
            (argument 
              (expr 
                (literal 7)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "statements in the source code and change their values, then  "))) , 
            (argument 
              (expr 
                (literal 8)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "restart the program 
                  (press Shift + F5).                      "))) , 
            (argument 
              (expr 
                (literal 9)))))) \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 15)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "Block shapes                         "))) , 
            (argument 
              (expr 
                (literal 11)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "Block rotation                       "))) , 
            (argument 
              (expr 
                (literal 12)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "Number of different block shapes     "))) , 
            (argument 
              (expr 
                (literal 13)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "Score needed to advance to next level"))) , 
            (argument 
              (expr 
                (literal 14)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "Width of the game well               "))) , 
            (argument 
              (expr 
                (literal 15)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "Height of the game well              "))) , 
            (argument 
              (expr 
                (literal 16)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "Songs played during game             "))) , 
            (argument 
              (expr 
                (literal 17)))))) \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "The CONST statements and instructions on changing them are   "))) , 
            (argument 
              (expr 
                (literal 19)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "located at the beginning of the main program.                "))) , 
            (argument 
              (expr 
                (literal 20)))))) \n \n 
      (statement 
        (do_loop_statement DO 
          (do_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call INKEY$)) = 
              (expr 
                (literal "")))) 
          (block :) LOOP)) ' \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) ' \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id DisplayGameTitle) 
    (block \n \n 
      (statement 
        (screen_statement SCREEN 
          (expr 
            (literal 0)))) \n 
      (statement 
        (width_statement WIDTH 
          (expr 
            (literal 80)) , 
          (expr 
            (literal 25)))) ' \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 4)) , 
          (expr 
            (literal 0)))) ' \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call ScreenWidth) = 
          (expr 
            (literal 80)))) ' \n \n ' \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 1)) , 
          (expr 
            (literal 2)))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call CHR$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (literal 201)))) ))) ;) 
          (print_argument 
            (expr 
              (variable_or_function_call STRING$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (literal 76))) , 
                    (argument 
                      (expr 
                        (literal 205)))) ))) ;) 
          (print_argument 
            (expr 
              (variable_or_function_call CHR$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (literal 187)))) ))) ;))) \n 
      (statement 
        (for_next_statement FOR i% = 
          (expr 
            (literal 2)) TO 
          (expr 
            (literal 24)) 
          (block \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call i%)) , 
                (expr 
                  (literal 2)))) \n 
            (statement 
              (print_statement PRINT 
                (print_argument 
                  (expr 
                    (variable_or_function_call CHR$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (literal 186)))) ))) ;) 
                (print_argument TAB 
                  ( 
                    (expr 
                      (literal 79)) ) ;) 
                (print_argument 
                  (expr 
                    (variable_or_function_call CHR$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (literal 186)))) ))) ;))) \n) NEXT i%)) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 25)) , 
          (expr 
            (literal 2)))) \n 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (variable_or_function_call CHR$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (literal 200)))) ))) ;) 
          (print_argument 
            (expr 
              (variable_or_function_call STRING$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (literal 76))) , 
                    (argument 
                      (expr 
                        (literal 205)))) ))) ;) 
          (print_argument 
            (expr 
              (variable_or_function_call CHR$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (literal 188)))) ))) ;))) \n \n ' \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 0)) , 
          (expr 
            (literal 4)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "      Microsoft      "))) , 
            (argument 
              (expr 
                (literal 1)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "    Q B L O C K S    "))) , 
            (argument 
              (expr 
                (literal 2)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "   Press any key to continue   "))) , 
            (argument 
              (expr 
                (literal 25)))))) ' \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)) , 
          (expr 
            (literal 0)))) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id DisplayIntro) 
    (block \n \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n 
      (statement 
        (call_statement 
          (untyped_id DisplayGameTitle))) \n \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "QBlocks challenges you to keep the well from filling.  Do this by"))) , 
            (argument 
              (expr 
                (literal 5)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "completely filling rows with blocks, making the rows disappear.  "))) , 
            (argument 
              (expr 
                (literal 6)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "Move and rotate the falling shapes to get them into the best     "))) , 
            (argument 
              (expr 
                (literal 7)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "position.  The game will get faster as you score more points.    "))) , 
            (argument 
              (expr 
                (literal 8)))))) \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 4)))) ' \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (variable_or_function_call STRING$ 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (literal 74))) , 
                      (argument 
                        (expr 
                          (literal 196)))) )))) , 
            (argument 
              (expr 
                (literal 11)))))) ' \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) ' \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal " Game Controls "))) , 
            (argument 
              (expr 
                (literal 11)))))) ' \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "     General                             Block Control      "))) , 
            (argument 
              (expr 
                (literal 13)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "                                     
                  (Rotate)"))) , 
            (argument 
              (expr 
                (literal 15)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (expr 
                  (expr 
                    (literal "   P - Pause                                 ")) + 
                  (expr 
                    (variable_or_function_call CHR$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (literal 24)))) )))) + 
                (expr 
                  (literal " 
                    (or 5)   ")))) , 
            (argument 
              (expr 
                (literal 16)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (expr 
                  (expr 
                    (expr 
                      (expr 
                        (literal "      Q - Quit                         
                          (Left) ")) + 
                      (expr 
                        (variable_or_function_call CHR$ 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (literal 27)))) )))) + 
                    (expr 
                      (literal "   "))) + 
                  (expr 
                    (variable_or_function_call CHR$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (literal 26)))) )))) + 
                (expr 
                  (literal " 
                    (Right)   ")))) , 
            (argument 
              (expr 
                (literal 17)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (expr 
                  (literal "                                    ")) + 
                (expr 
                  (variable_or_function_call CHR$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (literal 25)))) ))))) , 
            (argument 
              (expr 
                (literal 18)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "                                          
                  (Drop)      "))) , 
            (argument 
              (expr 
                (literal 19)))))) \n \n 
      (statement 
        (do_loop_statement DO 
          (block ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call kbd$) = 
                (expr 
                  (variable_or_function_call UCASE$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call INKEY$)))) ))))) \n) LOOP 
          (loop_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call kbd$)) = 
              (expr 
                (literal "")))))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call kbd$)) = 
          (expr 
            (literal "Q"))) THEN ' 
        (then_block \n 
          (statement 
            (call_statement 
              (untyped_id CLS))) \n 
          (statement 
            (locate_statement LOCATE 
              (expr 
                (literal 10)) , 
              (expr 
                (literal 30)))) : 
          (statement 
            (print_statement PRINT 
              (print_argument 
                (expr 
                  (literal "Really quit? 
                    (Y/N)")) ;))) \n 
          (statement 
            (do_loop_statement DO 
              (block \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call kbd$) = 
                    (expr 
                      (variable_or_function_call UCASE$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call INKEY$)))) ))))) \n) LOOP 
              (loop_condition WHILE 
                (expr 
                  (expr 
                    (variable_or_function_call kbd$)) = 
                  (expr 
                    (literal "")))))) \n 
          (if_block_statement IF 
            (expr 
              (expr 
                (variable_or_function_call kbd$)) = 
              (expr 
                (literal "Y"))) THEN \n 
            (then_block 
              (statement 
                (call_statement 
                  (untyped_id CLS))) \n 
              (statement 
                (end_statement END)) \n) 
            (end_if_statement END IF)) \n) 
        (end_if_statement END IF)) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id DrawAllShapes) 
    (block \n \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id b) AS 
            (type_name 
              (untyped_id BlockType))))) \n 
      (statement 
        (screen_statement SCREEN 
          (expr 
            (variable_or_function_call ScreenMode)))) ' \n \n ' \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call ScreenMode)) = 
          (expr 
            (literal 7))) THEN \n 
        (then_block 
          (statement 
            (dim_statement DIM 
              (dim_variable Colors 
                (dim_array_bounds 
                  ( 
                    (dim_subscript 
                      (expr 
                        (literal 0)) TO 
                      (expr 
                        (literal 15))) ))))) ' \n 
          (statement 
            (palette_statement PALETTE USING 
              (variable_or_function_call Colors))) ' \n 
          (statement 
            (for_next_statement FOR i = 
              (expr 
                (literal 1)) TO 
              (expr 
                (variable_or_function_call NUMSTYLES)) 
              (block ' \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call BlockColor 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call i)))) )) = 
                    (expr 
                      (expr 
                        ( 
                          (expr 
                            (expr 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call i)) - 
                                  (expr 
                                    (literal 1))) )) MOD 
                            (expr 
                              (literal 7))) )) + 
                      (expr 
                        (literal 1))))) \n) NEXT i)) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (for_next_statement FOR i = 
                (expr 
                  (literal 1)) TO 
                (expr 
                  (variable_or_function_call NUMSTYLES)) 
                (block ' \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call BlockColor 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call i)))) )) = 
                      (expr 
                        (expr 
                          ( 
                            (expr 
                              (expr 
                                ( 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call i)) - 
                                    (expr 
                                      (literal 1))) )) MOD 
                              (expr 
                                (literal 3))) )) + 
                        (expr 
                          (literal 1))))) \n) NEXT i)) \n)) 
        (end_if_statement END IF)) \n \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Count) = 
          (expr 
            (literal 0)))) ' \n 
      (statement 
        (for_next_statement FOR shape = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call NUMSTYLES)) 
          (block ' \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call RtSide) = 
                (expr 
                  (literal 4)))) \n 
            (statement 
              (do_loop_statement DO 
                (block \n 
                  (statement 
                    (if_inline_statement IF 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call BlockShape 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call RtSide)) - 
                                      (expr 
                                        (literal 1)))) , 
                                  (argument 
                                    (expr 
                                      (literal 0))) , 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call shape)))) ))) = 
                          (expr 
                            (literal 1))) OR 
                        (expr 
                          (expr 
                            (variable_or_function_call BlockShape 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call RtSide)) - 
                                      (expr 
                                        (literal 1)))) , 
                                  (argument 
                                    (expr 
                                      (literal 1))) , 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call shape)))) ))) = 
                          (expr 
                            (literal 1)))) THEN 
                      (if_inline_action 
                        (statement 
                          (exit_statement EXIT DO))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call RtSide) = 
                      (expr 
                        (expr 
                          (variable_or_function_call RtSide)) - 
                        (expr 
                          (literal 1))))) \n) LOOP 
                (loop_condition UNTIL 
                  (expr 
                    (expr 
                      (variable_or_function_call RtSide)) = 
                    (expr 
                      (literal 1)))))) \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call LtSide) = 
                (expr 
                  (literal 0)))) \n 
            (statement 
              (do_loop_statement DO 
                (block \n 
                  (statement 
                    (if_inline_statement IF 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call BlockShape 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call LtSide))) , 
                                  (argument 
                                    (expr 
                                      (literal 0))) , 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call shape)))) ))) = 
                          (expr 
                            (literal 1))) OR 
                        (expr 
                          (expr 
                            (variable_or_function_call BlockShape 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call LtSide))) , 
                                  (argument 
                                    (expr 
                                      (literal 1))) , 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call shape)))) ))) = 
                          (expr 
                            (literal 1)))) THEN 
                      (if_inline_action 
                        (statement 
                          (exit_statement EXIT DO))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call LtSide) = 
                      (expr 
                        (expr 
                          (variable_or_function_call LtSide)) + 
                        (expr 
                          (literal 1))))) \n) LOOP 
                (loop_condition UNTIL 
                  (expr 
                    (expr 
                      (variable_or_function_call LtSide)) = 
                    (expr 
                      (literal 3)))))) \n \n 
            (statement 
              (for_next_statement FOR Rotation = 
                (expr 
                  (literal 0)) TO 
                (expr 
                  (literal 3)) 
                (block ' \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call b.X) = 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call Rotation)) * 
                          (expr 
                            (literal 4))) + 
                        (expr 
                          (literal 2))))) ' \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call b.Y) = 
                      (expr 
                        (expr 
                          (variable_or_function_call Count)) + 
                        (expr 
                          (literal 2))))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call b.Rotation) = 
                      (expr 
                        (variable_or_function_call Rotation)))) \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call b.Style) = 
                      (expr 
                        (variable_or_function_call shape)))) \n 
                  (statement 
                    (call_statement 
                      (untyped_id Show) 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call b)))))) ' \n \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call X) = 
                      (expr 
                        (variable_or_function_call b.X)))) : 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Y) = 
                      (expr 
                        (variable_or_function_call b.Y)))) \n 
                  (statement 
                    (select_case_statement SELECT CASE 
                      (expr 
                        (variable_or_function_call Rotation)) 
                      (before_first_case ' \n) 
                      (case_block 
                        (case_statement CASE 
                          (case_expr 
                            (expr 
                              (literal 0)))) 
                        (block ' \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call x1) = 
                              (expr 
                                (variable_or_function_call X)))) : 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call x2) = 
                              (expr 
                                (expr 
                                  (variable_or_function_call X)) + 
                                (expr 
                                  (variable_or_function_call RtSide))))) : 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call y1) = 
                              (expr 
                                (variable_or_function_call Y)))) : 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call y2) = 
                              (expr 
                                (expr 
                                  (variable_or_function_call Y)) + 
                                (expr 
                                  (literal 2))))) \n)) 
                      (case_block 
                        (case_statement CASE 
                          (case_expr 
                            (expr 
                              (literal 1)))) 
                        (block ' \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call x1) = 
                              (expr 
                                (expr 
                                  (variable_or_function_call X)) + 
                                (expr 
                                  (literal 1))))) : 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call x2) = 
                              (expr 
                                (expr 
                                  (variable_or_function_call X)) + 
                                (expr 
                                  (literal 3))))) : 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call y1) = 
                              (expr 
                                (expr 
                                  (variable_or_function_call Y)) - 
                                (expr 
                                  (literal 1))))) : 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call y2) = 
                              (expr 
                                (expr 
                                  (expr 
                                    (variable_or_function_call Y)) + 
                                  (expr 
                                    (variable_or_function_call RtSide))) - 
                                (expr 
                                  (literal 1))))) \n)) 
                      (case_block 
                        (case_statement CASE 
                          (case_expr 
                            (expr 
                              (literal 2)))) 
                        (block ' \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call x1) = 
                              (expr 
                                (variable_or_function_call X)))) : 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call x2) = 
                              (expr 
                                (expr 
                                  (expr 
                                    (variable_or_function_call X)) + 
                                  (expr 
                                    (literal 4))) - 
                                (expr 
                                  (variable_or_function_call LtSide))))) : 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call y1) = 
                              (expr 
                                (variable_or_function_call Y)))) : 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call y2) = 
                              (expr 
                                (expr 
                                  (variable_or_function_call Y)) + 
                                (expr 
                                  (literal 2))))) \n)) 
                      (case_block 
                        (case_statement CASE 
                          (case_expr 
                            (expr 
                              (literal 3)))) 
                        (block ' \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call x1) = 
                              (expr 
                                (expr 
                                  (variable_or_function_call X)) + 
                                (expr 
                                  (literal 1))))) : 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call x2) = 
                              (expr 
                                (expr 
                                  (variable_or_function_call X)) + 
                                (expr 
                                  (literal 3))))) : 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call y1) = 
                              (expr 
                                (expr 
                                  (variable_or_function_call Y)) - 
                                (expr 
                                  (literal 1))))) : 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call y2) = 
                              (expr 
                                (expr 
                                  (expr 
                                    (variable_or_function_call Y)) + 
                                  (expr 
                                    (literal 3))) - 
                                (expr 
                                  (variable_or_function_call LtSide))))) \n)) 
                      (end_select_statement END SELECT))) \n \n ' \n 
                  (statement 
                    (get_graphics_statement GET 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call x1)) * 
                          (expr 
                            (variable_or_function_call XSIZE))) , 
                        (expr 
                          (expr 
                            (variable_or_function_call y1)) * 
                          (expr 
                            (variable_or_function_call YSIZE))) ) - 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call x2)) * 
                          (expr 
                            (variable_or_function_call XSIZE))) , 
                        (expr 
                          (expr 
                            (variable_or_function_call y2)) * 
                          (expr 
                            (variable_or_function_call YSIZE))) ) , 
                      (variable_or_function_call BlockImage 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (expr 
                                  ( 
                                    (expr 
                                      (expr 
                                        (expr 
                                          ( 
                                            (expr 
                                              (expr 
                                                (variable_or_function_call shape)) - 
                                              (expr 
                                                (literal 1))) )) * 
                                        (expr 
                                          (literal 4))) + 
                                      (expr 
                                        (variable_or_function_call Rotation))) )) * 
                                (expr 
                                  (variable_or_function_call ELEMENTSPERBLOCK))))) )))) \n \n) NEXT Rotation)) \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Count) = 
                (expr 
                  (expr 
                    (variable_or_function_call Count)) + 
                  (expr 
                    (literal 5))))) ' \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call Count)) = 
                (expr 
                  (literal 20))) THEN ' 
              (then_block \n 
                (statement 
                  (call_statement 
                    (untyped_id CLS))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Count) = 
                    (expr 
                      (literal 0)))) \n) 
              (end_if_statement END IF)) \n \n) NEXT shape)) \n \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n \n ' \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call ScreenMode)) = 
          (expr 
            (literal 7))) THEN \n 
        (then_block 
          (statement 
            (palette_statement PALETTE)) ' \n 
          (statement 
            (palette_statement PALETTE 
              (expr 
                (literal 6)) , 
              (expr 
                (literal 14)))) ' \n 
          (statement 
            (palette_statement PALETTE 
              (expr 
                (literal 14)) , 
              (expr 
                (literal 15)))) ' \n) 
        (end_if_statement END IF)) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id DrawBlock) 
    ( 
      (parameter_list 
        (parameter X) , 
        (parameter Y) , 
        (parameter FillColor)) ) 
    (block \n \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call X)) * 
                (expr 
                  (variable_or_function_call XSIZE))) + 
              (expr 
                (literal 2))) , 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call Y)) * 
                (expr 
                  (variable_or_function_call YSIZE))) + 
              (expr 
                (literal 2))) ) - 
          ( 
            (expr 
              (expr 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 1))) )) * 
                (expr 
                  (variable_or_function_call XSIZE))) - 
              (expr 
                (literal 2))) , 
            (expr 
              (expr 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 1))) )) * 
                (expr 
                  (variable_or_function_call YSIZE))) - 
              (expr 
                (literal 2))) ) , 
          (expr 
            (variable_or_function_call FillColor)) , 
          (box_style BF))) \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call X)) * 
                (expr 
                  (variable_or_function_call XSIZE))) + 
              (expr 
                (literal 1))) , 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call Y)) * 
                (expr 
                  (variable_or_function_call YSIZE))) + 
              (expr 
                (literal 1))) ) - 
          ( 
            (expr 
              (expr 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 1))) )) * 
                (expr 
                  (variable_or_function_call XSIZE))) - 
              (expr 
                (literal 1))) , 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call Y)) * 
                (expr 
                  (variable_or_function_call YSIZE))) + 
              (expr 
                (literal 1))) ) , 
          (expr 
            (expr 
              (variable_or_function_call FillColor)) + 
            (expr 
              (literal 8))))) \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call X)) * 
                (expr 
                  (variable_or_function_call XSIZE))) + 
              (expr 
                (literal 1))) , 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call Y)) * 
                (expr 
                  (variable_or_function_call YSIZE))) + 
              (expr 
                (literal 1))) ) - 
          ( 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call X)) * 
                (expr 
                  (variable_or_function_call XSIZE))) + 
              (expr 
                (literal 1))) , 
            (expr 
              (expr 
                (expr 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 1))) )) * 
                (expr 
                  (variable_or_function_call YSIZE))) - 
              (expr 
                (literal 1))) ) , 
          (expr 
            (expr 
              (variable_or_function_call FillColor)) + 
            (expr 
              (literal 8))))) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id DrawPattern) 
    ( 
      (parameter_list 
        (parameter Pattern)) ) 
    (block \n \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call X) = 
          (expr 
            (literal 1)))) : 
      (statement 
        (assignment_statement 
          (variable_or_function_call Y) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id Temp2) 
            (dim_array_bounds 
              ( 
                (dim_subscript 
                  (expr 
                    (literal 215))) )) AS 
            (type_name INTEGER)))) ' \n \n ' \n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call Pattern)) 
          (before_first_case \n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 0)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call j) = 
                  (expr 
                    (expr 
                      (variable_or_function_call Y)) + 
                    (expr 
                      (literal 21))))) \n 
              (statement 
                (for_next_statement FOR i = 
                  (expr 
                    (variable_or_function_call X)) TO 
                  (expr 
                    (expr 
                      (variable_or_function_call X)) + 
                    (expr 
                      (literal 27))) STEP 
                  (expr 
                    (literal 3)) 
                  (block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call j) = 
                        (expr 
                          (expr 
                            (variable_or_function_call j)) - 
                          (expr 
                            (literal 2))))) \n 
                    (statement 
                      (line_statement LINE 
                        ( 
                          (expr 
                            (variable_or_function_call i)) , 
                          (expr 
                            (variable_or_function_call j)) ) - 
                        ( 
                          (expr 
                            (variable_or_function_call i)) , 
                          (expr 
                            (expr 
                              (variable_or_function_call Y)) + 
                            (expr 
                              (literal 19))) ) , 
                        (expr 
                          (literal 12)) , 
                        (box_style BF))) \n) NEXT i)) \n 
              (statement 
                (line_statement LINE 
                  ( 
                    (expr 
                      (variable_or_function_call X)) , 
                    (expr 
                      (variable_or_function_call Y)) ) - 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 30))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 19))) ) , 
                  (expr 
                    (literal 4)) , 
                  (box_style B))) \n 
              (statement 
                (line_statement LINE 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 1))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 1))) ) - 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 31))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 18))) ) , 
                  (expr 
                    (literal 4)) , 
                  (box_style B))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 1)))) 
            (block \n 
              (statement 
                (line_statement LINE 
                  ( 
                    (expr 
                      (variable_or_function_call X)) , 
                    (expr 
                      (variable_or_function_call Y)) ) - 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 8))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 12))) ) , 
                  (expr 
                    (literal 1)) , 
                  (box_style BF))) \n 
              (statement 
                (line_statement LINE 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 9))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 8))) ) - 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 24))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 20))) ) , 
                  (expr 
                    (literal 2)) , 
                  (box_style BF))) \n 
              (statement 
                (line_statement LINE 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 25))) , 
                    (expr 
                      (variable_or_function_call Y)) ) - 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 32))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 12))) ) , 
                  (expr 
                    (literal 3)) , 
                  (box_style BF))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 2)))) 
            (block \n 
              (statement 
                (line_statement LINE 
                  ( 
                    (expr 
                      (variable_or_function_call X)) , 
                    (expr 
                      (variable_or_function_call Y)) ) - 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 29))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 18))) ) , 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) / 
                      (expr 
                        (literal 32))) + 
                    (expr 
                      (literal 1))) , 
                  (box_style B))) \n 
              (statement 
                (line_statement LINE 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 1))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 1))) ) - 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 28))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 17))) ) , 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) / 
                      (expr 
                        (literal 32))) + 
                    (expr 
                      (literal 2))) , 
                  (box_style B))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 3)))) 
            (block \n 
              (statement 
                (for_next_statement FOR i = 
                  (expr 
                    (literal 0)) TO 
                  (expr 
                    (literal 9)) STEP 
                  (expr 
                    (literal 2)) 
                  (block \n 
                    (statement 
                      (line_statement LINE 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call X)) + 
                            (expr 
                              (variable_or_function_call i))) , 
                          (expr 
                            (expr 
                              (variable_or_function_call Y)) + 
                            (expr 
                              (variable_or_function_call i))) ) - 
                        ( 
                          (expr 
                            (expr 
                              (expr 
                                (variable_or_function_call X)) + 
                              (expr 
                                (literal 29))) - 
                            (expr 
                              (variable_or_function_call i))) , 
                          (expr 
                            (expr 
                              (expr 
                                (variable_or_function_call Y)) + 
                              (expr 
                                (literal 18))) - 
                            (expr 
                              (variable_or_function_call i))) ) , 
                        (expr 
                          (variable_or_function_call i)) , 
                        (box_style B))) \n) NEXT i)) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 4)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call j) = 
                  (expr 
                    (literal 0)))) \n 
              (statement 
                (for_next_statement FOR i = 
                  (expr 
                    (literal 1)) TO 
                  (expr 
                    (literal 30)) STEP 
                  (expr 
                    (literal 3)) 
                  (block \n 
                    (statement 
                      (line_statement LINE 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call X)) + 
                            (expr 
                              (variable_or_function_call i))) , 
                          (expr 
                            (expr 
                              (variable_or_function_call Y)) + 
                            (expr 
                              (variable_or_function_call j))) ) - 
                        ( 
                          (expr 
                            (expr 
                              (expr 
                                (variable_or_function_call X)) + 
                              (expr 
                                (literal 30))) - 
                            (expr 
                              (variable_or_function_call i))) , 
                          (expr 
                            (expr 
                              (variable_or_function_call Y)) + 
                            (expr 
                              (variable_or_function_call j))) ) , 
                        (expr 
                          (variable_or_function_call i)))) \n 
                    (statement 
                      (line_statement LINE 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call X)) + 
                            (expr 
                              (variable_or_function_call i))) , 
                          (expr 
                            (expr 
                              (expr 
                                (variable_or_function_call Y)) + 
                              (expr 
                                (literal 19))) - 
                            (expr 
                              (variable_or_function_call j))) ) - 
                        ( 
                          (expr 
                            (expr 
                              (expr 
                                (variable_or_function_call X)) + 
                              (expr 
                                (literal 30))) - 
                            (expr 
                              (variable_or_function_call i))) , 
                          (expr 
                            (expr 
                              (expr 
                                (variable_or_function_call Y)) + 
                              (expr 
                                (literal 19))) - 
                            (expr 
                              (variable_or_function_call j))) ) , 
                        (expr 
                          (variable_or_function_call i)))) \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call j) = 
                        (expr 
                          (expr 
                            (variable_or_function_call j)) + 
                          (expr 
                            (literal 2))))) \n) NEXT i)) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 5)))) 
            (block \n 
              (statement 
                (line_statement LINE 
                  ( 
                    (expr 
                      (variable_or_function_call X)) , 
                    (expr 
                      (variable_or_function_call Y)) ) - 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 29))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 4))) ) , 
                  (expr 
                    (literal 1)) , 
                  (box_style BF))) \n 
              (statement 
                (line_statement LINE 
                  ( 
                    (expr 
                      (variable_or_function_call X)) , 
                    (expr 
                      (variable_or_function_call Y)) ) - 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 4))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 18))) ) , 
                  (expr 
                    (literal 1)) , 
                  (box_style BF))) \n 
              (statement 
                (line_statement LINE 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 7))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 7))) ) - 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 29))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 11))) ) , 
                  (expr 
                    (literal 5)) , 
                  (box_style BF))) \n 
              (statement 
                (line_statement LINE 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 7))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 7))) ) - 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 11))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 18))) ) , 
                  (expr 
                    (literal 5)) , 
                  (box_style BF))) \n 
              (statement 
                (line_statement LINE 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 14))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 14))) ) - 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 29))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 18))) ) , 
                  (expr 
                    (literal 4)) , 
                  (box_style BF))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 6)))) 
            (block \n 
              (statement 
                (line_statement LINE 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 15))) , 
                    (expr 
                      (variable_or_function_call Y)) ) - 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 17))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 19))) ) , 
                  (expr 
                    (literal 1)))) \n 
              (statement 
                (line_statement LINE 
                  ( 
                    (expr 
                      (variable_or_function_call X)) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 9))) ) - 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 31))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 11))) ) , 
                  (expr 
                    (literal 2)))) \n 
              (statement 
                (line_statement LINE 
                  ( 
                    (expr 
                      (variable_or_function_call X)) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 1))) ) - 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 31))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 18))) ) , 
                  (expr 
                    (literal 9)))) \n 
              (statement 
                (line_statement LINE 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 30))) , 
                    (expr 
                      (variable_or_function_call Y)) ) - 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 1))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 19))) ) , 
                  (expr 
                    (literal 10)))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 7)))) 
            (block \n 
              (statement 
                (for_next_statement FOR i = 
                  (expr 
                    (literal 1)) TO 
                  (expr 
                    (literal 6)) 
                  (block \n 
                    (statement 
                      (circle_statement CIRCLE 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call X)) + 
                            (expr 
                              (literal 16))) , 
                          (expr 
                            (expr 
                              (variable_or_function_call Y)) + 
                            (expr 
                              (literal 10))) ) , 
                        (expr 
                          (variable_or_function_call i)) , 
                        (expr 
                          (variable_or_function_call i)))) \n) NEXT i)) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 8)))) 
            (block \n 
              (statement 
                (for_next_statement FOR i = 
                  (expr 
                    (variable_or_function_call X)) TO 
                  (expr 
                    (expr 
                      (variable_or_function_call X)) + 
                    (expr 
                      (literal 30))) STEP 
                  (expr 
                    (literal 10)) 
                  (block \n 
                    (statement 
                      (circle_statement CIRCLE 
                        ( 
                          (expr 
                            (variable_or_function_call i)) , 
                          (expr 
                            (expr 
                              (variable_or_function_call Y)) + 
                            (expr 
                              (literal 9))) ) , 
                        (expr 
                          (literal 10)) , 
                        (expr 
                          (expr 
                            (expr 
                              (variable_or_function_call Y)) / 
                            (expr 
                              (literal 20))) + 
                          (expr 
                            (literal 1))))) \n) NEXT i)) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 9)))) 
            (block \n 
              (statement 
                (line_statement LINE 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 1))) , 
                    (expr 
                      (variable_or_function_call Y)) ) - 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 1))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 18))) ) , 
                  (expr 
                    (literal 3)))) \n 
              (statement 
                (line_statement LINE 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 1))) , 
                    (expr 
                      (variable_or_function_call Y)) ) - 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 12))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 18))) ) , 
                  (expr 
                    (literal 3)))) \n 
              (statement 
                (line_statement LINE 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 1))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 18))) ) - 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 12))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 18))) ) , 
                  (expr 
                    (literal 3)))) \n 
              (statement 
                (line_statement LINE 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 30))) , 
                    (expr 
                      (variable_or_function_call Y)) ) - 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 30))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 18))) ) , 
                  (expr 
                    (literal 3)))) \n 
              (statement 
                (line_statement LINE 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 30))) , 
                    (expr 
                      (variable_or_function_call Y)) ) - 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 19))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 18))) ) , 
                  (expr 
                    (literal 3)))) \n 
              (statement 
                (line_statement LINE 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 30))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 18))) ) - 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 19))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 18))) ) , 
                  (expr 
                    (literal 3)))) \n 
              (statement 
                (line_statement LINE 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 4))) , 
                    (expr 
                      (variable_or_function_call Y)) ) - 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 26))) , 
                    (expr 
                      (variable_or_function_call Y)) ) , 
                  (expr 
                    (literal 1)))) \n 
              (statement 
                (line_statement LINE 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 4))) , 
                    (expr 
                      (variable_or_function_call Y)) ) - 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 15))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 18))) ) , 
                  (expr 
                    (literal 1)))) \n 
              (statement 
                (line_statement LINE 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 26))) , 
                    (expr 
                      (variable_or_function_call Y)) ) - 
                  ( 
                    (expr 
                      (expr 
                        (variable_or_function_call X)) + 
                      (expr 
                        (literal 15))) , 
                    (expr 
                      (expr 
                        (variable_or_function_call Y)) + 
                      (expr 
                        (literal 18))) ) , 
                  (expr 
                    (literal 1)))) \n)) 
          (end_select_statement END SELECT))) \n \n 
      (statement 
        (get_graphics_statement GET 
          ( 
            (expr 
              (literal 0)) , 
            (expr 
              (literal 0)) ) - 
          ( 
            (expr 
              (literal 31)) , 
            (expr 
              (literal 19)) ) , 
          (variable_or_function_call Temp2))) ' \n \n ' \n 
      (statement 
        (for_next_statement FOR H = 
          (expr 
            (literal 0)) TO 
          (expr 
            (literal 319)) STEP 
          (expr 
            (literal 32)) 
          (block \n 
            (statement 
              (for_next_statement FOR V = 
                (expr 
                  (literal 0)) TO 
                (expr 
                  (literal 199)) STEP 
                (expr 
                  (literal 20)) 
                (block \n 
                  (statement 
                    (put_graphics_statement PUT 
                      ( 
                        (expr 
                          (variable_or_function_call H)) , 
                        (expr 
                          (variable_or_function_call V)) ) , 
                      (variable_or_function_call Temp2) , PSET)) \n) NEXT V)) \n) NEXT H)) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id DrawPlayingField) 
    (block \n \n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call ScreenMode)) 
          (before_first_case ' \n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 7)))) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call WellColor) = 
                  (expr 
                    (variable_or_function_call WELLCOLOR7)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call BorderColor) = 
                  (expr 
                    (variable_or_function_call BORDERCOLOR7)))) \n \n)) 
          (case_block 
            (case_statement CASE ELSE) 
            (block ' \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call WellColor) = 
                  (expr 
                    (variable_or_function_call WELLCOLOR1)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call BorderColor) = 
                  (expr 
                    (variable_or_function_call BORDERCOLOR1)))) \n)) 
          (end_select_statement END SELECT))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call ScreenWidth) = 
          (expr 
            (literal 40)))) ' \n \n ' \n 
      (statement 
        (call_statement 
          (untyped_id DrawPattern) 
          (argument_list 
            (argument 
              (expr 
                (variable_or_function_call Level)))))) \n \n ' \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call WELLX)) - 
              (expr 
                (literal 1))) , 
            (expr 
              (expr 
                (variable_or_function_call WELLY)) - 
              (expr 
                (literal 5))) ) - 
          ( 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call WELLX)) + 
                (expr 
                  (expr 
                    (variable_or_function_call WELLWIDTH)) * 
                  (expr 
                    (variable_or_function_call XSIZE)))) + 
              (expr 
                (literal 1))) , 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call WELLY)) + 
                (expr 
                  (expr 
                    (variable_or_function_call WELLHEIGHT)) * 
                  (expr 
                    (variable_or_function_call YSIZE)))) + 
              (expr 
                (literal 1))) ) , 
          (expr 
            (variable_or_function_call WellColor)) , 
          (box_style BF))) \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call WELLX)) - 
              (expr 
                (literal 1))) , 
            (expr 
              (expr 
                (variable_or_function_call WELLY)) - 
              (expr 
                (literal 5))) ) - 
          ( 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call WELLX)) + 
                (expr 
                  (expr 
                    (variable_or_function_call WELLWIDTH)) * 
                  (expr 
                    (variable_or_function_call XSIZE)))) + 
              (expr 
                (literal 1))) , 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call WELLY)) + 
                (expr 
                  (expr 
                    (variable_or_function_call WELLHEIGHT)) * 
                  (expr 
                    (variable_or_function_call YSIZE)))) + 
              (expr 
                (literal 1))) ) , 
          (expr 
            (variable_or_function_call BorderColor)) , 
          (box_style B))) \n \n ' \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (variable_or_function_call XSIZE)) , 
            (expr 
              (expr 
                (variable_or_function_call WELLY)) - 
              (expr 
                (literal 5))) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call XSIZE)) * 
              (expr 
                (literal 8))) , 
            (expr 
              (expr 
                (variable_or_function_call WELLY)) + 
              (expr 
                (literal 12))) ) , 
          (expr 
            (variable_or_function_call WellColor)) , 
          (box_style BF))) \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (variable_or_function_call XSIZE)) , 
            (expr 
              (expr 
                (variable_or_function_call WELLY)) - 
              (expr 
                (literal 5))) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call XSIZE)) * 
              (expr 
                (literal 8))) , 
            (expr 
              (expr 
                (variable_or_function_call WELLY)) + 
              (expr 
                (literal 12))) ) , 
          (expr 
            (variable_or_function_call BorderColor)) , 
          (box_style B))) \n \n ' \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (variable_or_function_call XSIZE)) , 
            (expr 
              (expr 
                (variable_or_function_call WELLY)) + 
              (expr 
                (literal 20))) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call WELLX)) - 
              (expr 
                (expr 
                  (literal 2)) * 
                (expr 
                  (variable_or_function_call XSIZE)))) , 
            (expr 
              (literal 78)) ) , 
          (expr 
            (variable_or_function_call WellColor)) , 
          (box_style BF))) \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (variable_or_function_call XSIZE)) , 
            (expr 
              (expr 
                (variable_or_function_call WELLY)) + 
              (expr 
                (literal 20))) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call WELLX)) - 
              (expr 
                (expr 
                  (literal 2)) * 
                (expr 
                  (variable_or_function_call XSIZE)))) , 
            (expr 
              (literal 78)) ) , 
          (expr 
            (variable_or_function_call BorderColor)) , 
          (box_style B))) \n \n 
      (statement 
        (call_statement 
          (untyped_id MakeInfoBox))) ' \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 12)))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 3)) , 
          (expr 
            (literal 5)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "QBLOCKS"))))) ' \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call BorderColor)))) \n \n ' \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 6)) , 
          (expr 
            (literal 4)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "Score:")) ;))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 7)) , 
          (expr 
            (literal 4)))) : 
      (statement 
        (print_using_statement PRINT USING 
          (expr 
            (literal "#,###,###")) ; 
          (print_argument 
            (expr 
              (variable_or_function_call Score))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 9)) , 
          (expr 
            (literal 4)))) : 
      (statement 
        (print_using_statement PRINT USING 
          (expr 
            (literal "Level: ##")) ; 
          (print_argument 
            (expr 
              (variable_or_function_call Level))))) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (function_statement FUNCTION GameOver 
    (block \n \n 
      (statement 
        (play_statement PLAY 
          (expr 
            (variable_or_function_call PLAYGAMEOVER)))) ' \n 
      (statement 
        (call_statement 
          (untyped_id MakeInfoBox))) \n \n 
      (statement 
        (do_loop_statement DO 
          (do_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call INKEY$)) <> 
              (expr 
                (literal "")))) 
          (block :) LOOP)) ' \n \n ' \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 14)) , 
          (expr 
            (literal 4)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "Game Over"))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 17)) , 
          (expr 
            (literal 6)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "Play"))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 18)) , 
          (expr 
            (literal 5)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "again?"))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 20)) , 
          (expr 
            (literal 6)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "
                (Y/N)"))))) \n \n ' \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call a$) = 
                (expr 
                  (variable_or_function_call UCASE$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call INKEY$)))) ))))) ' \n) LOOP 
          (loop_condition UNTIL 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call a$)) = 
                (expr 
                  (literal "Y"))) OR 
              (expr 
                (expr 
                  (variable_or_function_call a$)) = 
                (expr 
                  (literal "N"))))))) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call a$)) = 
          (expr 
            (literal "Y"))) THEN ' 
        (then_block \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call GameOver) = 
              (expr 
                (variable_or_function_call FALSE)))) ' \n) 
        (else_block_statement ELSE 
          (else_block ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call GameOver) = 
                (expr 
                  (variable_or_function_call TRUE)))) ' \n)) 
        (end_if_statement END IF)) \n \n) 
    (end_function_statement END FUNCTION)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id InitScreen) 
    (block \n \n 
      (statement 
        (call_statement 
          (untyped_id DrawPlayingField))) ' \n \n ' \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 12)))) ' \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 14)) , 
          (expr 
            (literal 5)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "Select")) ;))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 16)) , 
          (expr 
            (literal 5)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "start")) ;))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 18)) , 
          (expr 
            (literal 5)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "level?")) ;))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 20)) , 
          (expr 
            (literal 5)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "
                (0 - 9)")) ;))) \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call BorderColor)))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Level) = 
          (expr 
            (variable_or_function_call TRUE)))) ' \n \n ' \n 
      (statement 
        (do_loop_statement DO 
          (block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call a$) = 
                (expr 
                  (variable_or_function_call UCASE$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call INKEY$)))) ))))) \n) LOOP 
          (loop_condition WHILE 
            (expr 
              (expr 
                ( 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call a$)) > 
                      (expr 
                        (literal "9"))) OR 
                    (expr 
                      (expr 
                        (variable_or_function_call a$)) < 
                      (expr 
                        (literal "0")))) )) AND 
              (expr 
                (expr 
                  (variable_or_function_call a$)) <> 
                (expr 
                  (literal "Q"))))))) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call a$)) = 
          (expr 
            (literal "Q"))) THEN \n 
        (then_block 
          (statement 
            (exit_statement EXIT SUB)) \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Level) = 
                (expr 
                  (variable_or_function_call VAL 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call a$)))) ))))) \n)) 
        (end_if_statement END IF)) \n \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call Level)) > 
            (expr 
              (literal 0))) THEN 
          (if_inline_action 
            (statement 
              (call_statement 
                (untyped_id DrawPlayingField)))))) ' \n 
      (statement 
        (call_statement 
          (untyped_id RedrawControls))) ' \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id MakeInfoBox) 
    (block \n \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call WELLX)) - 
              (expr 
                (expr 
                  (literal 9)) * 
                (expr 
                  (variable_or_function_call XSIZE)))) , 
            (expr 
              (literal 90)) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call WELLX)) - 
              (expr 
                (expr 
                  (literal 2)) * 
                (expr 
                  (variable_or_function_call XSIZE)))) , 
            (expr 
              (literal 185)) ) , 
          (expr 
            (variable_or_function_call WellColor)) , 
          (box_style BF))) ' \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call WELLX)) - 
              (expr 
                (expr 
                  (literal 9)) * 
                (expr 
                  (variable_or_function_call XSIZE)))) , 
            (expr 
              (literal 90)) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call WELLX)) - 
              (expr 
                (expr 
                  (literal 2)) * 
                (expr 
                  (variable_or_function_call XSIZE)))) , 
            (expr 
              (literal 185)) ) , 
          (expr 
            (variable_or_function_call BorderColor)) , 
          (box_style B))) ' \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id NewBlock) 
    (block \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurBlock.Style) = 
          (expr 
            (expr 
              (variable_or_function_call INT 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (expr 
                          (variable_or_function_call RND 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (literal 1)))) ))) * 
                        (expr 
                          (variable_or_function_call NUMSTYLES))))) ))) + 
            (expr 
              (literal 1))))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurBlock.X) = 
          (expr 
            (expr 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call WELLWIDTH)) \ 
                  (expr 
                    (literal 2))) )) - 
            (expr 
              (literal 1))))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurBlock.Y) = 
          (expr 
            (literal 0)))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call CurBlock.Rotation) = 
          (expr 
            (literal 0)))) ' \n \n 
      (statement 
        (play_statement PLAY 
          (expr 
            (variable_or_function_call PLAYNEWBLOCK)))) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id PerformGame) 
    (block \n \n 
      (statement 
        (do_loop_statement DO 
          (block ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call a$) = 
                (expr 
                  (literal "")))) \n 
            (statement 
              (erase_statement ERASE WellBlocks)) ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Score) = 
                (expr 
                  (literal 0)))) ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Level) = 
                (expr 
                  (literal 0)))) ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call PrevScore) = 
                (expr 
                  (expr 
                    (variable_or_function_call BASESCORE)) - 
                  (expr 
                    (variable_or_function_call NEXTLEVEL))))) ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call GameTiltScore) = 
                (expr 
                  (variable_or_function_call WINGAME)))) ' \n \n 
            (statement 
              (call_statement 
                (untyped_id InitScreen))) ' \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call Level)) = 
                  (expr - 
                    (expr 
                      (literal 1)))) THEN 
                (if_inline_action 
                  (statement 
                    (exit_statement EXIT SUB))))) ' \n \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call TargetTime) = 
                (expr 
                  (expr 
                    (builtin_function 
                      (timer_function TIMER))) + 
                  (expr 
                    (expr 
                      (literal 1)) / 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call Level)) + 
                          (expr 
                            (literal 1))) )))))) ' \n 
            (statement 
              (do_loop_statement DO 
                (block ' \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call DoneWithThisBlock) = 
                      (expr 
                        (variable_or_function_call FALSE)))) ' \n 
                  (statement 
                    (call_statement 
                      (untyped_id NewBlock))) ' \n 
                  (statement 
                    (if_inline_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call CheckFit)) = 
                        (expr 
                          (variable_or_function_call FALSE))) THEN 
                      (if_inline_action 
                        (statement 
                          (exit_statement EXIT DO))))) ' \n 
                  (statement 
                    (call_statement 
                      (untyped_id PutBlock) 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call CurBlock)))))) ' \n \n 
                  (statement 
                    (do_loop_statement DO 
                      (block ' \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call OldBlock) = 
                            (expr 
                              (variable_or_function_call CurBlock)))) ' \n 
                        (statement 
                          (do_loop_statement DO 
                            (block ' \n \n 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call ValidEvent) = 
                                  (expr 
                                    (variable_or_function_call TRUE)))) ' \n 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call ans$) = 
                                  (expr 
                                    (variable_or_function_call UCASE$ 
                                      ( 
                                        (argument_list 
                                          (argument 
                                            (expr 
                                              (variable_or_function_call INKEY$)))) ))))) \n \n 
                              (if_block_statement IF 
                                (expr 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call ans$)) = 
                                    (expr 
                                      (variable_or_function_call PAUSE))) OR 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call ans$)) = 
                                    (expr 
                                      (variable_or_function_call QUIT)))) THEN \n 
                                (then_block 
                                  (statement 
                                    (call_statement 
                                      (untyped_id MakeInfoBox))) \n \n ' \n ' \n 
                                  (statement 
                                    (select_case_statement SELECT CASE 
                                      (expr 
                                        (variable_or_function_call ans$)) 
                                      (before_first_case \n) 
                                      (case_block 
                                        (case_statement CASE 
                                          (case_expr 
                                            (expr 
                                              (variable_or_function_call PAUSE)))) 
                                        (block \n 
                                          (statement 
                                            (call_statement 
                                              (untyped_id SOUND) 
                                              (argument_list 
                                                (argument 
                                                  (expr 
                                                    (literal 1100))) , 
                                                (argument 
                                                  (expr 
                                                    (literal .75)))))) \n 
                                          (statement 
                                            (locate_statement LOCATE 
                                              (expr 
                                                (literal 16)) , 
                                              (expr 
                                                (literal 6)))) : 
                                          (statement 
                                            (print_statement PRINT 
                                              (print_argument 
                                                (expr 
                                                  (literal "GAME")) ;))) \n 
                                          (statement 
                                            (locate_statement LOCATE 
                                              (expr 
                                                (literal 18)) , 
                                              (expr 
                                                (literal 5)))) : 
                                          (statement 
                                            (print_statement PRINT 
                                              (print_argument 
                                                (expr 
                                                  (literal "PAUSED")) ;))) \n 
                                          (statement 
                                            (do_loop_statement DO 
                                              (do_condition WHILE 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call INKEY$)) = 
                                                  (expr 
                                                    (literal "")))) 
                                              (block :) LOOP)) ' \n)) 
                                      (case_block 
                                        (case_statement CASE 
                                          (case_expr 
                                            (expr 
                                              (variable_or_function_call QUIT)))) 
                                        (block \n ' \n 
                                          (statement 
                                            (call_statement 
                                              (untyped_id SOUND) 
                                              (argument_list 
                                                (argument 
                                                  (expr 
                                                    (literal 1600))) , 
                                                (argument 
                                                  (expr 
                                                    (literal 1)))))) \n 
                                          (statement 
                                            (call_statement 
                                              (untyped_id SOUND) 
                                              (argument_list 
                                                (argument 
                                                  (expr 
                                                    (literal 1000))) , 
                                                (argument 
                                                  (expr 
                                                    (literal .75)))))) \n \n ' \n 
                                          (statement 
                                            (locate_statement LOCATE 
                                              (expr 
                                                (literal 15)) , 
                                              (expr 
                                                (literal 5)))) : 
                                          (statement 
                                            (print_statement PRINT 
                                              (print_argument 
                                                (expr 
                                                  (literal "Really")) ;))) \n 
                                          (statement 
                                            (locate_statement LOCATE 
                                              (expr 
                                                (literal 17)) , 
                                              (expr 
                                                (literal 6)))) : 
                                          (statement 
                                            (print_statement PRINT 
                                              (print_argument 
                                                (expr 
                                                  (literal "quit?")) ;))) \n 
                                          (statement 
                                            (locate_statement LOCATE 
                                              (expr 
                                                (literal 19)) , 
                                              (expr 
                                                (literal 6)))) : 
                                          (statement 
                                            (print_statement PRINT 
                                              (print_argument 
                                                (expr 
                                                  (literal "
                                                    (Y/N)")) ;))) \n 
                                          (statement 
                                            (do_loop_statement DO 
                                              (block \n 
                                                (statement 
                                                  (assignment_statement 
                                                    (variable_or_function_call a$) = 
                                                    (expr 
                                                      (variable_or_function_call UCASE$ 
                                                        ( 
                                                          (argument_list 
                                                            (argument 
                                                              (expr 
                                                                (variable_or_function_call INKEY$)))) ))))) \n) LOOP 
                                              (loop_condition UNTIL 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call a$)) <> 
                                                  (expr 
                                                    (literal "")))))) \n 
                                          (statement 
                                            (if_inline_statement IF 
                                              (expr 
                                                (expr 
                                                  (variable_or_function_call a$)) = 
                                                (expr 
                                                  (literal "Y"))) THEN 
                                              (if_inline_action 
                                                (statement 
                                                  (exit_statement EXIT SUB))))) \n)) 
                                      (end_select_statement END SELECT))) \n 
                                  (statement 
                                    (call_statement 
                                      (untyped_id RedrawControls))) ' \n \n) 
                                (else_block_statement ELSE 
                                  (else_block ' \n 
                                    (statement 
                                      (assignment_statement 
                                        (variable_or_function_call ans) = 
                                        (expr 
                                          (variable_or_function_call ASC 
                                            ( 
                                              (argument_list 
                                                (argument 
                                                  (expr 
                                                    (variable_or_function_call RIGHT$ 
                                                      ( 
                                                        (argument_list 
                                                          (argument 
                                                            (expr 
                                                              (expr 
                                                                (variable_or_function_call CHR$ 
                                                                  ( 
                                                                    (argument_list 
                                                                      (argument 
                                                                        (expr 
                                                                          (literal 0)))) ))) + 
                                                              (expr 
                                                                (variable_or_function_call ans$)))) , 
                                                          (argument 
                                                            (expr 
                                                              (literal 1)))) ))))) ))))) ' \n 
                                    (statement 
                                      (select_case_statement SELECT CASE 
                                        (expr 
                                          (variable_or_function_call ans)) 
                                        (before_first_case \n) 
                                        (case_block 
                                          (case_statement CASE 
                                            (case_expr 
                                              (expr 
                                                (variable_or_function_call DOWNARROW))) , 
                                            (case_expr 
                                              (expr 
                                                (variable_or_function_call DOWNARROW2))) , 
                                            (case_expr 
                                              (expr 
                                                (variable_or_function_call SPACEBAR)))) 
                                          (block ' \n 
                                            (statement 
                                              (do_loop_statement DO 
                                                (block ' \n 
                                                  (statement 
                                                    (assignment_statement 
                                                      (variable_or_function_call CurBlock.Y) = 
                                                      (expr 
                                                        (expr 
                                                          (variable_or_function_call CurBlock.Y)) + 
                                                        (expr 
                                                          (literal 1))))) \n) LOOP 
                                                (loop_condition WHILE 
                                                  (expr 
                                                    (expr 
                                                      (variable_or_function_call CheckFit)) = 
                                                    (expr 
                                                      (variable_or_function_call TRUE)))))) ' \n 
                                            (statement 
                                              (assignment_statement 
                                                (variable_or_function_call CurBlock.Y) = 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call CurBlock.Y)) - 
                                                  (expr 
                                                    (literal 1))))) ' \n 
                                            (statement 
                                              (assignment_statement 
                                                (variable_or_function_call TargetTime) = 
                                                (expr 
                                                  (expr 
                                                    (builtin_function 
                                                      (timer_function TIMER))) - 
                                                  (expr 
                                                    (literal 1))))) ' \n)) 
                                        (case_block 
                                          (case_statement CASE 
                                            (case_expr 
                                              (expr 
                                                (variable_or_function_call RIGHTARROW))) , 
                                            (case_expr 
                                              (expr 
                                                (variable_or_function_call RIGHTARROW2)))) 
                                          (block \n 
                                            (statement 
                                              (assignment_statement 
                                                (variable_or_function_call CurBlock.X) = 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call CurBlock.X)) + 
                                                  (expr 
                                                    (literal 1))))) ' \n)) 
                                        (case_block 
                                          (case_statement CASE 
                                            (case_expr 
                                              (expr 
                                                (variable_or_function_call LEFTARROW))) , 
                                            (case_expr 
                                              (expr 
                                                (variable_or_function_call LEFTARROW2)))) 
                                          (block \n 
                                            (statement 
                                              (assignment_statement 
                                                (variable_or_function_call CurBlock.X) = 
                                                (expr 
                                                  (expr 
                                                    (variable_or_function_call CurBlock.X)) - 
                                                  (expr 
                                                    (literal 1))))) ' \n)) 
                                        (case_block 
                                          (case_statement CASE 
                                            (case_expr 
                                              (expr 
                                                (variable_or_function_call UPARROW))) , 
                                            (case_expr 
                                              (expr 
                                                (variable_or_function_call UPARROW2))) , 
                                            (case_expr 
                                              (expr 
                                                (variable_or_function_call UPARROW3)))) 
                                          (block \n 
                                            (statement 
                                              (assignment_statement 
                                                (variable_or_function_call CurBlock.Rotation) = 
                                                (expr 
                                                  ( 
                                                    (expr 
                                                      (expr 
                                                        ( 
                                                          (expr 
                                                            (expr 
                                                              (variable_or_function_call CurBlock.Rotation)) + 
                                                            (expr 
                                                              (variable_or_function_call ROTATEDIR))) )) MOD 
                                                      (expr 
                                                        (literal 4))) )))) ' \n)) 
                                        (case_block 
                                          (case_statement CASE ELSE) 
                                          (block \n 
                                            (statement 
                                              (assignment_statement 
                                                (variable_or_function_call ValidEvent) = 
                                                (expr 
                                                  (variable_or_function_call FALSE)))) \n)) 
                                        (end_select_statement END SELECT))) \n \n 
                                    (if_block_statement IF 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call ValidEvent)) = 
                                        (expr 
                                          (variable_or_function_call TRUE))) THEN \n 
                                      (then_block 
                                        (if_block_statement IF 
                                          (expr 
                                            (expr 
                                              (variable_or_function_call CheckFit)) = 
                                            (expr 
                                              (variable_or_function_call TRUE))) THEN ' 
                                          (then_block \n 
                                            (statement 
                                              (call_statement 
                                                (untyped_id PutBlock) 
                                                (argument_list 
                                                  (argument 
                                                    (expr 
                                                      (variable_or_function_call OldBlock)))))) ' \n 
                                            (statement 
                                              (call_statement 
                                                (untyped_id PutBlock) 
                                                (argument_list 
                                                  (argument 
                                                    (expr 
                                                      (variable_or_function_call CurBlock)))))) ' \n 
                                            (statement 
                                              (assignment_statement 
                                                (variable_or_function_call OldBlock) = 
                                                (expr 
                                                  (variable_or_function_call CurBlock)))) \n) 
                                          (else_block_statement ELSE 
                                            (else_block \n 
                                              (statement 
                                                (assignment_statement 
                                                  (variable_or_function_call CurBlock) = 
                                                  (expr 
                                                    (variable_or_function_call OldBlock)))) ' \n)) 
                                          (end_if_statement END IF)) \n) 
                                      (end_if_statement END IF)) \n)) 
                                (end_if_statement END IF)) \n \n) LOOP 
                            (loop_condition UNTIL 
                              (expr 
                                (expr 
                                  (builtin_function 
                                    (timer_function TIMER))) >= 
                                (expr 
                                  (variable_or_function_call TargetTime)))))) ' \n \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call TargetTime) = 
                            (expr 
                              (expr 
                                (builtin_function 
                                  (timer_function TIMER))) + 
                              (expr 
                                (expr 
                                  (literal 1)) / 
                                (expr 
                                  ( 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call Level)) + 
                                      (expr 
                                        (literal 1))) )))))) ' \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call CurBlock.Y) = 
                            (expr 
                              (expr 
                                (variable_or_function_call CurBlock.Y)) + 
                              (expr 
                                (literal 1))))) ' \n \n 
                        (if_block_statement IF 
                          (expr 
                            (expr 
                              (variable_or_function_call CheckFit)) = 
                            (expr 
                              (variable_or_function_call FALSE))) THEN ' 
                          (then_block \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call DoneWithThisBlock) = 
                                (expr 
                                  (variable_or_function_call TRUE)))) ' \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call CurBlock) = 
                                (expr 
                                  (variable_or_function_call OldBlock)))) \n) 
                          (end_if_statement END IF)) \n \n 
                        (statement 
                          (call_statement 
                            (untyped_id PutBlock) 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call OldBlock)))))) ' \n 
                        (statement 
                          (call_statement 
                            (untyped_id PutBlock) 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call CurBlock)))))) ' \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call OldBlock) = 
                            (expr 
                              (variable_or_function_call CurBlock)))) \n \n) LOOP 
                      (loop_condition UNTIL 
                        (expr 
                          (variable_or_function_call DoneWithThisBlock))))) ' \n \n 
                  (statement 
                    (call_statement 
                      (untyped_id AddBlockToWell))) ' \n 
                  (statement 
                    (call_statement 
                      (untyped_id CheckForFullRows))) ' \n 
                  (statement 
                    (call_statement 
                      (untyped_id UpdateScoring))) ' \n \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (variable_or_function_call Score)) >= 
                      (expr 
                        (variable_or_function_call GameTiltScore))) THEN ' 
                    (then_block \n \n 
                      (statement 
                        (play_statement PLAY 
                          (expr 
                            (variable_or_function_call PLAYWINGAME)))) \n 
                      (statement 
                        (call_statement 
                          (untyped_id MakeInfoBox))) \n 
                      (statement 
                        (locate_statement LOCATE 
                          (expr 
                            (literal 13)) , 
                          (expr 
                            (literal 5)))) : 
                      (statement 
                        (print_using_statement PRINT USING 
                          (expr 
                            (literal "#######")) ; 
                          (print_argument 
                            (expr 
                              (variable_or_function_call Score))))) \n 
                      (statement 
                        (play_statement PLAY 
                          (expr 
                            (variable_or_function_call PLAYWINGAME)))) \n \n 
                      (if_block_statement IF 
                        (expr 
                          (expr 
                            (variable_or_function_call GameTiltScore)) = 
                          (expr 
                            (variable_or_function_call TILTVALUE))) THEN ' 
                        (then_block \n 
                          (statement 
                            (locate_statement LOCATE 
                              (expr 
                                (literal 15)) , 
                              (expr 
                                (literal 4)))) : 
                          (statement 
                            (print_statement PRINT 
                              (print_argument 
                                (expr 
                                  (literal "GAME TILT"))))) \n 
                          (statement 
                            (locate_statement LOCATE 
                              (expr 
                                (literal 17)) , 
                              (expr 
                                (literal 5)))) : 
                          (statement 
                            (print_statement PRINT 
                              (print_argument 
                                (expr 
                                  (literal "You are"))))) \n 
                          (statement 
                            (locate_statement LOCATE 
                              (expr 
                                (literal 18)) , 
                              (expr 
                                (literal 4)))) : 
                          (statement 
                            (print_statement PRINT 
                              (print_argument 
                                (expr 
                                  (literal "Awesome!"))))) \n 
                          (statement 
                            (locate_statement LOCATE 
                              (expr 
                                (literal 20)) , 
                              (expr 
                                (literal 4)))) : 
                          (statement 
                            (print_statement PRINT 
                              (print_argument 
                                (expr 
                                  (literal "Press any"))))) \n 
                          (statement 
                            (locate_statement LOCATE 
                              (expr 
                                (literal 21)) , 
                              (expr 
                                (literal 6)))) : 
                          (statement 
                            (print_statement PRINT 
                              (print_argument 
                                (expr 
                                  (literal "key..."))))) \n 
                          (statement 
                            (play_statement PLAY 
                              (expr 
                                (variable_or_function_call PLAYWINGAME)))) \n 
                          (statement 
                            (do_loop_statement DO 
                              (do_condition WHILE 
                                (expr 
                                  (expr 
                                    (variable_or_function_call INKEY$)) = 
                                  (expr 
                                    (literal "")))) 
                              (block :) LOOP)) \n 
                          (statement 
                            (exit_statement EXIT SUB)) \n) 
                        (else_block_statement ELSE 
                          (else_block ' \n 
                            (statement 
                              (locate_statement LOCATE 
                                (expr 
                                  (literal 15)) , 
                                (expr 
                                  (literal 4)))) : 
                            (statement 
                              (print_statement PRINT 
                                (print_argument 
                                  (expr 
                                    (literal "YOU WON!"))))) \n 
                            (statement 
                              (locate_statement LOCATE 
                                (expr 
                                  (literal 17)) , 
                                (expr 
                                  (literal 5)))) : 
                            (statement 
                              (print_statement PRINT 
                                (print_argument 
                                  (expr 
                                    (literal "Want to"))))) \n 
                            (statement 
                              (locate_statement LOCATE 
                                (expr 
                                  (literal 18)) , 
                                (expr 
                                  (literal 4)))) : 
                            (statement 
                              (print_statement PRINT 
                                (print_argument 
                                  (expr 
                                    (literal "continue"))))) \n 
                            (statement 
                              (locate_statement LOCATE 
                                (expr 
                                  (literal 20)) , 
                                (expr 
                                  (literal 6)))) : 
                            (statement 
                              (print_statement PRINT 
                                (print_argument 
                                  (expr 
                                    (literal "
                                      (Y/N)"))))) \n \n 
                            (statement 
                              (do_loop_statement DO 
                                (block ' \n 
                                  (statement 
                                    (assignment_statement 
                                      (variable_or_function_call a$) = 
                                      (expr 
                                        (variable_or_function_call UCASE$ 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (variable_or_function_call INKEY$)))) ))))) ' \n) LOOP 
                                (loop_condition UNTIL 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call a$)) <> 
                                    (expr 
                                      (literal "")))))) \n \n 
                            (statement 
                              (if_inline_statement IF 
                                (expr 
                                  (expr 
                                    (variable_or_function_call a$)) <> 
                                  (expr 
                                    (literal "Y"))) THEN 
                                (if_inline_action 
                                  (statement 
                                    (exit_statement EXIT DO))))) ' \n \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call GameTiltScore) = 
                                (expr 
                                  (variable_or_function_call TILTVALUE)))) ' \n \n 
                            (statement 
                              (call_statement 
                                (untyped_id RedrawControls))) \n)) 
                        (end_if_statement END IF)) \n) 
                    (end_if_statement END IF)) \n \n) LOOP)) ' \n) LOOP 
          (loop_condition UNTIL 
            (expr 
              (variable_or_function_call GameOver))))) ' \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id PutBlock) 
    ( 
      (parameter_list 
        (parameter 
          (untyped_id b) AS 
          (type_name_for_parameter 
            (untyped_id BlockType)))) ) 
    (block \n \n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call b.Rotation)) 
          (before_first_case ' \n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 0)))) 
            (block ' \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call x1) = 
                  (expr 
                    (variable_or_function_call b.X)))) : 
              (statement 
                (assignment_statement 
                  (variable_or_function_call y1) = 
                  (expr 
                    (variable_or_function_call b.Y)))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 1)))) 
            (block ' \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call x1) = 
                  (expr 
                    (expr 
                      (variable_or_function_call b.X)) + 
                    (expr 
                      (literal 1))))) : 
              (statement 
                (assignment_statement 
                  (variable_or_function_call y1) = 
                  (expr 
                    (expr 
                      (variable_or_function_call b.Y)) - 
                    (expr 
                      (literal 1))))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 2)))) 
            (block ' \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call x1) = 
                  (expr 
                    (variable_or_function_call b.X)))) : 
              (statement 
                (assignment_statement 
                  (variable_or_function_call y1) = 
                  (expr 
                    (variable_or_function_call b.Y)))) \n)) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 3)))) 
            (block ' \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call x1) = 
                  (expr 
                    (expr 
                      (variable_or_function_call b.X)) + 
                    (expr 
                      (literal 1))))) : 
              (statement 
                (assignment_statement 
                  (variable_or_function_call y1) = 
                  (expr 
                    (expr 
                      (variable_or_function_call b.Y)) - 
                    (expr 
                      (literal 1))))) \n)) 
          (end_select_statement END SELECT))) \n \n ' \n ' \n ' \n ' \n ' \n \n 
      (statement 
        (put_graphics_statement PUT 
          ( 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call x1)) * 
                (expr 
                  (variable_or_function_call XSIZE))) + 
              (expr 
                (variable_or_function_call WELLX))) , 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call y1)) * 
                (expr 
                  (variable_or_function_call YSIZE))) + 
              (expr 
                (variable_or_function_call WELLY))) ) , 
          (variable_or_function_call BlockImage 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (expr 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call b.Style)) - 
                                  (expr 
                                    (literal 1))) )) * 
                            (expr 
                              (literal 4))) + 
                          (expr 
                            (variable_or_function_call b.Rotation))) )) * 
                    (expr 
                      (variable_or_function_call ELEMENTSPERBLOCK))))) )) , XOR)) ' \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id RedrawControls) 
    (block \n \n ' \n 
      (statement 
        (call_statement 
          (untyped_id MakeInfoBox))) \n \n ' \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (variable_or_function_call BorderColor)))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 13)) , 
          (expr 
            (literal 4)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "Controls"))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 14)) , 
          (expr 
            (literal 4)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "--------"))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 15)) , 
          (expr 
            (literal 4)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (expr 
                (variable_or_function_call CHR$ 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (literal 24)))) ))) + 
              (expr 
                (literal " = Turn")))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 16)) , 
          (expr 
            (literal 4)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (expr 
                (variable_or_function_call CHR$ 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (literal 27)))) ))) + 
              (expr 
                (literal " = Left")))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 17)) , 
          (expr 
            (literal 4)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (expr 
                (variable_or_function_call CHR$ 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (literal 26)))) ))) + 
              (expr 
                (literal " = Right")))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 18)) , 
          (expr 
            (literal 4)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (expr 
                (variable_or_function_call CHR$ 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (literal 25)))) ))) + 
              (expr 
                (literal " = Drop")))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 20)) , 
          (expr 
            (literal 4)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "P = Pause"))))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 21)) , 
          (expr 
            (literal 4)))) : 
      (statement 
        (print_statement PRINT 
          (print_argument 
            (expr 
              (literal "Q = Quit"))))) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id Show) 
    ( 
      (parameter_list 
        (parameter 
          (untyped_id b) AS 
          (type_name_for_parameter 
            (untyped_id BlockType)))) ) 
    (block \n \n ' \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 0)) TO 
          (expr 
            (variable_or_function_call XMATRIX)) 
          (block \n 
            (statement 
              (for_next_statement FOR j = 
                (expr 
                  (literal 0)) TO 
                (expr 
                  (variable_or_function_call YMATRIX)) 
                (block \n \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (variable_or_function_call BlockShape 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call i))) , 
                              (argument 
                                (expr 
                                  (variable_or_function_call j))) , 
                              (argument 
                                (expr 
                                  (variable_or_function_call b.Style)))) ))) = 
                      (expr 
                        (literal 1))) THEN ' 
                    (then_block \n 
                      (statement 
                        (select_case_statement SELECT CASE 
                          (expr 
                            (variable_or_function_call b.Rotation)) 
                          (before_first_case ' \n) 
                          (case_block 
                            (case_statement CASE 
                              (case_expr 
                                (expr 
                                  (literal 0)))) 
                            (block ' \n 
                              (statement 
                                (call_statement 
                                  (untyped_id DrawBlock) 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call b.X)) + 
                                        (expr 
                                          (variable_or_function_call i)))) , 
                                    (argument 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call b.Y)) + 
                                        (expr 
                                          (variable_or_function_call j)))) , 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call BlockColor 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (variable_or_function_call b.Style)))) ))))))) \n)) 
                          (case_block 
                            (case_statement CASE 
                              (case_expr 
                                (expr 
                                  (literal 1)))) 
                            (block ' \n 
                              (statement 
                                (call_statement 
                                  (untyped_id DrawBlock) 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (expr 
                                          (expr 
                                            (variable_or_function_call b.X)) - 
                                          (expr 
                                            (variable_or_function_call j))) + 
                                        (expr 
                                          (literal 2)))) , 
                                    (argument 
                                      (expr 
                                        (expr 
                                          (expr 
                                            (variable_or_function_call b.Y)) - 
                                          (expr 
                                            (literal 1))) + 
                                        (expr 
                                          (variable_or_function_call i)))) , 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call BlockColor 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (variable_or_function_call b.Style)))) ))))))) \n)) 
                          (case_block 
                            (case_statement CASE 
                              (case_expr 
                                (expr 
                                  (literal 2)))) 
                            (block ' \n 
                              (statement 
                                (call_statement 
                                  (untyped_id DrawBlock) 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (expr 
                                          (expr 
                                            (variable_or_function_call b.X)) + 
                                          (expr 
                                            (literal 3))) - 
                                        (expr 
                                          (variable_or_function_call i)))) , 
                                    (argument 
                                      (expr 
                                        (expr 
                                          (expr 
                                            (variable_or_function_call b.Y)) - 
                                          (expr 
                                            (variable_or_function_call j))) + 
                                        (expr 
                                          (literal 1)))) , 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call BlockColor 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (variable_or_function_call b.Style)))) ))))))) \n)) 
                          (case_block 
                            (case_statement CASE 
                              (case_expr 
                                (expr 
                                  (literal 3)))) 
                            (block ' \n 
                              (statement 
                                (call_statement 
                                  (untyped_id DrawBlock) 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (expr 
                                          (expr 
                                            (variable_or_function_call b.X)) + 
                                          (expr 
                                            (variable_or_function_call j))) + 
                                        (expr 
                                          (literal 1)))) , 
                                    (argument 
                                      (expr 
                                        (expr 
                                          (expr 
                                            (variable_or_function_call b.Y)) - 
                                          (expr 
                                            (variable_or_function_call i))) + 
                                        (expr 
                                          (literal 2)))) , 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call BlockColor 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (variable_or_function_call b.Style)))) ))))))) \n)) 
                          (end_select_statement END SELECT))) \n) 
                    (end_if_statement END IF)) \n) NEXT j)) \n) NEXT i)) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id UpdateScoring) 
    (block \n \n ' \n ' \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (expr 
              (variable_or_function_call Level)) < 
            (expr 
              (literal 9))) AND 
          (expr 
            (expr 
              (variable_or_function_call Score)) >= 
            (expr 
              ( 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call NEXTLEVEL)) * 
                    (expr 
                      ( 
                        (expr 
                          (expr 
                            (variable_or_function_call Level)) + 
                          (expr 
                            (literal 1))) ))) + 
                  (expr 
                    (variable_or_function_call PrevScore))) )))) THEN \n 
        (then_block \n ' \n ' \n 
          (statement 
            (get_graphics_statement GET 
              ( 
                (expr 
                  (variable_or_function_call WELLX)) , 
                (expr 
                  (variable_or_function_call WELLY)) ) - 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call WELLX)) + 
                  (expr 
                    (expr 
                      (variable_or_function_call WELLWIDTH)) * 
                    (expr 
                      (variable_or_function_call XSIZE)))) , 
                (expr 
                  (expr 
                    (variable_or_function_call WELLY)) + 
                  (expr 
                    (expr 
                      (variable_or_function_call WELLHEIGHT)) * 
                    (expr 
                      (variable_or_function_call YSIZE)))) ) , 
              (variable_or_function_call Temp))) \n \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call PrevScore) = 
              (expr 
                (variable_or_function_call Score)))) ' \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Level) = 
              (expr 
                (expr 
                  (variable_or_function_call Level)) + 
                (expr 
                  (literal 1))))) \n 
          (statement 
            (call_statement 
              (untyped_id DrawPlayingField))) ' \n 
          (statement 
            (put_graphics_statement PUT 
              ( 
                (expr 
                  (variable_or_function_call WELLX)) , 
                (expr 
                  (variable_or_function_call WELLY)) ) , 
              (variable_or_function_call Temp))) ' \n \n 
          (statement 
            (call_statement 
              (untyped_id RedrawControls))) ' \n) 
        (end_if_statement END IF)) \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 7)) , 
          (expr 
            (literal 4)))) : 
      (statement 
        (print_using_statement PRINT USING 
          (expr 
            (literal "#,###,###")) ; 
          (print_argument 
            (expr 
              (variable_or_function_call Score))))) ' \n \n) 
    (end_sub_statement END SUB)) \n <EOF>)
