(program 
  (declare_sub_statement DECLARE SUB 
    (untyped_id Bounce) 
    ( 
      (declare_parameter_list 
        (declare_parameter Hi%) , 
        (declare_parameter Low%)) )) \r\n 
  (declare_sub_statement DECLARE SUB 
    (untyped_id Fall) 
    ( 
      (declare_parameter_list 
        (declare_parameter Hi%) , 
        (declare_parameter Low%) , 
        (declare_parameter Del%)) )) \r\n 
  (declare_sub_statement DECLARE SUB 
    (untyped_id Siren) 
    ( 
      (declare_parameter_list 
        (declare_parameter Hi%) , 
        (declare_parameter Range%)) )) \r\n 
  (declare_sub_statement DECLARE SUB 
    (untyped_id Klaxon) 
    ( 
      (declare_parameter_list 
        (declare_parameter Hi%) , 
        (declare_parameter Low%)) )) \r\n 
  (statement 
    (deftype_statement DEFINT 
      (letter_range A - Z))) \r\n \r\n ' \r\n \r\n ' \r\n 
  (statement 
    (do_loop_statement DO 
      (block \r\n 
        (statement 
          (call_statement 
            (untyped_id CLS))) \r\n 
        (statement 
          (print_statement PRINT 
            (print_argument 
              (expr 
                (literal "Sound effects"))))) : 
        (statement 
          (print_statement PRINT)) \r\n 
        (statement 
          (color_statement COLOR 
            (expr 
              (literal 15)) , 
            (expr 
              (literal 0)))) : 
        (statement 
          (print_statement PRINT 
            (print_argument 
              (expr 
                (literal "  B")) ;))) : 
        (statement 
          (color_statement COLOR 
            (expr 
              (literal 7)) , 
            (expr 
              (literal 0)))) : 
        (statement 
          (print_statement PRINT 
            (print_argument 
              (expr 
                (literal "ouncing"))))) \r\n 
        (statement 
          (color_statement COLOR 
            (expr 
              (literal 15)) , 
            (expr 
              (literal 0)))) : 
        (statement 
          (print_statement PRINT 
            (print_argument 
              (expr 
                (literal "  F")) ;))) : 
        (statement 
          (color_statement COLOR 
            (expr 
              (literal 7)) , 
            (expr 
              (literal 0)))) : 
        (statement 
          (print_statement PRINT 
            (print_argument 
              (expr 
                (literal "alling"))))) \r\n 
        (statement 
          (color_statement COLOR 
            (expr 
              (literal 15)) , 
            (expr 
              (literal 0)))) : 
        (statement 
          (print_statement PRINT 
            (print_argument 
              (expr 
                (literal "  K")) ;))) : 
        (statement 
          (color_statement COLOR 
            (expr 
              (literal 7)) , 
            (expr 
              (literal 0)))) : 
        (statement 
          (print_statement PRINT 
            (print_argument 
              (expr 
                (literal "laxon"))))) \r\n 
        (statement 
          (color_statement COLOR 
            (expr 
              (literal 15)) , 
            (expr 
              (literal 0)))) : 
        (statement 
          (print_statement PRINT 
            (print_argument 
              (expr 
                (literal "  S")) ;))) : 
        (statement 
          (color_statement COLOR 
            (expr 
              (literal 7)) , 
            (expr 
              (literal 0)))) : 
        (statement 
          (print_statement PRINT 
            (print_argument 
              (expr 
                (literal "iren"))))) \r\n 
        (statement 
          (color_statement COLOR 
            (expr 
              (literal 15)) , 
            (expr 
              (literal 0)))) : 
        (statement 
          (print_statement PRINT 
            (print_argument 
              (expr 
                (literal "  Q")) ;))) : 
        (statement 
          (color_statement COLOR 
            (expr 
              (literal 7)) , 
            (expr 
              (literal 0)))) : 
        (statement 
          (print_statement PRINT 
            (print_argument 
              (expr 
                (literal "uit"))))) \r\n 
        (statement 
          (print_statement PRINT)) : 
        (statement 
          (print_statement PRINT 
            (print_argument 
              (expr 
                (literal "Select: ")) ;))) \r\n \r\n ' \r\n 
        (statement 
          (do_loop_statement DO 
            (block \r\n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Q$) = 
                  (expr 
                    (variable_or_function_call UCASE$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (builtin_function 
                                (input_function INPUT$ 
                                  ( 
                                    (expr 
                                      (literal 1)) )))))) ))))) \r\n) LOOP 
            (loop_condition WHILE 
              (expr 
                (expr 
                  (builtin_function 
                    (instr_function INSTR 
                      ( 
                        (expr 
                          (literal "BFKSQ")) , 
                        (expr 
                          (variable_or_function_call Q$)) )))) = 
                (expr 
                  (literal 0)))))) \r\n \r\n ' \r\n 
        (statement 
          (call_statement 
            (untyped_id CLS))) \r\n 
        (statement 
          (select_case_statement SELECT CASE 
            (expr 
              (variable_or_function_call Q$)) 
            (before_first_case \r\n) 
            (case_block 
              (case_statement CASE 
                (case_expr IS = 
                  (expr 
                    (literal "B")))) 
              (block \r\n 
                (statement 
                  (print_statement PRINT 
                    (print_argument 
                      (expr 
                        (literal "Bouncing . . . "))))) \r\n 
                (statement 
                  (call_statement 
                    (untyped_id Bounce) 
                    (argument_list 
                      (argument 
                        (expr 
                          (literal 32767))) , 
                      (argument 
                        (expr 
                          (literal 246)))))) \r\n)) 
            (case_block 
              (case_statement CASE 
                (case_expr IS = 
                  (expr 
                    (literal "F")))) 
              (block \r\n 
                (statement 
                  (print_statement PRINT 
                    (print_argument 
                      (expr 
                        (literal "Falling . . . "))))) \r\n 
                (statement 
                  (call_statement 
                    (untyped_id Fall) 
                    (argument_list 
                      (argument 
                        (expr 
                          (literal 2000))) , 
                      (argument 
                        (expr 
                          (literal 550))) , 
                      (argument 
                        (expr 
                          (literal 500)))))) \r\n)) 
            (case_block 
              (case_statement CASE 
                (case_expr IS = 
                  (expr 
                    (literal "S")))) 
              (block \r\n 
                (statement 
                  (print_statement PRINT 
                    (print_argument 
                      (expr 
                        (literal "Wailing . . ."))))) \r\n 
                (statement 
                  (print_statement PRINT 
                    (print_argument 
                      (expr 
                        (literal " . . . press any key to end."))))) \r\n 
                (statement 
                  (call_statement 
                    (untyped_id Siren) 
                    (argument_list 
                      (argument 
                        (expr 
                          (literal 780))) , 
                      (argument 
                        (expr 
                          (literal 650)))))) \r\n)) 
            (case_block 
              (case_statement CASE 
                (case_expr IS = 
                  (expr 
                    (literal "K")))) 
              (block \r\n 
                (statement 
                  (print_statement PRINT 
                    (print_argument 
                      (expr 
                        (literal "Oscillating . . ."))))) \r\n 
                (statement 
                  (print_statement PRINT 
                    (print_argument 
                      (expr 
                        (literal " . . . press any key to end."))))) \r\n 
                (statement 
                  (call_statement 
                    (untyped_id Klaxon) 
                    (argument_list 
                      (argument 
                        (expr 
                          (literal 987))) , 
                      (argument 
                        (expr 
                          (literal 329)))))) \r\n)) 
            (case_block 
              (case_statement CASE ELSE) 
              (block \r\n)) 
            (end_select_statement END SELECT))) \r\n) LOOP 
      (loop_condition UNTIL 
        (expr 
          (expr 
            (variable_or_function_call Q$)) = 
          (expr 
            (literal "Q")))))) \r\n 
  (statement 
    (end_statement END)) \r\n \r\n ' \r\n 
  (sub_statement SUB 
    (untyped_id Bounce) 
    ( 
      (parameter_list 
        (parameter Hi%) , 
        (parameter Low%)) ) STATIC 
    (block \r\n 
      (statement 
        (for_next_statement FOR Count = 
          (expr 
            (literal 60)) TO 
          (expr 
            (literal 1)) STEP 
          (expr - 
            (expr 
              (literal 2))) 
          (block \r\n 
            (statement 
              (call_statement 
                (untyped_id SOUND) 
                (argument_list 
                  (argument 
                    (expr 
                      (expr 
                        (variable_or_function_call Low)) - 
                      (expr 
                        (expr 
                          (variable_or_function_call Count)) / 
                        (expr 
                          (literal 2))))) , 
                  (argument 
                    (expr 
                      (expr 
                        (variable_or_function_call Count)) / 
                      (expr 
                        (literal 20))))))) \r\n 
            (statement 
              (call_statement 
                (untyped_id SOUND) 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call Hi))) , 
                  (argument 
                    (expr 
                      (expr 
                        (variable_or_function_call Count)) / 
                      (expr 
                        (literal 15))))))) \r\n) NEXT Count)) \r\n) 
    (end_sub_statement END SUB)) \r\n \r\n ' \r\n 
  (sub_statement SUB 
    (untyped_id Fall) 
    ( 
      (parameter_list 
        (parameter Hi%) , 
        (parameter Low%) , 
        (parameter Del%)) ) STATIC 
    (block \r\n 
      (statement 
        (for_next_statement FOR Count = 
          (expr 
            (variable_or_function_call Hi)) TO 
          (expr 
            (variable_or_function_call Low)) STEP 
          (expr - 
            (expr 
              (literal 10))) 
          (block \r\n 
            (statement 
              (call_statement 
                (untyped_id SOUND) 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call Count))) , 
                  (argument 
                    (expr 
                      (expr 
                        (variable_or_function_call Del)) / 
                      (expr 
                        (variable_or_function_call Count))))))) \r\n) NEXT Count)) \r\n) 
    (end_sub_statement END SUB)) \r\n \r\n ' \r\n 
  (sub_statement SUB 
    (untyped_id Klaxon) 
    ( 
      (parameter_list 
        (parameter Hi%) , 
        (parameter Low%)) ) STATIC 
    (block \r\n 
      (statement 
        (do_loop_statement DO 
          (do_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call INKEY$)) = 
              (expr 
                (literal "")))) 
          (block \r\n 
            (statement 
              (call_statement 
                (untyped_id SOUND) 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call Hi))) , 
                  (argument 
                    (expr 
                      (literal 5)))))) \r\n 
            (statement 
              (call_statement 
                (untyped_id SOUND) 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call Low))) , 
                  (argument 
                    (expr 
                      (literal 5)))))) \r\n) LOOP)) \r\n) 
    (end_sub_statement END SUB)) \r\n \r\n ' \r\n 
  (sub_statement SUB 
    (untyped_id Siren) 
    ( 
      (parameter_list 
        (parameter Hi%) , 
        (parameter Range%)) ) 
    (block \r\n 
      (statement 
        (do_loop_statement DO 
          (do_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call INKEY$)) = 
              (expr 
                (literal "")))) 
          (block \r\n 
            (statement 
              (for_next_statement FOR Count = 
                (expr 
                  (variable_or_function_call Range)) TO 
                (expr - 
                  (expr 
                    (variable_or_function_call Range))) STEP 
                (expr - 
                  (expr 
                    (literal 4))) 
                (block \r\n 
                  (statement 
                    (call_statement 
                      (untyped_id SOUND) 
                      (argument_list 
                        (argument 
                          (expr 
                            (expr 
                              (variable_or_function_call Hi)) - 
                            (expr 
                              (variable_or_function_call ABS 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call Count)))) ))))) , 
                        (argument 
                          (expr 
                            (literal .3)))))) \r\n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Count) = 
                      (expr 
                        (expr 
                          (variable_or_function_call Count)) - 
                        (expr 
                          (expr 
                            (literal 2)) / 
                          (expr 
                            (variable_or_function_call Range)))))) \r\n) NEXT Count)) \r\n) LOOP)) \r\n) 
    (end_sub_statement END SUB)) \r\n <EOF>)
