(program ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (statement 
    (deftype_statement DEFINT 
      (letter_range A - Z))) \n \n ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment GAMEBKGROUNDS7 = 
        (const_expr 
          (expr 
            (literal 0)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment INITIALDELAY = 
        (const_expr 
          (expr 
            (literal .1)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment INITNUMSTARBASES = 
        (const_expr 
          (expr 
            (literal 3)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment INITNUMMISSILES = 
        (const_expr 
          (expr 
            (literal 3)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment TARGETSPEED = 
        (const_expr 
          (expr 
            (literal 10)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment EXPLOSIONDELAY = 
        (const_expr 
          (expr 
            (literal .1)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment EXPLRADIUS = 
        (const_expr 
          (expr 
            (literal 16)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment PLANETS7 = 
        (const_expr 
          (expr 
            (literal 9)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment BASECOLORS7 = 
        (const_expr 
          (expr 
            (literal 7)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment ENEMYCOLORS7 = 
        (const_expr 
          (expr 
            (literal 3)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment INTERCEPTCOLORS7 = 
        (const_expr 
          (expr 
            (literal 2)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment EXPLCOLORS7 = 
        (const_expr 
          (expr 
            (literal 12)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment TARGETCOLORS7 = 
        (const_expr 
          (expr 
            (literal 2)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment FASTESTMISSILE = 
        (const_expr 
          (expr 
            (literal .005)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment RATIOINTERCEPTTOINCOMING = 
        (const_expr 
          (expr 
            (literal 5)))))) ' \n ' \n ' \n ' \n ' \n ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment GAMESTARTSONG = 
        (const_expr 
          (expr 
            (literal "MBT150L4O2CD-CL8A-FAECD-L4A-F")))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment WAVEOVERSONG = 
        (const_expr 
          (expr 
            (literal "MB O2 T240 L4 N40 N44 N48 N55 N48 L2 N53")))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment GAMEOVERSONG = 
        (const_expr 
          (expr 
            (literal "MB O1 T240 L2 g- g- L1 a")))))) ' \n \n ' \n ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment TRUE = 
        (const_expr 
          (expr - 
            (expr 
              (literal 1))))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment FALSE = 
        (const_expr 
          (expr 
            (literal 0)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment XSCALE = 
        (const_expr 
          (expr 
            (literal 320)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment YSCALE = 
        (const_expr 
          (expr 
            (literal 200)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment MAXY = 
        (const_expr 
          (expr 
            (expr 
              (variable_or_function_call YSCALE)) - 
            (expr 
              (literal 11))))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment MINY = 
        (const_expr 
          (expr 
            (literal 11)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment MINX = 
        (const_expr 
          (expr 
            (literal 11)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment MAXX = 
        (const_expr 
          (expr 
            (expr 
              (variable_or_function_call XSCALE)) - 
            (expr 
              (literal 11))))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment LEFTLAUNCHER = 
        (const_expr 
          (expr 
            (literal 90)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment RIGHTLAUNCHER = 
        (const_expr 
          (expr 
            (literal 88)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment PAUSE = 
        (const_expr 
          (expr 
            (literal 25)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment QUIT = 
        (const_expr 
          (expr 
            (literal 16)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment FACTOR = 
        (const_expr 
          (expr 
            (literal 250)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment PI = 
        (const_expr 
          (expr 
            (literal 3.14)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment PLANETRADIUS = 
        (const_expr 
          (expr 
            (expr 
              (variable_or_function_call XSCALE)) * 
            (expr 
              (literal .62))))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment GAMEBKGROUNDS1 = 
        (const_expr 
          (expr 
            (literal 0)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment PLANETS1 = 
        (const_expr 
          (expr 
            (literal 2)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment BASECOLORS1 = 
        (const_expr 
          (expr 
            (literal 1)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment ENEMYCOLORS1 = 
        (const_expr 
          (expr 
            (literal 3)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment INTERCEPTCOLORS1 = 
        (const_expr 
          (expr 
            (literal 3)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment EXPLCOLORS1 = 
        (const_expr 
          (expr 
            (literal 2)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment TARGETCOLORS1 = 
        (const_expr 
          (expr 
            (literal 9)))))) ' \n 
  (statement 
    (const_statement CONST 
      (const_assignment RESOLUTION = 
        (const_expr 
          (expr 
            (literal 100)))))) ' \n \n ' \n 
  (declare_statement DECLARE SUB 
    (untyped_id Center) 
    ( 
      (declare_parameter_list 
        (declare_parameter Text$) , 
        (declare_parameter Row)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DestroyStarbase) 
    ( 
      (declare_parameter_list 
        (declare_parameter Z)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DisplayIntro) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DisplayGameTitle) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id DisplayChanges) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id EraseMissileTrail) 
    ( 
      (declare_parameter_list 
        (declare_parameter MNum)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id Explode) 
    ( 
      (declare_parameter_list 
        (declare_parameter Chosen) , 
        (declare_parameter X) , 
        (declare_parameter Y) , 
        (declare_parameter WMissiles)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id GameOver) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id HorizontalScroll) 
    ( 
      (declare_parameter_list 
        (declare_parameter M$) , 
        (declare_parameter Row)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id InitScreen) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id InitFirebases) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id Keys) 
    ( 
      (declare_parameter_list 
        (declare_parameter TurnKeysOn)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id KeyPause) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id LaunchMissile) 
    ( 
      (declare_parameter_list 
        (declare_parameter Chosen) , 
        (declare_parameter XStart) , 
        (declare_parameter YStart) , 
        (declare_parameter XFinish) , 
        (declare_parameter YFinish)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id NewMissile) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id NewStarbase) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id NewInterceptor) 
    ( 
      (declare_parameter_list 
        (declare_parameter X) , 
        (declare_parameter Y)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id StopMissile) 
    ( 
      (declare_parameter_list 
        (declare_parameter Chosen) , 
        (declare_parameter WMissiles)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id UpdateMissiles) 
    ( 
      (declare_parameter_list 
        (declare_parameter Start) , 
        (declare_parameter Finish) , 
        (declare_parameter WMissiles) , 
        (declare_parameter NumOfTimes) , 
        (declare_parameter WColor)) )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id UpdateExplosions) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id UpdateTarget) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id UpdateScore) 
    ( )) \n 
  (declare_statement DECLARE SUB 
    (untyped_id WaveComplete) 
    ( )) \n \n ' \n 
  (type_statement TYPE 
    (untyped_id Missile) \n 
    (type_element 
      (untyped_id X) AS 
      (type_name_for_type_element INTEGER) ' \n) 
    (type_element 
      (untyped_id Y) AS 
      (type_name_for_type_element INTEGER) ' \n) 
    (type_element 
      (untyped_id XStart) AS 
      (type_name_for_type_element INTEGER) ' \n) 
    (type_element 
      (untyped_id YStart) AS 
      (type_name_for_type_element INTEGER) ' \n) 
    (type_element 
      (untyped_id XOffset) AS 
      (type_name_for_type_element INTEGER) ' \n) 
    (type_element 
      (untyped_id YOffset) AS 
      (type_name_for_type_element INTEGER) ' \n) 
    (type_element 
      (untyped_id Active) AS 
      (type_name_for_type_element INTEGER) ' \n) 
    (type_element 
      (untyped_id XFinish) AS 
      (type_name_for_type_element INTEGER) ' \n) 
    (type_element 
      (untyped_id YFinish) AS 
      (type_name_for_type_element INTEGER) ' \n) 
    (type_element 
      (untyped_id MaxCount) AS 
      (type_name_for_type_element INTEGER) ' \n) 
    (type_element 
      (untyped_id Count) AS 
      (type_name_for_type_element INTEGER) ' \n) 
    (type_element 
      (untyped_id YMajor) AS 
      (type_name_for_type_element INTEGER) ' \n) END TYPE) \n \n 
  (type_statement TYPE 
    (untyped_id GenericPos) ' \n 
    (type_element 
      (untyped_id X) AS 
      (type_name_for_type_element INTEGER) ' \n) 
    (type_element 
      (untyped_id Y) AS 
      (type_name_for_type_element INTEGER) ' \n) 
    (type_element 
      (untyped_id Active) AS 
      (type_name_for_type_element INTEGER) ' \n) 
    (type_element 
      (untyped_id OldX) AS 
      (type_name_for_type_element INTEGER) ' \n) 
    (type_element 
      (untyped_id OldY) AS 
      (type_name_for_type_element INTEGER) ' \n) END TYPE) \n \n 
  (type_statement TYPE 
    (untyped_id xplode) ' \n 
    (type_element 
      (untyped_id X) AS 
      (type_name_for_type_element INTEGER) ' \n) 
    (type_element 
      (untyped_id Y) AS 
      (type_name_for_type_element INTEGER) ' \n) 
    (type_element 
      (untyped_id Active) AS 
      (type_name_for_type_element INTEGER) ' \n) 
    (type_element 
      (untyped_id MissileNum) AS 
      (type_name_for_type_element INTEGER) ' \n) 
    (type_element 
      (untyped_id MType) AS 
      (type_name_for_type_element INTEGER) ' \n) END TYPE) \n \n 
  (statement 
    (clear_statement CLEAR , , 
      (expr 
        (literal 5120)))) ' \n \n ' \n ' \n ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id NumMissiles) AS 
        (type_name INTEGER)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id MaxStarbases) AS 
        (type_name INTEGER)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id Incoming) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 10))) )) AS 
        (type_name 
          (untyped_id Missile))))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id Starbase) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 4))) )) AS 
        (type_name 
          (untyped_id GenericPos))))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id ContinueGame) AS 
        (type_name INTEGER)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id Target) AS 
        (type_name 
          (untyped_id GenericPos))))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id NumIntercepts) AS 
        (type_name INTEGER)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id Score) AS 
        (type_name LONG)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id Wave) AS 
        (type_name LONG)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id WaveCount) AS 
        (type_name LONG)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id NextIncoming) AS 
        (type_name SINGLE)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id NextExplosion) AS 
        (type_name SINGLE)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id Explosion) 
        (dim_array_bounds 
          ( 
            (dim_subscript 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 10))) )) AS 
        (type_name 
          (untyped_id xplode))))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id IncomingDelay) AS 
        (type_name SINGLE)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id MissilesFlying) AS 
        (type_name INTEGER)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id BasesLeft) AS 
        (type_name INTEGER)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id TotalIncoming) AS 
        (type_name LONG)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id TotalInterceptors) AS 
        (type_name LONG)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id NextNewBase) AS 
        (type_name LONG)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id NumExplosions) AS 
        (type_name INTEGER)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id PlanetColor) AS 
        (type_name INTEGER)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id EnemyColor) AS 
        (type_name INTEGER)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id InterceptColor) AS 
        (type_name INTEGER)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id ExplColor) AS 
        (type_name INTEGER)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id BaseColor) AS 
        (type_name INTEGER)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id GameBkGround) AS 
        (type_name INTEGER)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id TargetColor) AS 
        (type_name INTEGER)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id ScreenMode) AS 
        (type_name INTEGER)))) ' \n 
  (statement 
    (dim_statement DIM SHARED 
      (dim_variable 
        (untyped_id ScreenWidth) AS 
        (type_name INTEGER)))) ' \n 
  (statement 
    (dim_statement DIM 
      (dim_variable 
        (untyped_id KeyFlags) AS 
        (type_name INTEGER)))) ' \n 
  (statement 
    (dim_statement DIM 
      (dim_variable 
        (untyped_id BadMode) AS 
        (type_name INTEGER)))) ' \n \n 
  (statement 
    (on_error_statement ON ERROR GOTO 
      (target 
        (text_label 
          (untyped_id ScreenError))))) ' \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call BadMode) = 
      (expr 
        (variable_or_function_call FALSE)))) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call ScreenMode) = 
      (expr 
        (literal 7)))) \n 
  (statement 
    (screen_statement SCREEN 
      (expr 
        (variable_or_function_call ScreenMode)))) ' \n 
  (if_block_statement IF 
    (expr 
      (expr 
        (variable_or_function_call BadMode)) = 
      (expr 
        (variable_or_function_call TRUE))) THEN ' 
    (then_block \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call ScreenMode) = 
          (expr 
            (literal 1)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call BadMode) = 
          (expr 
            (variable_or_function_call FALSE)))) \n 
      (statement 
        (screen_statement SCREEN 
          (expr 
            (variable_or_function_call ScreenMode)))) ' \n) 
    (end_if_statement END IF)) \n 
  (statement 
    (on_error_statement ON ERROR GOTO 
      (target 
        (line_number 0)))) ' \n \n 
  (if_block_statement IF 
    (expr 
      (variable_or_function_call BadMode)) THEN ' 
    (then_block \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 10)) , 
          (expr 
            (literal 13)))) : 
      (statement 
        (print_statement PRINT 
          (expr 
            (literal "CGA, EGA Color, or VGA graphics required to run QSPACE.BAS")))) \n) 
    (else_block_statement ELSE 
      (else_block \n 
        (statement 
          (call_statement 
            (untyped_id RANDOMIZE) 
            (argument_list 
              (argument 
                (expr 
                  (builtin_function TIMER)))))) ' \n 
        (statement 
          (call_statement 
            (untyped_id DisplayIntro))) ' \n \n 
        (statement 
          (def_seg_statement DEF SEG = 
            (expr 
              (literal 0)))) ' \n 
        (statement 
          (assignment_statement 
            (variable_or_function_call KeyFlags) = 
            (expr 
              (variable_or_function_call PEEK 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (literal 1047)))) ))))) ' \n 
        (statement 
          (call_statement 
            (untyped_id POKE) 
            (argument_list 
              (argument 
                (expr 
                  (literal 1047))) , 
              (argument 
                (expr 
                  (literal &H0)))))) ' \n 
        (statement 
          (def_seg_statement DEF SEG)) ' \n \n 
        (statement 
          (do_loop_statement DO 
            (block ' \n 
              (statement 
                (call_statement 
                  (untyped_id RESTORE))) ' \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call ScreenWidth) = 
                  (expr 
                    (literal 40)))) ' \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call IncomingDelay) = 
                  (expr 
                    (variable_or_function_call INITIALDELAY)))) ' \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Wave) = 
                  (expr 
                    (literal 1)))) ' \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call WaveCount) = 
                  (expr 
                    (literal 0)))) ' \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call Score) = 
                  (expr 
                    (literal 0)))) ' \n 
              (statement 
                (call_statement 
                  (untyped_id InitScreen))) ' \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call NumMissiles) = 
                  (expr 
                    (variable_or_function_call INITNUMMISSILES)))) ' \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call MissilesFlying) = 
                  (expr 
                    (literal 0)))) ' \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call NumIntercepts) = 
                  (expr 
                    (literal 0)))) ' \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call NumExplosions) = 
                  (expr 
                    (literal 0)))) ' \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call ContinueGame) = 
                  (expr 
                    (variable_or_function_call TRUE)))) ' \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call NextIncoming) = 
                  (expr 
                    (builtin_function TIMER)))) ' \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call NextExplosion) = 
                  (expr 
                    (builtin_function TIMER)))) ' \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TotalIncoming) = 
                  (expr 
                    (literal 0)))) ' \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TotalInterceptors) = 
                  (expr 
                    (literal 0)))) ' \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call BasesLeft) = 
                  (expr 
                    (literal 0)))) ' \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call MaxStarbases) = 
                  (expr 
                    (variable_or_function_call INITNUMSTARBASES)))) ' \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call NextNewBase) = 
                  (expr 
                    (literal 15000)))) ' \n \n 
              (statement 
                (call_statement 
                  (untyped_id ERASE) 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call Starbase))) , 
                    (argument 
                      (expr 
                        (variable_or_function_call Incoming))) , 
                    (argument 
                      (expr 
                        (variable_or_function_call Explosion)))))) ' \n \n 
              (statement 
                (for_next_statement FOR i = 
                  (expr 
                    (literal 1)) TO 
                  (expr 
                    (variable_or_function_call MaxStarbases)) 
                  (block ' \n 
                    (statement 
                      (call_statement 
                        (untyped_id NewStarbase))) ' \n) NEXT i)) \n \n 
              (statement 
                (call_statement 
                  (untyped_id InitFirebases))) ' \n \n 
              (statement 
                (for_next_statement FOR i = 
                  (expr 
                    (literal 1)) TO 
                  (expr 
                    (variable_or_function_call NumMissiles)) 
                  (block ' \n 
                    (statement 
                      (call_statement 
                        (untyped_id NewMissile))) \n) NEXT i)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
              (statement 
                (key_statement KEY 
                  (expr 
                    (literal 15)) , 
                  (expr 
                    (expr 
                      (variable_or_function_call CHR$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (literal 0)))) ))) + 
                    (expr 
                      (variable_or_function_call CHR$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call PAUSE)))) )))))) ' \n 
              (statement 
                (key_statement KEY 
                  (expr 
                    (literal 16)) , 
                  (expr 
                    (expr 
                      (variable_or_function_call CHR$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (literal 0)))) ))) + 
                    (expr 
                      (variable_or_function_call CHR$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call QUIT)))) )))))) ' \n 
              (statement 
                (key_statement KEY 
                  (expr 
                    (literal 17)) , 
                  (expr 
                    (expr 
                      (variable_or_function_call CHR$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (literal 128)))) ))) + 
                    (expr 
                      (variable_or_function_call CHR$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (literal 72)))) )))))) ' \n 
              (statement 
                (key_statement KEY 
                  (expr 
                    (literal 18)) , 
                  (expr 
                    (expr 
                      (variable_or_function_call CHR$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (literal 128)))) ))) + 
                    (expr 
                      (variable_or_function_call CHR$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (literal 75)))) )))))) ' \n 
              (statement 
                (key_statement KEY 
                  (expr 
                    (literal 19)) , 
                  (expr 
                    (expr 
                      (variable_or_function_call CHR$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (literal 128)))) ))) + 
                    (expr 
                      (variable_or_function_call CHR$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (literal 77)))) )))))) ' \n 
              (statement 
                (key_statement KEY 
                  (expr 
                    (literal 20)) , 
                  (expr 
                    (expr 
                      (variable_or_function_call CHR$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (literal 128)))) ))) + 
                    (expr 
                      (variable_or_function_call CHR$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (literal 80)))) )))))) ' \n \n 
              (statement 
                (on_event_gosub_statement ON KEY 
                  ( 
                    (expr 
                      (literal 11)) ) GOSUB 
                  (target 
                    (text_label 
                      (untyped_id MoveCrossHairUp))))) ' \n 
              (statement 
                (on_event_gosub_statement ON KEY 
                  ( 
                    (expr 
                      (literal 12)) ) GOSUB 
                  (target 
                    (text_label 
                      (untyped_id MoveCrossHairLeft))))) ' \n 
              (statement 
                (on_event_gosub_statement ON KEY 
                  ( 
                    (expr 
                      (literal 13)) ) GOSUB 
                  (target 
                    (text_label 
                      (untyped_id MoveCrossHairRight))))) ' \n 
              (statement 
                (on_event_gosub_statement ON KEY 
                  ( 
                    (expr 
                      (literal 14)) ) GOSUB 
                  (target 
                    (text_label 
                      (untyped_id MoveCrossHairDown))))) ' \n 
              (statement 
                (on_event_gosub_statement ON KEY 
                  ( 
                    (expr 
                      (literal 15)) ) GOSUB 
                  (target 
                    (text_label 
                      (untyped_id PauseGame))))) ' \n 
              (statement 
                (on_event_gosub_statement ON KEY 
                  ( 
                    (expr 
                      (literal 16)) ) GOSUB 
                  (target 
                    (text_label 
                      (untyped_id QuitGame))))) ' \n 
              (statement 
                (on_event_gosub_statement ON KEY 
                  ( 
                    (expr 
                      (literal 17)) ) GOSUB 
                  (target 
                    (text_label 
                      (untyped_id MoveCrossHairUp))))) ' \n 
              (statement 
                (on_event_gosub_statement ON KEY 
                  ( 
                    (expr 
                      (literal 18)) ) GOSUB 
                  (target 
                    (text_label 
                      (untyped_id MoveCrossHairLeft))))) ' \n 
              (statement 
                (on_event_gosub_statement ON KEY 
                  ( 
                    (expr 
                      (literal 19)) ) GOSUB 
                  (target 
                    (text_label 
                      (untyped_id MoveCrossHairRight))))) ' \n 
              (statement 
                (on_event_gosub_statement ON KEY 
                  ( 
                    (expr 
                      (literal 20)) ) GOSUB 
                  (target 
                    (text_label 
                      (untyped_id MoveCrossHairDown))))) ' \n 
              (statement 
                (call_statement 
                  (untyped_id Keys) 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call TRUE)))))) ' \n \n 
              (statement 
                (do_loop_statement DO 
                  (do_condition WHILE 
                    (expr 
                      (expr 
                        (variable_or_function_call ContinueGame)) = 
                      (expr 
                        (variable_or_function_call TRUE)))) 
                  (block ' \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (builtin_function TIMER)) >= 
                        (expr 
                          (variable_or_function_call NextIncoming))) THEN ' 
                      (then_block \n 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call NextIncoming) = 
                            (expr 
                              (expr 
                                (builtin_function TIMER)) + 
                              (expr 
                                (variable_or_function_call IncomingDelay))))) ' \n 
                        (statement 
                          (call_statement 
                            (untyped_id UpdateMissiles) 
                            (argument_list 
                              (argument 
                                (expr 
                                  (literal 1))) , 
                              (argument 
                                (expr 
                                  (variable_or_function_call NumMissiles))) , 
                              (argument 
                                (expr 
                                  (literal 1))) , 
                              (argument 
                                (expr 
                                  (literal 1))) , 
                              (argument 
                                (expr 
                                  (variable_or_function_call EnemyColor)))))) ' \n) 
                      (end_if_statement END IF)) \n \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call NumExplosions)) > 
                        (expr 
                          (literal 0))) THEN ' 
                      (then_block \n 
                        (if_block_statement IF 
                          (expr 
                            (expr 
                              (builtin_function TIMER)) >= 
                            (expr 
                              (variable_or_function_call NextExplosion))) THEN ' 
                          (then_block \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call NextExplosion) = 
                                (expr 
                                  (expr 
                                    (builtin_function TIMER)) + 
                                  (expr 
                                    (variable_or_function_call EXPLOSIONDELAY))))) ' \n 
                            (statement 
                              (call_statement 
                                (untyped_id UpdateExplosions))) ' \n) 
                          (end_if_statement END IF)) \n) 
                      (end_if_statement END IF)) \n \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (variable_or_function_call NumIntercepts)) > 
                        (expr 
                          (literal 0))) THEN ' 
                      (then_block \n 
                        (statement 
                          (call_statement 
                            (untyped_id UpdateMissiles) 
                            (argument_list 
                              (argument 
                                (expr 
                                  (literal 7))) , 
                              (argument 
                                (expr 
                                  (literal 10))) , 
                              (argument 
                                (expr 
                                  (literal 2))) , 
                              (argument 
                                (expr 
                                  (variable_or_function_call RATIOINTERCEPTTOINCOMING))) , 
                              (argument 
                                (expr 
                                  (variable_or_function_call InterceptColor)))))) \n) 
                      (end_if_statement END IF)) \n \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call K$) = 
                        (expr 
                          (variable_or_function_call INKEY$)))) ' \n 
                    (if_block_statement IF 
                      (expr 
                        (expr 
                          (builtin_function LEN 
                            ( 
                              (expr 
                                (variable_or_function_call K$)) ))) > 
                        (expr 
                          (literal 0))) THEN ' 
                      (then_block \n 
                        (statement 
                          (select_case_statement SELECT CASE 
                            (expr 
                              (variable_or_function_call ASC 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call UCASE$ 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (variable_or_function_call K$)))) ))))) ))) 
                            (before_first_case ' \n) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (variable_or_function_call LEFTLAUNCHER)))) 
                              (block ' \n 
                                (statement 
                                  (call_statement 
                                    (untyped_id NewInterceptor) 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (expr 
                                            (variable_or_function_call MINX)) + 
                                          (expr 
                                            (literal 1)))) , 
                                      (argument 
                                        (expr 
                                          (expr 
                                            (variable_or_function_call MAXY)) - 
                                          (expr 
                                            (literal 1))))))) ' \n)) 
                            (case_block 
                              (case_statement CASE 
                                (case_expr 
                                  (expr 
                                    (variable_or_function_call RIGHTLAUNCHER)))) 
                              (block ' \n 
                                (statement 
                                  (call_statement 
                                    (untyped_id NewInterceptor) 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (expr 
                                            (variable_or_function_call MAXX)) - 
                                          (expr 
                                            (literal 1)))) , 
                                      (argument 
                                        (expr 
                                          (expr 
                                            (variable_or_function_call MAXY)) - 
                                          (expr 
                                            (literal 1))))))) ' \n)) 
                            (end_select_statement END SELECT))) \n) 
                      (end_if_statement END IF)) \n \n) LOOP)) ' \n \n) LOOP 
            (loop_condition WHILE 
              (expr 
                (expr 
                  (variable_or_function_call ContinueGame)) <> 
                (expr 
                  (variable_or_function_call FALSE)))))) ' \n \n 
        (statement 
          (call_statement 
            (untyped_id DisplayChanges))) ' \n \n 
        (statement 
          (def_seg_statement DEF SEG = 
            (expr 
              (literal 0)))) ' \n 
        (statement 
          (call_statement 
            (untyped_id POKE) 
            (argument_list 
              (argument 
                (expr 
                  (literal 1047))) , 
              (argument 
                (expr 
                  (variable_or_function_call KeyFlags)))))) \n 
        (statement 
          (def_seg_statement DEF SEG)) \n \n)) 
    (end_if_statement END IF)) \n \n 
  (statement 
    (end_statement END)) ' \n \n 
  (label 
    (text_label 
      (untyped_id MoveCrossHairUp)) :) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call Target.Y) = 
      (expr 
        (expr 
          (variable_or_function_call Target.Y)) - 
        (expr 
          (variable_or_function_call TARGETSPEED))))) \n 
  (statement 
    (call_statement 
      (untyped_id UpdateTarget))) \n 
  (statement 
    (return_statement RETURN)) \n \n 
  (label 
    (text_label 
      (untyped_id MoveCrossHairDown)) :) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call Target.Y) = 
      (expr 
        (expr 
          (variable_or_function_call Target.Y)) + 
        (expr 
          (variable_or_function_call TARGETSPEED))))) \n 
  (statement 
    (call_statement 
      (untyped_id UpdateTarget))) \n 
  (statement 
    (return_statement RETURN)) \n \n 
  (label 
    (text_label 
      (untyped_id MoveCrossHairLeft)) :) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call Target.X) = 
      (expr 
        (expr 
          (variable_or_function_call Target.X)) - 
        (expr 
          (variable_or_function_call TARGETSPEED))))) \n 
  (statement 
    (call_statement 
      (untyped_id UpdateTarget))) \n 
  (statement 
    (return_statement RETURN)) \n \n 
  (label 
    (text_label 
      (untyped_id MoveCrossHairRight)) :) \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call Target.X) = 
      (expr 
        (expr 
          (variable_or_function_call Target.X)) + 
        (expr 
          (variable_or_function_call TARGETSPEED))))) \n 
  (statement 
    (call_statement 
      (untyped_id UpdateTarget))) \n 
  (statement 
    (return_statement RETURN)) \n \n 
  (label 
    (text_label 
      (untyped_id PauseGame)) :) \n 
  (statement 
    (call_statement 
      (untyped_id Keys) 
      (argument_list 
        (argument 
          (expr 
            (variable_or_function_call FALSE)))))) ' \n 
  (statement 
    (call_statement 
      (untyped_id SOUND) 
      (argument_list 
        (argument 
          (expr 
            (literal 1100))) , 
        (argument 
          (expr 
            (literal .75)))))) ' \n 
  (statement 
    (call_statement 
      (untyped_id Center) 
      (argument_list 
        (argument 
          (expr 
            (literal " * Paused * "))) , 
        (argument 
          (expr 
            (literal 12)))))) ' \n 
  (statement 
    (do_loop_statement DO 
      (block :) LOOP 
      (loop_condition UNTIL 
        (expr 
          (expr 
            (variable_or_function_call INKEY$)) <> 
          (expr 
            (literal "")))))) ' \n 
  (statement 
    (call_statement 
      (untyped_id Center) 
      (argument_list 
        (argument 
          (expr 
            (variable_or_function_call SPACE$ 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 12)))) )))) , 
        (argument 
          (expr 
            (literal 12)))))) \n 
  (statement 
    (call_statement 
      (untyped_id Keys) 
      (argument_list 
        (argument 
          (expr 
            (variable_or_function_call TRUE)))))) ' \n 
  (statement 
    (return_statement RETURN)) \n \n 
  (label 
    (text_label 
      (untyped_id QuitGame)) :) \n 
  (statement 
    (call_statement 
      (untyped_id Keys) 
      (argument_list 
        (argument 
          (expr 
            (variable_or_function_call FALSE)))))) ' \n 
  (statement 
    (call_statement 
      (untyped_id SOUND) 
      (argument_list 
        (argument 
          (expr 
            (literal 1700))) , 
        (argument 
          (expr 
            (literal 1)))))) ' \n 
  (statement 
    (call_statement 
      (untyped_id SOUND) 
      (argument_list 
        (argument 
          (expr 
            (literal 1100))) , 
        (argument 
          (expr 
            (literal .75)))))) ' \n 
  (statement 
    (call_statement 
      (untyped_id Center) 
      (argument_list 
        (argument 
          (expr 
            (literal " Really quit? 
              (Y/N) "))) , 
        (argument 
          (expr 
            (literal 12)))))) ' \n 
  (statement 
    (do_loop_statement DO 
      (block ' \n 
        (statement 
          (assignment_statement 
            (variable_or_function_call a$) = 
            (expr 
              (variable_or_function_call UCASE$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call INKEY$)))) ))))) \n) LOOP 
      (loop_condition UNTIL 
        (expr 
          (expr 
            (variable_or_function_call a$)) <> 
          (expr 
            (literal "")))))) \n 
  (statement 
    (if_inline_statement IF 
      (expr 
        (expr 
          (variable_or_function_call a$)) = 
        (expr 
          (literal "Y"))) THEN 
      (if_inline_action 
        (statement 
          (assignment_statement 
            (variable_or_function_call ContinueGame) = 
            (expr 
              (variable_or_function_call FALSE))))))) ' \n 
  (statement 
    (call_statement 
      (untyped_id Center) 
      (argument_list 
        (argument 
          (expr 
            (variable_or_function_call SPACE$ 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 20)))) )))) , 
        (argument 
          (expr 
            (literal 12)))))) ' \n 
  (statement 
    (call_statement 
      (untyped_id Keys) 
      (argument_list 
        (argument 
          (expr 
            (variable_or_function_call TRUE)))))) ' \n 
  (statement 
    (return_statement RETURN)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n \n 
  (statement 
    (data_statement DATA 
      (data_item 5))) : ' \n 
  (statement 
    (data_statement DATA 
      (data_item "Cadet") , 
      (data_item "Not good.  Everything destroyed."))) : ' \n 
  (statement 
    (data_statement DATA 
      (data_item "Ensign") , 
      (data_item "You saved a few people."))) : ' \n 
  (statement 
    (data_statement DATA 
      (data_item "Lieutenant") , 
      (data_item "Your parents will be proud."))) : ' \n 
  (statement 
    (data_statement DATA 
      (data_item "Commander") , 
      (data_item "Medal of Honor!"))) : ' \n 
  (statement 
    (data_statement DATA 
      (data_item "Admiral") , 
      (data_item "If only we had more like you!"))) : ' \n 
  (statement 
    (data_statement DATA 
      (data_item "Top Gun") , 
      (data_item "You can guard our starbases anytime!!"))) : ' \n \n 
  (label 
    (text_label 
      (untyped_id ScreenError)) :) ' \n 
  (statement 
    (assignment_statement 
      (variable_or_function_call BadMode%) = 
      (expr 
        (variable_or_function_call TRUE)))) \n 
  (statement 
    (resume_statement RESUME NEXT)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id Center) 
    ( 
      (parameter_list 
        (parameter Text$) , 
        (parameter Row)) ) 
    (block \n \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (variable_or_function_call Row)) , 
          (expr 
            (expr 
              (expr 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call ScreenWidth)) - 
                    (expr 
                      (builtin_function LEN 
                        ( 
                          (expr 
                            (variable_or_function_call Text$)) )))) )) \ 
              (expr 
                (literal 2))) + 
            (expr 
              (literal 1))))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call Text$)) ;)) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id DestroyStarbase) 
    ( 
      (parameter_list 
        (parameter BNum)) ) 
    (block \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Starbase 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (variable_or_function_call BNum)))) ) . Active) = 
          (expr 
            (variable_or_function_call FALSE)))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call BasesLeft) = 
          (expr 
            (literal 0)))) ' \n \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (variable_or_function_call MaxStarbases)) 
          (block ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call BasesLeft) = 
                (expr 
                  (expr 
                    (variable_or_function_call BasesLeft)) - 
                  (expr 
                    (variable_or_function_call Starbase 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call i)))) ) . Active))))) ' \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call Starbase 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call i)))) ) . Active)) = 
                  (expr 
                    (variable_or_function_call TRUE))) THEN 
                (if_inline_action 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call MaxStarbases) = 
                      (expr 
                        (variable_or_function_call i))))))) ' \n) NEXT i)) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call BasesLeft)) = 
          (expr 
            (literal 0))) THEN ' 
        (then_block \n 
          (statement 
            (call_statement 
              (untyped_id GameOver))) ' \n) 
        (end_if_statement END IF)) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id DisplayChanges) 
    (block \n \n 
      (statement 
        (call_statement 
          (untyped_id Keys) 
          (argument_list 
            (argument 
              (expr 
                (variable_or_function_call FALSE)))))) ' \n 
      (statement 
        (call_statement 
          (untyped_id DisplayGameTitle))) ' \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "The following game characteristics can be easily changed from"))) , 
            (argument 
              (expr 
                (literal 5)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "within the QuickBASIC Interpreter.  To change the values of  "))) , 
            (argument 
              (expr 
                (literal 6)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "these characteristics, locate the corresponding CONST or DATA"))) , 
            (argument 
              (expr 
                (literal 7)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "statements in the source code and change their values, then  "))) , 
            (argument 
              (expr 
                (literal 8)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "restart the program 
                  (press Shift + F5).                      "))) , 
            (argument 
              (expr 
                (literal 9)))))) \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 15)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "Enemy missile speed at the start of the game           "))) , 
            (argument 
              (expr 
                (literal 11)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "Songs played during this game                          "))) , 
            (argument 
              (expr 
                (literal 12)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "Color of the game pieces 
                  (EGA or VGA systems only)     "))) , 
            (argument 
              (expr 
                (literal 13)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "Speed of the targeting crosshair                       "))) , 
            (argument 
              (expr 
                (literal 14)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "Number of missiles falling at the start of the game    "))) , 
            (argument 
              (expr 
                (literal 15)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "Size of each missile explosion                         "))) , 
            (argument 
              (expr 
                (literal 16)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "Duration of the explosions                             "))) , 
            (argument 
              (expr 
                (literal 17)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "GAME OVER messages                                     "))) , 
            (argument 
              (expr 
                (literal 18)))))) \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "The CONST statements and instructions on changing them are   "))) , 
            (argument 
              (expr 
                (literal 20)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "located at the beginning of the main program.                "))) , 
            (argument 
              (expr 
                (literal 21)))))) \n \n 
      (statement 
        (do_loop_statement DO 
          (do_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call INKEY$)) = 
              (expr 
                (literal "")))) 
          (block :) LOOP)) ' \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) ' \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id DisplayGameTitle) 
    (block \n \n 
      (statement 
        (screen_statement SCREEN 
          (expr 
            (literal 0)))) ' \n 
      (statement 
        (width_statement WIDTH 
          (expr 
            (literal 80)) , 
          (expr 
            (literal 25)))) ' \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 4)) , 
          (expr 
            (literal 0)))) ' \n 
      (statement 
        (call_statement 
          (untyped_id CLS))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call ScreenWidth) = 
          (expr 
            (literal 80)))) ' \n \n ' \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 1)) , 
          (expr 
            (literal 2)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call CHR$ 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 201)))) ))) ; 
          (expr 
            (variable_or_function_call STRING$ 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 76))) , 
                  (argument 
                    (expr 
                      (literal 205)))) ))) ; 
          (expr 
            (variable_or_function_call CHR$ 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 187)))) ))) ;)) ' \n 
      (statement 
        (for_next_statement FOR i% = 
          (expr 
            (literal 2)) TO 
          (expr 
            (literal 24)) 
          (block \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call i%)) , 
                (expr 
                  (literal 2)))) \n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call CHR$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (literal 186)))) ))) ; 
                (expr 
                  (variable_or_function_call TAB 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (literal 79)))) ))) ; 
                (expr 
                  (variable_or_function_call CHR$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (literal 186)))) ))) ;)) ' \n) NEXT i%)) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 25)) , 
          (expr 
            (literal 2)))) \n 
      (statement 
        (print_statement PRINT 
          (expr 
            (variable_or_function_call CHR$ 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 200)))) ))) ; 
          (expr 
            (variable_or_function_call STRING$ 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 76))) , 
                  (argument 
                    (expr 
                      (literal 205)))) ))) ; 
          (expr 
            (variable_or_function_call CHR$ 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (literal 188)))) ))) ;)) ' \n \n ' \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 0)) , 
          (expr 
            (literal 4)))) ' \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "     Microsoft     "))) , 
            (argument 
              (expr 
                (literal 1)))))) ' \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "    Q S P A C E    "))) , 
            (argument 
              (expr 
                (literal 2)))))) ' \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "   Press any key to continue   "))) , 
            (argument 
              (expr 
                (literal 25)))))) ' \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)) , 
          (expr 
            (literal 0)))) ' \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id DisplayIntro) 
    (block \n \n 
      (statement 
        (call_statement 
          (untyped_id DisplayGameTitle))) ' \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "Copyright 
                  (C) 1990 Microsoft Corporation.  All Rights Reserved."))) , 
            (argument 
              (expr 
                (literal 4)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "Your starbases orbiting the planet Saurus are under attack from enemy"))) , 
            (argument 
              (expr 
                (literal 6)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "fire!  You can protect them by firing your own interceptor missiles  "))) , 
            (argument 
              (expr 
                (literal 7)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "to destroy incoming missiles.                                        "))) , 
            (argument 
              (expr 
                (literal 8)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "The enemy attacks the planet in waves.  Each wave has more missiles  "))) , 
            (argument 
              (expr 
                (literal 10)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "than the one before it.  New waves are also faster or send more      "))) , 
            (argument 
              (expr 
                (literal 11)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "missiles at a time.  Bonus points and starbases are awarded for high "))) , 
            (argument 
              (expr 
                (literal 12)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "scores and completed waves.                                          "))) , 
            (argument 
              (expr 
                (literal 13)))))) \n \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 4)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (variable_or_function_call STRING$ 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (literal 74))) , 
                      (argument 
                        (expr 
                          (literal 196)))) )))) , 
            (argument 
              (expr 
                (literal 15)))))) ' \n 
      (statement 
        (color_statement COLOR 
          (expr 
            (literal 7)))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal " Game Controls "))) , 
            (argument 
              (expr 
                (literal 15)))))) ' \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "General        Missile Launchers               Target site    "))) , 
            (argument 
              (expr 
                (literal 17)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "                                             
                  (Up)"))) , 
            (argument 
              (expr 
                (literal 19)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (expr 
                  (expr 
                    (literal "P - Pause      Z - Fire left launcher                 ")) + 
                  (expr 
                    (variable_or_function_call CHR$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (literal 24)))) )))) + 
                (expr 
                  (literal "          ")))) , 
            (argument 
              (expr 
                (literal 20)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (expr 
                  (expr 
                    (expr 
                      (expr 
                        (literal "Q - Quit       X - Fire right launcher       
                          (Left) ")) + 
                      (expr 
                        (variable_or_function_call CHR$ 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (literal 27)))) )))) + 
                    (expr 
                      (literal "   "))) + 
                  (expr 
                    (variable_or_function_call CHR$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (literal 26)))) )))) + 
                (expr 
                  (literal " 
                    (Right)")))) , 
            (argument 
              (expr 
                (literal 21)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (expr 
                  (literal "                                            ")) + 
                (expr 
                  (variable_or_function_call CHR$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (literal 25)))) ))))) , 
            (argument 
              (expr 
                (literal 22)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "                                             
                  (Down)"))) , 
            (argument 
              (expr 
                (literal 23)))))) \n \n 
      (statement 
        (play_statement PLAY 
          (expr 
            (variable_or_function_call GAMESTARTSONG)))) ' \n \n 
      (statement 
        (do_loop_statement DO 
          (block ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call kbd$) = 
                (expr 
                  (variable_or_function_call UCASE$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call INKEY$)))) ))))) \n) LOOP 
          (loop_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call kbd$)) = 
              (expr 
                (literal "")))))) \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call kbd$)) = 
          (expr 
            (literal "Q"))) THEN ' 
        (then_block \n 
          (statement 
            (call_statement 
              (untyped_id CLS))) \n 
          (statement 
            (locate_statement LOCATE 
              (expr 
                (literal 10)) , 
              (expr 
                (literal 30)))) : 
          (statement 
            (print_statement PRINT 
              (expr 
                (literal "Really quit? 
                  (Y/N)")) ;)) \n 
          (statement 
            (do_loop_statement DO 
              (block \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call kbd$) = 
                    (expr 
                      (variable_or_function_call UCASE$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call INKEY$)))) ))))) \n) LOOP 
              (loop_condition WHILE 
                (expr 
                  (expr 
                    (variable_or_function_call kbd$)) = 
                  (expr 
                    (literal "")))))) \n 
          (if_block_statement IF 
            (expr 
              (expr 
                (variable_or_function_call kbd$)) = 
              (expr 
                (literal "Y"))) THEN \n 
            (then_block 
              (statement 
                (call_statement 
                  (untyped_id CLS))) \n 
              (statement 
                (end_statement END)) \n) 
            (end_if_statement END IF)) \n) 
        (end_if_statement END IF)) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id EraseMissileTrail) 
    ( 
      (parameter_list 
        (parameter MNum)) ) 
    (block \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call MaxCount) = 
          (expr 
            (variable_or_function_call Incoming 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call MNum)))) ) . MaxCount)))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Count) = 
          (expr 
            (variable_or_function_call MaxCount)))) ' \n 
      (if_block_statement IF 
        (expr 
          (variable_or_function_call Incoming 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (variable_or_function_call MNum)))) ) . YMajor)) THEN ' 
        (then_block \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call X) = 
              (expr 
                (variable_or_function_call Incoming 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call MNum)))) ) . XStart)))) ' \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call XOff) = 
              (expr 
                (variable_or_function_call Incoming 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call MNum)))) ) . XOffset)))) ' \n 
          (statement 
            (for_next_statement FOR Y = 
              (expr 
                (variable_or_function_call Incoming 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call MNum)))) ) . YStart)) TO 
              (expr 
                (variable_or_function_call Incoming 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call MNum)))) ) . Y)) STEP 
              (expr 
                (variable_or_function_call SGN 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Incoming 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (variable_or_function_call MNum)))) ) . YOffset)))) ))) 
              (block ' \n 
                (statement 
                  (pset_statement PSET 
                    ( 
                      (expr 
                        (variable_or_function_call X)) , 
                      (expr 
                        (variable_or_function_call Y)) ) , 
                    (expr 
                      (variable_or_function_call GameBkGround)))) ' \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Count) = 
                    (expr 
                      (expr 
                        (variable_or_function_call Count)) - 
                      (expr 
                        (variable_or_function_call RESOLUTION))))) ' \n 
                (if_block_statement IF 
                  (expr 
                    (expr 
                      (variable_or_function_call Count)) <= 
                    (expr 
                      (literal 0))) THEN ' 
                  (then_block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call X) = 
                        (expr 
                          (expr 
                            (variable_or_function_call X)) + 
                          (expr 
                            (variable_or_function_call XOff))))) ' \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Count) = 
                        (expr 
                          (expr 
                            (variable_or_function_call Count)) + 
                          (expr 
                            (variable_or_function_call MaxCount))))) ' \n) 
                  (end_if_statement END IF)) \n) NEXT)) \n) 
        (else_block_statement ELSE 
          (else_block ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Y) = 
                (expr 
                  (variable_or_function_call Incoming 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call MNum)))) ) . YStart)))) ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call YOff) = 
                (expr 
                  (variable_or_function_call Incoming 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call MNum)))) ) . YOffset)))) ' \n 
            (statement 
              (for_next_statement FOR X = 
                (expr 
                  (variable_or_function_call Incoming 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call MNum)))) ) . XStart)) TO 
                (expr 
                  (variable_or_function_call Incoming 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call MNum)))) ) . X)) STEP 
                (expr 
                  (variable_or_function_call SGN 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call Incoming 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call MNum)))) ) . XOffset)))) ))) 
                (block ' \n 
                  (statement 
                    (pset_statement PSET 
                      ( 
                        (expr 
                          (variable_or_function_call X)) , 
                        (expr 
                          (variable_or_function_call Y)) ) , 
                      (expr 
                        (variable_or_function_call GameBkGround)))) ' \n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Count) = 
                      (expr 
                        (expr 
                          (variable_or_function_call Count)) - 
                        (expr 
                          (variable_or_function_call RESOLUTION))))) ' \n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (variable_or_function_call Count)) <= 
                      (expr 
                        (literal 0))) THEN ' 
                    (then_block \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Y) = 
                          (expr 
                            (expr 
                              (variable_or_function_call Y)) + 
                            (expr 
                              (variable_or_function_call YOff))))) ' \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Count) = 
                          (expr 
                            (expr 
                              (variable_or_function_call Count)) + 
                            (expr 
                              (variable_or_function_call MaxCount))))) ' \n) 
                    (end_if_statement END IF)) \n) NEXT)) \n)) 
        (end_if_statement END IF)) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id Explode) 
    ( 
      (parameter_list 
        (parameter MNum) , 
        (parameter X) , 
        (parameter Y) , 
        (parameter WMissiles)) ) 
    (block \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (variable_or_function_call Incoming 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call MNum)))) ) . Active)) <> 
            (expr 
              (variable_or_function_call TRUE))) THEN 
          (if_inline_action 
            (statement 
              (exit_statement EXIT SUB))))) ' \n 
      (statement 
        (play_statement PLAY 
          (expr 
            (literal "MB")))) ' \n 
      (statement 
        (call_statement 
          (untyped_id SOUND) 
          (argument_list 
            (argument 
              (expr 
                (literal 50))) , 
            (argument 
              (expr 
                (literal 2)))))) ' \n 
      (statement 
        (call_statement 
          (untyped_id SOUND) 
          (argument_list 
            (argument 
              (expr 
                (literal 40))) , 
            (argument 
              (expr 
                (literal 8)))))) ' \n \n 
      (statement 
        (do_loop_statement DO 
          (block ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call XNum) = 
                (expr 
                  (expr 
                    (variable_or_function_call XNum)) + 
                  (expr 
                    (literal 1))))) ' \n) LOOP 
          (loop_condition UNTIL 
            (expr 
              (expr 
                (variable_or_function_call Explosion 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call XNum)))) ) . Active)) = 
              (expr 
                (variable_or_function_call FALSE)))))) ' \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Explosion 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (variable_or_function_call XNum)))) ) . Active) = 
          (expr 
            (literal 1)))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Explosion 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (variable_or_function_call XNum)))) ) . X) = 
          (expr 
            (variable_or_function_call X)))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Explosion 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (variable_or_function_call XNum)))) ) . Y) = 
          (expr 
            (variable_or_function_call Y)))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Explosion 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (variable_or_function_call XNum)))) ) . MissileNum) = 
          (expr 
            (variable_or_function_call MNum)))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Explosion 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (variable_or_function_call XNum)))) ) . MType) = 
          (expr 
            (variable_or_function_call WMissiles)))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Incoming 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (variable_or_function_call MNum)))) ) . Active) = 
          (expr 
            (literal 2)))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call NumExplosions) = 
          (expr 
            (expr 
              (variable_or_function_call NumExplosions)) + 
            (expr 
              (literal 1))))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call NextExplosion) = 
          (expr 
            (builtin_function TIMER)))) ' \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id GameOver) 
    (block \n \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id MessageCount) AS 
            (type_name LONG)))) ' \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id MaxMessages) AS 
            (type_name LONG)))) \n 
      (statement 
        (dim_statement DIM 
          (dim_variable 
            (untyped_id MaxScore) AS 
            (type_name LONG)))) \n \n 
      (statement 
        (call_statement 
          (untyped_id Keys) 
          (argument_list 
            (argument 
              (expr 
                (variable_or_function_call FALSE)))))) ' \n 
      (statement 
        (play_statement PLAY 
          (expr 
            (variable_or_function_call GAMEOVERSONG)))) ' \n 
      (statement 
        (call_statement 
          (untyped_id SOUND) 
          (argument_list 
            (argument 
              (expr 
                (literal 38))) , 
            (argument 
              (expr 
                (literal 36)))))) ' \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (expr 
              (variable_or_function_call XSCALE)) * 
            (expr 
              (literal .666))) STEP 
          (expr 
            (literal 2)) 
          (block ' \n 
            (statement 
              (circle_statement CIRCLE 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call XSCALE)) / 
                    (expr 
                      (literal 2))) , 
                  (expr 
                    (expr 
                      (variable_or_function_call YSCALE)) / 
                    (expr 
                      (literal 2))) ) , 
                (expr 
                  (variable_or_function_call i)) , 
                (expr 
                  (variable_or_function_call ExplColor)))) \n) NEXT i)) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call ScreenMode)) = 
          (expr 
            (literal 7))) THEN \n 
        (then_block 
          (statement 
            (color_statement COLOR 
              (expr 
                (literal 15)) , 
              (expr 
                (variable_or_function_call ExplColor)))) ' \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (color_statement COLOR 
                (expr 
                  (literal 0)))) ' \n)) 
        (end_if_statement END IF)) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 1)) , 
          (expr 
            (literal 3)))) : 
      (statement 
        (print_using_statement PRINT USING 
          (expr 
            (literal "Score: ###,###,###")) ; 
          (expr 
            (variable_or_function_call Score)))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 1)) , 
          (expr 
            (expr 
              (variable_or_function_call ScreenWidth)) - 
            (expr 
              (literal 10))))) : 
      (statement 
        (print_using_statement PRINT USING 
          (expr 
            (literal "Wave: ###")) ; 
          (expr 
            (variable_or_function_call Wave)))) \n \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "Game statistics:"))) , 
            (argument 
              (expr 
                (literal 8)))))) ' \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (expr 
                  (literal "Number of missiles destroyed:")) + 
                (expr 
                  (variable_or_function_call STR$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call TotalIncoming)))) ))))) , 
            (argument 
              (expr 
                (literal 10)))))) \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (expr 
                  (literal "Number of interceptors launched:")) + 
                (expr 
                  (variable_or_function_call STR$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call TotalInterceptors)))) ))))) , 
            (argument 
              (expr 
                (literal 11)))))) \n \n 
      (statement 
        (read_statement READ 
          (variable_or_function_call MaxMessages))) ' \n \n 
      (statement 
        (do_loop_statement DO 
          (block ' \n 
            (statement 
              (read_statement READ 
                (variable_or_function_call Rank$) , 
                (variable_or_function_call Message$))) ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call MaxScore) = 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call MaxScore)) + 
                    (expr 
                      (literal 10000 &))) + 
                  (expr 
                    (expr 
                      (literal 20000 &)) * 
                    (expr 
                      (variable_or_function_call MessageCount)))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call MessageCount) = 
                (expr 
                  (expr 
                    (variable_or_function_call MessageCount)) + 
                  (expr 
                    (literal 1))))) ' \n) LOOP 
          (loop_condition WHILE 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call MaxScore)) < 
                (expr 
                  (variable_or_function_call Score))) AND 
              (expr 
                (expr 
                  (variable_or_function_call MessageCount)) < 
                (expr 
                  (variable_or_function_call MaxMessages))))))) \n \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (variable_or_function_call Message$))) , 
            (argument 
              (expr 
                (literal 15)))))) ' \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (expr 
                  (literal "Rank:  ")) + 
                (expr 
                  (variable_or_function_call Rank$)))) , 
            (argument 
              (expr 
                (literal 16)))))) ' \n 
      (statement 
        (call_statement 
          (untyped_id Center) 
          (argument_list 
            (argument 
              (expr 
                (literal "Would you like to try again? 
                  (Y/N)"))) , 
            (argument 
              (expr 
                (literal 20)))))) ' \n \n 
      (statement 
        (do_loop_statement DO 
          (block :) LOOP 
          (loop_condition UNTIL 
            (expr 
              (expr 
                (variable_or_function_call INKEY$)) = 
              (expr 
                (literal "")))))) ' \n \n 
      (statement 
        (do_loop_statement DO 
          (block ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call a$) = 
                (expr 
                  (variable_or_function_call UCASE$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call INKEY$)))) ))))) \n) LOOP 
          (loop_condition WHILE 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call a$)) <> 
                (expr 
                  (literal "Y"))) AND 
              (expr 
                (expr 
                  (variable_or_function_call a$)) <> 
                (expr 
                  (literal "N"))))))) \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call a$)) = 
          (expr 
            (literal "Y"))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call ContinueGame) = 
              (expr 
                (literal 1)))) ' \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call ContinueGame) = 
                (expr 
                  (variable_or_function_call FALSE)))) ' \n)) 
        (end_if_statement END IF)) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id HorizontalScroll) 
    ( 
      (parameter_list 
        (parameter M$) , 
        (parameter Row)) ) 
    (block \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call M$) = 
          (expr 
            (expr 
              (variable_or_function_call SPACE$ 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (expr 
                          (variable_or_function_call ScreenWidth)) + 
                        (expr 
                          (literal 2))))) ))) + 
            (expr 
              (variable_or_function_call M$))))) ' \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (expr 
              (builtin_function LEN 
                ( 
                  (expr 
                    (variable_or_function_call M$)) ))) - 
            (expr 
              (literal 1))) 
          (block ' \n 
            (statement 
              (locate_statement LOCATE 
                (expr 
                  (variable_or_function_call Row)) , 
                (expr 
                  (literal 1)))) ' \n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (builtin_function 
                    (mid_function MID$ 
                      ( 
                        (expr 
                          (variable_or_function_call M$)) , 
                        (expr 
                          (expr 
                            (builtin_function LEN 
                              ( 
                                (expr 
                                  (variable_or_function_call M$)) ))) - 
                          (expr 
                            (variable_or_function_call i))) , 
                        (expr 
                          (expr 
                            (variable_or_function_call ScreenWidth)) - 
                          (expr 
                            (literal 1))) )))))) ' \n 
            (statement 
              (call_statement 
                (untyped_id UpdateTarget))) ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Delay!) = 
                (expr 
                  (expr 
                    (builtin_function TIMER)) + 
                  (expr 
                    (literal .05))))) ' \n 
            (statement 
              (do_loop_statement DO 
                (do_condition WHILE 
                  (expr 
                    (expr 
                      (builtin_function TIMER)) < 
                    (expr 
                      (variable_or_function_call Delay!)))) 
                (block :) LOOP)) \n) NEXT i)) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id InitFirebases) 
    (block \n \n ' \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (literal 0)) , 
            (expr 
              (expr 
                (variable_or_function_call YSCALE)) - 
              (expr 
                (literal 6))) ) - 
          ( 
            (expr 
              (literal 10)) , 
            (expr 
              (expr 
                (variable_or_function_call YSCALE)) - 
              (expr 
                (literal 11))) ) , 
          (expr 
            (literal 14)))) ' \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (literal 0)) , 
            (expr 
              (expr 
                (variable_or_function_call YSCALE)) - 
              (expr 
                (literal 6))) ) - 
          ( 
            (expr 
              (literal 5)) , 
            (expr 
              (expr 
                (variable_or_function_call YSCALE)) - 
              (expr 
                (literal 1))) ) , 
          (expr 
            (literal 14)))) \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (literal 10)) , 
            (expr 
              (expr 
                (variable_or_function_call YSCALE)) - 
              (expr 
                (literal 11))) ) - 
          ( 
            (expr 
              (literal 5)) , 
            (expr 
              (expr 
                (variable_or_function_call YSCALE)) - 
              (expr 
                (literal 1))) ) , 
          (expr 
            (literal 14)))) \n 
      (statement 
        (paint_statement PAINT 
          ( 
            (expr 
              (literal 5)) , 
            (expr 
              (expr 
                (variable_or_function_call YSCALE)) - 
              (expr 
                (literal 6))) ) , 
          (expr 
            (literal 4)) , 
          (expr 
            (literal 14)))) ' \n \n ' \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call XSCALE)) - 
              (expr 
                (literal 1))) , 
            (expr 
              (expr 
                (variable_or_function_call YSCALE)) - 
              (expr 
                (literal 6))) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call XSCALE)) - 
              (expr 
                (literal 11))) , 
            (expr 
              (expr 
                (variable_or_function_call YSCALE)) - 
              (expr 
                (literal 11))) ) , 
          (expr 
            (literal 14)))) \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call XSCALE)) - 
              (expr 
                (literal 11))) , 
            (expr 
              (expr 
                (variable_or_function_call YSCALE)) - 
              (expr 
                (literal 11))) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call XSCALE)) - 
              (expr 
                (literal 6))) , 
            (expr 
              (expr 
                (variable_or_function_call YSCALE)) - 
              (expr 
                (literal 1))) ) , 
          (expr 
            (literal 14)))) \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call XSCALE)) - 
              (expr 
                (literal 6))) , 
            (expr 
              (expr 
                (variable_or_function_call YSCALE)) - 
              (expr 
                (literal 1))) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call XSCALE)) - 
              (expr 
                (literal 1))) , 
            (expr 
              (expr 
                (variable_or_function_call YSCALE)) - 
              (expr 
                (literal 6))) ) , 
          (expr 
            (literal 14)))) \n 
      (statement 
        (paint_statement PAINT 
          ( 
            (expr 
              (expr 
                (variable_or_function_call XSCALE)) - 
              (expr 
                (literal 6))) , 
            (expr 
              (expr 
                (variable_or_function_call YSCALE)) - 
              (expr 
                (literal 6))) ) , 
          (expr 
            (literal 4)) , 
          (expr 
            (literal 14)))) ' \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id InitScreen) 
    (block \n \n 
      (statement 
        (screen_statement SCREEN 
          (expr 
            (literal 0)))) ' \n 
      (statement 
        (screen_statement SCREEN 
          (expr 
            (variable_or_function_call ScreenMode)))) ' \n 
      (statement 
        (select_case_statement SELECT CASE 
          (expr 
            (variable_or_function_call ScreenMode)) 
          (before_first_case \n) 
          (case_block 
            (case_statement CASE 
              (case_expr 
                (expr 
                  (literal 7)))) 
            (block ' \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call PlanetColor) = 
                  (expr 
                    (variable_or_function_call PLANETS7)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call EnemyColor) = 
                  (expr 
                    (variable_or_function_call ENEMYCOLORS7)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call InterceptColor) = 
                  (expr 
                    (variable_or_function_call INTERCEPTCOLORS7)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call ExplColor) = 
                  (expr 
                    (variable_or_function_call EXPLCOLORS7)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call BaseColor) = 
                  (expr 
                    (variable_or_function_call BASECOLORS7)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call GameBkGround) = 
                  (expr 
                    (variable_or_function_call GAMEBKGROUNDS7)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TargetColor) = 
                  (expr 
                    (variable_or_function_call TARGETCOLORS7)))) \n)) 
          (case_block 
            (case_statement CASE ELSE) 
            (block \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call PlanetColor) = 
                  (expr 
                    (variable_or_function_call PLANETS1)))) ' \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call EnemyColor) = 
                  (expr 
                    (variable_or_function_call ENEMYCOLORS1)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call InterceptColor) = 
                  (expr 
                    (variable_or_function_call INTERCEPTCOLORS1)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call ExplColor) = 
                  (expr 
                    (variable_or_function_call EXPLCOLORS1)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call BaseColor) = 
                  (expr 
                    (variable_or_function_call BASECOLORS1)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call GameBkGround) = 
                  (expr 
                    (variable_or_function_call GAMEBKGROUNDS1)))) \n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call TargetColor) = 
                  (expr 
                    (variable_or_function_call TARGETCOLORS1)))) \n)) 
          (end_select_statement END SELECT))) \n \n 
      (statement 
        (color_statement COLOR , 
          (expr 
            (variable_or_function_call GameBkGround)))) ' \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Target.X) = 
          (expr 
            (expr 
              (variable_or_function_call XSCALE)) / 
            (expr 
              (literal 2))))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Target.Y) = 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call YSCALE)) / 
              (expr 
                (literal 2))) + 
            (expr 
              (literal 5))))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Target.OldX) = 
          (expr 
            (variable_or_function_call Target.X)))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Target.OldY) = 
          (expr 
            (variable_or_function_call Target.Y)))) \n 
      (statement 
        (call_statement 
          (untyped_id UpdateTarget))) ' \n \n 
      (statement 
        (do_loop_statement DO 
          (block :) LOOP 
          (loop_condition UNTIL 
            (expr 
              (expr 
                (variable_or_function_call INKEY$)) = 
              (expr 
                (literal "")))))) ' \n \n 
      (statement 
        (call_statement 
          (untyped_id UpdateScore))) ' \n ' \n 
      (statement 
        (circle_statement CIRCLE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call XSCALE)) / 
              (expr 
                (literal 2))) , 
            (expr 
              (expr 
                (variable_or_function_call YSCALE)) + 
              (expr 
                (literal 135))) ) , 
          (expr 
            (variable_or_function_call PLANETRADIUS)) , 
          (expr 
            (variable_or_function_call PlanetColor)))) \n 
      (statement 
        (paint_statement PAINT 
          ( 
            (expr 
              (expr 
                (variable_or_function_call XSCALE)) / 
              (expr 
                (literal 2))) , 
            (expr 
              (expr 
                (variable_or_function_call YSCALE)) - 
              (expr 
                (literal 1))) ) , 
          (expr 
            (variable_or_function_call PlanetColor)))) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id KeyPause) 
    (block \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 11)) TO 
          (expr 
            (literal 20)) 
          (block ' \n 
            (statement 
              (event_control_statement KEY 
                ( 
                  (expr 
                    (variable_or_function_call i)) ) STOP)) \n) NEXT i)) \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id Keys) 
    ( 
      (parameter_list 
        (parameter TurnKeysOn)) ) 
    (block \n \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 11)) TO 
          (expr 
            (literal 20)) 
          (block ' \n 
            (if_block_statement IF 
              (expr 
                (variable_or_function_call TurnKeysOn)) THEN \n 
              (then_block 
                (statement 
                  (event_control_statement KEY 
                    ( 
                      (expr 
                        (variable_or_function_call i)) ) ON)) \n) 
              (else_block_statement ELSE 
                (else_block \n 
                  (statement 
                    (event_control_statement KEY 
                      ( 
                        (expr 
                          (variable_or_function_call i)) ) OFF)) \n)) 
              (end_if_statement END IF)) \n) NEXT i)) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id LaunchMissile) 
    ( 
      (parameter_list 
        (parameter Chosen) , 
        (parameter XStart) , 
        (parameter YStart) , 
        (parameter XFinish) , 
        (parameter YFinish)) ) 
    (block \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Incoming 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (variable_or_function_call Chosen)))) ) . Active) = 
          (expr 
            (variable_or_function_call TRUE)))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Incoming 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (variable_or_function_call Chosen)))) ) . XStart) = 
          (expr 
            (variable_or_function_call XStart)))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Incoming 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (variable_or_function_call Chosen)))) ) . YStart) = 
          (expr 
            (variable_or_function_call YStart)))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Incoming 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (variable_or_function_call Chosen)))) ) . XFinish) = 
          (expr 
            (variable_or_function_call XFinish)))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Incoming 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (variable_or_function_call Chosen)))) ) . YFinish) = 
          (expr 
            (variable_or_function_call YFinish)))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Incoming 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (variable_or_function_call Chosen)))) ) . X) = 
          (expr 
            (variable_or_function_call XStart)))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Incoming 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (variable_or_function_call Chosen)))) ) . Y) = 
          (expr 
            (variable_or_function_call YStart)))) ' \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call XDistance) = 
          (expr 
            (expr 
              (variable_or_function_call XFinish)) - 
            (expr 
              (variable_or_function_call XStart))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call YDistance) = 
          (expr 
            (expr 
              (variable_or_function_call YFinish)) - 
            (expr 
              (variable_or_function_call YStart))))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Incoming 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (variable_or_function_call Chosen)))) ) . XOffset) = 
          (expr 
            (variable_or_function_call SGN 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call XDistance)))) ))))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Incoming 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (variable_or_function_call Chosen)))) ) . YOffset) = 
          (expr 
            (variable_or_function_call SGN 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call YDistance)))) ))))) ' \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call ABS 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call XDistance)))) ))) >= 
          (expr 
            (variable_or_function_call ABS 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call YDistance)))) )))) THEN ' 
        (then_block \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Incoming 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call Chosen)))) ) . MaxCount) = 
              (expr 
                (variable_or_function_call INT 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (expr 
                            (expr 
                              (variable_or_function_call ABS 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call XDistance)))) ))) / 
                            (expr 
                              ( 
                                (expr 
                                  (expr 
                                    (variable_or_function_call ABS 
                                      ( 
                                        (argument_list 
                                          (argument 
                                            (expr 
                                              (variable_or_function_call YDistance)))) ))) + 
                                  (expr 
                                    (literal 1))) ))) * 
                          (expr 
                            (variable_or_function_call RESOLUTION))))) ))))) ' \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Incoming 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call Chosen)))) ) . YMajor) = 
              (expr 
                (variable_or_function_call FALSE)))) ' \n) 
        (else_block_statement ELSE 
          (else_block ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Incoming 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Chosen)))) ) . MaxCount) = 
                (expr 
                  (variable_or_function_call INT 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (expr 
                              (expr 
                                (variable_or_function_call ABS 
                                  ( 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call YDistance)))) ))) / 
                              (expr 
                                ( 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call ABS 
                                        ( 
                                          (argument_list 
                                            (argument 
                                              (expr 
                                                (variable_or_function_call XDistance)))) ))) + 
                                    (expr 
                                      (literal 1))) ))) * 
                            (expr 
                              (variable_or_function_call RESOLUTION))))) ))))) ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Incoming 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Chosen)))) ) . YMajor) = 
                (expr 
                  (variable_or_function_call TRUE)))) ' \n)) 
        (end_if_statement END IF)) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Incoming 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (variable_or_function_call Chosen)))) ) . Count) = 
          (expr 
            (variable_or_function_call Incoming 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call Chosen)))) ) . MaxCount)))) ' \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id NewInterceptor) 
    ( 
      (parameter_list 
        (parameter 
          (untyped_id StartX) AS 
          (type_name_for_parameter INTEGER)) , 
        (parameter 
          (untyped_id StartY) AS 
          (type_name_for_parameter INTEGER))) ) 
    (block \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call NumIntercepts)) < 
          (expr 
            (literal 4))) THEN ' 
        (then_block \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call NumIntercepts) = 
              (expr 
                (expr 
                  (variable_or_function_call NumIntercepts)) + 
                (expr 
                  (literal 1))))) ' \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call TotalInterceptors) = 
              (expr 
                (expr 
                  (variable_or_function_call TotalInterceptors)) + 
                (expr 
                  (literal 1))))) ' \n \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Chosen) = 
              (expr 
                (literal 7)))) ' \n 
          (statement 
            (do_loop_statement DO 
              (do_condition UNTIL 
                (expr 
                  (expr 
                    (variable_or_function_call Incoming 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call Chosen)))) ) . Active)) = 
                  (expr 
                    (variable_or_function_call FALSE)))) 
              (block ' \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Chosen) = 
                    (expr 
                      (expr 
                        (variable_or_function_call Chosen)) + 
                      (expr 
                        (literal 1))))) ' \n) LOOP)) \n \n 
          (statement 
            (call_statement 
              (untyped_id KeyPause))) ' \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call TargetX) = 
              (expr 
                (variable_or_function_call Target.X)))) ' \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call TargetY) = 
              (expr 
                (variable_or_function_call Target.Y)))) ' \n 
          (statement 
            (call_statement 
              (untyped_id Keys) 
              (argument_list 
                (argument 
                  (expr 
                    (variable_or_function_call TRUE)))))) ' \n \n ' \n 
          (statement 
            (line_statement LINE 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call TargetX)) - 
                  (expr 
                    (literal 5))) , 
                (expr 
                  (expr 
                    (variable_or_function_call TargetY)) - 
                  (expr 
                    (literal 5))) ) - 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call TargetX)) + 
                  (expr 
                    (literal 5))) , 
                (expr 
                  (expr 
                    (variable_or_function_call TargetY)) + 
                  (expr 
                    (literal 5))) ) , 
              (expr 
                (variable_or_function_call TargetColor)))) \n 
          (statement 
            (line_statement LINE 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call TargetX)) + 
                  (expr 
                    (literal 5))) , 
                (expr 
                  (expr 
                    (variable_or_function_call TargetY)) - 
                  (expr 
                    (literal 5))) ) - 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call TargetX)) - 
                  (expr 
                    (literal 5))) , 
                (expr 
                  (expr 
                    (variable_or_function_call TargetY)) + 
                  (expr 
                    (literal 5))) ) , 
              (expr 
                (variable_or_function_call TargetColor)))) \n \n 
          (statement 
            (call_statement 
              (untyped_id LaunchMissile) 
              (argument_list 
                (argument 
                  (expr 
                    (variable_or_function_call Chosen))) , 
                (argument 
                  (expr 
                    (variable_or_function_call StartX))) , 
                (argument 
                  (expr 
                    (variable_or_function_call StartY))) , 
                (argument 
                  (expr 
                    (variable_or_function_call TargetX))) , 
                (argument 
                  (expr 
                    (variable_or_function_call TargetY)))))) \n) 
        (end_if_statement END IF)) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id NewMissile) 
    (block \n \n ' \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call WaveCount)) = 
              (expr 
                (expr 
                  (literal 10)) + 
                (expr 
                  (expr 
                    (variable_or_function_call Wave)) * 
                  (expr 
                    (literal 2))))) OR 
            (expr 
              (expr 
                (variable_or_function_call ContinueGame)) <> 
              (expr 
                (variable_or_function_call TRUE)))) THEN 
          (if_inline_action 
            (statement 
              (exit_statement EXIT SUB))))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call WaveCount) = 
          (expr 
            (expr 
              (variable_or_function_call WaveCount)) + 
            (expr 
              (literal 1))))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call TotalIncoming) = 
          (expr 
            (expr 
              (variable_or_function_call TotalIncoming)) + 
            (expr 
              (literal 1))))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call MissilesFlying) = 
          (expr 
            (expr 
              (variable_or_function_call MissilesFlying)) + 
            (expr 
              (literal 1))))) ' \n \n 
      (statement 
        (do_loop_statement DO 
          (block ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Targ) = 
                (expr 
                  (expr 
                    (variable_or_function_call INT 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (expr 
                                (variable_or_function_call RND 
                                  ( 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (literal 1)))) ))) * 
                              (expr 
                                (variable_or_function_call MaxStarbases))))) ))) + 
                  (expr 
                    (literal 1))))) ' \n) LOOP 
          (loop_condition UNTIL 
            (expr 
              (expr 
                (variable_or_function_call Starbase 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Targ)))) ) . Active)) = 
              (expr 
                (variable_or_function_call TRUE)))))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Chosen) = 
          (expr 
            (literal 1)))) ' \n 
      (statement 
        (do_loop_statement DO 
          (do_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call Incoming 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Chosen)))) ) . Active)) <> 
              (expr 
                (variable_or_function_call FALSE)))) 
          (block ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Chosen) = 
                (expr 
                  (expr 
                    (variable_or_function_call Chosen)) + 
                  (expr 
                    (literal 1))))) ' \n) LOOP)) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call XStart) = 
          (expr 
            (expr 
              (variable_or_function_call INT 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call RND 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (literal 1)))) ))) * 
                          (expr 
                            (variable_or_function_call XSCALE))) - 
                        (expr 
                          (literal 1))))) ))) + 
            (expr 
              (literal 1))))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call YStart) = 
          (expr 
            (literal 12)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call XFinish) = 
          (expr 
            (variable_or_function_call Starbase 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call Targ)))) ) . X)))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call YFinish) = 
          (expr 
            (variable_or_function_call Starbase 
              ( 
                (argument_list 
                  (argument 
                    (expr 
                      (variable_or_function_call Targ)))) ) . Y)))) \n \n 
      (statement 
        (call_statement 
          (untyped_id LaunchMissile) 
          (argument_list 
            (argument 
              (expr 
                (variable_or_function_call Chosen))) , 
            (argument 
              (expr 
                (variable_or_function_call XStart))) , 
            (argument 
              (expr 
                (variable_or_function_call YStart))) , 
            (argument 
              (expr 
                (variable_or_function_call XFinish))) , 
            (argument 
              (expr 
                (variable_or_function_call YFinish)))))) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id NewStarbase) 
    (block \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Chosen) = 
          (expr 
            (literal 1)))) ' \n 
      (statement 
        (do_loop_statement DO 
          (do_condition WHILE 
            (expr 
              (expr 
                (variable_or_function_call Starbase 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Chosen)))) ) . Active)) = 
              (expr 
                (variable_or_function_call TRUE)))) 
          (block ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Chosen) = 
                (expr 
                  (expr 
                    (variable_or_function_call Chosen)) + 
                  (expr 
                    (literal 1))))) ' \n) LOOP)) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call BasesLeft) = 
          (expr 
            (expr 
              (variable_or_function_call BasesLeft)) + 
            (expr 
              (literal 1))))) ' \n \n 
      (statement 
        (do_loop_statement DO 
          (block ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Angle!) = 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call RND 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (literal 1)))) ))) * 
                    (expr 
                      (literal 2))) * 
                  (expr 
                    (variable_or_function_call PI))))) ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Y) = 
                (expr 
                  (expr 
                    (expr 
                      (expr 
                        (variable_or_function_call SIN 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call Angle!)))) ))) * 
                      (expr 
                        (variable_or_function_call PLANETRADIUS))) + 
                    (expr 
                      (variable_or_function_call YSCALE))) + 
                  (expr 
                    (literal 155))))) ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call X) = 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call COS 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call Angle!)))) ))) * 
                    (expr 
                      (variable_or_function_call PLANETRADIUS))) + 
                  (expr 
                    (expr 
                      (variable_or_function_call XSCALE)) / 
                    (expr 
                      (literal 2)))))) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call TooClose) = 
                (expr 
                  (variable_or_function_call FALSE)))) ' \n \n 
            (statement 
              (for_next_statement FOR i = 
                (expr 
                  (literal 1)) TO 
                (expr 
                  (variable_or_function_call MaxStarbases)) 
                (block ' \n ' \n 
                  (statement 
                    (if_inline_statement IF 
                      (expr 
                        (expr 
                          (expr 
                            (variable_or_function_call ABS 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call Starbase 
                                          ( 
                                            (argument_list 
                                              (argument 
                                                (expr 
                                                  (variable_or_function_call i)))) ) . X)) - 
                                      (expr 
                                        (variable_or_function_call X))))) ))) < 
                          (expr 
                            (literal 20))) AND 
                        (expr 
                          (expr 
                            (variable_or_function_call Starbase 
                              ( 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call i)))) ) . Active)) = 
                          (expr 
                            (variable_or_function_call TRUE)))) THEN 
                      (if_inline_action 
                        (statement 
                          (assignment_statement 
                            (variable_or_function_call TooClose) = 
                            (expr 
                              (variable_or_function_call TRUE))))))) \n) NEXT i)) \n) LOOP 
          (loop_condition WHILE 
            (expr 
              (expr 
                (expr 
                  (variable_or_function_call Y)) > 
                (expr 
                  (expr 
                    (variable_or_function_call YSCALE)) - 
                  (expr 
                    (literal 11)))) OR 
              (expr 
                (expr 
                  (variable_or_function_call TooClose)) = 
                (expr 
                  (variable_or_function_call TRUE))))))) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Starbase 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (variable_or_function_call Chosen)))) ) . X) = 
          (expr 
            (variable_or_function_call X)))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Starbase 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (variable_or_function_call Chosen)))) ) . Y) = 
          (expr 
            (variable_or_function_call Y)))) \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Starbase 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (variable_or_function_call Chosen)))) ) . Active) = 
          (expr 
            (variable_or_function_call TRUE)))) ' \n ' \n 
      (statement 
        (circle_statement CIRCLE 
          ( 
            (expr 
              (variable_or_function_call Starbase 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call Chosen)))) ) . X)) , 
            (expr 
              (variable_or_function_call Starbase 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call Chosen)))) ) . Y)) ) , 
          (expr 
            (literal 7)) , 
          (expr 
            (variable_or_function_call BaseColor)) , , , 
          (expr 
            (literal .3)))) \n 
      (statement 
        (paint_statement PAINT 
          ( 
            (expr 
              (variable_or_function_call Starbase 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call Chosen)))) ) . X)) , 
            (expr 
              (variable_or_function_call Starbase 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call Chosen)))) ) . Y)) ) , 
          (expr 
            (variable_or_function_call BaseColor)))) \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call Starbase 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Chosen)))) ) . X)) - 
              (expr 
                (expr 
                  (variable_or_function_call XSCALE)) / 
                (expr 
                  (variable_or_function_call FACTOR)))) , 
            (expr 
              (expr 
                (variable_or_function_call Starbase 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Chosen)))) ) . Y)) - 
              (expr 
                (expr 
                  (variable_or_function_call XSCALE)) / 
                (expr 
                  (variable_or_function_call FACTOR)))) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call Starbase 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Chosen)))) ) . X)) + 
              (expr 
                (expr 
                  (variable_or_function_call XSCALE)) / 
                (expr 
                  (variable_or_function_call FACTOR)))) , 
            (expr 
              (expr 
                (variable_or_function_call Starbase 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Chosen)))) ) . Y)) + 
              (expr 
                (expr 
                  (variable_or_function_call XSCALE)) / 
                (expr 
                  (variable_or_function_call FACTOR)))) ) , 
          (expr 
            (literal 4)) , 
          (box_style BF))) \n 
      (statement 
        (pset_statement PSET 
          ( 
            (expr 
              (variable_or_function_call Starbase 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call Chosen)))) ) . X)) , 
            (expr 
              (expr 
                (variable_or_function_call Starbase 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Chosen)))) ) . Y)) - 
              (expr 
                (literal 3))) ) , 
          (expr 
            (literal 14)))) \n 
      (statement 
        (pset_statement PSET 
          ( 
            (expr 
              (variable_or_function_call Starbase 
                ( 
                  (argument_list 
                    (argument 
                      (expr 
                        (variable_or_function_call Chosen)))) ) . X)) , 
            (expr 
              (expr 
                (variable_or_function_call Starbase 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Chosen)))) ) . Y)) + 
              (expr 
                (literal 3))) ) , 
          (expr 
            (literal 14)))) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id StopMissile) 
    ( 
      (parameter_list 
        (parameter MNum) , 
        (parameter WMissiles)) ) 
    (block \n \n 
      (statement 
        (call_statement 
          (untyped_id EraseMissileTrail) 
          (argument_list 
            (argument 
              (expr 
                (variable_or_function_call MNum)))))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Incoming 
            ( 
              (argument_list 
                (argument 
                  (expr 
                    (variable_or_function_call MNum)))) ) . Active) = 
          (expr 
            (variable_or_function_call FALSE)))) ' \n \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (variable_or_function_call WMissiles)) = 
          (expr 
            (literal 1))) THEN \n 
        (then_block 
          (statement 
            (call_statement 
              (untyped_id UpdateScore))) ' \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call MissilesFlying) = 
              (expr 
                (expr 
                  (variable_or_function_call MissilesFlying)) - 
                (expr 
                  (literal 1))))) ' \n ' \n 
          (statement 
            (if_inline_statement IF 
              (expr 
                (expr 
                  (expr 
                    (variable_or_function_call WaveCount)) = 
                  (expr 
                    (expr 
                      (literal 10)) + 
                    (expr 
                      (expr 
                        (literal 2)) * 
                      (expr 
                        (variable_or_function_call Wave))))) AND 
                (expr 
                  (expr 
                    (variable_or_function_call MissilesFlying)) = 
                  (expr 
                    (literal 0)))) THEN 
              (if_inline_action 
                (statement 
                  (call_statement 
                    (untyped_id WaveComplete)))))) \n 
          (statement 
            (call_statement 
              (untyped_id NewMissile))) ' \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call NumIntercepts) = 
                (expr 
                  (expr 
                    (variable_or_function_call NumIntercepts)) - 
                  (expr 
                    (literal 1))))) ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call XFinish) = 
                (expr 
                  (variable_or_function_call Incoming 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call MNum)))) ) . XFinish)))) ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call YFinish) = 
                (expr 
                  (variable_or_function_call Incoming 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call MNum)))) ) . YFinish)))) \n ' \n 
            (statement 
              (line_statement LINE 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call XFinish)) - 
                    (expr 
                      (literal 5))) , 
                  (expr 
                    (expr 
                      (variable_or_function_call YFinish)) - 
                    (expr 
                      (literal 5))) ) - 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call XFinish)) + 
                    (expr 
                      (literal 5))) , 
                  (expr 
                    (expr 
                      (variable_or_function_call YFinish)) + 
                    (expr 
                      (literal 5))) ) , 
                (expr 
                  (variable_or_function_call GameBkGround)))) \n 
            (statement 
              (line_statement LINE 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call XFinish)) + 
                    (expr 
                      (literal 5))) , 
                  (expr 
                    (expr 
                      (variable_or_function_call YFinish)) - 
                    (expr 
                      (literal 5))) ) - 
                ( 
                  (expr 
                    (expr 
                      (variable_or_function_call XFinish)) - 
                    (expr 
                      (literal 5))) , 
                  (expr 
                    (expr 
                      (variable_or_function_call YFinish)) + 
                    (expr 
                      (literal 5))) ) , 
                (expr 
                  (variable_or_function_call GameBkGround)))) \n)) 
        (end_if_statement END IF)) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id UpdateExplosions) 
    (block \n \n 
      (statement 
        (for_next_statement FOR XNum = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 10)) 
          (block ' \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call W) = 
                (expr 
                  (variable_or_function_call Explosion 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call XNum)))) ) . Active)))) ' \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call W)) > 
                (expr 
                  (literal 0))) THEN ' 
              (then_block \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call X) = 
                    (expr 
                      (variable_or_function_call Explosion 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call XNum)))) ) . X)))) ' \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Y) = 
                    (expr 
                      (variable_or_function_call Explosion 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call XNum)))) ) . Y)))) \n \n 
                (if_block_statement IF 
                  (expr 
                    (expr 
                      (variable_or_function_call W)) > 
                    (expr 
                      (variable_or_function_call EXPLRADIUS))) THEN ' 
                  (then_block \n 
                    (statement 
                      (for_next_statement FOR T = 
                        (expr 
                          (literal 1)) TO 
                        (expr 
                          (variable_or_function_call EXPLRADIUS)) 
                        (block ' \n 
                          (statement 
                            (circle_statement CIRCLE 
                              ( 
                                (expr 
                                  (variable_or_function_call X)) , 
                                (expr 
                                  (variable_or_function_call Y)) ) , 
                              (expr 
                                (variable_or_function_call T)) , 
                              (expr 
                                (variable_or_function_call GameBkGround)))) \n) NEXT T)) \n \n ' \n 
                    (statement 
                      (call_statement 
                        (untyped_id StopMissile) 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call Explosion 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call XNum)))) ) . MissileNum))) , 
                          (argument 
                            (expr 
                              (variable_or_function_call Explosion 
                                ( 
                                  (argument_list 
                                    (argument 
                                      (expr 
                                        (variable_or_function_call XNum)))) ) . MType)))))) \n \n 
                    (statement 
                      (for_next_statement FOR i = 
                        (expr 
                          (literal 1)) TO 
                        (expr 
                          (variable_or_function_call MaxStarbases)) 
                        (block ' \n 
                          (statement 
                            (if_inline_statement IF 
                              (expr 
                                (expr 
                                  (expr 
                                    (variable_or_function_call Starbase 
                                      ( 
                                        (argument_list 
                                          (argument 
                                            (expr 
                                              (variable_or_function_call i)))) ) . Active)) = 
                                  (expr 
                                    (variable_or_function_call TRUE))) AND 
                                (expr 
                                  (expr 
                                    (expr 
                                      (expr 
                                        ( 
                                          (expr 
                                            (expr 
                                              (expr 
                                                ( 
                                                  (expr 
                                                    (expr 
                                                      (variable_or_function_call X)) - 
                                                    (expr 
                                                      (variable_or_function_call Starbase 
                                                        ( 
                                                          (argument_list 
                                                            (argument 
                                                              (expr 
                                                                (variable_or_function_call i)))) ) . X))) )) ^ 
                                              (expr 
                                                (literal 2))) + 
                                            (expr 
                                              (expr 
                                                ( 
                                                  (expr 
                                                    (expr 
                                                      (variable_or_function_call Y)) - 
                                                    (expr 
                                                      (variable_or_function_call Starbase 
                                                        ( 
                                                          (argument_list 
                                                            (argument 
                                                              (expr 
                                                                (variable_or_function_call i)))) ) . Y))) )) ^ 
                                              (expr 
                                                (literal 2)))) )) ^ 
                                      (expr 
                                        (literal .5))) - 
                                    (expr 
                                      (variable_or_function_call EXPLRADIUS))) < 
                                  (expr - 
                                    (expr 
                                      (literal 2))))) THEN 
                              (if_inline_action 
                                (statement 
                                  (call_statement 
                                    (untyped_id DestroyStarbase) 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call i))))))))) \n) NEXT i)) \n \n 
                    (statement 
                      (call_statement 
                        (untyped_id UpdateTarget))) ' \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call Explosion 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call XNum)))) ) . Active) = 
                        (expr 
                          (variable_or_function_call FALSE)))) ' \n) 
                  (else_block_statement ELSE 
                    (else_block \n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Explosion 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (variable_or_function_call XNum)))) ) . Active) = 
                          (expr 
                            (expr 
                              (variable_or_function_call W)) + 
                            (expr 
                              (literal 1))))) ' \n 
                      (statement 
                        (circle_statement CIRCLE 
                          ( 
                            (expr 
                              (variable_or_function_call X)) , 
                            (expr 
                              (variable_or_function_call Y)) ) , 
                          (expr 
                            (variable_or_function_call W)) , 
                          (expr 
                            (variable_or_function_call ExplColor)))) ' \n 
                      (statement 
                        (call_statement 
                          (untyped_id UpdateTarget))) ' \n)) 
                  (end_if_statement END IF)) \n) 
              (end_if_statement END IF)) \n) NEXT XNum)) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id UpdateMissiles) 
    ( 
      (parameter_list 
        (parameter Start) , 
        (parameter Finish) , 
        (parameter WMissiles) , 
        (parameter NumOfTimes) , 
        (parameter ColorToUse)) ) 
    (block \n \n 
      (statement 
        (for_next_statement FOR Chosen = 
          (expr 
            (variable_or_function_call Start)) TO 
          (expr 
            (variable_or_function_call Finish)) 
          (block ' \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call Incoming 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call Chosen)))) ) . Active)) = 
                (expr 
                  (variable_or_function_call TRUE))) THEN ' 
              (then_block \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call X) = 
                    (expr 
                      (variable_or_function_call Incoming 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call Chosen)))) ) . X)))) ' \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Y) = 
                    (expr 
                      (variable_or_function_call Incoming 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call Chosen)))) ) . Y)))) ' \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call YOffset) = 
                    (expr 
                      (variable_or_function_call Incoming 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call Chosen)))) ) . YOffset)))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call XOffset) = 
                    (expr 
                      (variable_or_function_call Incoming 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call Chosen)))) ) . XOffset)))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Count) = 
                    (expr 
                      (variable_or_function_call Incoming 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call Chosen)))) ) . Count)))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call MaxCount) = 
                    (expr 
                      (variable_or_function_call Incoming 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call Chosen)))) ) . MaxCount)))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call XFinish) = 
                    (expr 
                      (variable_or_function_call Incoming 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call Chosen)))) ) . XFinish)))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call YFinish) = 
                    (expr 
                      (variable_or_function_call Incoming 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call Chosen)))) ) . YFinish)))) \n \n ' \n ' \n ' \n 
                (if_block_statement IF 
                  (expr 
                    (variable_or_function_call Incoming 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call Chosen)))) ) . YMajor)) THEN ' 
                  (then_block \n 
                    (statement 
                      (for_next_statement FOR i = 
                        (expr 
                          (literal 1)) TO 
                        (expr 
                          (variable_or_function_call NumOfTimes)) 
                        (block ' \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call C) = 
                              (expr 
                                (variable_or_function_call POINT 
                                  ( 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call X))) , 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call Y)))) ))))) ' \n 
                          (statement 
                            (pset_statement PSET 
                              ( 
                                (expr 
                                  (variable_or_function_call X)) , 
                                (expr 
                                  (variable_or_function_call Y)) ) , 
                              (expr 
                                (variable_or_function_call ColorToUse)))) ' \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call Count) = 
                              (expr 
                                (expr 
                                  (variable_or_function_call Count)) - 
                                (expr 
                                  (variable_or_function_call RESOLUTION))))) ' \n 
                          (statement 
                            (assignment_statement 
                              (variable_or_function_call Y) = 
                              (expr 
                                (expr 
                                  (variable_or_function_call Y)) + 
                                (expr 
                                  (variable_or_function_call YOffset))))) ' \n \n 
                          (if_block_statement IF 
                            (expr 
                              (expr 
                                (variable_or_function_call Count)) <= 
                              (expr 
                                (literal 0))) THEN ' 
                            (then_block \n 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call X) = 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call X)) + 
                                    (expr 
                                      (variable_or_function_call XOffset))))) ' \n 
                              (statement 
                                (assignment_statement 
                                  (variable_or_function_call Count) = 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call Count)) + 
                                    (expr 
                                      (variable_or_function_call MaxCount))))) ' \n) 
                            (end_if_statement END IF)) \n \n ' \n ' \n 
                          (statement 
                            (if_inline_statement IF 
                              (expr 
                                (expr 
                                  (expr 
                                    ( 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call C)) = 
                                        (expr 
                                          (variable_or_function_call ExplColor))) )) OR 
                                  (expr 
                                    ( 
                                      (expr 
                                        (expr 
                                          (variable_or_function_call C)) = 
                                        (expr 
                                          (variable_or_function_call BaseColor))) ))) OR 
                                (expr 
                                  (expr 
                                    (variable_or_function_call Y)) = 
                                  (expr 
                                    (variable_or_function_call YFinish)))) THEN 
                              (if_inline_action 
                                (statement 
                                  (call_statement 
                                    (untyped_id Explode) 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call Chosen))) , 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call X))) , 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call Y))) , 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call WMissiles))))))))) ' \n) NEXT i)) \n) 
                  (else_block_statement ELSE 
                    (else_block ' \n 
                      (statement 
                        (for_next_statement FOR i = 
                          (expr 
                            (literal 1)) TO 
                          (expr 
                            (variable_or_function_call NumOfTimes)) 
                          (block ' \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call C) = 
                                (expr 
                                  (variable_or_function_call POINT 
                                    ( 
                                      (argument_list 
                                        (argument 
                                          (expr 
                                            (variable_or_function_call X))) , 
                                        (argument 
                                          (expr 
                                            (variable_or_function_call Y)))) ))))) ' \n 
                            (statement 
                              (pset_statement PSET 
                                ( 
                                  (expr 
                                    (variable_or_function_call X)) , 
                                  (expr 
                                    (variable_or_function_call Y)) ) , 
                                (expr 
                                  (variable_or_function_call ColorToUse)))) ' \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call Count) = 
                                (expr 
                                  (expr 
                                    (variable_or_function_call Count)) - 
                                  (expr 
                                    (variable_or_function_call RESOLUTION))))) ' \n 
                            (statement 
                              (assignment_statement 
                                (variable_or_function_call X) = 
                                (expr 
                                  (expr 
                                    (variable_or_function_call X)) + 
                                  (expr 
                                    (variable_or_function_call XOffset))))) ' \n \n 
                            (if_block_statement IF 
                              (expr 
                                (expr 
                                  (variable_or_function_call Count)) <= 
                                (expr 
                                  (literal 0))) THEN ' 
                              (then_block \n 
                                (statement 
                                  (assignment_statement 
                                    (variable_or_function_call Y) = 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call Y)) + 
                                      (expr 
                                        (variable_or_function_call YOffset))))) ' \n 
                                (statement 
                                  (assignment_statement 
                                    (variable_or_function_call Count) = 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call Count)) + 
                                      (expr 
                                        (variable_or_function_call MaxCount))))) ' \n) 
                              (end_if_statement END IF)) \n \n ' \n ' \n 
                            (statement 
                              (if_inline_statement IF 
                                (expr 
                                  (expr 
                                    (expr 
                                      ( 
                                        (expr 
                                          (expr 
                                            (variable_or_function_call C)) = 
                                          (expr 
                                            (variable_or_function_call ExplColor))) )) OR 
                                    (expr 
                                      ( 
                                        (expr 
                                          (expr 
                                            (variable_or_function_call C)) = 
                                          (expr 
                                            (variable_or_function_call BaseColor))) ))) OR 
                                  (expr 
                                    (expr 
                                      (variable_or_function_call X)) = 
                                    (expr 
                                      (variable_or_function_call XFinish)))) THEN 
                                (if_inline_action 
                                  (statement 
                                    (call_statement 
                                      (untyped_id Explode) 
                                      (argument_list 
                                        (argument 
                                          (expr 
                                            (variable_or_function_call Chosen))) , 
                                        (argument 
                                          (expr 
                                            (variable_or_function_call X))) , 
                                        (argument 
                                          (expr 
                                            (variable_or_function_call Y))) , 
                                        (argument 
                                          (expr 
                                            (variable_or_function_call WMissiles))))))))) ' \n) NEXT i)) \n)) 
                  (end_if_statement END IF)) \n \n ' \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Incoming 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call Chosen)))) ) . Count) = 
                    (expr 
                      (variable_or_function_call Count)))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Incoming 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call Chosen)))) ) . X) = 
                    (expr 
                      (variable_or_function_call X)))) \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Incoming 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call Chosen)))) ) . Y) = 
                    (expr 
                      (variable_or_function_call Y)))) \n \n) 
              (end_if_statement END IF)) \n) NEXT Chosen)) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id UpdateScore) 
    (block \n \n ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Score) = 
          (expr 
            (expr 
              (variable_or_function_call Score)) + 
            (expr 
              (expr 
                (expr 
                  (expr 
                    (literal 10)) * 
                  (expr 
                    (variable_or_function_call MissilesFlying))) * 
                (expr 
                  (variable_or_function_call BasesLeft))) * 
              (expr 
                (variable_or_function_call Wave)))))) \n \n ' \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 1)) , 
          (expr 
            (literal 3)))) : 
      (statement 
        (print_using_statement PRINT USING 
          (expr 
            (literal "Score: ###,###,###")) ; 
          (expr 
            (variable_or_function_call Score)))) \n 
      (statement 
        (locate_statement LOCATE 
          (expr 
            (literal 1)) , 
          (expr 
            (expr 
              (variable_or_function_call ScreenWidth)) - 
            (expr 
              (literal 10))))) : 
      (statement 
        (print_using_statement PRINT USING 
          (expr 
            (literal "Wave: ###")) ; 
          (expr 
            (variable_or_function_call Wave)))) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id UpdateTarget) 
    (block \n \n ' \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call Target.X)) > 
              (expr 
                (expr 
                  (variable_or_function_call XSCALE)) - 
                (expr 
                  (literal 5)))) OR 
            (expr 
              (expr 
                (variable_or_function_call Target.X)) < 
              (expr 
                (literal 5)))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call Target.X) = 
                (expr 
                  (variable_or_function_call Target.OldX))))))) \n \n ' \n 
      (statement 
        (if_inline_statement IF 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call Target.Y)) > 
              (expr 
                (expr 
                  (variable_or_function_call YSCALE)) - 
                (expr 
                  (literal 53)))) OR 
            (expr 
              (expr 
                (variable_or_function_call Target.Y)) < 
              (expr 
                (literal 15)))) THEN 
          (if_inline_action 
            (statement 
              (assignment_statement 
                (variable_or_function_call Target.Y) = 
                (expr 
                  (variable_or_function_call Target.OldY))))))) \n \n ' \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (expr 
              (variable_or_function_call Target.X)) <> 
            (expr 
              (variable_or_function_call Target.OldX))) OR 
          (expr 
            (expr 
              (variable_or_function_call Target.Y)) <> 
            (expr 
              (variable_or_function_call Target.OldY)))) THEN ' 
        (then_block \n 
          (statement 
            (line_statement LINE 
              ( 
                (expr 
                  (variable_or_function_call Target.OldX)) , 
                (expr 
                  (expr 
                    (variable_or_function_call Target.OldY)) + 
                  (expr 
                    (literal 5))) ) - 
              ( 
                (expr 
                  (variable_or_function_call Target.OldX)) , 
                (expr 
                  (expr 
                    (variable_or_function_call Target.OldY)) - 
                  (expr 
                    (literal 5))) ) , 
              (expr 
                (literal 0)))) \n 
          (statement 
            (line_statement LINE 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call Target.OldX)) - 
                  (expr 
                    (literal 5))) , 
                (expr 
                  (variable_or_function_call Target.OldY)) ) - 
              ( 
                (expr 
                  (expr 
                    (variable_or_function_call Target.OldX)) + 
                  (expr 
                    (literal 5))) , 
                (expr 
                  (variable_or_function_call Target.OldY)) ) , 
              (expr 
                (literal 0)))) \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Target.OldX) = 
              (expr 
                (variable_or_function_call Target.X)))) ' \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call Target.OldY) = 
              (expr 
                (variable_or_function_call Target.Y)))) \n) 
        (end_if_statement END IF)) \n \n ' \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (variable_or_function_call Target.X)) , 
            (expr 
              (expr 
                (variable_or_function_call Target.Y)) + 
              (expr 
                (literal 5))) ) - 
          ( 
            (expr 
              (variable_or_function_call Target.X)) , 
            (expr 
              (expr 
                (variable_or_function_call Target.Y)) - 
              (expr 
                (literal 5))) ) , 
          (expr 
            (literal 14)))) \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (expr 
                (variable_or_function_call Target.X)) - 
              (expr 
                (literal 5))) , 
            (expr 
              (variable_or_function_call Target.Y)) ) - 
          ( 
            (expr 
              (expr 
                (variable_or_function_call Target.X)) + 
              (expr 
                (literal 5))) , 
            (expr 
              (variable_or_function_call Target.Y)) ) , 
          (expr 
            (literal 14)))) \n \n) 
    (end_sub_statement END SUB)) \n \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n ' \n 
  (sub_statement SUB 
    (untyped_id WaveComplete) 
    (block \n \n 
      (statement 
        (event_control_statement KEY 
          ( 
            (expr 
              (literal 15)) ) OFF)) ' \n 
      (statement 
        (event_control_statement KEY 
          ( 
            (expr 
              (literal 16)) ) OFF)) ' \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call WaveCount) = 
          (expr 
            (literal 0)))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call WaveInterceptCount) = 
          (expr 
            (literal 0)))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Score) = 
          (expr 
            (expr 
              (variable_or_function_call Score)) + 
            (expr 
              (expr 
                (variable_or_function_call Wave)) * 
              (expr 
                (literal 500)))))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call Wave) = 
          (expr 
            (expr 
              (variable_or_function_call Wave)) + 
            (expr 
              (literal 1))))) ' \n 
      (statement 
        (play_statement PLAY 
          (expr 
            (variable_or_function_call WAVEOVERSONG)))) ' \n \n ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call M$) = 
          (expr 
            (expr 
              (expr 
                (expr 
                  (expr 
                    (expr 
                      (variable_or_function_call STR$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (expr 
                                  (literal 500)) * 
                                (expr 
                                  ( 
                                    (expr 
                                      (expr 
                                        (variable_or_function_call Wave)) - 
                                      (expr 
                                        (literal 1))) ))))) ))) + 
                    (expr 
                      (literal " point bonus!"))) + 
                  (expr 
                    (variable_or_function_call SPACE$ 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (literal 20)))) )))) + 
                (expr 
                  (literal "Wave"))) + 
              (expr 
                (variable_or_function_call STR$ 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (expr 
                            (variable_or_function_call Wave)) - 
                          (expr 
                            (literal 1))))) )))) + 
            (expr 
              (literal " Complete!"))))) \n 
      (statement 
        (call_statement 
          (untyped_id HorizontalScroll) 
          (argument_list 
            (argument 
              (expr 
                (variable_or_function_call M$))) , 
            (argument 
              (expr 
                (literal 10)))))) \n \n 
      (statement 
        (for_next_statement FOR XNum = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 10)) 
          (block ' \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call Explosion 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call XNum)))) ) . Active)) > 
                (expr 
                  (literal 0))) THEN ' 
              (then_block \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call X!) = 
                    (expr 
                      (variable_or_function_call Explosion 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call XNum)))) ) . X)))) ' \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Y!) = 
                    (expr 
                      (variable_or_function_call Explosion 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call XNum)))) ) . Y)))) ' \n \n 
                (statement 
                  (for_next_statement FOR T = 
                    (expr 
                      (literal 1)) TO 
                    (expr 
                      (variable_or_function_call EXPLRADIUS)) 
                    (block ' \n 
                      (statement 
                        (circle_statement CIRCLE 
                          ( 
                            (expr 
                              (variable_or_function_call X!)) , 
                            (expr 
                              (variable_or_function_call Y!)) ) , 
                          (expr 
                            (variable_or_function_call T)) , 
                          (expr 
                            (variable_or_function_call GameBkGround)))) \n) NEXT T)) \n \n 
                (statement 
                  (call_statement 
                    (untyped_id StopMissile) 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call Explosion 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (variable_or_function_call XNum)))) ) . MissileNum))) , 
                      (argument 
                        (expr 
                          (variable_or_function_call Explosion 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (variable_or_function_call XNum)))) ) . MType)))))) \n \n 
                (statement 
                  (for_next_statement FOR i = 
                    (expr 
                      (literal 1)) TO 
                    (expr 
                      (variable_or_function_call MaxStarbases)) 
                    (block ' \n 
                      (statement 
                        (if_inline_statement IF 
                          (expr 
                            (expr 
                              (expr 
                                (variable_or_function_call Starbase 
                                  ( 
                                    (argument_list 
                                      (argument 
                                        (expr 
                                          (variable_or_function_call i)))) ) . Active)) = 
                              (expr 
                                (variable_or_function_call TRUE))) AND 
                            (expr 
                              (expr 
                                (expr 
                                  (expr 
                                    ( 
                                      (expr 
                                        (expr 
                                          (expr 
                                            ( 
                                              (expr 
                                                (expr 
                                                  (variable_or_function_call X!)) - 
                                                (expr 
                                                  (variable_or_function_call Starbase 
                                                    ( 
                                                      (argument_list 
                                                        (argument 
                                                          (expr 
                                                            (variable_or_function_call i)))) ) . X))) )) ^ 
                                          (expr 
                                            (literal 2))) + 
                                        (expr 
                                          (expr 
                                            ( 
                                              (expr 
                                                (expr 
                                                  (variable_or_function_call Y!)) - 
                                                (expr 
                                                  (variable_or_function_call Starbase 
                                                    ( 
                                                      (argument_list 
                                                        (argument 
                                                          (expr 
                                                            (variable_or_function_call i)))) ) . Y))) )) ^ 
                                          (expr 
                                            (literal 2)))) )) ^ 
                                  (expr 
                                    (literal .5))) - 
                                (expr 
                                  (variable_or_function_call EXPLRADIUS))) < 
                              (expr - 
                                (expr 
                                  (literal 2))))) THEN 
                          (if_inline_action 
                            (statement 
                              (call_statement 
                                (untyped_id DestroyStarbase) 
                                (argument_list 
                                  (argument 
                                    (expr 
                                      (variable_or_function_call i))))))))) \n) NEXT i)) \n \n 
                (statement 
                  (call_statement 
                    (untyped_id UpdateTarget))) ' \n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Explosion 
                      ( 
                        (argument_list 
                          (argument 
                            (expr 
                              (variable_or_function_call XNum)))) ) . Active) = 
                    (expr 
                      (variable_or_function_call FALSE)))) ' \n \n) 
              (end_if_statement END IF)) \n) NEXT XNum)) \n \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (literal 10)) 
          (block ' \n 
            (if_block_statement IF 
              (expr 
                (expr 
                  (variable_or_function_call Incoming 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call i)))) ) . Active)) <> 
                (expr 
                  (literal 0))) THEN ' 
              (then_block \n 
                (statement 
                  (call_statement 
                    (untyped_id EraseMissileTrail) 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call i)))))) ' \n 
                (if_block_statement IF 
                  (expr 
                    (expr 
                      (variable_or_function_call i)) > 
                    (expr 
                      (literal 6))) THEN ' 
                  (then_block \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call XFinish) = 
                        (expr 
                          (variable_or_function_call Incoming 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (variable_or_function_call i)))) ) . XFinish)))) ' \n 
                    (statement 
                      (assignment_statement 
                        (variable_or_function_call YFinish) = 
                        (expr 
                          (variable_or_function_call Incoming 
                            ( 
                              (argument_list 
                                (argument 
                                  (expr 
                                    (variable_or_function_call i)))) ) . YFinish)))) ' \n ' \n 
                    (statement 
                      (line_statement LINE 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call XFinish)) - 
                            (expr 
                              (literal 5))) , 
                          (expr 
                            (expr 
                              (variable_or_function_call YFinish)) - 
                            (expr 
                              (literal 5))) ) - 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call XFinish)) + 
                            (expr 
                              (literal 5))) , 
                          (expr 
                            (expr 
                              (variable_or_function_call YFinish)) + 
                            (expr 
                              (literal 5))) ) , 
                        (expr 
                          (variable_or_function_call GamBkGround)))) ' \n 
                    (statement 
                      (line_statement LINE 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call XFinish)) + 
                            (expr 
                              (literal 5))) , 
                          (expr 
                            (expr 
                              (variable_or_function_call YFinish)) - 
                            (expr 
                              (literal 5))) ) - 
                        ( 
                          (expr 
                            (expr 
                              (variable_or_function_call XFinish)) - 
                            (expr 
                              (literal 5))) , 
                          (expr 
                            (expr 
                              (variable_or_function_call YFinish)) + 
                            (expr 
                              (literal 5))) ) , 
                        (expr 
                          (variable_or_function_call GameBkGround)))) \n) 
                  (end_if_statement END IF)) \n \n) 
              (end_if_statement END IF)) \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call Incoming 
                  ( 
                    (argument_list 
                      (argument 
                        (expr 
                          (variable_or_function_call i)))) ) . Active) = 
                (expr 
                  (variable_or_function_call FALSE)))) ' \n) NEXT i)) \n \n ' \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (expr 
              (variable_or_function_call Score)) > 
            (expr 
              (variable_or_function_call NextNewBase))) AND 
          (expr 
            (expr 
              (variable_or_function_call BasesLeft)) < 
            (expr 
              (literal 4)))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call M$) = 
              (expr 
                (literal "Bonus Starbase!")))) \n 
          (statement 
            (call_statement 
              (untyped_id HorizontalScroll) 
              (argument_list 
                (argument 
                  (expr 
                    (variable_or_function_call M$))) , 
                (argument 
                  (expr 
                    (literal 10)))))) ' \n \n 
          (statement 
            (assignment_statement 
              (variable_or_function_call NextNewBase) = 
              (expr 
                (expr 
                  (variable_or_function_call NextNewBase)) + 
                (expr 
                  (expr 
                    (literal 10000 &)) * 
                  (expr 
                    (variable_or_function_call Wave)))))) ' \n 
          (statement 
            (call_statement 
              (untyped_id NewStarbase))) ' \n 
          (statement 
            (for_next_statement FOR i = 
              (expr 
                (literal 1)) TO 
              (expr 
                (literal 4)) 
              (block ' \n 
                (statement 
                  (if_inline_statement IF 
                    (expr 
                      (expr 
                        (variable_or_function_call Starbase 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call i)))) ) . Active)) = 
                      (expr 
                        (variable_or_function_call TRUE))) THEN 
                    (if_inline_action 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call MaxStarbases) = 
                          (expr 
                            (variable_or_function_call i))))))) \n) NEXT i)) \n) 
        (end_if_statement END IF)) \n \n ' \n 
      (if_block_statement IF 
        (expr 
          (expr 
            (expr 
              (expr 
                (variable_or_function_call Wave)) / 
              (expr 
                (literal 2))) = 
            (expr 
              (expr 
                (variable_or_function_call Wave)) \ 
              (expr 
                (literal 2)))) AND 
          (expr 
            (expr 
              (variable_or_function_call NumMissiles)) < 
            (expr 
              (literal 6)))) THEN \n 
        (then_block 
          (statement 
            (assignment_statement 
              (variable_or_function_call NumMissiles) = 
              (expr 
                (expr 
                  (variable_or_function_call NumMissiles)) + 
                (expr 
                  (literal 1))))) ' \n) 
        (else_block_statement ELSE 
          (else_block \n 
            (statement 
              (assignment_statement 
                (variable_or_function_call IncomingDelay) = 
                (expr 
                  (expr 
                    (variable_or_function_call IncomingDelay)) * 
                  (expr 
                    (literal .66667))))) ' \n 
            (statement 
              (if_inline_statement IF 
                (expr 
                  (expr 
                    (variable_or_function_call IncomingDelay)) < 
                  (expr 
                    (variable_or_function_call FASTESTMISSILE))) THEN 
                (if_inline_action 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call IncomingDelay) = 
                      (expr 
                        (variable_or_function_call FASTESTMISSILE))))))) \n)) 
        (end_if_statement END IF)) \n \n 
      (statement 
        (call_statement 
          (untyped_id UpdateScore))) ' \n \n 
      (statement 
        (for_next_statement FOR i = 
          (expr 
            (literal 1)) TO 
          (expr 
            (expr 
              (variable_or_function_call NumMissiles)) - 
            (expr 
              (literal 1))) 
          (block ' \n 
            (statement 
              (call_statement 
                (untyped_id NewMissile))) \n) NEXT i)) \n \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call NumIntercepts) = 
          (expr 
            (literal 0)))) ' \n 
      (statement 
        (assignment_statement 
          (variable_or_function_call NumExplosions) = 
          (expr 
            (literal 0)))) ' \n 
      (statement 
        (line_statement LINE 
          ( 
            (expr 
              (literal 1)) , 
            (expr 
              (variable_or_function_call MINY)) ) - 
          ( 
            (expr 
              (variable_or_function_call XSCALE)) , 
            (expr 
              (expr 
                (variable_or_function_call YSCALE)) - 
              (expr 
                (literal 51))) ) , 
          (expr 
            (literal 0)) , 
          (box_style BF))) ' \n \n 
      (statement 
        (do_loop_statement DO 
          (block :) LOOP 
          (loop_condition UNTIL 
            (expr 
              (expr 
                (variable_or_function_call INKEY$)) = 
              (expr 
                (literal "")))))) ' \n 
      (statement 
        (call_statement 
          (untyped_id Keys) 
          (argument_list 
            (argument 
              (expr 
                (variable_or_function_call TRUE)))))) ' \n \n) 
    (end_sub_statement END SUB)) \n <EOF>)
