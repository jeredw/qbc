(program 
  (statement 
    (screen_statement SCREEN 
      (expr 
        (literal 2)))) \r\n statement \r\n statement \r\n 
  (statement 
    (view_statement VIEW 
      ( 
        (expr 
          (literal 20)) , 
        (expr 
          (literal 2)) ) - 
      ( 
        (expr 
          (literal 620)) , 
        (expr 
          (literal 172)) ) , , 
      (expr 
        (literal 1)))) \r\n statement \r\n 
  (statement 
    (const_statement CONST 
      (const_assignment PI = 
        (const_expr 
          (expr 
            (literal 3.141592653589#)))))) \r\n statement \r\n statement \r\n statement \r\n 
  (statement 
    (window_statement WINDOW 
      ( 
        (expr 
          (literal 0)) , 
        (expr - 
          (expr 
            (literal 1.1))) ) - 
      ( 
        (expr 
          (expr 
            (literal 2)) * 
          (expr 
            (variable_or_function_call PI))) , 
        (expr 
          (literal 1.1)) ))) \r\n statement \r\n 
  (statement 
    (assignment_statement 
      (variable_or_function_call Style%) = 
      (expr 
        (literal &HFF00)))) \r\n statement \r\n 
  (statement 
    (view_print_statement VIEW PRINT 
      (expr 
        (literal 23)) TO 
      (expr 
        (literal 24)))) \r\n statement \r\n 
  (statement 
    (do_loop_statement DO 
      (block \r\n 
        (statement 
          (print_statement PRINT 
            (expr 
              (variable_or_function_call TAB 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 20)) )))) ;)) \r\n 
        (statement 
          (input_statement INPUT "Number of cycles 
            (0 to end): " , 
            (variable_or_function_call Cycles))) \r\n 
        (statement 
          (call_statement 
            (untyped_id CLS))) \r\n 
        (statement 
          (line_statement LINE 
            ( 
              (expr 
                (expr 
                  (literal 2)) * 
                (expr 
                  (variable_or_function_call PI))) , 
              (expr 
                (literal 0)) ) - 
            ( 
              (expr 
                (literal 0)) , 
              (expr 
                (literal 0)) ) , , , 
            (expr 
              (variable_or_function_call Style%)))) \r\n 
        (if_block_statement IF 
          (expr 
            (expr 
              (variable_or_function_call Cycles)) > 
            (expr 
              (literal 0))) THEN \r\n 
          (then_block statement \r\n 
            (statement 
              (for_next_statement FOR X = 
                (expr 
                  (literal 0)) TO 
                (expr 
                  (expr 
                    (literal 2)) * 
                  (expr 
                    (variable_or_function_call PI))) STEP 
                (expr 
                  (literal .01)) 
                (block \r\n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call Y) = 
                      (expr 
                        (variable_or_function_call SIN 
                          (args_or_indices 
                            ( 
                              (expr 
                                (expr 
                                  (variable_or_function_call Cycles)) * 
                                (expr 
                                  (variable_or_function_call X))) )))))) \r\n 
                  (statement 
                    (line_statement LINE - 
                      ( 
                        (expr 
                          (variable_or_function_call X)) , 
                        (expr 
                          (variable_or_function_call Y)) ))) \r\n statement \r\n statement) NEXT X)) \r\n) 
          (end_if_statement END IF)) \r\n statement) LOOP 
      (do_condition WHILE 
        (expr 
          (expr 
            (variable_or_function_call Cycles)) > 
          (expr 
            (literal 0)))))) \r\n statement \r\n <EOF>)
