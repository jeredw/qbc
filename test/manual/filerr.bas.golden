(program \r\n 
  (statement 
    (const_statement CONST 
      (const_assignment FALSE = 
        (const_expr 
          (expr 
            (literal 0)))) , 
      (const_assignment TRUE = 
        (const_expr 
          (expr NOT 
            (expr 
              (variable_or_function_call FALSE))))))) \r\n \r\n 
  (declare_statement DECLARE FUNCTION GetFileName$ 
    ( )) \r\n \r\n \r\n \r\n 
  (statement 
    (on_error_statement ON ERROR GOTO 
      (target 
        (text_label 
          (untyped_id ErrorProc))))) \r\n \r\n 
  (statement 
    (do_loop_statement DO 
      (block \r\n 
        (statement 
          (assignment_statement 
            (variable_or_function_call Restart) = 
            (expr 
              (variable_or_function_call FALSE)))) \r\n 
        (statement 
          (call_statement 
            (untyped_id CLS))) \r\n \r\n 
        (statement 
          (assignment_statement 
            (variable_or_function_call FileName$) = 
            (expr 
              (variable_or_function_call GetFileName$)))) \r\n \r\n 
        (if_block_statement IF 
          (expr 
            (expr 
              (variable_or_function_call FileName$)) = 
            (expr 
              (literal ""))) THEN \r\n 
          (then_block 
            (statement 
              (end_statement END)) \r\n) 
          (else_block_statement ELSE 
            (else_block \r\n \r\n \r\n \r\n 
              (statement 
                (assignment_statement 
                  (variable_or_function_call FileNum) = 
                  (expr 
                    (variable_or_function_call FREEFILE)))) \r\n 
              (statement 
                (open_statement OPEN 
                  (expr 
                    (variable_or_function_call FileName$)) FOR 
                  (open_mode INPUT) AS 
                  (expr 
                    (variable_or_function_call FileNum)))) \r\n)) 
          (end_if_statement END IF)) \r\n \r\n 
        (if_block_statement IF 
          (expr NOT 
            (expr 
              (variable_or_function_call Restart))) THEN \r\n 
          (then_block \r\n \r\n 
            (statement 
              (line_input_statement LINE INPUT "Enter string to locate: " , 
                (variable_or_function_call LocString$))) \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call LocString$) = 
                (expr 
                  (variable_or_function_call UCASE$ 
                    ( 
                      (argument_list 
                        (argument 
                          (expr 
                            (variable_or_function_call LocString$)))) ))))) \r\n \r\n \r\n \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call LineNum) = 
                (expr 
                  (literal 1)))) \r\n 
            (statement 
              (do_loop_statement DO 
                (do_condition WHILE 
                  (expr NOT 
                    (expr 
                      (variable_or_function_call EOF 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (variable_or_function_call FileNum)))) ))))) 
                (block \r\n \r\n \r\n 
                  (statement 
                    (line_input_statement LINE INPUT 
                      (file_number # 
                        (expr 
                          (variable_or_function_call FileNum))) , 
                      (variable_or_function_call LineBuffer$))) \r\n \r\n \r\n \r\n 
                  (if_block_statement IF 
                    (expr 
                      (expr 
                        (variable_or_function_call INSTR 
                          ( 
                            (argument_list 
                              (argument 
                                (expr 
                                  (variable_or_function_call UCASE$ 
                                    ( 
                                      (argument_list 
                                        (argument 
                                          (expr 
                                            (variable_or_function_call LineBuffer$)))) )))) , 
                              (argument 
                                (expr 
                                  (variable_or_function_call LocString$)))) ))) <> 
                      (expr 
                        (literal 0))) THEN \r\n 
                    (then_block 
                      (statement 
                        (print_using_statement PRINT USING 
                          (expr 
                            (literal "#### &")) ; 
                          (expr 
                            (variable_or_function_call LineNum)) , 
                          (expr 
                            (variable_or_function_call LineBuffer$)))) \r\n) 
                    (end_if_statement END IF)) \r\n \r\n 
                  (statement 
                    (assignment_statement 
                      (variable_or_function_call LineNum) = 
                      (expr 
                        (expr 
                          (variable_or_function_call LineNum)) + 
                        (expr 
                          (literal 1))))) \r\n) LOOP)) \r\n \r\n 
            (statement 
              (close_statement CLOSE 
                (expr 
                  (variable_or_function_call FileNum)))) \r\n \r\n) 
          (end_if_statement END IF)) \r\n) LOOP 
      (loop_condition WHILE 
        (expr 
          (expr 
            (variable_or_function_call Restart)) = 
          (expr 
            (variable_or_function_call TRUE)))))) \r\n \r\n 
  (statement 
    (end_statement END)) \r\n \r\n 
  (label 
    (text_label 
      (untyped_id ErrorProc)) :) \r\n \r\n 
  (statement 
    (select_case_statement SELECT CASE 
      (expr 
        (variable_or_function_call ERR)) 
      (before_first_case \r\n \r\n) 
      (case_block 
        (case_statement CASE 
          (case_expr 
            (expr 
              (literal 64)))) 
        (block : \r\n 
          (statement 
            (print_statement PRINT 
              (expr 
                (literal "** ERROR - Invalid file name")))) \r\n \r\n \r\n 
          (statement 
            (assignment_statement 
              (variable_or_function_call FileName$) = 
              (expr 
                (variable_or_function_call GetFileName$)))) \r\n \r\n \r\n 
          (statement 
            (resume_statement RESUME)) \r\n \r\n)) 
      (case_block 
        (case_statement CASE 
          (case_expr 
            (expr 
              (literal 71)))) 
        (block : \r\n 
          (statement 
            (print_statement PRINT 
              (expr 
                (literal "** ERROR - Disk drive not ready")))) \r\n 
          (statement 
            (print_statement PRINT 
              (expr 
                (literal "Press C to continue, R to restart, Q to quit: ")))) \r\n 
          (statement 
            (do_loop_statement DO 
              (block \r\n 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call Char$) = 
                    (expr 
                      (variable_or_function_call UCASE$ 
                        ( 
                          (argument_list 
                            (argument 
                              (expr 
                                (builtin_function INPUT$ 
                                  ( 
                                    (expr 
                                      (literal 1)) ))))) ))))) \r\n 
                (if_block_statement IF 
                  (expr 
                    (expr 
                      (variable_or_function_call Char$)) = 
                    (expr 
                      (literal "C"))) THEN \r\n 
                  (then_block 
                    (statement 
                      (resume_statement RESUME)) \r\n \r\n) 
                  (elseif_block_statement ELSEIF 
                    (expr 
                      (expr 
                        (variable_or_function_call Char$)) = 
                      (expr 
                        (literal "R"))) THEN 
                    (else_block \r\n 
                      (statement 
                        (assignment_statement 
                          (variable_or_function_call Restart) = 
                          (expr 
                            (variable_or_function_call TRUE)))) \r\n 
                      (statement 
                        (resume_statement RESUME NEXT)) \r\n \r\n)) 
                  (elseif_block_statement ELSEIF 
                    (expr 
                      (expr 
                        (variable_or_function_call Char$)) = 
                      (expr 
                        (literal "Q"))) THEN 
                    (else_block \r\n 
                      (statement 
                        (end_statement END)) \r\n)) 
                  (end_if_statement END IF)) \r\n) LOOP)) \r\n \r\n)) 
      (case_block 
        (case_statement CASE 
          (case_expr 
            (expr 
              (literal 53))) , 
          (case_expr 
            (expr 
              (literal 76)))) 
        (block : \r\n 
          (statement 
            (print_statement PRINT 
              (expr 
                (literal "** ERROR - File or path not found")))) \r\n 
          (statement 
            (assignment_statement 
              (variable_or_function_call FileName$) = 
              (expr 
                (variable_or_function_call GetFileName$)))) \r\n 
          (statement 
            (resume_statement RESUME)) \r\n \r\n)) 
      (case_block 
        (case_statement CASE ELSE) 
        (block : \r\n \r\n \r\n \r\n 
          (statement 
            (on_error_statement ON ERROR GOTO 
              (target 
                (line_number 0)))) \r\n)) 
      (end_select_statement END SELECT))) \r\n \r\n \r\n \r\n \r\n \r\n 
  (function_statement FUNCTION GetFileName$ STATIC 
    (block \r\n 
      (statement 
        (input_statement INPUT "Enter file to search 
          (press ENTER to quit): " , 
          (variable_or_function_call FTemp$))) \r\n 
      (statement 
        (assignment_statement 
          (variable_or_function_call GetFileName$) = 
          (expr 
            (variable_or_function_call FTemp$)))) \r\n) 
    (end_function_statement END FUNCTION)) \r\n <EOF>)
