(program 
  (statement 
    (deftype_statement DEFINT 
      (letter_range A - Z))) \r\n statement \r\n 
  (declare_statement DECLARE SUB 
    (untyped_id Filter) 
    ( 
      (declare_parameter_list 
        (declare_parameter InString$)) )) \r\n statement \r\n 
  (statement 
    (color_statement COLOR 
      (expr 
        (literal 7)) , 
      (expr 
        (literal 1)))) \r\n 
  (statement 
    (call_statement 
      (untyped_id CLS))) \r\n statement \r\n 
  (statement 
    (assignment_statement 
      (variable_or_function_call Quit$) = 
      (expr 
        (expr 
          (variable_or_function_call CHR$ 
            (args_or_indices 
              ( 
                (expr 
                  (literal 0)) )))) + 
        (expr 
          (variable_or_function_call CHR$ 
            (args_or_indices 
              ( 
                (expr 
                  (literal 16)) ))))))) \r\n statement \r\n statement \r\n statement \r\n 
  (statement 
    (locate_statement LOCATE 
      (expr 
        (literal 24)) , 
      (expr 
        (literal 1)) , 
      (expr 
        (literal 1)))) \r\n 
  (statement 
    (print_statement PRINT 
      (expr 
        (variable_or_function_call STRING$ 
          (args_or_indices 
            ( 
              (expr 
                (literal 80)) , 
              (expr 
                (literal "_")) )))) ;)) \r\n 
  (statement 
    (locate_statement LOCATE 
      (expr 
        (literal 25)) , 
      (expr 
        (literal 1)))) \r\n 
  (statement 
    (print_statement PRINT 
      (expr 
        (variable_or_function_call TAB 
          (args_or_indices 
            ( 
              (expr 
                (literal 30)) )))) ; 
      (expr 
        (literal "Press ALT+q to quit")) ;)) \r\n statement \r\n 
  (statement 
    (view_print_statement VIEW PRINT 
      (expr 
        (literal 1)) TO 
      (expr 
        (literal 23)))) \r\n statement \r\n statement \r\n statement \r\n 
  (statement 
    (open_statement OPEN 
      (expr 
        (literal "COM1:1200,N,8,1")) FOR 
      (open_mode RANDOM) AS # 
      (expr 
        (literal 1)) LEN = 
      (expr 
        (literal 256)))) \r\n statement \r\n 
  (statement 
    (do_loop_statement DO 
      (block \r\n statement \r\n 
        (statement 
          (assignment_statement 
            (variable_or_function_call KeyInput$) = 
            (expr 
              (variable_or_function_call INKEY$)))) \r\n statement \r\n 
        (if_block_statement IF 
          (expr 
            (expr 
              (variable_or_function_call KeyInput$)) = 
            (expr 
              (variable_or_function_call Quit$))) THEN \r\n 
          (then_block 
            (statement 
              (exit_statement EXIT DO)) \r\n statement \r\n) 
          (elseif_block_statement ELSEIF 
            (expr 
              (expr 
                (variable_or_function_call KeyInput$)) <> 
              (expr 
                (literal ""))) THEN 
            (else_block statement \r\n 
              (statement 
                (print_statement PRINT 
                  (file_number # 
                    (expr 
                      (literal 1))) , 
                  (expr 
                    (variable_or_function_call KeyInput$)) ;)) \r\n)) 
          (end_if_statement END IF)) \r\n statement \r\n statement \r\n statement \r\n 
        (if_block_statement IF 
          (expr NOT 
            (expr 
              (variable_or_function_call EOF 
                (args_or_indices 
                  ( 
                    (expr 
                      (literal 1)) ))))) THEN \r\n 
          (then_block statement \r\n statement \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call ModemInput$) = 
                (expr 
                  (builtin_function INPUT$ 
                    ( 
                      (expr 
                        (variable_or_function_call LOC 
                          (args_or_indices 
                            ( 
                              (expr 
                                (literal 1)) )))) , # 
                      (expr 
                        (literal 1)) ))))) \r\n statement \r\n 
            (statement 
              (call_statement 
                (untyped_id Filter) 
                (call_argument_list 
                  (call_argument ModemInput$)))) \r\n 
            (statement 
              (print_statement PRINT 
                (expr 
                  (variable_or_function_call ModemInput$)) ;)) \r\n) 
          (end_if_statement END IF)) \r\n statement) LOOP)) \r\n statement \r\n 
  (statement 
    (close_statement CLOSE)) \r\n 
  (statement 
    (call_statement 
      (untyped_id CLS))) \r\n 
  (statement 
    (end_statement END)) \r\n statement \r\n statement \r\n statement \r\n statement \r\n statement \r\n 
  (sub_statement SUB 
    (untyped_id Filter) 
    ( 
      (parameter_list 
        (parameter InString$)) ) STATIC 
    (block \r\n statement \r\n statement \r\n statement \r\n 
      (statement 
        (do_loop_statement DO 
          (block \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call BackSpace) = 
                (expr 
                  (variable_or_function_call INSTR 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call Instring$)) , 
                        (expr 
                          (variable_or_function_call CHR$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 8)) )))) )))))) \r\n 
            (if_block_statement IF 
              (expr 
                (variable_or_function_call BackSpace)) THEN \r\n 
              (then_block 
                (statement 
                  (mid_statement MID$ 
                    ( 
                      (variable_or_function_call InString$) , 
                      (expr 
                        (variable_or_function_call BackSpace)) ) = 
                    (expr 
                      (variable_or_function_call CHR$ 
                        (args_or_indices 
                          ( 
                            (expr 
                              (literal 29)) )))))) \r\n) 
              (end_if_statement END IF)) \r\n statement) LOOP 
          (do_condition WHILE 
            (expr 
              (variable_or_function_call BackSpace))))) \r\n statement \r\n statement \r\n 
      (statement 
        (do_loop_statement DO 
          (block \r\n 
            (statement 
              (assignment_statement 
                (variable_or_function_call LineFeed) = 
                (expr 
                  (variable_or_function_call INSTR 
                    (args_or_indices 
                      ( 
                        (expr 
                          (variable_or_function_call Instring$)) , 
                        (expr 
                          (variable_or_function_call CHR$ 
                            (args_or_indices 
                              ( 
                                (expr 
                                  (literal 10)) )))) )))))) \r\n 
            (if_block_statement IF 
              (expr 
                (variable_or_function_call LineFeed)) THEN \r\n 
              (then_block 
                (statement 
                  (assignment_statement 
                    (variable_or_function_call InString$) = 
                    (expr 
                      (expr 
                        (variable_or_function_call LEFT$ 
                          (args_or_indices 
                            ( 
                              (expr 
                                (variable_or_function_call InString$)) , 
                              (expr 
                                (expr 
                                  (variable_or_function_call LineFeed)) - 
                                (expr 
                                  (literal 1))) )))) + 
                      (expr 
                        (builtin_function MID$ 
                          ( 
                            (expr 
                              (variable_or_function_call InString$)) , 
                            (expr 
                              (expr 
                                (variable_or_function_call LineFeed)) + 
                              (expr 
                                (literal 1))) )))))) \r\n) 
              (end_if_statement END IF)) \r\n statement) LOOP 
          (do_condition WHILE 
            (expr 
              (variable_or_function_call LineFeed))))) \r\n statement \r\n statement) 
    (end_sub_statement END SUB)) \r\n <EOF>)
